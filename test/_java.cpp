#include "_java.h"

inline jnipp::GlobalRef<jnipp::Class>& JavaLangObject::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Object"));
    return cls;
}

// public java.lang.Object()
jnipp::LocalRef<JavaLangObject> JavaLangObject::construct() {
    static jnipp::Constructor<JavaLangObject> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected void java.lang.Object.finalize() throws java.lang.Throwable
void JavaLangObject::finalize() const {
    static jnipp::Method<void> method(clazz(), "finalize", "()V");
    method.call(*this);
}

// public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
void JavaLangObject::wait(jlong a0, jint a1) const {
    static jnipp::Method<void,jlong,jint> method(clazz(), "wait", "(JI)V");
    method.call(*this, a0, a1);
}

// public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
void JavaLangObject::wait(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "wait", "(J)V");
    method.call(*this, a0);
}

// public final void java.lang.Object.wait() throws java.lang.InterruptedException
void JavaLangObject::wait() const {
    static jnipp::Method<void> method(clazz(), "wait", "()V");
    method.call(*this);
}

// public boolean java.lang.Object.equals(java.lang.Object)
jboolean JavaLangObject::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public native int java.lang.Object.hashCode()
jint JavaLangObject::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// protected native java.lang.Object java.lang.Object.clone() throws java.lang.CloneNotSupportedException
jnipp::LocalRef<JavaLangObject> JavaLangObject::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// private static native void java.lang.Object.registerNatives()
void JavaLangObject::registerNatives() {
    static jnipp::StaticMethod<void> method(clazz(), "registerNatives", "()V");
    method.call();
}

// public final native void java.lang.Object.notify()
void JavaLangObject::notify() const {
    static jnipp::Method<void> method(clazz(), "notify", "()V");
    method.call(*this);
}

// public final native void java.lang.Object.notifyAll()
void JavaLangObject::notifyAll() const {
    static jnipp::Method<void> method(clazz(), "notifyAll", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangString::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/String"));
    return cls;
}

// public java.lang.String(byte[])
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jbyte>> constructor(clazz(), "([B)V");
    return constructor.construct(a0);
}

// public java.lang.String(byte[],int,int)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jbyte>,jint,jint> constructor(clazz(), "([BII)V");
    return constructor.construct(a0, a1, a2);
}

// public java.lang.String(byte[],java.nio.charset.Charset)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0, const jnipp::Ref<JavaNioCharsetCharset>& a1) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jbyte>,JavaNioCharsetCharset> constructor(clazz(), "([BLjava/nio/charset/Charset;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String(byte[],java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jbyte>,JavaLangString> constructor(clazz(), "([BLjava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String(byte[],int,int,java.nio.charset.Charset)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2, const jnipp::Ref<JavaNioCharsetCharset>& a3) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jbyte>,jint,jint,JavaNioCharsetCharset> constructor(clazz(), "([BIILjava/nio/charset/Charset;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// java.lang.String(int,int,char[])
jnipp::LocalRef<JavaLangString> JavaLangString::construct(jint a0, jint a1, const jnipp::Ref<jnipp::Array<jchar>>& a2) {
    static jnipp::Constructor<JavaLangString,jint,jint,jnipp::Array<jchar>> constructor(clazz(), "(II[C)V");
    return constructor.construct(a0, a1, a2);
}

// java.lang.String(char[],boolean)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jchar>>& a0, jboolean a1) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jchar>,jboolean> constructor(clazz(), "([CZ)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String(java.lang.StringBuilder)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<JavaLangStringBuilder>& a0) {
    static jnipp::Constructor<JavaLangString,JavaLangStringBuilder> constructor(clazz(), "(Ljava/lang/StringBuilder;)V");
    return constructor.construct(a0);
}

// public java.lang.String(java.lang.StringBuffer)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<JavaLangStringBuffer>& a0) {
    static jnipp::Constructor<JavaLangString,JavaLangStringBuffer> constructor(clazz(), "(Ljava/lang/StringBuffer;)V");
    return constructor.construct(a0);
}

// public java.lang.String(int[],int,int)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jint a2) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jint>,jint,jint> constructor(clazz(), "([III)V");
    return constructor.construct(a0, a1, a2);
}

// public java.lang.String(char[],int,int)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jchar>,jint,jint> constructor(clazz(), "([CII)V");
    return constructor.construct(a0, a1, a2);
}

// public java.lang.String(char[])
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jchar>>& a0) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jchar>> constructor(clazz(), "([C)V");
    return constructor.construct(a0);
}

// public java.lang.String(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.String()
jnipp::LocalRef<JavaLangString> JavaLangString::construct() {
    static jnipp::Constructor<JavaLangString> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.String(byte[],int,int,java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jbyte>,jint,jint,JavaLangString> constructor(clazz(), "([BIILjava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.lang.String(byte[],int)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jbyte>,jint> constructor(clazz(), "([BI)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String(byte[],int,int,int)
jnipp::LocalRef<JavaLangString> JavaLangString::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2, jint a3) {
    static jnipp::Constructor<JavaLangString,jnipp::Array<jbyte>,jint,jint,jint> constructor(clazz(), "([BIII)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public boolean java.lang.String.equals(java.lang.Object)
jboolean JavaLangString::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.lang.String.hashCode()
jint JavaLangString::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.lang.String.compareTo(java.lang.String)
jint JavaLangString::compareTo(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "compareTo", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// static int java.lang.String.indexOf(char[],int,int,char[],int,int,int)
jint JavaLangString::indexOf(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2, const jnipp::Ref<jnipp::Array<jchar>>& a3, jint a4, jint a5, jint a6) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint,jnipp::Array<jchar>,jint,jint,jint> method(clazz(), "indexOf", "([CII[CIII)I");
    return method.call(a0, a1, a2, a3, a4, a5, a6);
}

// public int java.lang.String.indexOf(java.lang.String,int)
jint JavaLangString::indexOf(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "indexOf", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.String.indexOf(java.lang.String)
jint JavaLangString::indexOf(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "indexOf", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public int java.lang.String.indexOf(int)
jint JavaLangString::indexOf(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "indexOf", "(I)I");
    return method.call(*this, a0);
}

// public int java.lang.String.indexOf(int,int)
jint JavaLangString::indexOf(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "indexOf", "(II)I");
    return method.call(*this, a0, a1);
}

// public static java.lang.String java.lang.String.valueOf(char)
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(jchar a0) {
    static jnipp::StaticMethod<JavaLangString,jchar> method(clazz(), "valueOf", "(C)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.String.valueOf(java.lang.Object)
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangObject> method(clazz(), "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.String.valueOf(boolean)
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(jboolean a0) {
    static jnipp::StaticMethod<JavaLangString,jboolean> method(clazz(), "valueOf", "(Z)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.String.valueOf(char[],int,int)
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<jchar>,jint,jint> method(clazz(), "valueOf", "([CII)Ljava/lang/String;");
    return method.call(a0, a1, a2);
}

// public static java.lang.String java.lang.String.valueOf(char[])
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(const jnipp::Ref<jnipp::Array<jchar>>& a0) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<jchar>> method(clazz(), "valueOf", "([C)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.String.valueOf(long)
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(jlong a0) {
    static jnipp::StaticMethod<JavaLangString,jlong> method(clazz(), "valueOf", "(J)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.String.valueOf(float)
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(jfloat a0) {
    static jnipp::StaticMethod<JavaLangString,jfloat> method(clazz(), "valueOf", "(F)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.String.valueOf(int)
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(jint a0) {
    static jnipp::StaticMethod<JavaLangString,jint> method(clazz(), "valueOf", "(I)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.String.valueOf(double)
jnipp::LocalRef<JavaLangString> JavaLangString::valueOf(jdouble a0) {
    static jnipp::StaticMethod<JavaLangString,jdouble> method(clazz(), "valueOf", "(D)Ljava/lang/String;");
    return method.call(a0);
}

// int java.lang.String.hash32()
jint JavaLangString::hash32() const {
    static jnipp::Method<jint> method(clazz(), "hash32", "()I");
    return method.call(*this);
}

// private static void java.lang.String.checkBounds(byte[],int,int)
void JavaLangString::checkBounds(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "checkBounds", "([BII)V");
    method.call(a0, a1, a2);
}

// public int java.lang.String.length()
jint JavaLangString::length() const {
    static jnipp::Method<jint> method(clazz(), "length", "()I");
    return method.call(*this);
}

// public boolean java.lang.String.isEmpty()
jboolean JavaLangString::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public char java.lang.String.charAt(int)
jchar JavaLangString::charAt(jint a0) const {
    static jnipp::Method<jchar,jint> method(clazz(), "charAt", "(I)C");
    return method.call(*this, a0);
}

// public int java.lang.String.codePointAt(int)
jint JavaLangString::codePointAt(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "codePointAt", "(I)I");
    return method.call(*this, a0);
}

// public int java.lang.String.codePointBefore(int)
jint JavaLangString::codePointBefore(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "codePointBefore", "(I)I");
    return method.call(*this, a0);
}

// public int java.lang.String.codePointCount(int,int)
jint JavaLangString::codePointCount(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "codePointCount", "(II)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.String.offsetByCodePoints(int,int)
jint JavaLangString::offsetByCodePoints(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "offsetByCodePoints", "(II)I");
    return method.call(*this, a0, a1);
}

// void java.lang.String.getChars(char[],int)
void JavaLangString::getChars(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1) const {
    static jnipp::Method<void,jnipp::Array<jchar>,jint> method(clazz(), "getChars", "([CI)V");
    method.call(*this, a0, a1);
}

// public void java.lang.String.getChars(int,int,char[],int)
void JavaLangString::getChars(jint a0, jint a1, const jnipp::Ref<jnipp::Array<jchar>>& a2, jint a3) const {
    static jnipp::Method<void,jint,jint,jnipp::Array<jchar>,jint> method(clazz(), "getChars", "(II[CI)V");
    method.call(*this, a0, a1, a2, a3);
}

// public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<jnipp::Array<jbyte>> JavaLangString::getBytes(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaLangString> method(clazz(), "getBytes", "(Ljava/lang/String;)[B");
    return method.call(*this, a0);
}

// public void java.lang.String.getBytes(int,int,byte[],int)
void JavaLangString::getBytes(jint a0, jint a1, const jnipp::Ref<jnipp::Array<jbyte>>& a2, jint a3) const {
    static jnipp::Method<void,jint,jint,jnipp::Array<jbyte>,jint> method(clazz(), "getBytes", "(II[BI)V");
    method.call(*this, a0, a1, a2, a3);
}

// public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
jnipp::LocalRef<jnipp::Array<jbyte>> JavaLangString::getBytes(const jnipp::Ref<JavaNioCharsetCharset>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaNioCharsetCharset> method(clazz(), "getBytes", "(Ljava/nio/charset/Charset;)[B");
    return method.call(*this, a0);
}

// public byte[] java.lang.String.getBytes()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaLangString::getBytes() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getBytes", "()[B");
    return method.call(*this);
}

// public boolean java.lang.String.contentEquals(java.lang.CharSequence)
jboolean JavaLangString::contentEquals(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<jboolean,JavaLangCharSequence> method(clazz(), "contentEquals", "(Ljava/lang/CharSequence;)Z");
    return method.call(*this, a0);
}

// public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
jboolean JavaLangString::contentEquals(const jnipp::Ref<JavaLangStringBuffer>& a0) const {
    static jnipp::Method<jboolean,JavaLangStringBuffer> method(clazz(), "contentEquals", "(Ljava/lang/StringBuffer;)Z");
    return method.call(*this, a0);
}

// public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
jboolean JavaLangString::equalsIgnoreCase(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "equalsIgnoreCase", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// public int java.lang.String.compareToIgnoreCase(java.lang.String)
jint JavaLangString::compareToIgnoreCase(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "compareToIgnoreCase", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
jboolean JavaLangString::regionMatches(jboolean a0, jint a1, const jnipp::Ref<JavaLangString>& a2, jint a3, jint a4) const {
    static jnipp::Method<jboolean,jboolean,jint,JavaLangString,jint,jint> method(clazz(), "regionMatches", "(ZILjava/lang/String;II)Z");
    return method.call(*this, a0, a1, a2, a3, a4);
}

// public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
jboolean JavaLangString::regionMatches(jint a0, const jnipp::Ref<JavaLangString>& a1, jint a2, jint a3) const {
    static jnipp::Method<jboolean,jint,JavaLangString,jint,jint> method(clazz(), "regionMatches", "(ILjava/lang/String;II)Z");
    return method.call(*this, a0, a1, a2, a3);
}

// public boolean java.lang.String.startsWith(java.lang.String,int)
jboolean JavaLangString::startsWith(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jboolean,JavaLangString,jint> method(clazz(), "startsWith", "(Ljava/lang/String;I)Z");
    return method.call(*this, a0, a1);
}

// public boolean java.lang.String.startsWith(java.lang.String)
jboolean JavaLangString::startsWith(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "startsWith", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// public boolean java.lang.String.endsWith(java.lang.String)
jboolean JavaLangString::endsWith(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "endsWith", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// private int java.lang.String.indexOfSupplementary(int,int)
jint JavaLangString::indexOfSupplementary(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "indexOfSupplementary", "(II)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.String.lastIndexOf(java.lang.String)
jint JavaLangString::lastIndexOf(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "lastIndexOf", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public int java.lang.String.lastIndexOf(java.lang.String,int)
jint JavaLangString::lastIndexOf(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "lastIndexOf", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// static int java.lang.String.lastIndexOf(char[],int,int,char[],int,int,int)
jint JavaLangString::lastIndexOf(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2, const jnipp::Ref<jnipp::Array<jchar>>& a3, jint a4, jint a5, jint a6) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint,jnipp::Array<jchar>,jint,jint,jint> method(clazz(), "lastIndexOf", "([CII[CIII)I");
    return method.call(a0, a1, a2, a3, a4, a5, a6);
}

// public int java.lang.String.lastIndexOf(int)
jint JavaLangString::lastIndexOf(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "lastIndexOf", "(I)I");
    return method.call(*this, a0);
}

// public int java.lang.String.lastIndexOf(int,int)
jint JavaLangString::lastIndexOf(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "lastIndexOf", "(II)I");
    return method.call(*this, a0, a1);
}

// private int java.lang.String.lastIndexOfSupplementary(int,int)
jint JavaLangString::lastIndexOfSupplementary(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "lastIndexOfSupplementary", "(II)I");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.lang.String.substring(int,int)
jnipp::LocalRef<JavaLangString> JavaLangString::substring(jint a0, jint a1) const {
    static jnipp::Method<JavaLangString,jint,jint> method(clazz(), "substring", "(II)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.lang.String.substring(int)
jnipp::LocalRef<JavaLangString> JavaLangString::substring(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "substring", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.CharSequence java.lang.String.subSequence(int,int)
jnipp::LocalRef<JavaLangCharSequence> JavaLangString::subSequence(jint a0, jint a1) const {
    static jnipp::Method<JavaLangCharSequence,jint,jint> method(clazz(), "subSequence", "(II)Ljava/lang/CharSequence;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.lang.String.concat(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaLangString::concat(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "concat", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.String.replace(char,char)
jnipp::LocalRef<JavaLangString> JavaLangString::replace(jchar a0, jchar a1) const {
    static jnipp::Method<JavaLangString,jchar,jchar> method(clazz(), "replace", "(CC)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
jnipp::LocalRef<JavaLangString> JavaLangString::replace(const jnipp::Ref<JavaLangCharSequence>& a0, const jnipp::Ref<JavaLangCharSequence>& a1) const {
    static jnipp::Method<JavaLangString,JavaLangCharSequence,JavaLangCharSequence> method(clazz(), "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public boolean java.lang.String.matches(java.lang.String)
jboolean JavaLangString::matches(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "matches", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// public boolean java.lang.String.contains(java.lang.CharSequence)
jboolean JavaLangString::contains(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<jboolean,JavaLangCharSequence> method(clazz(), "contains", "(Ljava/lang/CharSequence;)Z");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> JavaLangString::replaceFirst(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangString,JavaLangString,JavaLangString> method(clazz(), "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> JavaLangString::replaceAll(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangString,JavaLangString,JavaLangString> method(clazz(), "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.String[] java.lang.String.split(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaLangString::split(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaLangString> method(clazz(), "split", "(Ljava/lang/String;)[Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String[] java.lang.String.split(java.lang.String,int)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaLangString::split(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaLangString,jint> method(clazz(), "split", "(Ljava/lang/String;I)[Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaLangString::toLowerCase(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.String.toLowerCase()
jnipp::LocalRef<JavaLangString> JavaLangString::toLowerCase() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toLowerCase", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaLangString::toUpperCase(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.String.toUpperCase()
jnipp::LocalRef<JavaLangString> JavaLangString::toUpperCase() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toUpperCase", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.String.trim()
jnipp::LocalRef<JavaLangString> JavaLangString::trim() const {
    static jnipp::Method<JavaLangString> method(clazz(), "trim", "()Ljava/lang/String;");
    return method.call(*this);
}

// public char[] java.lang.String.toCharArray()
jnipp::LocalRef<jnipp::Array<jchar>> JavaLangString::toCharArray() const {
    static jnipp::Method<jnipp::Array<jchar>> method(clazz(), "toCharArray", "()[C");
    return method.call(*this);
}

// public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaLangString> JavaLangString::format(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
    return method.call(a0, a1);
}

// public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaLangString> JavaLangString::format(const jnipp::Ref<JavaUtilLocale>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a2) {
    static jnipp::StaticMethod<JavaLangString,JavaUtilLocale,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
    return method.call(a0, a1, a2);
}

// public static java.lang.String java.lang.String.copyValueOf(char[])
jnipp::LocalRef<JavaLangString> JavaLangString::copyValueOf(const jnipp::Ref<jnipp::Array<jchar>>& a0) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<jchar>> method(clazz(), "copyValueOf", "([C)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
jnipp::LocalRef<JavaLangString> JavaLangString::copyValueOf(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<jchar>,jint,jint> method(clazz(), "copyValueOf", "([CII)Ljava/lang/String;");
    return method.call(a0, a1, a2);
}

// public native java.lang.String java.lang.String.intern()
jnipp::LocalRef<JavaLangString> JavaLangString::intern() const {
    static jnipp::Method<JavaLangString> method(clazz(), "intern", "()Ljava/lang/String;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangString::serialVersionUID ("java/lang/String", "serialVersionUID", "J");
#undef serialPersistentFields
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaLangString::serialPersistentFields ("java/lang/String", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
#undef CASE_INSENSITIVE_ORDER
const jnipp::StaticField<JavaUtilComparator> JavaLangString::CASE_INSENSITIVE_ORDER ("java/lang/String", "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;");
#undef HASHING_SEED
const jnipp::StaticField<jint> JavaLangString::HASHING_SEED ("java/lang/String", "HASHING_SEED", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharsetCharset::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/charset/Charset"));
    return cls;
}

// protected java.nio.charset.Charset(java.lang.String,java.lang.String[])
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharset::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangString>>& a1) {
    static jnipp::Constructor<JavaNioCharsetCharset,JavaLangString,jnipp::Array<JavaLangString>> constructor(clazz(), "(Ljava/lang/String;[Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public final java.lang.String java.nio.charset.Charset.name()
jnipp::LocalRef<JavaLangString> JavaNioCharsetCharset::name() const {
    static jnipp::Method<JavaLangString> method(clazz(), "name", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static void java.nio.charset.Charset.put(java.util.Iterator,java.util.Map)
void JavaNioCharsetCharset::put(const jnipp::Ref<JavaUtilIterator>& a0, const jnipp::Ref<JavaUtilMap>& a1) {
    static jnipp::StaticMethod<void,JavaUtilIterator,JavaUtilMap> method(clazz(), "put", "(Ljava/util/Iterator;Ljava/util/Map;)V");
    method.call(a0, a1);
}

// public static java.nio.charset.Charset java.nio.charset.Charset.forName(java.lang.String)
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharset::forName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNioCharsetCharset,JavaLangString> method(clazz(), "forName", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    return method.call(a0);
}

// private static void java.nio.charset.Charset.cache(java.lang.String,java.nio.charset.Charset)
void JavaNioCharsetCharset::cache(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaNioCharsetCharset>& a1) {
    static jnipp::StaticMethod<void,JavaLangString,JavaNioCharsetCharset> method(clazz(), "cache", "(Ljava/lang/String;Ljava/nio/charset/Charset;)V");
    method.call(a0, a1);
}

// public final boolean java.nio.charset.Charset.equals(java.lang.Object)
jboolean JavaNioCharsetCharset::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public final int java.nio.charset.Charset.hashCode()
jint JavaNioCharsetCharset::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public final int java.nio.charset.Charset.compareTo(java.nio.charset.Charset)
jint JavaNioCharsetCharset::compareTo(const jnipp::Ref<JavaNioCharsetCharset>& a0) const {
    static jnipp::Method<jint,JavaNioCharsetCharset> method(clazz(), "compareTo", "(Ljava/nio/charset/Charset;)I");
    return method.call(*this, a0);
}

// public final java.nio.CharBuffer java.nio.charset.Charset.decode(java.nio.ByteBuffer)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharsetCharset::decode(const jnipp::Ref<JavaNioByteBuffer>& a0) const {
    static jnipp::Method<JavaNioCharBuffer,JavaNioByteBuffer> method(clazz(), "decode", "(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;");
    return method.call(*this, a0);
}

// public final java.nio.ByteBuffer java.nio.charset.Charset.encode(java.nio.CharBuffer)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioCharsetCharset::encode(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,JavaNioCharBuffer> method(clazz(), "encode", "(Ljava/nio/CharBuffer;)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}

// public final java.nio.ByteBuffer java.nio.charset.Charset.encode(java.lang.String)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioCharsetCharset::encode(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,JavaLangString> method(clazz(), "encode", "(Ljava/lang/String;)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}

// private static void java.nio.charset.Charset.checkName(java.lang.String)
void JavaNioCharsetCharset::checkName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<void,JavaLangString> method(clazz(), "checkName", "(Ljava/lang/String;)V");
    method.call(a0);
}

// public final boolean java.nio.charset.Charset.isRegistered()
jboolean JavaNioCharsetCharset::isRegistered() const {
    static jnipp::Method<jboolean> method(clazz(), "isRegistered", "()Z");
    return method.call(*this);
}

// private static java.nio.charset.Charset java.nio.charset.Charset.lookup(java.lang.String)
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharset::lookup(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNioCharsetCharset,JavaLangString> method(clazz(), "lookup", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    return method.call(a0);
}

// public static java.nio.charset.Charset java.nio.charset.Charset.defaultCharset()
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharset::defaultCharset() {
    static jnipp::StaticMethod<JavaNioCharsetCharset> method(clazz(), "defaultCharset", "()Ljava/nio/charset/Charset;");
    return method.call();
}

// public final java.util.Set java.nio.charset.Charset.aliases()
jnipp::LocalRef<JavaUtilSet> JavaNioCharsetCharset::aliases() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "aliases", "()Ljava/util/Set;");
    return method.call(*this);
}

// static boolean java.nio.charset.Charset.atBugLevel(java.lang.String)
jboolean JavaNioCharsetCharset::atBugLevel(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "atBugLevel", "(Ljava/lang/String;)Z");
    return method.call(a0);
}

// private static java.util.Iterator java.nio.charset.Charset.providers()
jnipp::LocalRef<JavaUtilIterator> JavaNioCharsetCharset::providers() {
    static jnipp::StaticMethod<JavaUtilIterator> method(clazz(), "providers", "()Ljava/util/Iterator;");
    return method.call();
}

// private static java.nio.charset.Charset java.nio.charset.Charset.lookupViaProviders(java.lang.String)
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharset::lookupViaProviders(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNioCharsetCharset,JavaLangString> method(clazz(), "lookupViaProviders", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    return method.call(a0);
}

// private static void java.nio.charset.Charset.probeExtendedProvider()
void JavaNioCharsetCharset::probeExtendedProvider() {
    static jnipp::StaticMethod<void> method(clazz(), "probeExtendedProvider", "()V");
    method.call();
}

// private static java.nio.charset.Charset java.nio.charset.Charset.lookupExtendedCharset(java.lang.String)
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharset::lookupExtendedCharset(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNioCharsetCharset,JavaLangString> method(clazz(), "lookupExtendedCharset", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    return method.call(a0);
}

// private static java.nio.charset.Charset java.nio.charset.Charset.lookup2(java.lang.String)
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharset::lookup2(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNioCharsetCharset,JavaLangString> method(clazz(), "lookup2", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    return method.call(a0);
}

// public static boolean java.nio.charset.Charset.isSupported(java.lang.String)
jboolean JavaNioCharsetCharset::isSupported(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "isSupported", "(Ljava/lang/String;)Z");
    return method.call(a0);
}

// public static java.util.SortedMap java.nio.charset.Charset.availableCharsets()
jnipp::LocalRef<JavaUtilSortedMap> JavaNioCharsetCharset::availableCharsets() {
    static jnipp::StaticMethod<JavaUtilSortedMap> method(clazz(), "availableCharsets", "()Ljava/util/SortedMap;");
    return method.call();
}

// public java.lang.String java.nio.charset.Charset.displayName(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaNioCharsetCharset::displayName(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "displayName", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.nio.charset.Charset.displayName()
jnipp::LocalRef<JavaLangString> JavaNioCharsetCharset::displayName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "displayName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public boolean java.nio.charset.Charset.canEncode()
jboolean JavaNioCharsetCharset::canEncode() const {
    static jnipp::Method<jboolean> method(clazz(), "canEncode", "()Z");
    return method.call(*this);
}
#undef bugLevel
jnipp::StaticField<JavaLangString> JavaNioCharsetCharset::bugLevel ("java/nio/charset/Charset", "bugLevel", "Ljava/lang/String;");
#undef standardProvider
jnipp::StaticField<JavaNioCharsetSpiCharsetProvider> JavaNioCharsetCharset::standardProvider ("java/nio/charset/Charset", "standardProvider", "Ljava/nio/charset/spi/CharsetProvider;");
#undef cache1
jnipp::StaticField<jnipp::Array<JavaLangObject>> JavaNioCharsetCharset::cache1 ("java/nio/charset/Charset", "cache1", "[Ljava/lang/Object;");
#undef cache2
jnipp::StaticField<jnipp::Array<JavaLangObject>> JavaNioCharsetCharset::cache2 ("java/nio/charset/Charset", "cache2", "[Ljava/lang/Object;");
#undef gate
jnipp::StaticField<JavaLangThreadLocal> JavaNioCharsetCharset::gate ("java/nio/charset/Charset", "gate", "Ljava/lang/ThreadLocal;");
#undef extendedProviderLock
jnipp::StaticField<JavaLangObject> JavaNioCharsetCharset::extendedProviderLock ("java/nio/charset/Charset", "extendedProviderLock", "Ljava/lang/Object;");
#undef extendedProviderProbed
jnipp::StaticField<jboolean> JavaNioCharsetCharset::extendedProviderProbed ("java/nio/charset/Charset", "extendedProviderProbed", "Z");
#undef extendedProvider
jnipp::StaticField<JavaNioCharsetSpiCharsetProvider> JavaNioCharsetCharset::extendedProvider ("java/nio/charset/Charset", "extendedProvider", "Ljava/nio/charset/spi/CharsetProvider;");
#undef defaultCharset
jnipp::StaticField<JavaNioCharsetCharset> JavaNioCharsetCharset::defaultCharset_ ("java/nio/charset/Charset", "defaultCharset", "Ljava/nio/charset/Charset;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangAbstractStringBuilder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/AbstractStringBuilder"));
    return cls;
}

// java.lang.AbstractStringBuilder()
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::construct() {
    static jnipp::Constructor<JavaLangAbstractStringBuilder> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.lang.AbstractStringBuilder(int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::construct(jint a0) {
    static jnipp::Constructor<JavaLangAbstractStringBuilder,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(char[],int,int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jnipp::Array<jchar>,jint,jint> method(clazz(), "append", "([CII)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1, a2);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(char[])
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jnipp::Array<jchar>> method(clazz(), "append", "([C)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(boolean)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(jboolean a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jboolean> method(clazz(), "append", "(Z)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(char)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(jchar a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jchar> method(clazz(), "append", "(C)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,JavaLangString> method(clazz(), "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.StringBuffer)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(const jnipp::Ref<JavaLangStringBuffer>& a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,JavaLangStringBuffer> method(clazz(), "append", "(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.CharSequence)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,JavaLangCharSequence> method(clazz(), "append", "(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,JavaLangCharSequence,jint,jint> method(clazz(), "append", "(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1, a2);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(double)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(jdouble a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jdouble> method(clazz(), "append", "(D)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(float)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(jfloat a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jfloat> method(clazz(), "append", "(F)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(long)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(jlong a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jlong> method(clazz(), "append", "(J)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(jint a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint> method(clazz(), "append", "(I)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.Object)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::append(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,JavaLangObject> method(clazz(), "append", "(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public int java.lang.AbstractStringBuilder.indexOf(java.lang.String,int)
jint JavaLangAbstractStringBuilder::indexOf(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "indexOf", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.AbstractStringBuilder.indexOf(java.lang.String)
jint JavaLangAbstractStringBuilder::indexOf(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "indexOf", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public int java.lang.AbstractStringBuilder.length()
jint JavaLangAbstractStringBuilder::length() const {
    static jnipp::Method<jint> method(clazz(), "length", "()I");
    return method.call(*this);
}

// public char java.lang.AbstractStringBuilder.charAt(int)
jchar JavaLangAbstractStringBuilder::charAt(jint a0) const {
    static jnipp::Method<jchar,jint> method(clazz(), "charAt", "(I)C");
    return method.call(*this, a0);
}

// public int java.lang.AbstractStringBuilder.codePointAt(int)
jint JavaLangAbstractStringBuilder::codePointAt(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "codePointAt", "(I)I");
    return method.call(*this, a0);
}

// public int java.lang.AbstractStringBuilder.codePointBefore(int)
jint JavaLangAbstractStringBuilder::codePointBefore(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "codePointBefore", "(I)I");
    return method.call(*this, a0);
}

// public int java.lang.AbstractStringBuilder.codePointCount(int,int)
jint JavaLangAbstractStringBuilder::codePointCount(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "codePointCount", "(II)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.AbstractStringBuilder.offsetByCodePoints(int,int)
jint JavaLangAbstractStringBuilder::offsetByCodePoints(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "offsetByCodePoints", "(II)I");
    return method.call(*this, a0, a1);
}

// public void java.lang.AbstractStringBuilder.getChars(int,int,char[],int)
void JavaLangAbstractStringBuilder::getChars(jint a0, jint a1, const jnipp::Ref<jnipp::Array<jchar>>& a2, jint a3) const {
    static jnipp::Method<void,jint,jint,jnipp::Array<jchar>,jint> method(clazz(), "getChars", "(II[CI)V");
    method.call(*this, a0, a1, a2, a3);
}

// public int java.lang.AbstractStringBuilder.lastIndexOf(java.lang.String,int)
jint JavaLangAbstractStringBuilder::lastIndexOf(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "lastIndexOf", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.AbstractStringBuilder.lastIndexOf(java.lang.String)
jint JavaLangAbstractStringBuilder::lastIndexOf(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "lastIndexOf", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.AbstractStringBuilder.substring(int)
jnipp::LocalRef<JavaLangString> JavaLangAbstractStringBuilder::substring(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "substring", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.AbstractStringBuilder.substring(int,int)
jnipp::LocalRef<JavaLangString> JavaLangAbstractStringBuilder::substring(jint a0, jint a1) const {
    static jnipp::Method<JavaLangString,jint,jint> method(clazz(), "substring", "(II)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.CharSequence java.lang.AbstractStringBuilder.subSequence(int,int)
jnipp::LocalRef<JavaLangCharSequence> JavaLangAbstractStringBuilder::subSequence(jint a0, jint a1) const {
    static jnipp::Method<JavaLangCharSequence,jint,jint> method(clazz(), "subSequence", "(II)Ljava/lang/CharSequence;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.replace(int,int,java.lang.String)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::replace(jint a0, jint a1, const jnipp::Ref<JavaLangString>& a2) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jint,JavaLangString> method(clazz(), "replace", "(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1, a2);
}

// final char[] java.lang.AbstractStringBuilder.getValue()
jnipp::LocalRef<jnipp::Array<jchar>> JavaLangAbstractStringBuilder::getValue() const {
    static jnipp::Method<jnipp::Array<jchar>> method(clazz(), "getValue", "()[C");
    return method.call(*this);
}

// public int java.lang.AbstractStringBuilder.capacity()
jint JavaLangAbstractStringBuilder::capacity() const {
    static jnipp::Method<jint> method(clazz(), "capacity", "()I");
    return method.call(*this);
}

// public void java.lang.AbstractStringBuilder.ensureCapacity(int)
void JavaLangAbstractStringBuilder::ensureCapacity(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureCapacity", "(I)V");
    method.call(*this, a0);
}

// public void java.lang.AbstractStringBuilder.trimToSize()
void JavaLangAbstractStringBuilder::trimToSize() const {
    static jnipp::Method<void> method(clazz(), "trimToSize", "()V");
    method.call(*this);
}

// public void java.lang.AbstractStringBuilder.setLength(int)
void JavaLangAbstractStringBuilder::setLength(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setLength", "(I)V");
    method.call(*this, a0);
}

// public void java.lang.AbstractStringBuilder.setCharAt(int,char)
void JavaLangAbstractStringBuilder::setCharAt(jint a0, jchar a1) const {
    static jnipp::Method<void,jint,jchar> method(clazz(), "setCharAt", "(IC)V");
    method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.appendCodePoint(int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::appendCodePoint(jint a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint> method(clazz(), "appendCodePoint", "(I)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.delete(int,int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::delete_(jint a0, jint a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jint> method(clazz(), "delete", "(II)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.deleteCharAt(int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::deleteCharAt(jint a0) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint> method(clazz(), "deleteCharAt", "(I)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,java.lang.CharSequence)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, const jnipp::Ref<JavaLangCharSequence>& a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,JavaLangCharSequence> method(clazz(), "insert", "(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,char[])
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, const jnipp::Ref<jnipp::Array<jchar>>& a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jnipp::Array<jchar>> method(clazz(), "insert", "(I[C)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,java.lang.Object)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,JavaLangObject> method(clazz(), "insert", "(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,char[],int,int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, const jnipp::Ref<jnipp::Array<jchar>>& a1, jint a2, jint a3) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "insert", "(I[CII)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1, a2, a3);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,java.lang.String)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,JavaLangString> method(clazz(), "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, jint a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jint> method(clazz(), "insert", "(II)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,char)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, jchar a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jchar> method(clazz(), "insert", "(IC)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,boolean)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, jboolean a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jboolean> method(clazz(), "insert", "(IZ)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, const jnipp::Ref<JavaLangCharSequence>& a1, jint a2, jint a3) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,JavaLangCharSequence,jint,jint> method(clazz(), "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1, a2, a3);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,float)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, jfloat a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jfloat> method(clazz(), "insert", "(IF)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,long)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, jlong a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jlong> method(clazz(), "insert", "(IJ)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,double)
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::insert(jint a0, jdouble a1) const {
    static jnipp::Method<JavaLangAbstractStringBuilder,jint,jdouble> method(clazz(), "insert", "(ID)Ljava/lang/AbstractStringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.reverse()
jnipp::LocalRef<JavaLangAbstractStringBuilder> JavaLangAbstractStringBuilder::reverse() const {
    static jnipp::Method<JavaLangAbstractStringBuilder> method(clazz(), "reverse", "()Ljava/lang/AbstractStringBuilder;");
    return method.call(*this);
}

// void java.lang.AbstractStringBuilder.expandCapacity(int)
void JavaLangAbstractStringBuilder::expandCapacity(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "expandCapacity", "(I)V");
    method.call(*this, a0);
}

// private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int)
void JavaLangAbstractStringBuilder::ensureCapacityInternal(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureCapacityInternal", "(I)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangStringBuffer::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/StringBuffer"));
    return cls;
}

// public java.lang.StringBuffer(java.lang.CharSequence)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::construct(const jnipp::Ref<JavaLangCharSequence>& a0) {
    static jnipp::Constructor<JavaLangStringBuffer,JavaLangCharSequence> constructor(clazz(), "(Ljava/lang/CharSequence;)V");
    return constructor.construct(a0);
}

// public java.lang.StringBuffer(java.lang.String)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangStringBuffer,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.StringBuffer(int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::construct(jint a0) {
    static jnipp::Constructor<JavaLangStringBuffer,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.lang.StringBuffer()
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::construct() {
    static jnipp::Constructor<JavaLangStringBuffer> constructor(clazz(), "()V");
    return constructor.construct();
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(float)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(jfloat a0) const {
    static jnipp::Method<JavaLangStringBuffer,jfloat> method(clazz(), "append", "(F)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(boolean)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(jboolean a0) const {
    static jnipp::Method<JavaLangStringBuffer,jboolean> method(clazz(), "append", "(Z)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(char)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(jchar a0) const {
    static jnipp::Method<JavaLangStringBuffer,jchar> method(clazz(), "append", "(C)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(jint a0) const {
    static jnipp::Method<JavaLangStringBuffer,jint> method(clazz(), "append", "(I)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(long)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(jlong a0) const {
    static jnipp::Method<JavaLangStringBuffer,jlong> method(clazz(), "append", "(J)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangStringBuffer,JavaLangString> method(clazz(), "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.Object)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangStringBuffer,JavaLangObject> method(clazz(), "append", "(Ljava/lang/Object;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(double)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(jdouble a0) const {
    static jnipp::Method<JavaLangStringBuffer,jdouble> method(clazz(), "append", "(D)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.CharSequence)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaLangStringBuffer,JavaLangCharSequence> method(clazz(), "append", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaLangStringBuffer,JavaLangCharSequence,jint,jint> method(clazz(), "append", "(Ljava/lang/CharSequence;II)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(char[])
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<JavaLangStringBuffer,jnipp::Array<jchar>> method(clazz(), "append", "([C)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(char[],int,int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaLangStringBuffer,jnipp::Array<jchar>,jint,jint> method(clazz(), "append", "([CII)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.StringBuffer)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::append(const jnipp::Ref<JavaLangStringBuffer>& a0) const {
    static jnipp::Method<JavaLangStringBuffer,JavaLangStringBuffer> method(clazz(), "append", "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public int java.lang.StringBuffer.indexOf(java.lang.String)
jint JavaLangStringBuffer::indexOf(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "indexOf", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public synchronized int java.lang.StringBuffer.indexOf(java.lang.String,int)
jint JavaLangStringBuffer::indexOf(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "indexOf", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// public synchronized int java.lang.StringBuffer.length()
jint JavaLangStringBuffer::length() const {
    static jnipp::Method<jint> method(clazz(), "length", "()I");
    return method.call(*this);
}

// public synchronized char java.lang.StringBuffer.charAt(int)
jchar JavaLangStringBuffer::charAt(jint a0) const {
    static jnipp::Method<jchar,jint> method(clazz(), "charAt", "(I)C");
    return method.call(*this, a0);
}

// public synchronized int java.lang.StringBuffer.codePointAt(int)
jint JavaLangStringBuffer::codePointAt(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "codePointAt", "(I)I");
    return method.call(*this, a0);
}

// public synchronized int java.lang.StringBuffer.codePointBefore(int)
jint JavaLangStringBuffer::codePointBefore(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "codePointBefore", "(I)I");
    return method.call(*this, a0);
}

// public synchronized int java.lang.StringBuffer.codePointCount(int,int)
jint JavaLangStringBuffer::codePointCount(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "codePointCount", "(II)I");
    return method.call(*this, a0, a1);
}

// public synchronized int java.lang.StringBuffer.offsetByCodePoints(int,int)
jint JavaLangStringBuffer::offsetByCodePoints(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "offsetByCodePoints", "(II)I");
    return method.call(*this, a0, a1);
}

// public synchronized void java.lang.StringBuffer.getChars(int,int,char[],int)
void JavaLangStringBuffer::getChars(jint a0, jint a1, const jnipp::Ref<jnipp::Array<jchar>>& a2, jint a3) const {
    static jnipp::Method<void,jint,jint,jnipp::Array<jchar>,jint> method(clazz(), "getChars", "(II[CI)V");
    method.call(*this, a0, a1, a2, a3);
}

// public synchronized int java.lang.StringBuffer.lastIndexOf(java.lang.String,int)
jint JavaLangStringBuffer::lastIndexOf(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "lastIndexOf", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.StringBuffer.lastIndexOf(java.lang.String)
jint JavaLangStringBuffer::lastIndexOf(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "lastIndexOf", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public synchronized java.lang.String java.lang.StringBuffer.substring(int,int)
jnipp::LocalRef<JavaLangString> JavaLangStringBuffer::substring(jint a0, jint a1) const {
    static jnipp::Method<JavaLangString,jint,jint> method(clazz(), "substring", "(II)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.String java.lang.StringBuffer.substring(int)
jnipp::LocalRef<JavaLangString> JavaLangStringBuffer::substring(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "substring", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public synchronized java.lang.CharSequence java.lang.StringBuffer.subSequence(int,int)
jnipp::LocalRef<JavaLangCharSequence> JavaLangStringBuffer::subSequence(jint a0, jint a1) const {
    static jnipp::Method<JavaLangCharSequence,jint,jint> method(clazz(), "subSequence", "(II)Ljava/lang/CharSequence;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.replace(int,int,java.lang.String)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::replace(jint a0, jint a1, const jnipp::Ref<JavaLangString>& a2) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jint,JavaLangString> method(clazz(), "replace", "(IILjava/lang/String;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1, a2);
}

// private void java.lang.StringBuffer.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaLangStringBuffer::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private synchronized void java.lang.StringBuffer.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaLangStringBuffer::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public synchronized int java.lang.StringBuffer.capacity()
jint JavaLangStringBuffer::capacity() const {
    static jnipp::Method<jint> method(clazz(), "capacity", "()I");
    return method.call(*this);
}

// public synchronized void java.lang.StringBuffer.ensureCapacity(int)
void JavaLangStringBuffer::ensureCapacity(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureCapacity", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.lang.StringBuffer.trimToSize()
void JavaLangStringBuffer::trimToSize() const {
    static jnipp::Method<void> method(clazz(), "trimToSize", "()V");
    method.call(*this);
}

// public synchronized void java.lang.StringBuffer.setLength(int)
void JavaLangStringBuffer::setLength(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setLength", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.lang.StringBuffer.setCharAt(int,char)
void JavaLangStringBuffer::setCharAt(jint a0, jchar a1) const {
    static jnipp::Method<void,jint,jchar> method(clazz(), "setCharAt", "(IC)V");
    method.call(*this, a0, a1);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.appendCodePoint(int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::appendCodePoint(jint a0) const {
    static jnipp::Method<JavaLangStringBuffer,jint> method(clazz(), "appendCodePoint", "(I)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.delete(int,int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::delete_(jint a0, jint a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jint> method(clazz(), "delete", "(II)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.deleteCharAt(int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::deleteCharAt(jint a0) const {
    static jnipp::Method<JavaLangStringBuffer,jint> method(clazz(), "deleteCharAt", "(I)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,long)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, jlong a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jlong> method(clazz(), "insert", "(IJ)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,boolean)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, jboolean a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jboolean> method(clazz(), "insert", "(IZ)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,char)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, jchar a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jchar> method(clazz(), "insert", "(IC)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, jint a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jint> method(clazz(), "insert", "(II)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,float)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, jfloat a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jfloat> method(clazz(), "insert", "(IF)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,double)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, jdouble a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jdouble> method(clazz(), "insert", "(ID)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,char[],int,int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, const jnipp::Ref<jnipp::Array<jchar>>& a1, jint a2, jint a3) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "insert", "(I[CII)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1, a2, a3);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,java.lang.Object)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,JavaLangObject> method(clazz(), "insert", "(ILjava/lang/Object;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,java.lang.String)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,JavaLangString> method(clazz(), "insert", "(ILjava/lang/String;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,char[])
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, const jnipp::Ref<jnipp::Array<jchar>>& a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,jnipp::Array<jchar>> method(clazz(), "insert", "(I[C)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,java.lang.CharSequence)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, const jnipp::Ref<JavaLangCharSequence>& a1) const {
    static jnipp::Method<JavaLangStringBuffer,jint,JavaLangCharSequence> method(clazz(), "insert", "(ILjava/lang/CharSequence;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::insert(jint a0, const jnipp::Ref<JavaLangCharSequence>& a1, jint a2, jint a3) const {
    static jnipp::Method<JavaLangStringBuffer,jint,JavaLangCharSequence,jint,jint> method(clazz(), "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1, a2, a3);
}

// public synchronized java.lang.StringBuffer java.lang.StringBuffer.reverse()
jnipp::LocalRef<JavaLangStringBuffer> JavaLangStringBuffer::reverse() const {
    static jnipp::Method<JavaLangStringBuffer> method(clazz(), "reverse", "()Ljava/lang/StringBuffer;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangStringBuffer::serialVersionUID ("java/lang/StringBuffer", "serialVersionUID", "J");
#undef serialPersistentFields
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaLangStringBuffer::serialPersistentFields ("java/lang/StringBuffer", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilLocale::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Locale"));
    return cls;
}

// java.util.Locale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions,java.util.Locale$1)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::construct(const jnipp::Ref<SunUtilLocaleBaseLocale>& a0, const jnipp::Ref<SunUtilLocaleLocaleExtensions>& a1, const jnipp::Ref<JavaUtilLocale_1>& a2) {
    static jnipp::Constructor<JavaUtilLocale,SunUtilLocaleBaseLocale,SunUtilLocaleLocaleExtensions,JavaUtilLocale_1> constructor(clazz(), "(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;Ljava/util/Locale$1;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.Locale(java.lang.String)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaUtilLocale,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.util.Locale(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaUtilLocale,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.util.Locale(java.lang.String,java.lang.String,java.lang.String)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::Constructor<JavaUtilLocale,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2);
}

// private java.util.Locale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::construct(const jnipp::Ref<SunUtilLocaleBaseLocale>& a0, const jnipp::Ref<SunUtilLocaleLocaleExtensions>& a1) {
    static jnipp::Constructor<JavaUtilLocale,SunUtilLocaleBaseLocale,SunUtilLocaleLocaleExtensions> constructor(clazz(), "(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;)V");
    return constructor.construct(a0, a1);
}

// public boolean java.util.Locale.equals(java.lang.Object)
jboolean JavaUtilLocale::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.Locale.hashCode()
jint JavaUtilLocale::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object java.util.Locale.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilLocale::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getLanguage()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getLanguage() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getLanguage", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static java.util.Locale java.util.Locale.getDefault(java.util.Locale$Category)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::getDefault(const jnipp::Ref<JavaUtilLocale_Category>& a0) {
    static jnipp::StaticMethod<JavaUtilLocale,JavaUtilLocale_Category> method(clazz(), "getDefault", "(Ljava/util/Locale$Category;)Ljava/util/Locale;");
    return method.call(a0);
}

// public static java.util.Locale java.util.Locale.getDefault()
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::getDefault() {
    static jnipp::StaticMethod<JavaUtilLocale> method(clazz(), "getDefault", "()Ljava/util/Locale;");
    return method.call();
}

// static java.util.Locale java.util.Locale.getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::getInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<SunUtilLocaleLocaleExtensions>& a4) {
    static jnipp::StaticMethod<JavaUtilLocale,JavaLangString,JavaLangString,JavaLangString,JavaLangString,SunUtilLocaleLocaleExtensions> method(clazz(), "getInstance", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lsun/util/locale/LocaleExtensions;)Ljava/util/Locale;");
    return method.call(a0, a1, a2, a3, a4);
}

// static java.util.Locale java.util.Locale.getInstance(java.lang.String,java.lang.String,java.lang.String)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::getInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::StaticMethod<JavaUtilLocale,JavaLangString,JavaLangString,JavaLangString> method(clazz(), "getInstance", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale;");
    return method.call(a0, a1, a2);
}

// static java.util.Locale java.util.Locale.getInstance(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::getInstance(const jnipp::Ref<SunUtilLocaleBaseLocale>& a0, const jnipp::Ref<SunUtilLocaleLocaleExtensions>& a1) {
    static jnipp::StaticMethod<JavaUtilLocale,SunUtilLocaleBaseLocale,SunUtilLocaleLocaleExtensions> method(clazz(), "getInstance", "(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;)Ljava/util/Locale;");
    return method.call(a0, a1);
}

// private void java.util.Locale.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilLocale::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.util.Locale.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaUtilLocale::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// private java.lang.Object java.util.Locale.readResolve() throws java.io.ObjectStreamException
jnipp::LocalRef<JavaLangObject> JavaUtilLocale::readResolve() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "readResolve", "()Ljava/lang/Object;");
    return method.call(*this);
}

// private static java.util.Locale java.util.Locale.createConstant(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::createConstant(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaUtilLocale,JavaLangString,JavaLangString> method(clazz(), "createConstant", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale;");
    return method.call(a0, a1);
}

// private static void java.util.Locale.initDefault(java.util.Locale$Category)
void JavaUtilLocale::initDefault(const jnipp::Ref<JavaUtilLocale_Category>& a0) {
    static jnipp::StaticMethod<void,JavaUtilLocale_Category> method(clazz(), "initDefault", "(Ljava/util/Locale$Category;)V");
    method.call(a0);
}

// private static void java.util.Locale.initDefault()
void JavaUtilLocale::initDefault() {
    static jnipp::StaticMethod<void> method(clazz(), "initDefault", "()V");
    method.call();
}

// public static synchronized void java.util.Locale.setDefault(java.util.Locale$Category,java.util.Locale)
void JavaUtilLocale::setDefault(const jnipp::Ref<JavaUtilLocale_Category>& a0, const jnipp::Ref<JavaUtilLocale>& a1) {
    static jnipp::StaticMethod<void,JavaUtilLocale_Category,JavaUtilLocale> method(clazz(), "setDefault", "(Ljava/util/Locale$Category;Ljava/util/Locale;)V");
    method.call(a0, a1);
}

// public static synchronized void java.util.Locale.setDefault(java.util.Locale)
void JavaUtilLocale::setDefault(const jnipp::Ref<JavaUtilLocale>& a0) {
    static jnipp::StaticMethod<void,JavaUtilLocale> method(clazz(), "setDefault", "(Ljava/util/Locale;)V");
    method.call(a0);
}

// public static java.util.Locale[] java.util.Locale.getAvailableLocales()
jnipp::LocalRef<jnipp::Array<JavaUtilLocale>> JavaUtilLocale::getAvailableLocales() {
    static jnipp::StaticMethod<jnipp::Array<JavaUtilLocale>> method(clazz(), "getAvailableLocales", "()[Ljava/util/Locale;");
    return method.call();
}

// public static java.lang.String[] java.util.Locale.getISOCountries()
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilLocale::getISOCountries() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>> method(clazz(), "getISOCountries", "()[Ljava/lang/String;");
    return method.call();
}

// public static java.lang.String[] java.util.Locale.getISOLanguages()
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilLocale::getISOLanguages() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>> method(clazz(), "getISOLanguages", "()[Ljava/lang/String;");
    return method.call();
}

// private static final java.lang.String[] java.util.Locale.getISO2Table(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilLocale::getISO2Table(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>,JavaLangString> method(clazz(), "getISO2Table", "(Ljava/lang/String;)[Ljava/lang/String;");
    return method.call(a0);
}

// public java.lang.String java.util.Locale.getScript()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getScript() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getScript", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getCountry()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getCountry() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getCountry", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getVariant()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getVariant() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getVariant", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getExtension(char)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getExtension(jchar a0) const {
    static jnipp::Method<JavaLangString,jchar> method(clazz(), "getExtension", "(C)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.util.Set java.util.Locale.getExtensionKeys()
jnipp::LocalRef<JavaUtilSet> JavaUtilLocale::getExtensionKeys() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "getExtensionKeys", "()Ljava/util/Set;");
    return method.call(*this);
}

// public java.util.Set java.util.Locale.getUnicodeLocaleAttributes()
jnipp::LocalRef<JavaUtilSet> JavaUtilLocale::getUnicodeLocaleAttributes() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "getUnicodeLocaleAttributes", "()Ljava/util/Set;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getUnicodeLocaleType(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getUnicodeLocaleType(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getUnicodeLocaleType", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.util.Set java.util.Locale.getUnicodeLocaleKeys()
jnipp::LocalRef<JavaUtilSet> JavaUtilLocale::getUnicodeLocaleKeys() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "getUnicodeLocaleKeys", "()Ljava/util/Set;");
    return method.call(*this);
}

// sun.util.locale.BaseLocale java.util.Locale.getBaseLocale()
jnipp::LocalRef<SunUtilLocaleBaseLocale> JavaUtilLocale::getBaseLocale() const {
    static jnipp::Method<SunUtilLocaleBaseLocale> method(clazz(), "getBaseLocale", "()Lsun/util/locale/BaseLocale;");
    return method.call(*this);
}

// sun.util.locale.LocaleExtensions java.util.Locale.getLocaleExtensions()
jnipp::LocalRef<SunUtilLocaleLocaleExtensions> JavaUtilLocale::getLocaleExtensions() const {
    static jnipp::Method<SunUtilLocaleLocaleExtensions> method(clazz(), "getLocaleExtensions", "()Lsun/util/locale/LocaleExtensions;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.toLanguageTag()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::toLanguageTag() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toLanguageTag", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static java.util.Locale java.util.Locale.forLanguageTag(java.lang.String)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale::forLanguageTag(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilLocale,JavaLangString> method(clazz(), "forLanguageTag", "(Ljava/lang/String;)Ljava/util/Locale;");
    return method.call(a0);
}

// public java.lang.String java.util.Locale.getISO3Language() throws java.util.MissingResourceException
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getISO3Language() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getISO3Language", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getISO3Country() throws java.util.MissingResourceException
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getISO3Country() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getISO3Country", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static final java.lang.String java.util.Locale.getISO3Code(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getISO3Code(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString,JavaLangString> method(clazz(), "getISO3Code", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0, a1);
}

// public java.lang.String java.util.Locale.getDisplayLanguage(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayLanguage(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "getDisplayLanguage", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public final java.lang.String java.util.Locale.getDisplayLanguage()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayLanguage() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDisplayLanguage", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getDisplayScript()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayScript() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDisplayScript", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getDisplayScript(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayScript(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "getDisplayScript", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.util.Locale.getDisplayCountry(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayCountry(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "getDisplayCountry", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public final java.lang.String java.util.Locale.getDisplayCountry()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayCountry() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDisplayCountry", "()Ljava/lang/String;");
    return method.call(*this);
}

// private java.lang.String java.util.Locale.getDisplayString(java.lang.String,java.util.Locale,int)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayString(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, jint a2) const {
    static jnipp::Method<JavaLangString,JavaLangString,JavaUtilLocale,jint> method(clazz(), "getDisplayString", "(Ljava/lang/String;Ljava/util/Locale;I)Ljava/lang/String;");
    return method.call(*this, a0, a1, a2);
}

// public java.lang.String java.util.Locale.getDisplayVariant(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayVariant(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "getDisplayVariant", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public final java.lang.String java.util.Locale.getDisplayVariant()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayVariant() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDisplayVariant", "()Ljava/lang/String;");
    return method.call(*this);
}

// public final java.lang.String java.util.Locale.getDisplayName()
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDisplayName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.Locale.getDisplayName(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::getDisplayName(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private java.lang.String[] java.util.Locale.getDisplayVariantArray(sun.util.resources.OpenListResourceBundle,java.util.Locale)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilLocale::getDisplayVariantArray(const jnipp::Ref<SunUtilResourcesOpenListResourceBundle>& a0, const jnipp::Ref<JavaUtilLocale>& a1) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,SunUtilResourcesOpenListResourceBundle,JavaUtilLocale> method(clazz(), "getDisplayVariantArray", "(Lsun/util/resources/OpenListResourceBundle;Ljava/util/Locale;)[Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// private static java.lang.String java.util.Locale.formatList(java.lang.String[],java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::formatList(const jnipp::Ref<jnipp::Array<JavaLangString>>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<JavaLangString>,JavaLangString,JavaLangString> method(clazz(), "formatList", "([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0, a1, a2);
}

// private static java.lang.String[] java.util.Locale.composeList(java.text.MessageFormat,java.lang.String[])
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilLocale::composeList(const jnipp::Ref<JavaTextMessageFormat>& a0, const jnipp::Ref<jnipp::Array<JavaLangString>>& a1) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>,JavaTextMessageFormat,jnipp::Array<JavaLangString>> method(clazz(), "composeList", "(Ljava/text/MessageFormat;[Ljava/lang/String;)[Ljava/lang/String;");
    return method.call(a0, a1);
}

// private static java.lang.String java.util.Locale.convertOldISOCodes(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilLocale::convertOldISOCodes(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "convertOldISOCodes", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// private static sun.util.locale.LocaleExtensions java.util.Locale.getCompatibilityExtensions(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
jnipp::LocalRef<SunUtilLocaleLocaleExtensions> JavaUtilLocale::getCompatibilityExtensions(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::StaticMethod<SunUtilLocaleLocaleExtensions,JavaLangString,JavaLangString,JavaLangString,JavaLangString> method(clazz(), "getCompatibilityExtensions", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/LocaleExtensions;");
    return method.call(a0, a1, a2, a3);
}
#undef LOCALECACHE
const jnipp::StaticField<JavaUtilLocale_Cache> JavaUtilLocale::LOCALECACHE ("java/util/Locale", "LOCALECACHE", "Ljava/util/Locale$Cache;");
#undef ENGLISH
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::ENGLISH ("java/util/Locale", "ENGLISH", "Ljava/util/Locale;");
#undef FRENCH
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::FRENCH ("java/util/Locale", "FRENCH", "Ljava/util/Locale;");
#undef GERMAN
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::GERMAN ("java/util/Locale", "GERMAN", "Ljava/util/Locale;");
#undef ITALIAN
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::ITALIAN ("java/util/Locale", "ITALIAN", "Ljava/util/Locale;");
#undef JAPANESE
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::JAPANESE ("java/util/Locale", "JAPANESE", "Ljava/util/Locale;");
#undef KOREAN
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::KOREAN ("java/util/Locale", "KOREAN", "Ljava/util/Locale;");
#undef CHINESE
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::CHINESE ("java/util/Locale", "CHINESE", "Ljava/util/Locale;");
#undef SIMPLIFIED_CHINESE
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::SIMPLIFIED_CHINESE ("java/util/Locale", "SIMPLIFIED_CHINESE", "Ljava/util/Locale;");
#undef TRADITIONAL_CHINESE
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::TRADITIONAL_CHINESE ("java/util/Locale", "TRADITIONAL_CHINESE", "Ljava/util/Locale;");
#undef FRANCE
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::FRANCE ("java/util/Locale", "FRANCE", "Ljava/util/Locale;");
#undef GERMANY
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::GERMANY ("java/util/Locale", "GERMANY", "Ljava/util/Locale;");
#undef ITALY
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::ITALY ("java/util/Locale", "ITALY", "Ljava/util/Locale;");
#undef JAPAN
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::JAPAN ("java/util/Locale", "JAPAN", "Ljava/util/Locale;");
#undef KOREA
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::KOREA ("java/util/Locale", "KOREA", "Ljava/util/Locale;");
#undef CHINA
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::CHINA ("java/util/Locale", "CHINA", "Ljava/util/Locale;");
#undef PRC
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::PRC ("java/util/Locale", "PRC", "Ljava/util/Locale;");
#undef TAIWAN
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::TAIWAN ("java/util/Locale", "TAIWAN", "Ljava/util/Locale;");
#undef UK
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::UK ("java/util/Locale", "UK", "Ljava/util/Locale;");
#undef US
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::US ("java/util/Locale", "US", "Ljava/util/Locale;");
#undef CANADA
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::CANADA ("java/util/Locale", "CANADA", "Ljava/util/Locale;");
#undef CANADA_FRENCH
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::CANADA_FRENCH ("java/util/Locale", "CANADA_FRENCH", "Ljava/util/Locale;");
#undef ROOT
const jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::ROOT ("java/util/Locale", "ROOT", "Ljava/util/Locale;");
#undef PRIVATE_USE_EXTENSION
const jnipp::StaticField<jchar> JavaUtilLocale::PRIVATE_USE_EXTENSION ("java/util/Locale", "PRIVATE_USE_EXTENSION", "C");
#undef UNICODE_LOCALE_EXTENSION
const jnipp::StaticField<jchar> JavaUtilLocale::UNICODE_LOCALE_EXTENSION ("java/util/Locale", "UNICODE_LOCALE_EXTENSION", "C");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilLocale::serialVersionUID ("java/util/Locale", "serialVersionUID", "J");
#undef DISPLAY_LANGUAGE
const jnipp::StaticField<jint> JavaUtilLocale::DISPLAY_LANGUAGE ("java/util/Locale", "DISPLAY_LANGUAGE", "I");
#undef DISPLAY_COUNTRY
const jnipp::StaticField<jint> JavaUtilLocale::DISPLAY_COUNTRY ("java/util/Locale", "DISPLAY_COUNTRY", "I");
#undef DISPLAY_VARIANT
const jnipp::StaticField<jint> JavaUtilLocale::DISPLAY_VARIANT ("java/util/Locale", "DISPLAY_VARIANT", "I");
#undef DISPLAY_SCRIPT
const jnipp::StaticField<jint> JavaUtilLocale::DISPLAY_SCRIPT ("java/util/Locale", "DISPLAY_SCRIPT", "I");
#undef defaultLocale
jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::defaultLocale ("java/util/Locale", "defaultLocale", "Ljava/util/Locale;");
#undef defaultDisplayLocale
jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::defaultDisplayLocale ("java/util/Locale", "defaultDisplayLocale", "Ljava/util/Locale;");
#undef defaultFormatLocale
jnipp::StaticField<JavaUtilLocale> JavaUtilLocale::defaultFormatLocale ("java/util/Locale", "defaultFormatLocale", "Ljava/util/Locale;");
#undef serialPersistentFields
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaUtilLocale::serialPersistentFields ("java/util/Locale", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
#undef isoLanguages
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaUtilLocale::isoLanguages ("java/util/Locale", "isoLanguages", "[Ljava/lang/String;");
#undef isoCountries
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaUtilLocale::isoCountries ("java/util/Locale", "isoCountries", "[Ljava/lang/String;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaUtilLocale::$assertionsDisabled ("java/util/Locale", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangStringBuilder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/StringBuilder"));
    return cls;
}

// public java.lang.StringBuilder(java.lang.CharSequence)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::construct(const jnipp::Ref<JavaLangCharSequence>& a0) {
    static jnipp::Constructor<JavaLangStringBuilder,JavaLangCharSequence> constructor(clazz(), "(Ljava/lang/CharSequence;)V");
    return constructor.construct(a0);
}

// public java.lang.StringBuilder(java.lang.String)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangStringBuilder,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.StringBuilder(int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::construct(jint a0) {
    static jnipp::Constructor<JavaLangStringBuilder,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.lang.StringBuilder()
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::construct() {
    static jnipp::Constructor<JavaLangStringBuilder> constructor(clazz(), "()V");
    return constructor.construct();
}

// private java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.StringBuilder)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(const jnipp::Ref<JavaLangStringBuilder>& a0) const {
    static jnipp::Method<JavaLangStringBuilder,JavaLangStringBuilder> method(clazz(), "append", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(char[])
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<JavaLangStringBuilder,jnipp::Array<jchar>> method(clazz(), "append", "([C)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(char[],int,int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaLangStringBuilder,jnipp::Array<jchar>,jint,jint> method(clazz(), "append", "([CII)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1, a2);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(boolean)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(jboolean a0) const {
    static jnipp::Method<JavaLangStringBuilder,jboolean> method(clazz(), "append", "(Z)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.StringBuffer)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(const jnipp::Ref<JavaLangStringBuffer>& a0) const {
    static jnipp::Method<JavaLangStringBuilder,JavaLangStringBuffer> method(clazz(), "append", "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.CharSequence)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaLangStringBuilder,JavaLangCharSequence> method(clazz(), "append", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaLangStringBuilder,JavaLangCharSequence,jint,jint> method(clazz(), "append", "(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1, a2);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(float)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(jfloat a0) const {
    static jnipp::Method<JavaLangStringBuilder,jfloat> method(clazz(), "append", "(F)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangStringBuilder,JavaLangString> method(clazz(), "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.Object)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangStringBuilder,JavaLangObject> method(clazz(), "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(double)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(jdouble a0) const {
    static jnipp::Method<JavaLangStringBuilder,jdouble> method(clazz(), "append", "(D)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(char)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(jchar a0) const {
    static jnipp::Method<JavaLangStringBuilder,jchar> method(clazz(), "append", "(C)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(jint a0) const {
    static jnipp::Method<JavaLangStringBuilder,jint> method(clazz(), "append", "(I)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.append(long)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::append(jlong a0) const {
    static jnipp::Method<JavaLangStringBuilder,jlong> method(clazz(), "append", "(J)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public int java.lang.StringBuilder.indexOf(java.lang.String,int)
jint JavaLangStringBuilder::indexOf(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "indexOf", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.StringBuilder.indexOf(java.lang.String)
jint JavaLangStringBuilder::indexOf(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "indexOf", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public int java.lang.StringBuilder.lastIndexOf(java.lang.String)
jint JavaLangStringBuilder::lastIndexOf(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "lastIndexOf", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public int java.lang.StringBuilder.lastIndexOf(java.lang.String,int)
jint JavaLangStringBuilder::lastIndexOf(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "lastIndexOf", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.replace(int,int,java.lang.String)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::replace(jint a0, jint a1, const jnipp::Ref<JavaLangString>& a2) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jint,JavaLangString> method(clazz(), "replace", "(IILjava/lang/String;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1, a2);
}

// private void java.lang.StringBuilder.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaLangStringBuilder::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.lang.StringBuilder.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaLangStringBuilder::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.appendCodePoint(int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::appendCodePoint(jint a0) const {
    static jnipp::Method<JavaLangStringBuilder,jint> method(clazz(), "appendCodePoint", "(I)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.delete(int,int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::delete_(jint a0, jint a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jint> method(clazz(), "delete", "(II)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.deleteCharAt(int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::deleteCharAt(jint a0) const {
    static jnipp::Method<JavaLangStringBuilder,jint> method(clazz(), "deleteCharAt", "(I)Ljava/lang/StringBuilder;");
    return method.call(*this, a0);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,char)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, jchar a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jchar> method(clazz(), "insert", "(IC)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,boolean)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, jboolean a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jboolean> method(clazz(), "insert", "(IZ)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,char[],int,int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, const jnipp::Ref<jnipp::Array<jchar>>& a1, jint a2, jint a3) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "insert", "(I[CII)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1, a2, a3);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, jint a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jint> method(clazz(), "insert", "(II)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,long)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, jlong a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jlong> method(clazz(), "insert", "(IJ)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.String)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,JavaLangString> method(clazz(), "insert", "(ILjava/lang/String;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,char[])
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, const jnipp::Ref<jnipp::Array<jchar>>& a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jnipp::Array<jchar>> method(clazz(), "insert", "(I[C)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.CharSequence)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, const jnipp::Ref<JavaLangCharSequence>& a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,JavaLangCharSequence> method(clazz(), "insert", "(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, const jnipp::Ref<JavaLangCharSequence>& a1, jint a2, jint a3) const {
    static jnipp::Method<JavaLangStringBuilder,jint,JavaLangCharSequence,jint,jint> method(clazz(), "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1, a2, a3);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.Object)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,JavaLangObject> method(clazz(), "insert", "(ILjava/lang/Object;)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,float)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, jfloat a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jfloat> method(clazz(), "insert", "(IF)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.insert(int,double)
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::insert(jint a0, jdouble a1) const {
    static jnipp::Method<JavaLangStringBuilder,jint,jdouble> method(clazz(), "insert", "(ID)Ljava/lang/StringBuilder;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuilder java.lang.StringBuilder.reverse()
jnipp::LocalRef<JavaLangStringBuilder> JavaLangStringBuilder::reverse() const {
    static jnipp::Method<JavaLangStringBuilder> method(clazz(), "reverse", "()Ljava/lang/StringBuilder;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangStringBuilder::serialVersionUID ("java/lang/StringBuilder", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilComparator::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Comparator"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangCharSequence::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/CharSequence"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectStreamField::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectStreamField"));
    return cls;
}

// java.io.ObjectStreamField(java.lang.reflect.Field,boolean,boolean)
jnipp::LocalRef<JavaIoObjectStreamField> JavaIoObjectStreamField::construct(const jnipp::Ref<JavaLangReflectField>& a0, jboolean a1, jboolean a2) {
    static jnipp::Constructor<JavaIoObjectStreamField,JavaLangReflectField,jboolean,jboolean> constructor(clazz(), "(Ljava/lang/reflect/Field;ZZ)V");
    return constructor.construct(a0, a1, a2);
}

// java.io.ObjectStreamField(java.lang.String,java.lang.String,boolean)
jnipp::LocalRef<JavaIoObjectStreamField> JavaIoObjectStreamField::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jboolean a2) {
    static jnipp::Constructor<JavaIoObjectStreamField,JavaLangString,JavaLangString,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Z)V");
    return constructor.construct(a0, a1, a2);
}

// public java.io.ObjectStreamField(java.lang.String,java.lang.Class,boolean)
jnipp::LocalRef<JavaIoObjectStreamField> JavaIoObjectStreamField::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangClass>& a1, jboolean a2) {
    static jnipp::Constructor<JavaIoObjectStreamField,JavaLangString,JavaLangClass,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Class;Z)V");
    return constructor.construct(a0, a1, a2);
}

// public java.io.ObjectStreamField(java.lang.String,java.lang.Class)
jnipp::LocalRef<JavaIoObjectStreamField> JavaIoObjectStreamField::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangClass>& a1) {
    static jnipp::Constructor<JavaIoObjectStreamField,JavaLangString,JavaLangClass> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Class;)V");
    return constructor.construct(a0, a1);
}

// public boolean java.io.ObjectStreamField.isPrimitive()
jboolean JavaIoObjectStreamField::isPrimitive() const {
    static jnipp::Method<jboolean> method(clazz(), "isPrimitive", "()Z");
    return method.call(*this);
}

// public int java.io.ObjectStreamField.compareTo(java.lang.Object)
jint JavaIoObjectStreamField::compareTo(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "compareTo", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public java.lang.String java.io.ObjectStreamField.getName()
jnipp::LocalRef<JavaLangString> JavaIoObjectStreamField::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// java.lang.reflect.Field java.io.ObjectStreamField.getField()
jnipp::LocalRef<JavaLangReflectField> JavaIoObjectStreamField::getField() const {
    static jnipp::Method<JavaLangReflectField> method(clazz(), "getField", "()Ljava/lang/reflect/Field;");
    return method.call(*this);
}

// public java.lang.Class java.io.ObjectStreamField.getType()
jnipp::LocalRef<JavaLangClass> JavaIoObjectStreamField::getType() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getType", "()Ljava/lang/Class;");
    return method.call(*this);
}

// java.lang.String java.io.ObjectStreamField.getSignature()
jnipp::LocalRef<JavaLangString> JavaIoObjectStreamField::getSignature() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getSignature", "()Ljava/lang/String;");
    return method.call(*this);
}

// public char java.io.ObjectStreamField.getTypeCode()
jchar JavaIoObjectStreamField::getTypeCode() const {
    static jnipp::Method<jchar> method(clazz(), "getTypeCode", "()C");
    return method.call(*this);
}

// public java.lang.String java.io.ObjectStreamField.getTypeString()
jnipp::LocalRef<JavaLangString> JavaIoObjectStreamField::getTypeString() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getTypeString", "()Ljava/lang/String;");
    return method.call(*this);
}

// public int java.io.ObjectStreamField.getOffset()
jint JavaIoObjectStreamField::getOffset() const {
    static jnipp::Method<jint> method(clazz(), "getOffset", "()I");
    return method.call(*this);
}

// protected void java.io.ObjectStreamField.setOffset(int)
void JavaIoObjectStreamField::setOffset(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setOffset", "(I)V");
    method.call(*this, a0);
}

// public boolean java.io.ObjectStreamField.isUnshared()
jboolean JavaIoObjectStreamField::isUnshared() const {
    static jnipp::Method<jboolean> method(clazz(), "isUnshared", "()Z");
    return method.call(*this);
}

// private static java.lang.String java.io.ObjectStreamField.getClassSignature(java.lang.Class)
jnipp::LocalRef<JavaLangString> JavaIoObjectStreamField::getClassSignature(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangClass> method(clazz(), "getClassSignature", "(Ljava/lang/Class;)Ljava/lang/String;");
    return method.call(a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNioBuffer::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/Buffer"));
    return cls;
}

// java.nio.Buffer(int,int,int,int)
jnipp::LocalRef<JavaNioBuffer> JavaNioBuffer::construct(jint a0, jint a1, jint a2, jint a3) {
    static jnipp::Constructor<JavaNioBuffer,jint,jint,jint,jint> constructor(clazz(), "(IIII)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public final java.nio.Buffer java.nio.Buffer.limit(int)
jnipp::LocalRef<JavaNioBuffer> JavaNioBuffer::limit(jint a0) const {
    static jnipp::Method<JavaNioBuffer,jint> method(clazz(), "limit", "(I)Ljava/nio/Buffer;");
    return method.call(*this, a0);
}

// public final int java.nio.Buffer.limit()
jint JavaNioBuffer::limit() const {
    static jnipp::Method<jint> method(clazz(), "limit", "()I");
    return method.call(*this);
}

// final int java.nio.Buffer.checkIndex(int,int)
jint JavaNioBuffer::checkIndex(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "checkIndex", "(II)I");
    return method.call(*this, a0, a1);
}

// final int java.nio.Buffer.checkIndex(int)
jint JavaNioBuffer::checkIndex(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "checkIndex", "(I)I");
    return method.call(*this, a0);
}

// public final java.nio.Buffer java.nio.Buffer.clear()
jnipp::LocalRef<JavaNioBuffer> JavaNioBuffer::clear() const {
    static jnipp::Method<JavaNioBuffer> method(clazz(), "clear", "()Ljava/nio/Buffer;");
    return method.call(*this);
}

// static void java.nio.Buffer.checkBounds(int,int,int)
void JavaNioBuffer::checkBounds(jint a0, jint a1, jint a2) {
    static jnipp::StaticMethod<void,jint,jint,jint> method(clazz(), "checkBounds", "(III)V");
    method.call(a0, a1, a2);
}

// public final int java.nio.Buffer.remaining()
jint JavaNioBuffer::remaining() const {
    static jnipp::Method<jint> method(clazz(), "remaining", "()I");
    return method.call(*this);
}

// public final java.nio.Buffer java.nio.Buffer.position(int)
jnipp::LocalRef<JavaNioBuffer> JavaNioBuffer::position(jint a0) const {
    static jnipp::Method<JavaNioBuffer,jint> method(clazz(), "position", "(I)Ljava/nio/Buffer;");
    return method.call(*this, a0);
}

// public final int java.nio.Buffer.position()
jint JavaNioBuffer::position() const {
    static jnipp::Method<jint> method(clazz(), "position", "()I");
    return method.call(*this);
}

// public final int java.nio.Buffer.capacity()
jint JavaNioBuffer::capacity() const {
    static jnipp::Method<jint> method(clazz(), "capacity", "()I");
    return method.call(*this);
}

// public final java.nio.Buffer java.nio.Buffer.mark()
jnipp::LocalRef<JavaNioBuffer> JavaNioBuffer::mark() const {
    static jnipp::Method<JavaNioBuffer> method(clazz(), "mark", "()Ljava/nio/Buffer;");
    return method.call(*this);
}

// public final java.nio.Buffer java.nio.Buffer.reset()
jnipp::LocalRef<JavaNioBuffer> JavaNioBuffer::reset() const {
    static jnipp::Method<JavaNioBuffer> method(clazz(), "reset", "()Ljava/nio/Buffer;");
    return method.call(*this);
}

// public final java.nio.Buffer java.nio.Buffer.flip()
jnipp::LocalRef<JavaNioBuffer> JavaNioBuffer::flip() const {
    static jnipp::Method<JavaNioBuffer> method(clazz(), "flip", "()Ljava/nio/Buffer;");
    return method.call(*this);
}

// public final java.nio.Buffer java.nio.Buffer.rewind()
jnipp::LocalRef<JavaNioBuffer> JavaNioBuffer::rewind() const {
    static jnipp::Method<JavaNioBuffer> method(clazz(), "rewind", "()Ljava/nio/Buffer;");
    return method.call(*this);
}

// public final boolean java.nio.Buffer.hasRemaining()
jboolean JavaNioBuffer::hasRemaining() const {
    static jnipp::Method<jboolean> method(clazz(), "hasRemaining", "()Z");
    return method.call(*this);
}

// final int java.nio.Buffer.nextGetIndex(int)
jint JavaNioBuffer::nextGetIndex(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "nextGetIndex", "(I)I");
    return method.call(*this, a0);
}

// final int java.nio.Buffer.nextGetIndex()
jint JavaNioBuffer::nextGetIndex() const {
    static jnipp::Method<jint> method(clazz(), "nextGetIndex", "()I");
    return method.call(*this);
}

// final int java.nio.Buffer.nextPutIndex()
jint JavaNioBuffer::nextPutIndex() const {
    static jnipp::Method<jint> method(clazz(), "nextPutIndex", "()I");
    return method.call(*this);
}

// final int java.nio.Buffer.nextPutIndex(int)
jint JavaNioBuffer::nextPutIndex(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "nextPutIndex", "(I)I");
    return method.call(*this, a0);
}

// final int java.nio.Buffer.markValue()
jint JavaNioBuffer::markValue() const {
    static jnipp::Method<jint> method(clazz(), "markValue", "()I");
    return method.call(*this);
}

// final void java.nio.Buffer.truncate()
void JavaNioBuffer::truncate() const {
    static jnipp::Method<void> method(clazz(), "truncate", "()V");
    method.call(*this);
}

// final void java.nio.Buffer.discardMark()
void JavaNioBuffer::discardMark() const {
    static jnipp::Method<void> method(clazz(), "discardMark", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharBuffer::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/CharBuffer"));
    return cls;
}

// java.nio.CharBuffer(int,int,int,int,char[],int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::construct(jint a0, jint a1, jint a2, jint a3, const jnipp::Ref<jnipp::Array<jchar>>& a4, jint a5) {
    static jnipp::Constructor<JavaNioCharBuffer,jint,jint,jint,jint,jnipp::Array<jchar>,jint> constructor(clazz(), "(IIII[CI)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5);
}

// java.nio.CharBuffer(int,int,int,int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::construct(jint a0, jint a1, jint a2, jint a3) {
    static jnipp::Constructor<JavaNioCharBuffer,jint,jint,jint,jint> constructor(clazz(), "(IIII)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.nio.CharBuffer java.nio.CharBuffer.get(char[],int,int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::get(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaNioCharBuffer,jnipp::Array<jchar>,jint,jint> method(clazz(), "get", "([CII)Ljava/nio/CharBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public java.nio.CharBuffer java.nio.CharBuffer.get(char[])
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::get(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<JavaNioCharBuffer,jnipp::Array<jchar>> method(clazz(), "get", "([C)Ljava/nio/CharBuffer;");
    return method.call(*this, a0);
}

// public final java.nio.CharBuffer java.nio.CharBuffer.put(java.lang.String)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::put(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNioCharBuffer,JavaLangString> method(clazz(), "put", "(Ljava/lang/String;)Ljava/nio/CharBuffer;");
    return method.call(*this, a0);
}

// public java.nio.CharBuffer java.nio.CharBuffer.put(java.lang.String,int,int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::put(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaNioCharBuffer,JavaLangString,jint,jint> method(clazz(), "put", "(Ljava/lang/String;II)Ljava/nio/CharBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public final java.nio.CharBuffer java.nio.CharBuffer.put(char[])
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::put(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<JavaNioCharBuffer,jnipp::Array<jchar>> method(clazz(), "put", "([C)Ljava/nio/CharBuffer;");
    return method.call(*this, a0);
}

// public java.nio.CharBuffer java.nio.CharBuffer.put(char[],int,int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::put(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaNioCharBuffer,jnipp::Array<jchar>,jint,jint> method(clazz(), "put", "([CII)Ljava/nio/CharBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public java.nio.CharBuffer java.nio.CharBuffer.put(java.nio.CharBuffer)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::put(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<JavaNioCharBuffer,JavaNioCharBuffer> method(clazz(), "put", "(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;");
    return method.call(*this, a0);
}

// public boolean java.nio.CharBuffer.equals(java.lang.Object)
jboolean JavaNioCharBuffer::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// private static boolean java.nio.CharBuffer.equals(char,char)
jboolean JavaNioCharBuffer::equals(jchar a0, jchar a1) {
    static jnipp::StaticMethod<jboolean,jchar,jchar> method(clazz(), "equals", "(CC)Z");
    return method.call(a0, a1);
}

// public java.nio.CharBuffer java.nio.CharBuffer.append(java.lang.CharSequence)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::append(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaNioCharBuffer,JavaLangCharSequence> method(clazz(), "append", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;");
    return method.call(*this, a0);
}

// public java.nio.CharBuffer java.nio.CharBuffer.append(char)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::append(jchar a0) const {
    static jnipp::Method<JavaNioCharBuffer,jchar> method(clazz(), "append", "(C)Ljava/nio/CharBuffer;");
    return method.call(*this, a0);
}

// public java.nio.CharBuffer java.nio.CharBuffer.append(java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::append(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaNioCharBuffer,JavaLangCharSequence,jint,jint> method(clazz(), "append", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public int java.nio.CharBuffer.hashCode()
jint JavaNioCharBuffer::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.nio.CharBuffer.compareTo(java.nio.CharBuffer)
jint JavaNioCharBuffer::compareTo(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<jint,JavaNioCharBuffer> method(clazz(), "compareTo", "(Ljava/nio/CharBuffer;)I");
    return method.call(*this, a0);
}

// public final int java.nio.CharBuffer.length()
jint JavaNioCharBuffer::length() const {
    static jnipp::Method<jint> method(clazz(), "length", "()I");
    return method.call(*this);
}

// public final char java.nio.CharBuffer.charAt(int)
jchar JavaNioCharBuffer::charAt(jint a0) const {
    static jnipp::Method<jchar,jint> method(clazz(), "charAt", "(I)C");
    return method.call(*this, a0);
}

// private static int java.nio.CharBuffer.compare(char,char)
jint JavaNioCharBuffer::compare(jchar a0, jchar a1) {
    static jnipp::StaticMethod<jint,jchar,jchar> method(clazz(), "compare", "(CC)I");
    return method.call(a0, a1);
}

// public final boolean java.nio.CharBuffer.hasArray()
jboolean JavaNioCharBuffer::hasArray() const {
    static jnipp::Method<jboolean> method(clazz(), "hasArray", "()Z");
    return method.call(*this);
}

// public final char[] java.nio.CharBuffer.array()
jnipp::LocalRef<jnipp::Array<jchar>> JavaNioCharBuffer::array() const {
    static jnipp::Method<jnipp::Array<jchar>> method(clazz(), "array", "()[C");
    return method.call(*this);
}

// public final int java.nio.CharBuffer.arrayOffset()
jint JavaNioCharBuffer::arrayOffset() const {
    static jnipp::Method<jint> method(clazz(), "arrayOffset", "()I");
    return method.call(*this);
}

// public static java.nio.CharBuffer java.nio.CharBuffer.wrap(char[])
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::wrap(const jnipp::Ref<jnipp::Array<jchar>>& a0) {
    static jnipp::StaticMethod<JavaNioCharBuffer,jnipp::Array<jchar>> method(clazz(), "wrap", "([C)Ljava/nio/CharBuffer;");
    return method.call(a0);
}

// public static java.nio.CharBuffer java.nio.CharBuffer.wrap(java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::wrap(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<JavaNioCharBuffer,JavaLangCharSequence,jint,jint> method(clazz(), "wrap", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;");
    return method.call(a0, a1, a2);
}

// public static java.nio.CharBuffer java.nio.CharBuffer.wrap(char[],int,int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::wrap(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<JavaNioCharBuffer,jnipp::Array<jchar>,jint,jint> method(clazz(), "wrap", "([CII)Ljava/nio/CharBuffer;");
    return method.call(a0, a1, a2);
}

// public static java.nio.CharBuffer java.nio.CharBuffer.wrap(java.lang.CharSequence)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::wrap(const jnipp::Ref<JavaLangCharSequence>& a0) {
    static jnipp::StaticMethod<JavaNioCharBuffer,JavaLangCharSequence> method(clazz(), "wrap", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;");
    return method.call(a0);
}

// public static java.nio.CharBuffer java.nio.CharBuffer.allocate(int)
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharBuffer::allocate(jint a0) {
    static jnipp::StaticMethod<JavaNioCharBuffer,jint> method(clazz(), "allocate", "(I)Ljava/nio/CharBuffer;");
    return method.call(a0);
}

// public int java.nio.CharBuffer.read(java.nio.CharBuffer) throws java.io.IOException
jint JavaNioCharBuffer::read(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<jint,JavaNioCharBuffer> method(clazz(), "read", "(Ljava/nio/CharBuffer;)I");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThreadLocal::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ThreadLocal"));
    return cls;
}

// public java.lang.ThreadLocal()
jnipp::LocalRef<JavaLangThreadLocal> JavaLangThreadLocal::construct() {
    static jnipp::Constructor<JavaLangThreadLocal> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.lang.ThreadLocal.remove()
void JavaLangThreadLocal::remove() const {
    static jnipp::Method<void> method(clazz(), "remove", "()V");
    method.call(*this);
}

// public java.lang.Object java.lang.ThreadLocal.get()
jnipp::LocalRef<JavaLangObject> JavaLangThreadLocal::get() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "get", "()Ljava/lang/Object;");
    return method.call(*this);
}

// static java.lang.ThreadLocal$ThreadLocalMap java.lang.ThreadLocal.createInheritedMap(java.lang.ThreadLocal$ThreadLocalMap)
jnipp::LocalRef<JavaLangThreadLocal_ThreadLocalMap> JavaLangThreadLocal::createInheritedMap(const jnipp::Ref<JavaLangThreadLocal_ThreadLocalMap>& a0) {
    static jnipp::StaticMethod<JavaLangThreadLocal_ThreadLocalMap,JavaLangThreadLocal_ThreadLocalMap> method(clazz(), "createInheritedMap", "(Ljava/lang/ThreadLocal$ThreadLocalMap;)Ljava/lang/ThreadLocal$ThreadLocalMap;");
    return method.call(a0);
}

// public void java.lang.ThreadLocal.set(java.lang.Object)
void JavaLangThreadLocal::set(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "set", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// private static int java.lang.ThreadLocal.nextHashCode()
jint JavaLangThreadLocal::nextHashCode() {
    static jnipp::StaticMethod<jint> method(clazz(), "nextHashCode", "()I");
    return method.call();
}

// protected java.lang.Object java.lang.ThreadLocal.initialValue()
jnipp::LocalRef<JavaLangObject> JavaLangThreadLocal::initialValue() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "initialValue", "()Ljava/lang/Object;");
    return method.call(*this);
}

// private java.lang.Object java.lang.ThreadLocal.setInitialValue()
jnipp::LocalRef<JavaLangObject> JavaLangThreadLocal::setInitialValue() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "setInitialValue", "()Ljava/lang/Object;");
    return method.call(*this);
}

// java.lang.ThreadLocal$ThreadLocalMap java.lang.ThreadLocal.getMap(java.lang.Thread)
jnipp::LocalRef<JavaLangThreadLocal_ThreadLocalMap> JavaLangThreadLocal::getMap(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<JavaLangThreadLocal_ThreadLocalMap,JavaLangThread> method(clazz(), "getMap", "(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;");
    return method.call(*this, a0);
}

// void java.lang.ThreadLocal.createMap(java.lang.Thread,java.lang.Object)
void JavaLangThreadLocal::createMap(const jnipp::Ref<JavaLangThread>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangThread,JavaLangObject> method(clazz(), "createMap", "(Ljava/lang/Thread;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// java.lang.Object java.lang.ThreadLocal.childValue(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaLangThreadLocal::childValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "childValue", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}
#undef nextHashCode
jnipp::StaticField<JavaUtilConcurrentAtomicAtomicInteger> JavaLangThreadLocal::nextHashCode_ ("java/lang/ThreadLocal", "nextHashCode", "Ljava/util/concurrent/atomic/AtomicInteger;");
#undef HASH_INCREMENT
const jnipp::StaticField<jint> JavaLangThreadLocal::HASH_INCREMENT ("java/lang/ThreadLocal", "HASH_INCREMENT", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaNioByteBuffer::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/ByteBuffer"));
    return cls;
}

// java.nio.ByteBuffer(int,int,int,int,byte[],int)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::construct(jint a0, jint a1, jint a2, jint a3, const jnipp::Ref<jnipp::Array<jbyte>>& a4, jint a5) {
    static jnipp::Constructor<JavaNioByteBuffer,jint,jint,jint,jint,jnipp::Array<jbyte>,jint> constructor(clazz(), "(IIII[BI)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5);
}

// java.nio.ByteBuffer(int,int,int,int)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::construct(jint a0, jint a1, jint a2, jint a3) {
    static jnipp::Constructor<JavaNioByteBuffer,jint,jint,jint,jint> constructor(clazz(), "(IIII)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.nio.ByteBuffer java.nio.ByteBuffer.get(byte[],int,int)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::get(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaNioByteBuffer,jnipp::Array<jbyte>,jint,jint> method(clazz(), "get", "([BII)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public java.nio.ByteBuffer java.nio.ByteBuffer.get(byte[])
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::get(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,jnipp::Array<jbyte>> method(clazz(), "get", "([B)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}

// public java.nio.ByteBuffer java.nio.ByteBuffer.put(byte[],int,int)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::put(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaNioByteBuffer,jnipp::Array<jbyte>,jint,jint> method(clazz(), "put", "([BII)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public java.nio.ByteBuffer java.nio.ByteBuffer.put(java.nio.ByteBuffer)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::put(const jnipp::Ref<JavaNioByteBuffer>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,JavaNioByteBuffer> method(clazz(), "put", "(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}

// public final java.nio.ByteBuffer java.nio.ByteBuffer.put(byte[])
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::put(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,jnipp::Array<jbyte>> method(clazz(), "put", "([B)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}

// private static boolean java.nio.ByteBuffer.equals(byte,byte)
jboolean JavaNioByteBuffer::equals(jbyte a0, jbyte a1) {
    static jnipp::StaticMethod<jboolean,jbyte,jbyte> method(clazz(), "equals", "(BB)Z");
    return method.call(a0, a1);
}

// public boolean java.nio.ByteBuffer.equals(java.lang.Object)
jboolean JavaNioByteBuffer::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.nio.ByteBuffer.hashCode()
jint JavaNioByteBuffer::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.nio.ByteBuffer.compareTo(java.nio.ByteBuffer)
jint JavaNioByteBuffer::compareTo(const jnipp::Ref<JavaNioByteBuffer>& a0) const {
    static jnipp::Method<jint,JavaNioByteBuffer> method(clazz(), "compareTo", "(Ljava/nio/ByteBuffer;)I");
    return method.call(*this, a0);
}

// private static int java.nio.ByteBuffer.compare(byte,byte)
jint JavaNioByteBuffer::compare(jbyte a0, jbyte a1) {
    static jnipp::StaticMethod<jint,jbyte,jbyte> method(clazz(), "compare", "(BB)I");
    return method.call(a0, a1);
}

// public final boolean java.nio.ByteBuffer.hasArray()
jboolean JavaNioByteBuffer::hasArray() const {
    static jnipp::Method<jboolean> method(clazz(), "hasArray", "()Z");
    return method.call(*this);
}

// public final byte[] java.nio.ByteBuffer.array()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaNioByteBuffer::array() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "array", "()[B");
    return method.call(*this);
}

// public final int java.nio.ByteBuffer.arrayOffset()
jint JavaNioByteBuffer::arrayOffset() const {
    static jnipp::Method<jint> method(clazz(), "arrayOffset", "()I");
    return method.call(*this);
}

// public static java.nio.ByteBuffer java.nio.ByteBuffer.wrap(byte[])
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::wrap(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::StaticMethod<JavaNioByteBuffer,jnipp::Array<jbyte>> method(clazz(), "wrap", "([B)Ljava/nio/ByteBuffer;");
    return method.call(a0);
}

// public static java.nio.ByteBuffer java.nio.ByteBuffer.wrap(byte[],int,int)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::wrap(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<JavaNioByteBuffer,jnipp::Array<jbyte>,jint,jint> method(clazz(), "wrap", "([BII)Ljava/nio/ByteBuffer;");
    return method.call(a0, a1, a2);
}

// public static java.nio.ByteBuffer java.nio.ByteBuffer.allocate(int)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::allocate(jint a0) {
    static jnipp::StaticMethod<JavaNioByteBuffer,jint> method(clazz(), "allocate", "(I)Ljava/nio/ByteBuffer;");
    return method.call(a0);
}

// public static java.nio.ByteBuffer java.nio.ByteBuffer.allocateDirect(int)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::allocateDirect(jint a0) {
    static jnipp::StaticMethod<JavaNioByteBuffer,jint> method(clazz(), "allocateDirect", "(I)Ljava/nio/ByteBuffer;");
    return method.call(a0);
}

// public final java.nio.ByteBuffer java.nio.ByteBuffer.order(java.nio.ByteOrder)
jnipp::LocalRef<JavaNioByteBuffer> JavaNioByteBuffer::order(const jnipp::Ref<JavaNioByteOrder>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,JavaNioByteOrder> method(clazz(), "order", "(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}

// public final java.nio.ByteOrder java.nio.ByteBuffer.order()
jnipp::LocalRef<JavaNioByteOrder> JavaNioByteBuffer::order() const {
    static jnipp::Method<JavaNioByteOrder> method(clazz(), "order", "()Ljava/nio/ByteOrder;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilSortedMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/SortedMap"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilIterator::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Iterator"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilSet::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Set"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Map"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharsetSpiCharsetProvider::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/charset/spi/CharsetProvider"));
    return cls;
}

// protected java.nio.charset.spi.CharsetProvider()
jnipp::LocalRef<JavaNioCharsetSpiCharsetProvider> JavaNioCharsetSpiCharsetProvider::construct() {
    static jnipp::Constructor<JavaNioCharsetSpiCharsetProvider> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoOutputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/OutputStream"));
    return cls;
}

// public java.io.OutputStream()
jnipp::LocalRef<JavaIoOutputStream> JavaIoOutputStream::construct() {
    static jnipp::Constructor<JavaIoOutputStream> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.io.OutputStream.write(byte[],int,int) throws java.io.IOException
void JavaIoOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "write", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.OutputStream.write(byte[]) throws java.io.IOException
void JavaIoOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "write", "([B)V");
    method.call(*this, a0);
}

// public void java.io.OutputStream.flush() throws java.io.IOException
void JavaIoOutputStream::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.io.OutputStream.close() throws java.io.IOException
void JavaIoOutputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectOutputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectOutputStream"));
    return cls;
}

// public java.io.ObjectOutputStream(java.io.OutputStream) throws java.io.IOException
jnipp::LocalRef<JavaIoObjectOutputStream> JavaIoObjectOutputStream::construct(const jnipp::Ref<JavaIoOutputStream>& a0) {
    static jnipp::Constructor<JavaIoObjectOutputStream,JavaIoOutputStream> constructor(clazz(), "(Ljava/io/OutputStream;)V");
    return constructor.construct(a0);
}

// protected java.io.ObjectOutputStream() throws java.io.IOException,java.lang.SecurityException
jnipp::LocalRef<JavaIoObjectOutputStream> JavaIoObjectOutputStream::construct() {
    static jnipp::Constructor<JavaIoObjectOutputStream> constructor(clazz(), "()V");
    return constructor.construct();
}

// private void java.io.ObjectOutputStream.clear()
void JavaIoObjectOutputStream::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream.write(byte[]) throws java.io.IOException
void JavaIoObjectOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "write", "([B)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.write(byte[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "write", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.ObjectOutputStream.write(int) throws java.io.IOException
void JavaIoObjectOutputStream::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public final void java.io.ObjectOutputStream.writeObject(java.lang.Object) throws java.io.IOException
void JavaIoObjectOutputStream::writeObject(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "writeObject", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.defaultWriteObject() throws java.io.IOException
void JavaIoObjectOutputStream::defaultWriteObject() const {
    static jnipp::Method<void> method(clazz(), "defaultWriteObject", "()V");
    method.call(*this);
}

// private static boolean java.io.ObjectOutputStream.auditSubclass(java.lang.Class)
jboolean JavaIoObjectOutputStream::auditSubclass(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangClass> method(clazz(), "auditSubclass", "(Ljava/lang/Class;)Z");
    return method.call(a0);
}

// public void java.io.ObjectOutputStream.flush() throws java.io.IOException
void JavaIoObjectOutputStream::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream.close() throws java.io.IOException
void JavaIoObjectOutputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream.writeInt(int) throws java.io.IOException
void JavaIoObjectOutputStream::writeInt(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeInt", "(I)V");
    method.call(*this, a0);
}

// public java.io.ObjectOutputStream$PutField java.io.ObjectOutputStream.putFields() throws java.io.IOException
jnipp::LocalRef<JavaIoObjectOutputStream_PutField> JavaIoObjectOutputStream::putFields() const {
    static jnipp::Method<JavaIoObjectOutputStream_PutField> method(clazz(), "putFields", "()Ljava/io/ObjectOutputStream$PutField;");
    return method.call(*this);
}

// public void java.io.ObjectOutputStream.writeFields() throws java.io.IOException
void JavaIoObjectOutputStream::writeFields() const {
    static jnipp::Method<void> method(clazz(), "writeFields", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream.reset() throws java.io.IOException
void JavaIoObjectOutputStream::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream.writeBytes(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream::writeBytes(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeBytes", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeChar(int) throws java.io.IOException
void JavaIoObjectOutputStream::writeChar(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeChar", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeUTF(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream::writeUTF(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeUTF", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeFloat(float) throws java.io.IOException
void JavaIoObjectOutputStream::writeFloat(jfloat a0) const {
    static jnipp::Method<void,jfloat> method(clazz(), "writeFloat", "(F)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.useProtocolVersion(int) throws java.io.IOException
void JavaIoObjectOutputStream::useProtocolVersion(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "useProtocolVersion", "(I)V");
    method.call(*this, a0);
}

// protected void java.io.ObjectOutputStream.writeObjectOverride(java.lang.Object) throws java.io.IOException
void JavaIoObjectOutputStream::writeObjectOverride(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "writeObjectOverride", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeUnshared(java.lang.Object) throws java.io.IOException
void JavaIoObjectOutputStream::writeUnshared(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "writeUnshared", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// protected void java.io.ObjectOutputStream.annotateClass(java.lang.Class) throws java.io.IOException
void JavaIoObjectOutputStream::annotateClass(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<void,JavaLangClass> method(clazz(), "annotateClass", "(Ljava/lang/Class;)V");
    method.call(*this, a0);
}

// protected void java.io.ObjectOutputStream.annotateProxyClass(java.lang.Class) throws java.io.IOException
void JavaIoObjectOutputStream::annotateProxyClass(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<void,JavaLangClass> method(clazz(), "annotateProxyClass", "(Ljava/lang/Class;)V");
    method.call(*this, a0);
}

// protected java.lang.Object java.io.ObjectOutputStream.replaceObject(java.lang.Object) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaIoObjectOutputStream::replaceObject(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "replaceObject", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// protected boolean java.io.ObjectOutputStream.enableReplaceObject(boolean) throws java.lang.SecurityException
jboolean JavaIoObjectOutputStream::enableReplaceObject(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "enableReplaceObject", "(Z)Z");
    return method.call(*this, a0);
}

// protected void java.io.ObjectOutputStream.writeStreamHeader() throws java.io.IOException
void JavaIoObjectOutputStream::writeStreamHeader() const {
    static jnipp::Method<void> method(clazz(), "writeStreamHeader", "()V");
    method.call(*this);
}

// protected void java.io.ObjectOutputStream.writeClassDescriptor(java.io.ObjectStreamClass) throws java.io.IOException
void JavaIoObjectOutputStream::writeClassDescriptor(const jnipp::Ref<JavaIoObjectStreamClass>& a0) const {
    static jnipp::Method<void,JavaIoObjectStreamClass> method(clazz(), "writeClassDescriptor", "(Ljava/io/ObjectStreamClass;)V");
    method.call(*this, a0);
}

// protected void java.io.ObjectOutputStream.drain() throws java.io.IOException
void JavaIoObjectOutputStream::drain() const {
    static jnipp::Method<void> method(clazz(), "drain", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream.writeBoolean(boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeBoolean(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "writeBoolean", "(Z)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeByte(int) throws java.io.IOException
void JavaIoObjectOutputStream::writeByte(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeByte", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeShort(int) throws java.io.IOException
void JavaIoObjectOutputStream::writeShort(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeShort", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeLong(long) throws java.io.IOException
void JavaIoObjectOutputStream::writeLong(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "writeLong", "(J)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeDouble(double) throws java.io.IOException
void JavaIoObjectOutputStream::writeDouble(jdouble a0) const {
    static jnipp::Method<void,jdouble> method(clazz(), "writeDouble", "(D)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream.writeChars(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream::writeChars(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeChars", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// int java.io.ObjectOutputStream.getProtocolVersion()
jint JavaIoObjectOutputStream::getProtocolVersion() const {
    static jnipp::Method<jint> method(clazz(), "getProtocolVersion", "()I");
    return method.call(*this);
}

// void java.io.ObjectOutputStream.writeTypeString(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream::writeTypeString(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeTypeString", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// private void java.io.ObjectOutputStream.writeObject0(java.lang.Object,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeObject0(const jnipp::Ref<JavaLangObject>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaLangObject,jboolean> method(clazz(), "writeObject0", "(Ljava/lang/Object;Z)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream.writeNull() throws java.io.IOException
void JavaIoObjectOutputStream::writeNull() const {
    static jnipp::Method<void> method(clazz(), "writeNull", "()V");
    method.call(*this);
}

// private void java.io.ObjectOutputStream.writeHandle(int) throws java.io.IOException
void JavaIoObjectOutputStream::writeHandle(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeHandle", "(I)V");
    method.call(*this, a0);
}

// private void java.io.ObjectOutputStream.writeClass(java.lang.Class,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeClass(const jnipp::Ref<JavaLangClass>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaLangClass,jboolean> method(clazz(), "writeClass", "(Ljava/lang/Class;Z)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream.writeClassDesc(java.io.ObjectStreamClass,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeClassDesc(const jnipp::Ref<JavaIoObjectStreamClass>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaIoObjectStreamClass,jboolean> method(clazz(), "writeClassDesc", "(Ljava/io/ObjectStreamClass;Z)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream.writeProxyDesc(java.io.ObjectStreamClass,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeProxyDesc(const jnipp::Ref<JavaIoObjectStreamClass>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaIoObjectStreamClass,jboolean> method(clazz(), "writeProxyDesc", "(Ljava/io/ObjectStreamClass;Z)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream.writeNonProxyDesc(java.io.ObjectStreamClass,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeNonProxyDesc(const jnipp::Ref<JavaIoObjectStreamClass>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaIoObjectStreamClass,jboolean> method(clazz(), "writeNonProxyDesc", "(Ljava/io/ObjectStreamClass;Z)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream.writeString(java.lang.String,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeString(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaLangString,jboolean> method(clazz(), "writeString", "(Ljava/lang/String;Z)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream.writeArray(java.lang.Object,java.io.ObjectStreamClass,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeArray(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1, jboolean a2) const {
    static jnipp::Method<void,JavaLangObject,JavaIoObjectStreamClass,jboolean> method(clazz(), "writeArray", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V");
    method.call(*this, a0, a1, a2);
}

// private void java.io.ObjectOutputStream.writeEnum(java.lang.Enum,java.io.ObjectStreamClass,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeEnum(const jnipp::Ref<JavaLangEnum>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1, jboolean a2) const {
    static jnipp::Method<void,JavaLangEnum,JavaIoObjectStreamClass,jboolean> method(clazz(), "writeEnum", "(Ljava/lang/Enum;Ljava/io/ObjectStreamClass;Z)V");
    method.call(*this, a0, a1, a2);
}

// private void java.io.ObjectOutputStream.writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean) throws java.io.IOException
void JavaIoObjectOutputStream::writeOrdinaryObject(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1, jboolean a2) const {
    static jnipp::Method<void,JavaLangObject,JavaIoObjectStreamClass,jboolean> method(clazz(), "writeOrdinaryObject", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V");
    method.call(*this, a0, a1, a2);
}

// private void java.io.ObjectOutputStream.writeExternalData(java.io.Externalizable) throws java.io.IOException
void JavaIoObjectOutputStream::writeExternalData(const jnipp::Ref<JavaIoExternalizable>& a0) const {
    static jnipp::Method<void,JavaIoExternalizable> method(clazz(), "writeExternalData", "(Ljava/io/Externalizable;)V");
    method.call(*this, a0);
}

// private void java.io.ObjectOutputStream.writeSerialData(java.lang.Object,java.io.ObjectStreamClass) throws java.io.IOException
void JavaIoObjectOutputStream::writeSerialData(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaIoObjectStreamClass> method(clazz(), "writeSerialData", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream.defaultWriteFields(java.lang.Object,java.io.ObjectStreamClass) throws java.io.IOException
void JavaIoObjectOutputStream::defaultWriteFields(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaIoObjectStreamClass> method(clazz(), "defaultWriteFields", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream.writeFatalException(java.io.IOException) throws java.io.IOException
void JavaIoObjectOutputStream::writeFatalException(const jnipp::Ref<JavaIoIOException>& a0) const {
    static jnipp::Method<void,JavaIoIOException> method(clazz(), "writeFatalException", "(Ljava/io/IOException;)V");
    method.call(*this, a0);
}

// private static native void java.io.ObjectOutputStream.floatsToBytes(float[],int,byte[],int,int)
void JavaIoObjectOutputStream::floatsToBytes(const jnipp::Ref<jnipp::Array<jfloat>>& a0, jint a1, const jnipp::Ref<jnipp::Array<jbyte>>& a2, jint a3, jint a4) {
    static jnipp::StaticMethod<void,jnipp::Array<jfloat>,jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "floatsToBytes", "([FI[BII)V");
    method.call(a0, a1, a2, a3, a4);
}

// private static native void java.io.ObjectOutputStream.doublesToBytes(double[],int,byte[],int,int)
void JavaIoObjectOutputStream::doublesToBytes(const jnipp::Ref<jnipp::Array<jdouble>>& a0, jint a1, const jnipp::Ref<jnipp::Array<jbyte>>& a2, jint a3, jint a4) {
    static jnipp::StaticMethod<void,jnipp::Array<jdouble>,jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "doublesToBytes", "([DI[BII)V");
    method.call(a0, a1, a2, a3, a4);
}

// private void java.io.ObjectOutputStream.verifySubclass()
void JavaIoObjectOutputStream::verifySubclass() const {
    static jnipp::Method<void> method(clazz(), "verifySubclass", "()V");
    method.call(*this);
}

// private boolean java.io.ObjectOutputStream.isCustomSubclass()
jboolean JavaIoObjectOutputStream::isCustomSubclass() const {
    static jnipp::Method<jboolean> method(clazz(), "isCustomSubclass", "()Z");
    return method.call(*this);
}
#undef extendedDebugInfo
const jnipp::StaticField<jboolean> JavaIoObjectOutputStream::extendedDebugInfo ("java/io/ObjectOutputStream", "extendedDebugInfo", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoInputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/InputStream"));
    return cls;
}

// public java.io.InputStream()
jnipp::LocalRef<JavaIoInputStream> JavaIoInputStream::construct() {
    static jnipp::Constructor<JavaIoInputStream> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.io.InputStream.close() throws java.io.IOException
void JavaIoInputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// public synchronized void java.io.InputStream.mark(int)
void JavaIoInputStream::mark(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "mark", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.io.InputStream.reset() throws java.io.IOException
void JavaIoInputStream::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// public int java.io.InputStream.read(byte[],int,int) throws java.io.IOException
jint JavaIoInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public int java.io.InputStream.read(byte[]) throws java.io.IOException
jint JavaIoInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>> method(clazz(), "read", "([B)I");
    return method.call(*this, a0);
}

// public long java.io.InputStream.skip(long) throws java.io.IOException
jlong JavaIoInputStream::skip(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "skip", "(J)J");
    return method.call(*this, a0);
}

// public int java.io.InputStream.available() throws java.io.IOException
jint JavaIoInputStream::available() const {
    static jnipp::Method<jint> method(clazz(), "available", "()I");
    return method.call(*this);
}

// public boolean java.io.InputStream.markSupported()
jboolean JavaIoInputStream::markSupported() const {
    static jnipp::Method<jboolean> method(clazz(), "markSupported", "()Z");
    return method.call(*this);
}
#undef MAX_SKIP_BUFFER_SIZE
const jnipp::StaticField<jint> JavaIoInputStream::MAX_SKIP_BUFFER_SIZE ("java/io/InputStream", "MAX_SKIP_BUFFER_SIZE", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputStream"));
    return cls;
}

// public java.io.ObjectInputStream(java.io.InputStream) throws java.io.IOException
jnipp::LocalRef<JavaIoObjectInputStream> JavaIoObjectInputStream::construct(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::Constructor<JavaIoObjectInputStream,JavaIoInputStream> constructor(clazz(), "(Ljava/io/InputStream;)V");
    return constructor.construct(a0);
}

// protected java.io.ObjectInputStream() throws java.io.IOException,java.lang.SecurityException
jnipp::LocalRef<JavaIoObjectInputStream> JavaIoObjectInputStream::construct() {
    static jnipp::Constructor<JavaIoObjectInputStream> constructor(clazz(), "()V");
    return constructor.construct();
}

// private void java.io.ObjectInputStream.clear()
void JavaIoObjectInputStream::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// protected java.lang.Class java.io.ObjectInputStream.resolveClass(java.io.ObjectStreamClass) throws java.io.IOException,java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaIoObjectInputStream::resolveClass(const jnipp::Ref<JavaIoObjectStreamClass>& a0) const {
    static jnipp::Method<JavaLangClass,JavaIoObjectStreamClass> method(clazz(), "resolveClass", "(Ljava/io/ObjectStreamClass;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// public final java.lang.Object java.io.ObjectInputStream.readObject() throws java.io.IOException,java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::readObject() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "readObject", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public void java.io.ObjectInputStream.defaultReadObject() throws java.io.IOException,java.lang.ClassNotFoundException
void JavaIoObjectInputStream::defaultReadObject() const {
    static jnipp::Method<void> method(clazz(), "defaultReadObject", "()V");
    method.call(*this);
}

// private static boolean java.io.ObjectInputStream.auditSubclass(java.lang.Class)
jboolean JavaIoObjectInputStream::auditSubclass(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangClass> method(clazz(), "auditSubclass", "(Ljava/lang/Class;)Z");
    return method.call(a0);
}

// public java.lang.String java.io.ObjectInputStream.readLine() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoObjectInputStream::readLine() const {
    static jnipp::Method<JavaLangString> method(clazz(), "readLine", "()Ljava/lang/String;");
    return method.call(*this);
}

// public void java.io.ObjectInputStream.close() throws java.io.IOException
void JavaIoObjectInputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// public int java.io.ObjectInputStream.readInt() throws java.io.IOException
jint JavaIoObjectInputStream::readInt() const {
    static jnipp::Method<jint> method(clazz(), "readInt", "()I");
    return method.call(*this);
}

// public java.io.ObjectInputStream$GetField java.io.ObjectInputStream.readFields() throws java.io.IOException,java.lang.ClassNotFoundException
jnipp::LocalRef<JavaIoObjectInputStream_GetField> JavaIoObjectInputStream::readFields() const {
    static jnipp::Method<JavaIoObjectInputStream_GetField> method(clazz(), "readFields", "()Ljava/io/ObjectInputStream$GetField;");
    return method.call(*this);
}

// private static java.lang.ClassLoader java.io.ObjectInputStream.latestUserDefinedLoader()
jnipp::LocalRef<JavaLangClassLoader> JavaIoObjectInputStream::latestUserDefinedLoader() {
    static jnipp::StaticMethod<JavaLangClassLoader> method(clazz(), "latestUserDefinedLoader", "()Ljava/lang/ClassLoader;");
    return method.call();
}

// public int java.io.ObjectInputStream.read(byte[],int,int) throws java.io.IOException
jint JavaIoObjectInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public int java.io.ObjectInputStream.read() throws java.io.IOException
jint JavaIoObjectInputStream::read() const {
    static jnipp::Method<jint> method(clazz(), "read", "()I");
    return method.call(*this);
}

// public int java.io.ObjectInputStream.available() throws java.io.IOException
jint JavaIoObjectInputStream::available() const {
    static jnipp::Method<jint> method(clazz(), "available", "()I");
    return method.call(*this);
}

// public char java.io.ObjectInputStream.readChar() throws java.io.IOException
jchar JavaIoObjectInputStream::readChar() const {
    static jnipp::Method<jchar> method(clazz(), "readChar", "()C");
    return method.call(*this);
}

// public java.lang.String java.io.ObjectInputStream.readUTF() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoObjectInputStream::readUTF() const {
    static jnipp::Method<JavaLangString> method(clazz(), "readUTF", "()Ljava/lang/String;");
    return method.call(*this);
}

// public void java.io.ObjectInputStream.readFully(byte[],int,int) throws java.io.IOException
void JavaIoObjectInputStream::readFully(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "readFully", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.ObjectInputStream.readFully(byte[]) throws java.io.IOException
void JavaIoObjectInputStream::readFully(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "readFully", "([B)V");
    method.call(*this, a0);
}

// public float java.io.ObjectInputStream.readFloat() throws java.io.IOException
jfloat JavaIoObjectInputStream::readFloat() const {
    static jnipp::Method<jfloat> method(clazz(), "readFloat", "()F");
    return method.call(*this);
}

// protected java.lang.Object java.io.ObjectInputStream.readObjectOverride() throws java.io.IOException,java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::readObjectOverride() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "readObjectOverride", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.Object java.io.ObjectInputStream.readUnshared() throws java.io.IOException,java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::readUnshared() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "readUnshared", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public void java.io.ObjectInputStream.registerValidation(java.io.ObjectInputValidation,int) throws java.io.NotActiveException,java.io.InvalidObjectException
void JavaIoObjectInputStream::registerValidation(const jnipp::Ref<JavaIoObjectInputValidation>& a0, jint a1) const {
    static jnipp::Method<void,JavaIoObjectInputValidation,jint> method(clazz(), "registerValidation", "(Ljava/io/ObjectInputValidation;I)V");
    method.call(*this, a0, a1);
}

// protected java.lang.Class java.io.ObjectInputStream.resolveProxyClass(java.lang.String[]) throws java.io.IOException,java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaIoObjectInputStream::resolveProxyClass(const jnipp::Ref<jnipp::Array<JavaLangString>>& a0) const {
    static jnipp::Method<JavaLangClass,jnipp::Array<JavaLangString>> method(clazz(), "resolveProxyClass", "([Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// protected java.lang.Object java.io.ObjectInputStream.resolveObject(java.lang.Object) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::resolveObject(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "resolveObject", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// protected boolean java.io.ObjectInputStream.enableResolveObject(boolean) throws java.lang.SecurityException
jboolean JavaIoObjectInputStream::enableResolveObject(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "enableResolveObject", "(Z)Z");
    return method.call(*this, a0);
}

// protected void java.io.ObjectInputStream.readStreamHeader() throws java.io.IOException,java.io.StreamCorruptedException
void JavaIoObjectInputStream::readStreamHeader() const {
    static jnipp::Method<void> method(clazz(), "readStreamHeader", "()V");
    method.call(*this);
}

// protected java.io.ObjectStreamClass java.io.ObjectInputStream.readClassDescriptor() throws java.io.IOException,java.lang.ClassNotFoundException
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectInputStream::readClassDescriptor() const {
    static jnipp::Method<JavaIoObjectStreamClass> method(clazz(), "readClassDescriptor", "()Ljava/io/ObjectStreamClass;");
    return method.call(*this);
}

// public boolean java.io.ObjectInputStream.readBoolean() throws java.io.IOException
jboolean JavaIoObjectInputStream::readBoolean() const {
    static jnipp::Method<jboolean> method(clazz(), "readBoolean", "()Z");
    return method.call(*this);
}

// public byte java.io.ObjectInputStream.readByte() throws java.io.IOException
jbyte JavaIoObjectInputStream::readByte() const {
    static jnipp::Method<jbyte> method(clazz(), "readByte", "()B");
    return method.call(*this);
}

// public int java.io.ObjectInputStream.readUnsignedByte() throws java.io.IOException
jint JavaIoObjectInputStream::readUnsignedByte() const {
    static jnipp::Method<jint> method(clazz(), "readUnsignedByte", "()I");
    return method.call(*this);
}

// public short java.io.ObjectInputStream.readShort() throws java.io.IOException
jshort JavaIoObjectInputStream::readShort() const {
    static jnipp::Method<jshort> method(clazz(), "readShort", "()S");
    return method.call(*this);
}

// public int java.io.ObjectInputStream.readUnsignedShort() throws java.io.IOException
jint JavaIoObjectInputStream::readUnsignedShort() const {
    static jnipp::Method<jint> method(clazz(), "readUnsignedShort", "()I");
    return method.call(*this);
}

// public long java.io.ObjectInputStream.readLong() throws java.io.IOException
jlong JavaIoObjectInputStream::readLong() const {
    static jnipp::Method<jlong> method(clazz(), "readLong", "()J");
    return method.call(*this);
}

// public double java.io.ObjectInputStream.readDouble() throws java.io.IOException
jdouble JavaIoObjectInputStream::readDouble() const {
    static jnipp::Method<jdouble> method(clazz(), "readDouble", "()D");
    return method.call(*this);
}

// public int java.io.ObjectInputStream.skipBytes(int) throws java.io.IOException
jint JavaIoObjectInputStream::skipBytes(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "skipBytes", "(I)I");
    return method.call(*this, a0);
}

// private void java.io.ObjectInputStream.verifySubclass()
void JavaIoObjectInputStream::verifySubclass() const {
    static jnipp::Method<void> method(clazz(), "verifySubclass", "()V");
    method.call(*this);
}

// private java.lang.Object java.io.ObjectInputStream.readObject0(boolean) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::readObject0(jboolean a0) const {
    static jnipp::Method<JavaLangObject,jboolean> method(clazz(), "readObject0", "(Z)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private java.lang.Object java.io.ObjectInputStream.checkResolve(java.lang.Object) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::checkResolve(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "checkResolve", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// java.lang.String java.io.ObjectInputStream.readTypeString() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoObjectInputStream::readTypeString() const {
    static jnipp::Method<JavaLangString> method(clazz(), "readTypeString", "()Ljava/lang/String;");
    return method.call(*this);
}

// private java.lang.Object java.io.ObjectInputStream.readNull() throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::readNull() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "readNull", "()Ljava/lang/Object;");
    return method.call(*this);
}

// private java.lang.Object java.io.ObjectInputStream.readHandle(boolean) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::readHandle(jboolean a0) const {
    static jnipp::Method<JavaLangObject,jboolean> method(clazz(), "readHandle", "(Z)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private java.lang.Class java.io.ObjectInputStream.readClass(boolean) throws java.io.IOException
jnipp::LocalRef<JavaLangClass> JavaIoObjectInputStream::readClass(jboolean a0) const {
    static jnipp::Method<JavaLangClass,jboolean> method(clazz(), "readClass", "(Z)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// private java.io.ObjectStreamClass java.io.ObjectInputStream.readClassDesc(boolean) throws java.io.IOException
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectInputStream::readClassDesc(jboolean a0) const {
    static jnipp::Method<JavaIoObjectStreamClass,jboolean> method(clazz(), "readClassDesc", "(Z)Ljava/io/ObjectStreamClass;");
    return method.call(*this, a0);
}

// private boolean java.io.ObjectInputStream.isCustomSubclass()
jboolean JavaIoObjectInputStream::isCustomSubclass() const {
    static jnipp::Method<jboolean> method(clazz(), "isCustomSubclass", "()Z");
    return method.call(*this);
}

// private java.io.ObjectStreamClass java.io.ObjectInputStream.readProxyDesc(boolean) throws java.io.IOException
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectInputStream::readProxyDesc(jboolean a0) const {
    static jnipp::Method<JavaIoObjectStreamClass,jboolean> method(clazz(), "readProxyDesc", "(Z)Ljava/io/ObjectStreamClass;");
    return method.call(*this, a0);
}

// private java.io.ObjectStreamClass java.io.ObjectInputStream.readNonProxyDesc(boolean) throws java.io.IOException
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectInputStream::readNonProxyDesc(jboolean a0) const {
    static jnipp::Method<JavaIoObjectStreamClass,jboolean> method(clazz(), "readNonProxyDesc", "(Z)Ljava/io/ObjectStreamClass;");
    return method.call(*this, a0);
}

// private java.lang.String java.io.ObjectInputStream.readString(boolean) throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoObjectInputStream::readString(jboolean a0) const {
    static jnipp::Method<JavaLangString,jboolean> method(clazz(), "readString", "(Z)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private java.lang.Object java.io.ObjectInputStream.readArray(boolean) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::readArray(jboolean a0) const {
    static jnipp::Method<JavaLangObject,jboolean> method(clazz(), "readArray", "(Z)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private java.lang.Enum java.io.ObjectInputStream.readEnum(boolean) throws java.io.IOException
jnipp::LocalRef<JavaLangEnum> JavaIoObjectInputStream::readEnum(jboolean a0) const {
    static jnipp::Method<JavaLangEnum,jboolean> method(clazz(), "readEnum", "(Z)Ljava/lang/Enum;");
    return method.call(*this, a0);
}

// private java.lang.Object java.io.ObjectInputStream.readOrdinaryObject(boolean) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::readOrdinaryObject(jboolean a0) const {
    static jnipp::Method<JavaLangObject,jboolean> method(clazz(), "readOrdinaryObject", "(Z)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private void java.io.ObjectInputStream.readExternalData(java.io.Externalizable,java.io.ObjectStreamClass) throws java.io.IOException
void JavaIoObjectInputStream::readExternalData(const jnipp::Ref<JavaIoExternalizable>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) const {
    static jnipp::Method<void,JavaIoExternalizable,JavaIoObjectStreamClass> method(clazz(), "readExternalData", "(Ljava/io/Externalizable;Ljava/io/ObjectStreamClass;)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectInputStream.readSerialData(java.lang.Object,java.io.ObjectStreamClass) throws java.io.IOException
void JavaIoObjectInputStream::readSerialData(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaIoObjectStreamClass> method(clazz(), "readSerialData", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectInputStream.skipCustomData() throws java.io.IOException
void JavaIoObjectInputStream::skipCustomData() const {
    static jnipp::Method<void> method(clazz(), "skipCustomData", "()V");
    method.call(*this);
}

// private void java.io.ObjectInputStream.defaultReadFields(java.lang.Object,java.io.ObjectStreamClass) throws java.io.IOException
void JavaIoObjectInputStream::defaultReadFields(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaIoObjectStreamClass> method(clazz(), "defaultReadFields", "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V");
    method.call(*this, a0, a1);
}

// private java.io.IOException java.io.ObjectInputStream.readFatalException() throws java.io.IOException
jnipp::LocalRef<JavaIoIOException> JavaIoObjectInputStream::readFatalException() const {
    static jnipp::Method<JavaIoIOException> method(clazz(), "readFatalException", "()Ljava/io/IOException;");
    return method.call(*this);
}

// private void java.io.ObjectInputStream.handleReset() throws java.io.StreamCorruptedException
void JavaIoObjectInputStream::handleReset() const {
    static jnipp::Method<void> method(clazz(), "handleReset", "()V");
    method.call(*this);
}

// private static native void java.io.ObjectInputStream.bytesToFloats(byte[],int,float[],int,int)
void JavaIoObjectInputStream::bytesToFloats(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, const jnipp::Ref<jnipp::Array<jfloat>>& a2, jint a3, jint a4) {
    static jnipp::StaticMethod<void,jnipp::Array<jbyte>,jint,jnipp::Array<jfloat>,jint,jint> method(clazz(), "bytesToFloats", "([BI[FII)V");
    method.call(a0, a1, a2, a3, a4);
}

// private static native void java.io.ObjectInputStream.bytesToDoubles(byte[],int,double[],int,int)
void JavaIoObjectInputStream::bytesToDoubles(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, const jnipp::Ref<jnipp::Array<jdouble>>& a2, jint a3, jint a4) {
    static jnipp::StaticMethod<void,jnipp::Array<jbyte>,jint,jnipp::Array<jdouble>,jint,jint> method(clazz(), "bytesToDoubles", "([BI[DII)V");
    method.call(a0, a1, a2, a3, a4);
}

// private static java.lang.Object java.io.ObjectInputStream.cloneArray(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream::cloneArray(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::StaticMethod<JavaLangObject,JavaLangObject> method(clazz(), "cloneArray", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(a0);
}
#undef NULL_HANDLE
const jnipp::StaticField<jint> JavaIoObjectInputStream::NULL_HANDLE ("java/io/ObjectInputStream", "NULL_HANDLE", "I");
#undef unsharedMarker
const jnipp::StaticField<JavaLangObject> JavaIoObjectInputStream::unsharedMarker ("java/io/ObjectInputStream", "unsharedMarker", "Ljava/lang/Object;");
#undef primClasses
const jnipp::StaticField<JavaUtilHashMap> JavaIoObjectInputStream::primClasses ("java/io/ObjectInputStream", "primClasses", "Ljava/util/HashMap;");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilLocaleBaseLocale::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/locale/BaseLocale"));
    return cls;
}

// sun.util.locale.BaseLocale(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)
jnipp::LocalRef<SunUtilLocaleBaseLocale> SunUtilLocaleBaseLocale::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<SunUtilLocaleBaseLocale_1>& a4) {
    static jnipp::Constructor<SunUtilLocaleBaseLocale,JavaLangString,JavaLangString,JavaLangString,JavaLangString,SunUtilLocaleBaseLocale_1> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lsun/util/locale/BaseLocale$1;)V");
    return constructor.construct(a0, a1, a2, a3, a4);
}

// private sun.util.locale.BaseLocale(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
jnipp::LocalRef<SunUtilLocaleBaseLocale> SunUtilLocaleBaseLocale::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::Constructor<SunUtilLocaleBaseLocale,JavaLangString,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// private sun.util.locale.BaseLocale(java.lang.String,java.lang.String)
jnipp::LocalRef<SunUtilLocaleBaseLocale> SunUtilLocaleBaseLocale::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<SunUtilLocaleBaseLocale,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public boolean sun.util.locale.BaseLocale.equals(java.lang.Object)
jboolean SunUtilLocaleBaseLocale::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int sun.util.locale.BaseLocale.hashCode()
jint SunUtilLocaleBaseLocale::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.String sun.util.locale.BaseLocale.getLanguage()
jnipp::LocalRef<JavaLangString> SunUtilLocaleBaseLocale::getLanguage() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getLanguage", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static sun.util.locale.BaseLocale sun.util.locale.BaseLocale.getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
jnipp::LocalRef<SunUtilLocaleBaseLocale> SunUtilLocaleBaseLocale::getInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::StaticMethod<SunUtilLocaleBaseLocale,JavaLangString,JavaLangString,JavaLangString,JavaLangString> method(clazz(), "getInstance", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/BaseLocale;");
    return method.call(a0, a1, a2, a3);
}

// public java.lang.String sun.util.locale.BaseLocale.getScript()
jnipp::LocalRef<JavaLangString> SunUtilLocaleBaseLocale::getScript() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getScript", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String sun.util.locale.BaseLocale.getVariant()
jnipp::LocalRef<JavaLangString> SunUtilLocaleBaseLocale::getVariant() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getVariant", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static sun.util.locale.BaseLocale sun.util.locale.BaseLocale.createInstance(java.lang.String,java.lang.String)
jnipp::LocalRef<SunUtilLocaleBaseLocale> SunUtilLocaleBaseLocale::createInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<SunUtilLocaleBaseLocale,JavaLangString,JavaLangString> method(clazz(), "createInstance", "(Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/BaseLocale;");
    return method.call(a0, a1);
}

// public java.lang.String sun.util.locale.BaseLocale.getRegion()
jnipp::LocalRef<JavaLangString> SunUtilLocaleBaseLocale::getRegion() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getRegion", "()Ljava/lang/String;");
    return method.call(*this);
}
#undef SEP
const jnipp::StaticField<JavaLangString> SunUtilLocaleBaseLocale::SEP ("sun/util/locale/BaseLocale", "SEP", "Ljava/lang/String;");
#undef CACHE
const jnipp::StaticField<SunUtilLocaleBaseLocale_Cache> SunUtilLocaleBaseLocale::CACHE ("sun/util/locale/BaseLocale", "CACHE", "Lsun/util/locale/BaseLocale$Cache;");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilResourceBundle::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/ResourceBundle"));
    return cls;
}

// public java.util.ResourceBundle()
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::construct() {
    static jnipp::Constructor<JavaUtilResourceBundle> constructor(clazz(), "()V");
    return constructor.construct();
}

// public final java.lang.Object java.util.ResourceBundle.getObject(java.lang.String)
jnipp::LocalRef<JavaLangObject> JavaUtilResourceBundle::getObject(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangString> method(clazz(), "getObject", "(Ljava/lang/String;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.util.Set java.util.ResourceBundle.keySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilResourceBundle::keySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "keySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public boolean java.util.ResourceBundle.containsKey(java.lang.String)
jboolean JavaUtilResourceBundle::containsKey(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "containsKey", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::getBundle(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaLangString,JavaUtilLocale> method(clazz(), "getBundle", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1);
}

// public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::getBundle(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaUtilResourceBundle_Control>& a2) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaLangString,JavaUtilLocale,JavaUtilResourceBundle_Control> method(clazz(), "getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1, a2);
}

// public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::getBundle(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaLangClassLoader>& a2) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaLangString,JavaUtilLocale,JavaLangClassLoader> method(clazz(), "getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1, a2);
}

// public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::getBundle(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaLangClassLoader>& a2, const jnipp::Ref<JavaUtilResourceBundle_Control>& a3) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaLangString,JavaUtilLocale,JavaLangClassLoader,JavaUtilResourceBundle_Control> method(clazz(), "getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1, a2, a3);
}

// public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.ResourceBundle$Control)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::getBundle(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilResourceBundle_Control>& a1) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaLangString,JavaUtilResourceBundle_Control> method(clazz(), "getBundle", "(Ljava/lang/String;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1);
}

// public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::getBundle(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaLangString> method(clazz(), "getBundle", "(Ljava/lang/String;)Ljava/util/ResourceBundle;");
    return method.call(a0);
}

// public static final void java.util.ResourceBundle.clearCache()
void JavaUtilResourceBundle::clearCache() {
    static jnipp::StaticMethod<void> method(clazz(), "clearCache", "()V");
    method.call();
}

// public static final void java.util.ResourceBundle.clearCache(java.lang.ClassLoader)
void JavaUtilResourceBundle::clearCache(const jnipp::Ref<JavaLangClassLoader>& a0) {
    static jnipp::StaticMethod<void,JavaLangClassLoader> method(clazz(), "clearCache", "(Ljava/lang/ClassLoader;)V");
    method.call(a0);
}

// protected void java.util.ResourceBundle.setParent(java.util.ResourceBundle)
void JavaUtilResourceBundle::setParent(const jnipp::Ref<JavaUtilResourceBundle>& a0) const {
    static jnipp::Method<void,JavaUtilResourceBundle> method(clazz(), "setParent", "(Ljava/util/ResourceBundle;)V");
    method.call(*this, a0);
}

// public final java.lang.String java.util.ResourceBundle.getString(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilResourceBundle::getString(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getString", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private static java.lang.ClassLoader java.util.ResourceBundle.getLoader(java.lang.Class)
jnipp::LocalRef<JavaLangClassLoader> JavaUtilResourceBundle::getLoader(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangClassLoader,JavaLangClass> method(clazz(), "getLoader", "(Ljava/lang/Class;)Ljava/lang/ClassLoader;");
    return method.call(a0);
}

// public final java.lang.String[] java.util.ResourceBundle.getStringArray(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilResourceBundle::getStringArray(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaLangString> method(clazz(), "getStringArray", "(Ljava/lang/String;)[Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.util.Locale java.util.ResourceBundle.getLocale()
jnipp::LocalRef<JavaUtilLocale> JavaUtilResourceBundle::getLocale() const {
    static jnipp::Method<JavaUtilLocale> method(clazz(), "getLocale", "()Ljava/util/Locale;");
    return method.call(*this);
}

// private static java.util.ResourceBundle java.util.ResourceBundle.getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::getBundleImpl(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaLangClassLoader>& a2, const jnipp::Ref<JavaUtilResourceBundle_Control>& a3) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaLangString,JavaUtilLocale,JavaLangClassLoader,JavaUtilResourceBundle_Control> method(clazz(), "getBundleImpl", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1, a2, a3);
}

// private static final boolean java.util.ResourceBundle.checkList(java.util.List)
jboolean JavaUtilResourceBundle::checkList(const jnipp::Ref<JavaUtilList>& a0) {
    static jnipp::StaticMethod<jboolean,JavaUtilList> method(clazz(), "checkList", "(Ljava/util/List;)Z");
    return method.call(a0);
}

// private static final java.util.ResourceBundle java.util.ResourceBundle.findBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.List,int,java.util.ResourceBundle$Control,java.util.ResourceBundle)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::findBundle(const jnipp::Ref<JavaUtilResourceBundle_CacheKey>& a0, const jnipp::Ref<JavaUtilList>& a1, const jnipp::Ref<JavaUtilList>& a2, jint a3, const jnipp::Ref<JavaUtilResourceBundle_Control>& a4, const jnipp::Ref<JavaUtilResourceBundle>& a5) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaUtilResourceBundle_CacheKey,JavaUtilList,JavaUtilList,jint,JavaUtilResourceBundle_Control,JavaUtilResourceBundle> method(clazz(), "findBundle", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1, a2, a3, a4, a5);
}

// private static final java.util.ResourceBundle java.util.ResourceBundle.loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::loadBundle(const jnipp::Ref<JavaUtilResourceBundle_CacheKey>& a0, const jnipp::Ref<JavaUtilList>& a1, const jnipp::Ref<JavaUtilResourceBundle_Control>& a2, jboolean a3) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaUtilResourceBundle_CacheKey,JavaUtilList,JavaUtilResourceBundle_Control,jboolean> method(clazz(), "loadBundle", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/ResourceBundle$Control;Z)Ljava/util/ResourceBundle;");
    return method.call(a0, a1, a2, a3);
}

// private static final boolean java.util.ResourceBundle.isValidBundle(java.util.ResourceBundle)
jboolean JavaUtilResourceBundle::isValidBundle(const jnipp::Ref<JavaUtilResourceBundle>& a0) {
    static jnipp::StaticMethod<jboolean,JavaUtilResourceBundle> method(clazz(), "isValidBundle", "(Ljava/util/ResourceBundle;)Z");
    return method.call(a0);
}

// private static final boolean java.util.ResourceBundle.hasValidParentChain(java.util.ResourceBundle)
jboolean JavaUtilResourceBundle::hasValidParentChain(const jnipp::Ref<JavaUtilResourceBundle>& a0) {
    static jnipp::StaticMethod<jboolean,JavaUtilResourceBundle> method(clazz(), "hasValidParentChain", "(Ljava/util/ResourceBundle;)Z");
    return method.call(a0);
}

// private static final void java.util.ResourceBundle.throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)
void JavaUtilResourceBundle::throwMissingResourceException(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaLangThrowable>& a2) {
    static jnipp::StaticMethod<void,JavaLangString,JavaUtilLocale,JavaLangThrowable> method(clazz(), "throwMissingResourceException", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Throwable;)V");
    method.call(a0, a1, a2);
}

// private static final java.util.ResourceBundle java.util.ResourceBundle.findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::findBundleInCache(const jnipp::Ref<JavaUtilResourceBundle_CacheKey>& a0, const jnipp::Ref<JavaUtilResourceBundle_Control>& a1) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaUtilResourceBundle_CacheKey,JavaUtilResourceBundle_Control> method(clazz(), "findBundleInCache", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1);
}

// private static final java.util.ResourceBundle java.util.ResourceBundle.putBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle,java.util.ResourceBundle$Control)
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle::putBundleInCache(const jnipp::Ref<JavaUtilResourceBundle_CacheKey>& a0, const jnipp::Ref<JavaUtilResourceBundle>& a1, const jnipp::Ref<JavaUtilResourceBundle_Control>& a2) {
    static jnipp::StaticMethod<JavaUtilResourceBundle,JavaUtilResourceBundle_CacheKey,JavaUtilResourceBundle,JavaUtilResourceBundle_Control> method(clazz(), "putBundleInCache", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;");
    return method.call(a0, a1, a2);
}

// private static final void java.util.ResourceBundle.setExpirationTime(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)
void JavaUtilResourceBundle::setExpirationTime(const jnipp::Ref<JavaUtilResourceBundle_CacheKey>& a0, const jnipp::Ref<JavaUtilResourceBundle_Control>& a1) {
    static jnipp::StaticMethod<void,JavaUtilResourceBundle_CacheKey,JavaUtilResourceBundle_Control> method(clazz(), "setExpirationTime", "(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle$Control;)V");
    method.call(a0, a1);
}

// protected java.util.Set java.util.ResourceBundle.handleKeySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilResourceBundle::handleKeySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "handleKeySet", "()Ljava/util/Set;");
    return method.call(*this);
}
#undef INITIAL_CACHE_SIZE
const jnipp::StaticField<jint> JavaUtilResourceBundle::INITIAL_CACHE_SIZE ("java/util/ResourceBundle", "INITIAL_CACHE_SIZE", "I");
#undef NONEXISTENT_BUNDLE
const jnipp::StaticField<JavaUtilResourceBundle> JavaUtilResourceBundle::NONEXISTENT_BUNDLE ("java/util/ResourceBundle", "NONEXISTENT_BUNDLE", "Ljava/util/ResourceBundle;");
#undef cacheList
const jnipp::StaticField<JavaUtilConcurrentConcurrentMap> JavaUtilResourceBundle::cacheList ("java/util/ResourceBundle", "cacheList", "Ljava/util/concurrent/ConcurrentMap;");
#undef referenceQueue
const jnipp::StaticField<JavaLangRefReferenceQueue> JavaUtilResourceBundle::referenceQueue ("java/util/ResourceBundle", "referenceQueue", "Ljava/lang/ref/ReferenceQueue;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaUtilResourceBundle::$assertionsDisabled ("java/util/ResourceBundle", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilResourcesOpenListResourceBundle::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/resources/OpenListResourceBundle"));
    return cls;
}

// protected sun.util.resources.OpenListResourceBundle()
jnipp::LocalRef<SunUtilResourcesOpenListResourceBundle> SunUtilResourcesOpenListResourceBundle::construct() {
    static jnipp::Constructor<SunUtilResourcesOpenListResourceBundle> constructor(clazz(), "()V");
    return constructor.construct();
}

// public sun.util.resources.OpenListResourceBundle sun.util.resources.OpenListResourceBundle.getParent()
jnipp::LocalRef<SunUtilResourcesOpenListResourceBundle> SunUtilResourcesOpenListResourceBundle::getParent() const {
    static jnipp::Method<SunUtilResourcesOpenListResourceBundle> method(clazz(), "getParent", "()Lsun/util/resources/OpenListResourceBundle;");
    return method.call(*this);
}

// protected java.util.Map sun.util.resources.OpenListResourceBundle.createMap(int)
jnipp::LocalRef<JavaUtilMap> SunUtilResourcesOpenListResourceBundle::createMap(jint a0) const {
    static jnipp::Method<JavaUtilMap,jint> method(clazz(), "createMap", "(I)Ljava/util/Map;");
    return method.call(*this, a0);
}

// public java.util.Enumeration sun.util.resources.OpenListResourceBundle.getKeys()
jnipp::LocalRef<JavaUtilEnumeration> SunUtilResourcesOpenListResourceBundle::getKeys() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "getKeys", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.lang.Object sun.util.resources.OpenListResourceBundle.handleGetObject(java.lang.String)
jnipp::LocalRef<JavaLangObject> SunUtilResourcesOpenListResourceBundle::handleGetObject(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangString> method(clazz(), "handleGetObject", "(Ljava/lang/String;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.util.Set sun.util.resources.OpenListResourceBundle.handleGetKeys()
jnipp::LocalRef<JavaUtilSet> SunUtilResourcesOpenListResourceBundle::handleGetKeys() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "handleGetKeys", "()Ljava/util/Set;");
    return method.call(*this);
}

// void sun.util.resources.OpenListResourceBundle.loadLookupTablesIfNecessary()
void SunUtilResourcesOpenListResourceBundle::loadLookupTablesIfNecessary() const {
    static jnipp::Method<void> method(clazz(), "loadLookupTablesIfNecessary", "()V");
    method.call(*this);
}

// private synchronized void sun.util.resources.OpenListResourceBundle.loadLookup()
void SunUtilResourcesOpenListResourceBundle::loadLookup() const {
    static jnipp::Method<void> method(clazz(), "loadLookup", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunUtilLocaleLocaleExtensions::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/locale/LocaleExtensions"));
    return cls;
}

// private sun.util.locale.LocaleExtensions(java.lang.String,java.lang.Character,sun.util.locale.Extension)
jnipp::LocalRef<SunUtilLocaleLocaleExtensions> SunUtilLocaleLocaleExtensions::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangCharacter>& a1, const jnipp::Ref<SunUtilLocaleExtension>& a2) {
    static jnipp::Constructor<SunUtilLocaleLocaleExtensions,JavaLangString,JavaLangCharacter,SunUtilLocaleExtension> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Character;Lsun/util/locale/Extension;)V");
    return constructor.construct(a0, a1, a2);
}

// sun.util.locale.LocaleExtensions(java.util.Map,java.util.Set,java.util.Map)
jnipp::LocalRef<SunUtilLocaleLocaleExtensions> SunUtilLocaleLocaleExtensions::construct(const jnipp::Ref<JavaUtilMap>& a0, const jnipp::Ref<JavaUtilSet>& a1, const jnipp::Ref<JavaUtilMap>& a2) {
    static jnipp::Constructor<SunUtilLocaleLocaleExtensions,JavaUtilMap,JavaUtilSet,JavaUtilMap> constructor(clazz(), "(Ljava/util/Map;Ljava/util/Set;Ljava/util/Map;)V");
    return constructor.construct(a0, a1, a2);
}

// public boolean sun.util.locale.LocaleExtensions.equals(java.lang.Object)
jboolean SunUtilLocaleLocaleExtensions::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int sun.util.locale.LocaleExtensions.hashCode()
jint SunUtilLocaleLocaleExtensions::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public boolean sun.util.locale.LocaleExtensions.isEmpty()
jboolean SunUtilLocaleLocaleExtensions::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public sun.util.locale.Extension sun.util.locale.LocaleExtensions.getExtension(java.lang.Character)
jnipp::LocalRef<SunUtilLocaleExtension> SunUtilLocaleLocaleExtensions::getExtension(const jnipp::Ref<JavaLangCharacter>& a0) const {
    static jnipp::Method<SunUtilLocaleExtension,JavaLangCharacter> method(clazz(), "getExtension", "(Ljava/lang/Character;)Lsun/util/locale/Extension;");
    return method.call(*this, a0);
}

// public java.util.Set sun.util.locale.LocaleExtensions.getUnicodeLocaleAttributes()
jnipp::LocalRef<JavaUtilSet> SunUtilLocaleLocaleExtensions::getUnicodeLocaleAttributes() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "getUnicodeLocaleAttributes", "()Ljava/util/Set;");
    return method.call(*this);
}

// public java.lang.String sun.util.locale.LocaleExtensions.getUnicodeLocaleType(java.lang.String)
jnipp::LocalRef<JavaLangString> SunUtilLocaleLocaleExtensions::getUnicodeLocaleType(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getUnicodeLocaleType", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.util.Set sun.util.locale.LocaleExtensions.getUnicodeLocaleKeys()
jnipp::LocalRef<JavaUtilSet> SunUtilLocaleLocaleExtensions::getUnicodeLocaleKeys() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "getUnicodeLocaleKeys", "()Ljava/util/Set;");
    return method.call(*this);
}

// public static boolean sun.util.locale.LocaleExtensions.isValidKey(char)
jboolean SunUtilLocaleLocaleExtensions::isValidKey(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isValidKey", "(C)Z");
    return method.call(a0);
}

// public java.lang.String sun.util.locale.LocaleExtensions.getExtensionValue(java.lang.Character)
jnipp::LocalRef<JavaLangString> SunUtilLocaleLocaleExtensions::getExtensionValue(const jnipp::Ref<JavaLangCharacter>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangCharacter> method(clazz(), "getExtensionValue", "(Ljava/lang/Character;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.util.Set sun.util.locale.LocaleExtensions.getKeys()
jnipp::LocalRef<JavaUtilSet> SunUtilLocaleLocaleExtensions::getKeys() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "getKeys", "()Ljava/util/Set;");
    return method.call(*this);
}

// public java.lang.String sun.util.locale.LocaleExtensions.getID()
jnipp::LocalRef<JavaLangString> SunUtilLocaleLocaleExtensions::getID() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getID", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static boolean sun.util.locale.LocaleExtensions.isValidUnicodeLocaleKey(java.lang.String)
jboolean SunUtilLocaleLocaleExtensions::isValidUnicodeLocaleKey(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "isValidUnicodeLocaleKey", "(Ljava/lang/String;)Z");
    return method.call(a0);
}

// private static java.lang.String sun.util.locale.LocaleExtensions.toID(java.util.SortedMap)
jnipp::LocalRef<JavaLangString> SunUtilLocaleLocaleExtensions::toID(const jnipp::Ref<JavaUtilSortedMap>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaUtilSortedMap> method(clazz(), "toID", "(Ljava/util/SortedMap;)Ljava/lang/String;");
    return method.call(a0);
}
#undef CALENDAR_JAPANESE
const jnipp::StaticField<SunUtilLocaleLocaleExtensions> SunUtilLocaleLocaleExtensions::CALENDAR_JAPANESE ("sun/util/locale/LocaleExtensions", "CALENDAR_JAPANESE", "Lsun/util/locale/LocaleExtensions;");
#undef NUMBER_THAI
const jnipp::StaticField<SunUtilLocaleLocaleExtensions> SunUtilLocaleLocaleExtensions::NUMBER_THAI ("sun/util/locale/LocaleExtensions", "NUMBER_THAI", "Lsun/util/locale/LocaleExtensions;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> SunUtilLocaleLocaleExtensions::$assertionsDisabled ("sun/util/locale/LocaleExtensions", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaTextFormat::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/Format"));
    return cls;
}

// protected java.text.Format()
jnipp::LocalRef<JavaTextFormat> JavaTextFormat::construct() {
    static jnipp::Constructor<JavaTextFormat> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Object java.text.Format.clone()
jnipp::LocalRef<JavaLangObject> JavaTextFormat::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public final java.lang.String java.text.Format.format(java.lang.Object)
jnipp::LocalRef<JavaLangString> JavaTextFormat::format(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangObject> method(clazz(), "format", "(Ljava/lang/Object;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.text.AttributedCharacterIterator java.text.Format.formatToCharacterIterator(java.lang.Object)
jnipp::LocalRef<JavaTextAttributedCharacterIterator> JavaTextFormat::formatToCharacterIterator(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaTextAttributedCharacterIterator,JavaLangObject> method(clazz(), "formatToCharacterIterator", "(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;");
    return method.call(*this, a0);
}

// public java.lang.Object java.text.Format.parseObject(java.lang.String) throws java.text.ParseException
jnipp::LocalRef<JavaLangObject> JavaTextFormat::parseObject(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangString> method(clazz(), "parseObject", "(Ljava/lang/String;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// java.text.AttributedCharacterIterator java.text.Format.createAttributedCharacterIterator(java.text.AttributedCharacterIterator,java.text.AttributedCharacterIterator$Attribute,java.lang.Object)
jnipp::LocalRef<JavaTextAttributedCharacterIterator> JavaTextFormat::createAttributedCharacterIterator(const jnipp::Ref<JavaTextAttributedCharacterIterator>& a0, const jnipp::Ref<JavaTextAttributedCharacterIterator_Attribute>& a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<JavaTextAttributedCharacterIterator,JavaTextAttributedCharacterIterator,JavaTextAttributedCharacterIterator_Attribute,JavaLangObject> method(clazz(), "createAttributedCharacterIterator", "(Ljava/text/AttributedCharacterIterator;Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;");
    return method.call(*this, a0, a1, a2);
}

// java.text.AttributedCharacterIterator java.text.Format.createAttributedCharacterIterator(java.lang.String,java.text.AttributedCharacterIterator$Attribute,java.lang.Object)
jnipp::LocalRef<JavaTextAttributedCharacterIterator> JavaTextFormat::createAttributedCharacterIterator(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaTextAttributedCharacterIterator_Attribute>& a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<JavaTextAttributedCharacterIterator,JavaLangString,JavaTextAttributedCharacterIterator_Attribute,JavaLangObject> method(clazz(), "createAttributedCharacterIterator", "(Ljava/lang/String;Ljava/text/AttributedCharacterIterator$Attribute;Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;");
    return method.call(*this, a0, a1, a2);
}

// java.text.AttributedCharacterIterator java.text.Format.createAttributedCharacterIterator(java.text.AttributedCharacterIterator[])
jnipp::LocalRef<JavaTextAttributedCharacterIterator> JavaTextFormat::createAttributedCharacterIterator(const jnipp::Ref<jnipp::Array<JavaTextAttributedCharacterIterator>>& a0) const {
    static jnipp::Method<JavaTextAttributedCharacterIterator,jnipp::Array<JavaTextAttributedCharacterIterator>> method(clazz(), "createAttributedCharacterIterator", "([Ljava/text/AttributedCharacterIterator;)Ljava/text/AttributedCharacterIterator;");
    return method.call(*this, a0);
}

// java.text.AttributedCharacterIterator java.text.Format.createAttributedCharacterIterator(java.lang.String)
jnipp::LocalRef<JavaTextAttributedCharacterIterator> JavaTextFormat::createAttributedCharacterIterator(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaTextAttributedCharacterIterator,JavaLangString> method(clazz(), "createAttributedCharacterIterator", "(Ljava/lang/String;)Ljava/text/AttributedCharacterIterator;");
    return method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaTextFormat::serialVersionUID ("java/text/Format", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaTextMessageFormat::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/MessageFormat"));
    return cls;
}

// public java.text.MessageFormat(java.lang.String)
jnipp::LocalRef<JavaTextMessageFormat> JavaTextMessageFormat::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaTextMessageFormat,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.text.MessageFormat(java.lang.String,java.util.Locale)
jnipp::LocalRef<JavaTextMessageFormat> JavaTextMessageFormat::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1) {
    static jnipp::Constructor<JavaTextMessageFormat,JavaLangString,JavaUtilLocale> constructor(clazz(), "(Ljava/lang/String;Ljava/util/Locale;)V");
    return constructor.construct(a0, a1);
}

// public boolean java.text.MessageFormat.equals(java.lang.Object)
jboolean JavaTextMessageFormat::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// private void java.text.MessageFormat.append(java.lang.StringBuffer,java.text.CharacterIterator)
void JavaTextMessageFormat::append(const jnipp::Ref<JavaLangStringBuffer>& a0, const jnipp::Ref<JavaTextCharacterIterator>& a1) const {
    static jnipp::Method<void,JavaLangStringBuffer,JavaTextCharacterIterator> method(clazz(), "append", "(Ljava/lang/StringBuffer;Ljava/text/CharacterIterator;)V");
    method.call(*this, a0, a1);
}

// public int java.text.MessageFormat.hashCode()
jint JavaTextMessageFormat::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object java.text.MessageFormat.clone()
jnipp::LocalRef<JavaLangObject> JavaTextMessageFormat::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public final java.lang.StringBuffer java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)
jnipp::LocalRef<JavaLangStringBuffer> JavaTextMessageFormat::format(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0, const jnipp::Ref<JavaLangStringBuffer>& a1, const jnipp::Ref<JavaTextFieldPosition>& a2) const {
    static jnipp::Method<JavaLangStringBuffer,jnipp::Array<JavaLangObject>,JavaLangStringBuffer,JavaTextFieldPosition> method(clazz(), "format", "([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1, a2);
}

// public static java.lang.String java.text.MessageFormat.format(java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaLangString> JavaTextMessageFormat::format(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
    return method.call(a0, a1);
}

// public final java.lang.StringBuffer java.text.MessageFormat.format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)
jnipp::LocalRef<JavaLangStringBuffer> JavaTextMessageFormat::format(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangStringBuffer>& a1, const jnipp::Ref<JavaTextFieldPosition>& a2) const {
    static jnipp::Method<JavaLangStringBuffer,JavaLangObject,JavaLangStringBuffer,JavaTextFieldPosition> method(clazz(), "format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1, a2);
}

// private void java.text.MessageFormat.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaTextMessageFormat::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// public java.lang.Object[] java.text.MessageFormat.parse(java.lang.String,java.text.ParsePosition)
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaTextMessageFormat::parse(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaTextParsePosition>& a1) const {
    static jnipp::Method<jnipp::Array<JavaLangObject>,JavaLangString,JavaTextParsePosition> method(clazz(), "parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)[Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public java.lang.Object[] java.text.MessageFormat.parse(java.lang.String) throws java.text.ParseException
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaTextMessageFormat::parse(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangObject>,JavaLangString> method(clazz(), "parse", "(Ljava/lang/String;)[Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.util.Locale java.text.MessageFormat.getLocale()
jnipp::LocalRef<JavaUtilLocale> JavaTextMessageFormat::getLocale() const {
    static jnipp::Method<JavaUtilLocale> method(clazz(), "getLocale", "()Ljava/util/Locale;");
    return method.call(*this);
}

// public java.text.Format[] java.text.MessageFormat.getFormats()
jnipp::LocalRef<jnipp::Array<JavaTextFormat>> JavaTextMessageFormat::getFormats() const {
    static jnipp::Method<jnipp::Array<JavaTextFormat>> method(clazz(), "getFormats", "()[Ljava/text/Format;");
    return method.call(*this);
}

// public void java.text.MessageFormat.setLocale(java.util.Locale)
void JavaTextMessageFormat::setLocale(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<void,JavaUtilLocale> method(clazz(), "setLocale", "(Ljava/util/Locale;)V");
    method.call(*this, a0);
}

// public void java.text.MessageFormat.setFormat(int,java.text.Format)
void JavaTextMessageFormat::setFormat(jint a0, const jnipp::Ref<JavaTextFormat>& a1) const {
    static jnipp::Method<void,jint,JavaTextFormat> method(clazz(), "setFormat", "(ILjava/text/Format;)V");
    method.call(*this, a0, a1);
}

// public void java.text.MessageFormat.applyPattern(java.lang.String)
void JavaTextMessageFormat::applyPattern(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "applyPattern", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public java.lang.String java.text.MessageFormat.toPattern()
jnipp::LocalRef<JavaLangString> JavaTextMessageFormat::toPattern() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toPattern", "()Ljava/lang/String;");
    return method.call(*this);
}

// public void java.text.MessageFormat.setFormatsByArgumentIndex(java.text.Format[])
void JavaTextMessageFormat::setFormatsByArgumentIndex(const jnipp::Ref<jnipp::Array<JavaTextFormat>>& a0) const {
    static jnipp::Method<void,jnipp::Array<JavaTextFormat>> method(clazz(), "setFormatsByArgumentIndex", "([Ljava/text/Format;)V");
    method.call(*this, a0);
}

// public void java.text.MessageFormat.setFormats(java.text.Format[])
void JavaTextMessageFormat::setFormats(const jnipp::Ref<jnipp::Array<JavaTextFormat>>& a0) const {
    static jnipp::Method<void,jnipp::Array<JavaTextFormat>> method(clazz(), "setFormats", "([Ljava/text/Format;)V");
    method.call(*this, a0);
}

// public void java.text.MessageFormat.setFormatByArgumentIndex(int,java.text.Format)
void JavaTextMessageFormat::setFormatByArgumentIndex(jint a0, const jnipp::Ref<JavaTextFormat>& a1) const {
    static jnipp::Method<void,jint,JavaTextFormat> method(clazz(), "setFormatByArgumentIndex", "(ILjava/text/Format;)V");
    method.call(*this, a0, a1);
}

// public java.text.Format[] java.text.MessageFormat.getFormatsByArgumentIndex()
jnipp::LocalRef<jnipp::Array<JavaTextFormat>> JavaTextMessageFormat::getFormatsByArgumentIndex() const {
    static jnipp::Method<jnipp::Array<JavaTextFormat>> method(clazz(), "getFormatsByArgumentIndex", "()[Ljava/text/Format;");
    return method.call(*this);
}

// public java.text.AttributedCharacterIterator java.text.MessageFormat.formatToCharacterIterator(java.lang.Object)
jnipp::LocalRef<JavaTextAttributedCharacterIterator> JavaTextMessageFormat::formatToCharacterIterator(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaTextAttributedCharacterIterator,JavaLangObject> method(clazz(), "formatToCharacterIterator", "(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;");
    return method.call(*this, a0);
}

// public java.lang.Object java.text.MessageFormat.parseObject(java.lang.String,java.text.ParsePosition)
jnipp::LocalRef<JavaLangObject> JavaTextMessageFormat::parseObject(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaTextParsePosition>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangString,JavaTextParsePosition> method(clazz(), "parseObject", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// private java.lang.StringBuffer java.text.MessageFormat.subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)
jnipp::LocalRef<JavaLangStringBuffer> JavaTextMessageFormat::subformat(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0, const jnipp::Ref<JavaLangStringBuffer>& a1, const jnipp::Ref<JavaTextFieldPosition>& a2, const jnipp::Ref<JavaUtilList>& a3) const {
    static jnipp::Method<JavaLangStringBuffer,jnipp::Array<JavaLangObject>,JavaLangStringBuffer,JavaTextFieldPosition,JavaUtilList> method(clazz(), "subformat", "([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;Ljava/util/List;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0, a1, a2, a3);
}

// private void java.text.MessageFormat.makeFormat(int,int,java.lang.StringBuilder[])
void JavaTextMessageFormat::makeFormat(jint a0, jint a1, const jnipp::Ref<jnipp::Array<JavaLangStringBuilder>>& a2) const {
    static jnipp::Method<void,jint,jint,jnipp::Array<JavaLangStringBuilder>> method(clazz(), "makeFormat", "(II[Ljava/lang/StringBuilder;)V");
    method.call(*this, a0, a1, a2);
}

// private static final int java.text.MessageFormat.findKeyword(java.lang.String,java.lang.String[])
jint JavaTextMessageFormat::findKeyword(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangString>>& a1) {
    static jnipp::StaticMethod<jint,JavaLangString,jnipp::Array<JavaLangString>> method(clazz(), "findKeyword", "(Ljava/lang/String;[Ljava/lang/String;)I");
    return method.call(a0, a1);
}

// private static final void java.text.MessageFormat.copyAndFixQuotes(java.lang.String,int,int,java.lang.StringBuilder)
void JavaTextMessageFormat::copyAndFixQuotes(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2, const jnipp::Ref<JavaLangStringBuilder>& a3) {
    static jnipp::StaticMethod<void,JavaLangString,jint,jint,JavaLangStringBuilder> method(clazz(), "copyAndFixQuotes", "(Ljava/lang/String;IILjava/lang/StringBuilder;)V");
    method.call(a0, a1, a2, a3);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaTextMessageFormat::serialVersionUID ("java/text/MessageFormat", "serialVersionUID", "J");
#undef INITIAL_FORMATS
const jnipp::StaticField<jint> JavaTextMessageFormat::INITIAL_FORMATS ("java/text/MessageFormat", "INITIAL_FORMATS", "I");
#undef SEG_RAW
const jnipp::StaticField<jint> JavaTextMessageFormat::SEG_RAW ("java/text/MessageFormat", "SEG_RAW", "I");
#undef SEG_INDEX
const jnipp::StaticField<jint> JavaTextMessageFormat::SEG_INDEX ("java/text/MessageFormat", "SEG_INDEX", "I");
#undef SEG_TYPE
const jnipp::StaticField<jint> JavaTextMessageFormat::SEG_TYPE ("java/text/MessageFormat", "SEG_TYPE", "I");
#undef SEG_MODIFIER
const jnipp::StaticField<jint> JavaTextMessageFormat::SEG_MODIFIER ("java/text/MessageFormat", "SEG_MODIFIER", "I");
#undef TYPE_NULL
const jnipp::StaticField<jint> JavaTextMessageFormat::TYPE_NULL ("java/text/MessageFormat", "TYPE_NULL", "I");
#undef TYPE_NUMBER
const jnipp::StaticField<jint> JavaTextMessageFormat::TYPE_NUMBER ("java/text/MessageFormat", "TYPE_NUMBER", "I");
#undef TYPE_DATE
const jnipp::StaticField<jint> JavaTextMessageFormat::TYPE_DATE ("java/text/MessageFormat", "TYPE_DATE", "I");
#undef TYPE_TIME
const jnipp::StaticField<jint> JavaTextMessageFormat::TYPE_TIME ("java/text/MessageFormat", "TYPE_TIME", "I");
#undef TYPE_CHOICE
const jnipp::StaticField<jint> JavaTextMessageFormat::TYPE_CHOICE ("java/text/MessageFormat", "TYPE_CHOICE", "I");
#undef TYPE_KEYWORDS
const jnipp::StaticField<jnipp::Array<JavaLangString>> JavaTextMessageFormat::TYPE_KEYWORDS ("java/text/MessageFormat", "TYPE_KEYWORDS", "[Ljava/lang/String;");
#undef MODIFIER_DEFAULT
const jnipp::StaticField<jint> JavaTextMessageFormat::MODIFIER_DEFAULT ("java/text/MessageFormat", "MODIFIER_DEFAULT", "I");
#undef MODIFIER_CURRENCY
const jnipp::StaticField<jint> JavaTextMessageFormat::MODIFIER_CURRENCY ("java/text/MessageFormat", "MODIFIER_CURRENCY", "I");
#undef MODIFIER_PERCENT
const jnipp::StaticField<jint> JavaTextMessageFormat::MODIFIER_PERCENT ("java/text/MessageFormat", "MODIFIER_PERCENT", "I");
#undef MODIFIER_INTEGER
const jnipp::StaticField<jint> JavaTextMessageFormat::MODIFIER_INTEGER ("java/text/MessageFormat", "MODIFIER_INTEGER", "I");
#undef NUMBER_MODIFIER_KEYWORDS
const jnipp::StaticField<jnipp::Array<JavaLangString>> JavaTextMessageFormat::NUMBER_MODIFIER_KEYWORDS ("java/text/MessageFormat", "NUMBER_MODIFIER_KEYWORDS", "[Ljava/lang/String;");
#undef MODIFIER_SHORT
const jnipp::StaticField<jint> JavaTextMessageFormat::MODIFIER_SHORT ("java/text/MessageFormat", "MODIFIER_SHORT", "I");
#undef MODIFIER_MEDIUM
const jnipp::StaticField<jint> JavaTextMessageFormat::MODIFIER_MEDIUM ("java/text/MessageFormat", "MODIFIER_MEDIUM", "I");
#undef MODIFIER_LONG
const jnipp::StaticField<jint> JavaTextMessageFormat::MODIFIER_LONG ("java/text/MessageFormat", "MODIFIER_LONG", "I");
#undef MODIFIER_FULL
const jnipp::StaticField<jint> JavaTextMessageFormat::MODIFIER_FULL ("java/text/MessageFormat", "MODIFIER_FULL", "I");
#undef DATE_TIME_MODIFIER_KEYWORDS
const jnipp::StaticField<jnipp::Array<JavaLangString>> JavaTextMessageFormat::DATE_TIME_MODIFIER_KEYWORDS ("java/text/MessageFormat", "DATE_TIME_MODIFIER_KEYWORDS", "[Ljava/lang/String;");
#undef DATE_TIME_MODIFIERS
const jnipp::StaticField<jnipp::Array<jint>> JavaTextMessageFormat::DATE_TIME_MODIFIERS ("java/text/MessageFormat", "DATE_TIME_MODIFIERS", "[I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilLocale_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Locale$1"));
    return cls;
}
#undef $SwitchMap$java$util$Locale$Category
const jnipp::StaticField<jnipp::Array<jint>> JavaUtilLocale_1::$SwitchMap$java$util$Locale$Category ("java/util/Locale$1", "$SwitchMap$java$util$Locale$Category", "[I");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangEnum::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Enum"));
    return cls;
}

// protected java.lang.Enum(java.lang.String,int)
jnipp::LocalRef<JavaLangEnum> JavaLangEnum::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaLangEnum,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public final java.lang.String java.lang.Enum.name()
jnipp::LocalRef<JavaLangString> JavaLangEnum::name() const {
    static jnipp::Method<JavaLangString> method(clazz(), "name", "()Ljava/lang/String;");
    return method.call(*this);
}

// protected final void java.lang.Enum.finalize()
void JavaLangEnum::finalize() const {
    static jnipp::Method<void> method(clazz(), "finalize", "()V");
    method.call(*this);
}

// public final boolean java.lang.Enum.equals(java.lang.Object)
jboolean JavaLangEnum::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public final int java.lang.Enum.hashCode()
jint JavaLangEnum::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// protected final java.lang.Object java.lang.Enum.clone() throws java.lang.CloneNotSupportedException
jnipp::LocalRef<JavaLangObject> JavaLangEnum::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public final int java.lang.Enum.compareTo(java.lang.Enum)
jint JavaLangEnum::compareTo(const jnipp::Ref<JavaLangEnum>& a0) const {
    static jnipp::Method<jint,JavaLangEnum> method(clazz(), "compareTo", "(Ljava/lang/Enum;)I");
    return method.call(*this, a0);
}

// public static java.lang.Enum java.lang.Enum.valueOf(java.lang.Class,java.lang.String)
jnipp::LocalRef<JavaLangEnum> JavaLangEnum::valueOf(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaLangEnum,JavaLangClass,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
    return method.call(a0, a1);
}

// public final java.lang.Class java.lang.Enum.getDeclaringClass()
jnipp::LocalRef<JavaLangClass> JavaLangEnum::getDeclaringClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getDeclaringClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private void java.lang.Enum.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaLangEnum::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// public final int java.lang.Enum.ordinal()
jint JavaLangEnum::ordinal() const {
    static jnipp::Method<jint> method(clazz(), "ordinal", "()I");
    return method.call(*this);
}

// private void java.lang.Enum.readObjectNoData() throws java.io.ObjectStreamException
void JavaLangEnum::readObjectNoData() const {
    static jnipp::Method<void> method(clazz(), "readObjectNoData", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilLocale_Category::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Locale$Category"));
    return cls;
}

// private java.util.Locale$Category(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
jnipp::LocalRef<JavaUtilLocale_Category> JavaUtilLocale_Category::construct(const jnipp::Ref<JavaLangString>& a0, jint a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaLangString>& a4, const jnipp::Ref<JavaLangString>& a5) {
    static jnipp::Constructor<JavaUtilLocale_Category,JavaLangString,jint,JavaLangString,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5);
}

// public static java.util.Locale$Category[] java.util.Locale$Category.values()
jnipp::LocalRef<jnipp::Array<JavaUtilLocale_Category>> JavaUtilLocale_Category::values() {
    static jnipp::StaticMethod<jnipp::Array<JavaUtilLocale_Category>> method(clazz(), "values", "()[Ljava/util/Locale$Category;");
    return method.call();
}

// public static java.util.Locale$Category java.util.Locale$Category.valueOf(java.lang.String)
jnipp::LocalRef<JavaUtilLocale_Category> JavaUtilLocale_Category::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilLocale_Category,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/util/Locale$Category;");
    return method.call(a0);
}
#undef DISPLAY
const jnipp::StaticField<JavaUtilLocale_Category> JavaUtilLocale_Category::DISPLAY ("java/util/Locale$Category", "DISPLAY", "Ljava/util/Locale$Category;");
#undef FORMAT
const jnipp::StaticField<JavaUtilLocale_Category> JavaUtilLocale_Category::FORMAT ("java/util/Locale$Category", "FORMAT", "Ljava/util/Locale$Category;");
#undef $VALUES
const jnipp::StaticField<jnipp::Array<JavaUtilLocale_Category>> JavaUtilLocale_Category::$VALUES ("java/util/Locale$Category", "$VALUES", "[Ljava/util/Locale$Category;");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilLocaleLocaleObjectCache::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/locale/LocaleObjectCache"));
    return cls;
}

// public sun.util.locale.LocaleObjectCache()
jnipp::LocalRef<SunUtilLocaleLocaleObjectCache> SunUtilLocaleLocaleObjectCache::construct() {
    static jnipp::Constructor<SunUtilLocaleLocaleObjectCache> constructor(clazz(), "()V");
    return constructor.construct();
}

// public sun.util.locale.LocaleObjectCache(int,float,int)
jnipp::LocalRef<SunUtilLocaleLocaleObjectCache> SunUtilLocaleLocaleObjectCache::construct(jint a0, jfloat a1, jint a2) {
    static jnipp::Constructor<SunUtilLocaleLocaleObjectCache,jint,jfloat,jint> constructor(clazz(), "(IFI)V");
    return constructor.construct(a0, a1, a2);
}

// public java.lang.Object sun.util.locale.LocaleObjectCache.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> SunUtilLocaleLocaleObjectCache::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// protected java.lang.Object sun.util.locale.LocaleObjectCache.put(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> SunUtilLocaleLocaleObjectCache::put(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// private void sun.util.locale.LocaleObjectCache.cleanStaleEntries()
void SunUtilLocaleLocaleObjectCache::cleanStaleEntries() const {
    static jnipp::Method<void> method(clazz(), "cleanStaleEntries", "()V");
    method.call(*this);
}

// protected java.lang.Object sun.util.locale.LocaleObjectCache.normalizeKey(java.lang.Object)
jnipp::LocalRef<JavaLangObject> SunUtilLocaleLocaleObjectCache::normalizeKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "normalizeKey", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilLocale_Cache::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Locale$Cache"));
    return cls;
}

// java.util.Locale$Cache(java.util.Locale$1)
jnipp::LocalRef<JavaUtilLocale_Cache> JavaUtilLocale_Cache::construct(const jnipp::Ref<JavaUtilLocale_1>& a0) {
    static jnipp::Constructor<JavaUtilLocale_Cache,JavaUtilLocale_1> constructor(clazz(), "(Ljava/util/Locale$1;)V");
    return constructor.construct(a0);
}

// private java.util.Locale$Cache()
jnipp::LocalRef<JavaUtilLocale_Cache> JavaUtilLocale_Cache::construct() {
    static jnipp::Constructor<JavaUtilLocale_Cache> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected java.util.Locale java.util.Locale$Cache.createObject(java.util.Locale$LocaleKey)
jnipp::LocalRef<JavaUtilLocale> JavaUtilLocale_Cache::createObject(const jnipp::Ref<JavaUtilLocale_LocaleKey>& a0) const {
    static jnipp::Method<JavaUtilLocale,JavaUtilLocale_LocaleKey> method(clazz(), "createObject", "(Ljava/util/Locale$LocaleKey;)Ljava/util/Locale;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClass::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Class"));
    return cls;
}

// private java.lang.Class()
jnipp::LocalRef<JavaLangClass> JavaLangClass::construct() {
    static jnipp::Constructor<JavaLangClass> constructor(clazz(), "()V");
    return constructor.construct();
}

// private void java.lang.Class.checkPackageAccess(java.lang.ClassLoader,boolean)
void JavaLangClass::checkPackageAccess(const jnipp::Ref<JavaLangClassLoader>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaLangClassLoader,jboolean> method(clazz(), "checkPackageAccess", "(Ljava/lang/ClassLoader;Z)V");
    method.call(*this, a0, a1);
}

// public static java.lang.Class java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaLangClass::forName(const jnipp::Ref<JavaLangString>& a0, jboolean a1, const jnipp::Ref<JavaLangClassLoader>& a2) {
    static jnipp::StaticMethod<JavaLangClass,JavaLangString,jboolean,JavaLangClassLoader> method(clazz(), "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
    return method.call(a0, a1, a2);
}

// public static java.lang.Class java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaLangClass::forName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangClass,JavaLangString> method(clazz(), "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(a0);
}

// private static native java.lang.Class java.lang.Class.forName0(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaLangClass::forName0(const jnipp::Ref<JavaLangString>& a0, jboolean a1, const jnipp::Ref<JavaLangClassLoader>& a2) {
    static jnipp::StaticMethod<JavaLangClass,JavaLangString,jboolean,JavaLangClassLoader> method(clazz(), "forName0", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
    return method.call(a0, a1, a2);
}

// public native boolean java.lang.Class.isAssignableFrom(java.lang.Class)
jboolean JavaLangClass::isAssignableFrom(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<jboolean,JavaLangClass> method(clazz(), "isAssignableFrom", "(Ljava/lang/Class;)Z");
    return method.call(*this, a0);
}

// public native boolean java.lang.Class.isInstance(java.lang.Object)
jboolean JavaLangClass::isInstance(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "isInstance", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public native int java.lang.Class.getModifiers()
jint JavaLangClass::getModifiers() const {
    static jnipp::Method<jint> method(clazz(), "getModifiers", "()I");
    return method.call(*this);
}

// public native boolean java.lang.Class.isInterface()
jboolean JavaLangClass::isInterface() const {
    static jnipp::Method<jboolean> method(clazz(), "isInterface", "()Z");
    return method.call(*this);
}

// public native boolean java.lang.Class.isArray()
jboolean JavaLangClass::isArray() const {
    static jnipp::Method<jboolean> method(clazz(), "isArray", "()Z");
    return method.call(*this);
}

// public native boolean java.lang.Class.isPrimitive()
jboolean JavaLangClass::isPrimitive() const {
    static jnipp::Method<jboolean> method(clazz(), "isPrimitive", "()Z");
    return method.call(*this);
}

// public native java.lang.Class java.lang.Class.getSuperclass()
jnipp::LocalRef<JavaLangClass> JavaLangClass::getSuperclass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getSuperclass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// public native java.lang.Class java.lang.Class.getComponentType()
jnipp::LocalRef<JavaLangClass> JavaLangClass::getComponentType() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getComponentType", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private static native void java.lang.Class.registerNatives()
void JavaLangClass::registerNatives() {
    static jnipp::StaticMethod<void> method(clazz(), "registerNatives", "()V");
    method.call();
}

// public java.lang.String java.lang.Class.getName()
jnipp::LocalRef<JavaLangString> JavaLangClass::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// java.util.Map java.lang.Class.enumConstantDirectory()
jnipp::LocalRef<JavaUtilMap> JavaLangClass::enumConstantDirectory() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "enumConstantDirectory", "()Ljava/util/Map;");
    return method.call(*this);
}

// public java.lang.Object java.lang.Class.newInstance() throws java.lang.InstantiationException,java.lang.IllegalAccessException
jnipp::LocalRef<JavaLangObject> JavaLangClass::newInstance() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "newInstance", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public boolean java.lang.Class.isAnnotation()
jboolean JavaLangClass::isAnnotation() const {
    static jnipp::Method<jboolean> method(clazz(), "isAnnotation", "()Z");
    return method.call(*this);
}

// public boolean java.lang.Class.isSynthetic()
jboolean JavaLangClass::isSynthetic() const {
    static jnipp::Method<jboolean> method(clazz(), "isSynthetic", "()Z");
    return method.call(*this);
}

// private native java.lang.String java.lang.Class.getName0()
jnipp::LocalRef<JavaLangString> JavaLangClass::getName0() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName0", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.ClassLoader java.lang.Class.getClassLoader()
jnipp::LocalRef<JavaLangClassLoader> JavaLangClass::getClassLoader() const {
    static jnipp::Method<JavaLangClassLoader> method(clazz(), "getClassLoader", "()Ljava/lang/ClassLoader;");
    return method.call(*this);
}

// native java.lang.ClassLoader java.lang.Class.getClassLoader0()
jnipp::LocalRef<JavaLangClassLoader> JavaLangClass::getClassLoader0() const {
    static jnipp::Method<JavaLangClassLoader> method(clazz(), "getClassLoader0", "()Ljava/lang/ClassLoader;");
    return method.call(*this);
}

// public java.lang.reflect.TypeVariable[] java.lang.Class.getTypeParameters()
jnipp::LocalRef<jnipp::Array<JavaLangReflectTypeVariable>> JavaLangClass::getTypeParameters() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectTypeVariable>> method(clazz(), "getTypeParameters", "()[Ljava/lang/reflect/TypeVariable;");
    return method.call(*this);
}

// public java.lang.reflect.Type java.lang.Class.getGenericSuperclass()
jnipp::LocalRef<JavaLangReflectType> JavaLangClass::getGenericSuperclass() const {
    static jnipp::Method<JavaLangReflectType> method(clazz(), "getGenericSuperclass", "()Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public java.lang.Package java.lang.Class.getPackage()
jnipp::LocalRef<JavaLangPackage> JavaLangClass::getPackage() const {
    static jnipp::Method<JavaLangPackage> method(clazz(), "getPackage", "()Ljava/lang/Package;");
    return method.call(*this);
}

// public native java.lang.Class[] java.lang.Class.getInterfaces()
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangClass::getInterfaces() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getInterfaces", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.reflect.Type[] java.lang.Class.getGenericInterfaces()
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> JavaLangClass::getGenericInterfaces() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>> method(clazz(), "getGenericInterfaces", "()[Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public native java.lang.Object[] java.lang.Class.getSigners()
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaLangClass::getSigners() const {
    static jnipp::Method<jnipp::Array<JavaLangObject>> method(clazz(), "getSigners", "()[Ljava/lang/Object;");
    return method.call(*this);
}

// native void java.lang.Class.setSigners(java.lang.Object[])
void JavaLangClass::setSigners(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0) const {
    static jnipp::Method<void,jnipp::Array<JavaLangObject>> method(clazz(), "setSigners", "([Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public java.lang.reflect.Method java.lang.Class.getEnclosingMethod()
jnipp::LocalRef<JavaLangReflectMethod> JavaLangClass::getEnclosingMethod() const {
    static jnipp::Method<JavaLangReflectMethod> method(clazz(), "getEnclosingMethod", "()Ljava/lang/reflect/Method;");
    return method.call(*this);
}

// private native java.lang.Object[] java.lang.Class.getEnclosingMethod0()
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaLangClass::getEnclosingMethod0() const {
    static jnipp::Method<jnipp::Array<JavaLangObject>> method(clazz(), "getEnclosingMethod0", "()[Ljava/lang/Object;");
    return method.call(*this);
}

// private java.lang.Class$EnclosingMethodInfo java.lang.Class.getEnclosingMethodInfo()
jnipp::LocalRef<JavaLangClass_EnclosingMethodInfo> JavaLangClass::getEnclosingMethodInfo() const {
    static jnipp::Method<JavaLangClass_EnclosingMethodInfo> method(clazz(), "getEnclosingMethodInfo", "()Ljava/lang/Class$EnclosingMethodInfo;");
    return method.call(*this);
}

// private static java.lang.Class java.lang.Class.toClass(java.lang.reflect.Type)
jnipp::LocalRef<JavaLangClass> JavaLangClass::toClass(const jnipp::Ref<JavaLangReflectType>& a0) {
    static jnipp::StaticMethod<JavaLangClass,JavaLangReflectType> method(clazz(), "toClass", "(Ljava/lang/reflect/Type;)Ljava/lang/Class;");
    return method.call(a0);
}

// public java.lang.reflect.Constructor java.lang.Class.getEnclosingConstructor()
jnipp::LocalRef<JavaLangReflectConstructor> JavaLangClass::getEnclosingConstructor() const {
    static jnipp::Method<JavaLangReflectConstructor> method(clazz(), "getEnclosingConstructor", "()Ljava/lang/reflect/Constructor;");
    return method.call(*this);
}

// public java.lang.Class java.lang.Class.getDeclaringClass()
jnipp::LocalRef<JavaLangClass> JavaLangClass::getDeclaringClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getDeclaringClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private native java.lang.Class java.lang.Class.getDeclaringClass0()
jnipp::LocalRef<JavaLangClass> JavaLangClass::getDeclaringClass0() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getDeclaringClass0", "()Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.Class java.lang.Class.getEnclosingClass()
jnipp::LocalRef<JavaLangClass> JavaLangClass::getEnclosingClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getEnclosingClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.String java.lang.Class.getSimpleName()
jnipp::LocalRef<JavaLangString> JavaLangClass::getSimpleName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getSimpleName", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static boolean java.lang.Class.isAsciiDigit(char)
jboolean JavaLangClass::isAsciiDigit(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isAsciiDigit", "(C)Z");
    return method.call(a0);
}

// public java.lang.String java.lang.Class.getCanonicalName()
jnipp::LocalRef<JavaLangString> JavaLangClass::getCanonicalName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getCanonicalName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public boolean java.lang.Class.isAnonymousClass()
jboolean JavaLangClass::isAnonymousClass() const {
    static jnipp::Method<jboolean> method(clazz(), "isAnonymousClass", "()Z");
    return method.call(*this);
}

// public boolean java.lang.Class.isLocalClass()
jboolean JavaLangClass::isLocalClass() const {
    static jnipp::Method<jboolean> method(clazz(), "isLocalClass", "()Z");
    return method.call(*this);
}

// public boolean java.lang.Class.isMemberClass()
jboolean JavaLangClass::isMemberClass() const {
    static jnipp::Method<jboolean> method(clazz(), "isMemberClass", "()Z");
    return method.call(*this);
}

// private java.lang.String java.lang.Class.getSimpleBinaryName()
jnipp::LocalRef<JavaLangString> JavaLangClass::getSimpleBinaryName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getSimpleBinaryName", "()Ljava/lang/String;");
    return method.call(*this);
}

// private boolean java.lang.Class.isLocalOrAnonymousClass()
jboolean JavaLangClass::isLocalOrAnonymousClass() const {
    static jnipp::Method<jboolean> method(clazz(), "isLocalOrAnonymousClass", "()Z");
    return method.call(*this);
}

// public java.lang.Class[] java.lang.Class.getClasses()
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangClass::getClasses() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getClasses", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.reflect.Field[] java.lang.Class.getFields() throws java.lang.SecurityException
jnipp::LocalRef<jnipp::Array<JavaLangReflectField>> JavaLangClass::getFields() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectField>> method(clazz(), "getFields", "()[Ljava/lang/reflect/Field;");
    return method.call(*this);
}

// public java.lang.reflect.Method[] java.lang.Class.getMethods() throws java.lang.SecurityException
jnipp::LocalRef<jnipp::Array<JavaLangReflectMethod>> JavaLangClass::getMethods() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectMethod>> method(clazz(), "getMethods", "()[Ljava/lang/reflect/Method;");
    return method.call(*this);
}

// public java.lang.reflect.Constructor[] java.lang.Class.getConstructors() throws java.lang.SecurityException
jnipp::LocalRef<jnipp::Array<JavaLangReflectConstructor>> JavaLangClass::getConstructors() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectConstructor>> method(clazz(), "getConstructors", "()[Ljava/lang/reflect/Constructor;");
    return method.call(*this);
}

// public java.lang.reflect.Field java.lang.Class.getField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
jnipp::LocalRef<JavaLangReflectField> JavaLangClass::getField(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangReflectField,JavaLangString> method(clazz(), "getField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class[]) throws java.lang.NoSuchMethodException,java.lang.SecurityException
jnipp::LocalRef<JavaLangReflectMethod> JavaLangClass::getMethod(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a1) const {
    static jnipp::Method<JavaLangReflectMethod,JavaLangString,jnipp::Array<JavaLangClass>> method(clazz(), "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
    return method.call(*this, a0, a1);
}

// public java.lang.reflect.Constructor java.lang.Class.getConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException,java.lang.SecurityException
jnipp::LocalRef<JavaLangReflectConstructor> JavaLangClass::getConstructor(const jnipp::Ref<jnipp::Array<JavaLangClass>>& a0) const {
    static jnipp::Method<JavaLangReflectConstructor,jnipp::Array<JavaLangClass>> method(clazz(), "getConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;");
    return method.call(*this, a0);
}

// public java.lang.Class[] java.lang.Class.getDeclaredClasses() throws java.lang.SecurityException
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangClass::getDeclaredClasses() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getDeclaredClasses", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.reflect.Field[] java.lang.Class.getDeclaredFields() throws java.lang.SecurityException
jnipp::LocalRef<jnipp::Array<JavaLangReflectField>> JavaLangClass::getDeclaredFields() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectField>> method(clazz(), "getDeclaredFields", "()[Ljava/lang/reflect/Field;");
    return method.call(*this);
}

// public java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods() throws java.lang.SecurityException
jnipp::LocalRef<jnipp::Array<JavaLangReflectMethod>> JavaLangClass::getDeclaredMethods() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectMethod>> method(clazz(), "getDeclaredMethods", "()[Ljava/lang/reflect/Method;");
    return method.call(*this);
}

// public java.lang.reflect.Constructor[] java.lang.Class.getDeclaredConstructors() throws java.lang.SecurityException
jnipp::LocalRef<jnipp::Array<JavaLangReflectConstructor>> JavaLangClass::getDeclaredConstructors() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectConstructor>> method(clazz(), "getDeclaredConstructors", "()[Ljava/lang/reflect/Constructor;");
    return method.call(*this);
}

// public java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
jnipp::LocalRef<JavaLangReflectField> JavaLangClass::getDeclaredField(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangReflectField,JavaLangString> method(clazz(), "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class[]) throws java.lang.NoSuchMethodException,java.lang.SecurityException
jnipp::LocalRef<JavaLangReflectMethod> JavaLangClass::getDeclaredMethod(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a1) const {
    static jnipp::Method<JavaLangReflectMethod,JavaLangString,jnipp::Array<JavaLangClass>> method(clazz(), "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
    return method.call(*this, a0, a1);
}

// public java.lang.reflect.Constructor java.lang.Class.getDeclaredConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException,java.lang.SecurityException
jnipp::LocalRef<JavaLangReflectConstructor> JavaLangClass::getDeclaredConstructor(const jnipp::Ref<jnipp::Array<JavaLangClass>>& a0) const {
    static jnipp::Method<JavaLangReflectConstructor,jnipp::Array<JavaLangClass>> method(clazz(), "getDeclaredConstructor", "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;");
    return method.call(*this, a0);
}

// public java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)
jnipp::LocalRef<JavaIoInputStream> JavaLangClass::getResourceAsStream(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaIoInputStream,JavaLangString> method(clazz(), "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
    return method.call(*this, a0);
}

// public java.net.URL java.lang.Class.getResource(java.lang.String)
jnipp::LocalRef<JavaNetURL> JavaLangClass::getResource(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNetURL,JavaLangString> method(clazz(), "getResource", "(Ljava/lang/String;)Ljava/net/URL;");
    return method.call(*this, a0);
}

// public java.security.ProtectionDomain java.lang.Class.getProtectionDomain()
jnipp::LocalRef<JavaSecurityProtectionDomain> JavaLangClass::getProtectionDomain() const {
    static jnipp::Method<JavaSecurityProtectionDomain> method(clazz(), "getProtectionDomain", "()Ljava/security/ProtectionDomain;");
    return method.call(*this);
}

// private native java.security.ProtectionDomain java.lang.Class.getProtectionDomain0()
jnipp::LocalRef<JavaSecurityProtectionDomain> JavaLangClass::getProtectionDomain0() const {
    static jnipp::Method<JavaSecurityProtectionDomain> method(clazz(), "getProtectionDomain0", "()Ljava/security/ProtectionDomain;");
    return method.call(*this);
}

// native void java.lang.Class.setProtectionDomain0(java.security.ProtectionDomain)
void JavaLangClass::setProtectionDomain0(const jnipp::Ref<JavaSecurityProtectionDomain>& a0) const {
    static jnipp::Method<void,JavaSecurityProtectionDomain> method(clazz(), "setProtectionDomain0", "(Ljava/security/ProtectionDomain;)V");
    method.call(*this, a0);
}

// static native java.lang.Class java.lang.Class.getPrimitiveClass(java.lang.String)
jnipp::LocalRef<JavaLangClass> JavaLangClass::getPrimitiveClass(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangClass,JavaLangString> method(clazz(), "getPrimitiveClass", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(a0);
}

// private static boolean java.lang.Class.isCheckMemberAccessOverridden(java.lang.SecurityManager)
jboolean JavaLangClass::isCheckMemberAccessOverridden(const jnipp::Ref<JavaLangSecurityManager>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangSecurityManager> method(clazz(), "isCheckMemberAccessOverridden", "(Ljava/lang/SecurityManager;)Z");
    return method.call(a0);
}

// private void java.lang.Class.checkMemberAccess(int,java.lang.Class,boolean)
void JavaLangClass::checkMemberAccess(jint a0, const jnipp::Ref<JavaLangClass>& a1, jboolean a2) const {
    static jnipp::Method<void,jint,JavaLangClass,jboolean> method(clazz(), "checkMemberAccess", "(ILjava/lang/Class;Z)V");
    method.call(*this, a0, a1, a2);
}

// private java.lang.String java.lang.Class.resolveName(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaLangClass::resolveName(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "resolveName", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private void java.lang.Class.clearCachesOnClassRedefinition()
void JavaLangClass::clearCachesOnClassRedefinition() const {
    static jnipp::Method<void> method(clazz(), "clearCachesOnClassRedefinition", "()V");
    method.call(*this);
}

// private native java.lang.String java.lang.Class.getGenericSignature()
jnipp::LocalRef<JavaLangString> JavaLangClass::getGenericSignature() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getGenericSignature", "()Ljava/lang/String;");
    return method.call(*this);
}

// private sun.reflect.generics.factory.GenericsFactory java.lang.Class.getFactory()
jnipp::LocalRef<SunReflectGenericsFactoryGenericsFactory> JavaLangClass::getFactory() const {
    static jnipp::Method<SunReflectGenericsFactoryGenericsFactory> method(clazz(), "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;");
    return method.call(*this);
}

// private sun.reflect.generics.repository.ClassRepository java.lang.Class.getGenericInfo()
jnipp::LocalRef<SunReflectGenericsRepositoryClassRepository> JavaLangClass::getGenericInfo() const {
    static jnipp::Method<SunReflectGenericsRepositoryClassRepository> method(clazz(), "getGenericInfo", "()Lsun/reflect/generics/repository/ClassRepository;");
    return method.call(*this);
}

// private native byte[] java.lang.Class.getRawAnnotations()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaLangClass::getRawAnnotations() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getRawAnnotations", "()[B");
    return method.call(*this);
}

// native sun.reflect.ConstantPool java.lang.Class.getConstantPool()
jnipp::LocalRef<SunReflectConstantPool> JavaLangClass::getConstantPool() const {
    static jnipp::Method<SunReflectConstantPool> method(clazz(), "getConstantPool", "()Lsun/reflect/ConstantPool;");
    return method.call(*this);
}

// private java.lang.reflect.Field[] java.lang.Class.privateGetDeclaredFields(boolean)
jnipp::LocalRef<jnipp::Array<JavaLangReflectField>> JavaLangClass::privateGetDeclaredFields(jboolean a0) const {
    static jnipp::Method<jnipp::Array<JavaLangReflectField>,jboolean> method(clazz(), "privateGetDeclaredFields", "(Z)[Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// private java.lang.reflect.Field[] java.lang.Class.privateGetPublicFields(java.util.Set)
jnipp::LocalRef<jnipp::Array<JavaLangReflectField>> JavaLangClass::privateGetPublicFields(const jnipp::Ref<JavaUtilSet>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangReflectField>,JavaUtilSet> method(clazz(), "privateGetPublicFields", "(Ljava/util/Set;)[Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// private static void java.lang.Class.addAll(java.util.Collection,java.lang.reflect.Field[])
void JavaLangClass::addAll(const jnipp::Ref<JavaUtilCollection>& a0, const jnipp::Ref<jnipp::Array<JavaLangReflectField>>& a1) {
    static jnipp::StaticMethod<void,JavaUtilCollection,jnipp::Array<JavaLangReflectField>> method(clazz(), "addAll", "(Ljava/util/Collection;[Ljava/lang/reflect/Field;)V");
    method.call(a0, a1);
}

// private java.lang.reflect.Constructor[] java.lang.Class.privateGetDeclaredConstructors(boolean)
jnipp::LocalRef<jnipp::Array<JavaLangReflectConstructor>> JavaLangClass::privateGetDeclaredConstructors(jboolean a0) const {
    static jnipp::Method<jnipp::Array<JavaLangReflectConstructor>,jboolean> method(clazz(), "privateGetDeclaredConstructors", "(Z)[Ljava/lang/reflect/Constructor;");
    return method.call(*this, a0);
}

// private java.lang.reflect.Method[] java.lang.Class.privateGetDeclaredMethods(boolean)
jnipp::LocalRef<jnipp::Array<JavaLangReflectMethod>> JavaLangClass::privateGetDeclaredMethods(jboolean a0) const {
    static jnipp::Method<jnipp::Array<JavaLangReflectMethod>,jboolean> method(clazz(), "privateGetDeclaredMethods", "(Z)[Ljava/lang/reflect/Method;");
    return method.call(*this, a0);
}

// private java.lang.reflect.Method[] java.lang.Class.privateGetPublicMethods()
jnipp::LocalRef<jnipp::Array<JavaLangReflectMethod>> JavaLangClass::privateGetPublicMethods() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectMethod>> method(clazz(), "privateGetPublicMethods", "()[Ljava/lang/reflect/Method;");
    return method.call(*this);
}

// private java.lang.reflect.Field java.lang.Class.searchFields(java.lang.reflect.Field[],java.lang.String)
jnipp::LocalRef<JavaLangReflectField> JavaLangClass::searchFields(const jnipp::Ref<jnipp::Array<JavaLangReflectField>>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangReflectField,jnipp::Array<JavaLangReflectField>,JavaLangString> method(clazz(), "searchFields", "([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field;");
    return method.call(*this, a0, a1);
}

// private java.lang.reflect.Field java.lang.Class.getField0(java.lang.String) throws java.lang.NoSuchFieldException
jnipp::LocalRef<JavaLangReflectField> JavaLangClass::getField0(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangReflectField,JavaLangString> method(clazz(), "getField0", "(Ljava/lang/String;)Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// private static java.lang.reflect.Method java.lang.Class.searchMethods(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])
jnipp::LocalRef<JavaLangReflectMethod> JavaLangClass::searchMethods(const jnipp::Ref<jnipp::Array<JavaLangReflectMethod>>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a2) {
    static jnipp::StaticMethod<JavaLangReflectMethod,jnipp::Array<JavaLangReflectMethod>,JavaLangString,jnipp::Array<JavaLangClass>> method(clazz(), "searchMethods", "([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
    return method.call(a0, a1, a2);
}

// private java.lang.reflect.Method java.lang.Class.getMethod0(java.lang.String,java.lang.Class[])
jnipp::LocalRef<JavaLangReflectMethod> JavaLangClass::getMethod0(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a1) const {
    static jnipp::Method<JavaLangReflectMethod,JavaLangString,jnipp::Array<JavaLangClass>> method(clazz(), "getMethod0", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
    return method.call(*this, a0, a1);
}

// private java.lang.reflect.Constructor java.lang.Class.getConstructor0(java.lang.Class[],int) throws java.lang.NoSuchMethodException
jnipp::LocalRef<JavaLangReflectConstructor> JavaLangClass::getConstructor0(const jnipp::Ref<jnipp::Array<JavaLangClass>>& a0, jint a1) const {
    static jnipp::Method<JavaLangReflectConstructor,jnipp::Array<JavaLangClass>,jint> method(clazz(), "getConstructor0", "([Ljava/lang/Class;I)Ljava/lang/reflect/Constructor;");
    return method.call(*this, a0, a1);
}

// private static boolean java.lang.Class.arrayContentsEq(java.lang.Object[],java.lang.Object[])
jboolean JavaLangClass::arrayContentsEq(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) {
    static jnipp::StaticMethod<jboolean,jnipp::Array<JavaLangObject>,jnipp::Array<JavaLangObject>> method(clazz(), "arrayContentsEq", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
    return method.call(a0, a1);
}

// private static java.lang.reflect.Field[] java.lang.Class.copyFields(java.lang.reflect.Field[])
jnipp::LocalRef<jnipp::Array<JavaLangReflectField>> JavaLangClass::copyFields(const jnipp::Ref<jnipp::Array<JavaLangReflectField>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangReflectField>,jnipp::Array<JavaLangReflectField>> method(clazz(), "copyFields", "([Ljava/lang/reflect/Field;)[Ljava/lang/reflect/Field;");
    return method.call(a0);
}

// private static java.lang.reflect.Method[] java.lang.Class.copyMethods(java.lang.reflect.Method[])
jnipp::LocalRef<jnipp::Array<JavaLangReflectMethod>> JavaLangClass::copyMethods(const jnipp::Ref<jnipp::Array<JavaLangReflectMethod>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangReflectMethod>,jnipp::Array<JavaLangReflectMethod>> method(clazz(), "copyMethods", "([Ljava/lang/reflect/Method;)[Ljava/lang/reflect/Method;");
    return method.call(a0);
}

// private static java.lang.reflect.Constructor[] java.lang.Class.copyConstructors(java.lang.reflect.Constructor[])
jnipp::LocalRef<jnipp::Array<JavaLangReflectConstructor>> JavaLangClass::copyConstructors(const jnipp::Ref<jnipp::Array<JavaLangReflectConstructor>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangReflectConstructor>,jnipp::Array<JavaLangReflectConstructor>> method(clazz(), "copyConstructors", "([Ljava/lang/reflect/Constructor;)[Ljava/lang/reflect/Constructor;");
    return method.call(a0);
}

// private native java.lang.reflect.Field[] java.lang.Class.getDeclaredFields0(boolean)
jnipp::LocalRef<jnipp::Array<JavaLangReflectField>> JavaLangClass::getDeclaredFields0(jboolean a0) const {
    static jnipp::Method<jnipp::Array<JavaLangReflectField>,jboolean> method(clazz(), "getDeclaredFields0", "(Z)[Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// private native java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods0(boolean)
jnipp::LocalRef<jnipp::Array<JavaLangReflectMethod>> JavaLangClass::getDeclaredMethods0(jboolean a0) const {
    static jnipp::Method<jnipp::Array<JavaLangReflectMethod>,jboolean> method(clazz(), "getDeclaredMethods0", "(Z)[Ljava/lang/reflect/Method;");
    return method.call(*this, a0);
}

// private native java.lang.reflect.Constructor[] java.lang.Class.getDeclaredConstructors0(boolean)
jnipp::LocalRef<jnipp::Array<JavaLangReflectConstructor>> JavaLangClass::getDeclaredConstructors0(jboolean a0) const {
    static jnipp::Method<jnipp::Array<JavaLangReflectConstructor>,jboolean> method(clazz(), "getDeclaredConstructors0", "(Z)[Ljava/lang/reflect/Constructor;");
    return method.call(*this, a0);
}

// private native java.lang.Class[] java.lang.Class.getDeclaredClasses0()
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangClass::getDeclaredClasses0() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getDeclaredClasses0", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// private static java.lang.String java.lang.Class.argumentTypesToString(java.lang.Class[])
jnipp::LocalRef<JavaLangString> JavaLangClass::argumentTypesToString(const jnipp::Ref<jnipp::Array<JavaLangClass>>& a0) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<JavaLangClass>> method(clazz(), "argumentTypesToString", "([Ljava/lang/Class;)Ljava/lang/String;");
    return method.call(a0);
}

// public boolean java.lang.Class.desiredAssertionStatus()
jboolean JavaLangClass::desiredAssertionStatus() const {
    static jnipp::Method<jboolean> method(clazz(), "desiredAssertionStatus", "()Z");
    return method.call(*this);
}

// private static native boolean java.lang.Class.desiredAssertionStatus0(java.lang.Class)
jboolean JavaLangClass::desiredAssertionStatus0(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangClass> method(clazz(), "desiredAssertionStatus0", "(Ljava/lang/Class;)Z");
    return method.call(a0);
}

// public boolean java.lang.Class.isEnum()
jboolean JavaLangClass::isEnum() const {
    static jnipp::Method<jboolean> method(clazz(), "isEnum", "()Z");
    return method.call(*this);
}

// private static sun.reflect.ReflectionFactory java.lang.Class.getReflectionFactory()
jnipp::LocalRef<SunReflectReflectionFactory> JavaLangClass::getReflectionFactory() {
    static jnipp::StaticMethod<SunReflectReflectionFactory> method(clazz(), "getReflectionFactory", "()Lsun/reflect/ReflectionFactory;");
    return method.call();
}

// private static void java.lang.Class.checkInitted()
void JavaLangClass::checkInitted() {
    static jnipp::StaticMethod<void> method(clazz(), "checkInitted", "()V");
    method.call();
}

// public java.lang.Object[] java.lang.Class.getEnumConstants()
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaLangClass::getEnumConstants() const {
    static jnipp::Method<jnipp::Array<JavaLangObject>> method(clazz(), "getEnumConstants", "()[Ljava/lang/Object;");
    return method.call(*this);
}

// java.lang.Object[] java.lang.Class.getEnumConstantsShared()
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaLangClass::getEnumConstantsShared() const {
    static jnipp::Method<jnipp::Array<JavaLangObject>> method(clazz(), "getEnumConstantsShared", "()[Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.Object java.lang.Class.cast(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaLangClass::cast(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "cast", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private java.lang.String java.lang.Class.cannotCastMsg(java.lang.Object)
jnipp::LocalRef<JavaLangString> JavaLangClass::cannotCastMsg(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangObject> method(clazz(), "cannotCastMsg", "(Ljava/lang/Object;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.Class java.lang.Class.asSubclass(java.lang.Class)
jnipp::LocalRef<JavaLangClass> JavaLangClass::asSubclass(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangClass> method(clazz(), "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// public java.lang.annotation.Annotation java.lang.Class.getAnnotation(java.lang.Class)
jnipp::LocalRef<JavaLangAnnotationAnnotation> JavaLangClass::getAnnotation(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangAnnotationAnnotation,JavaLangClass> method(clazz(), "getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;");
    return method.call(*this, a0);
}

// public boolean java.lang.Class.isAnnotationPresent(java.lang.Class)
jboolean JavaLangClass::isAnnotationPresent(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<jboolean,JavaLangClass> method(clazz(), "isAnnotationPresent", "(Ljava/lang/Class;)Z");
    return method.call(*this, a0);
}

// public java.lang.annotation.Annotation[] java.lang.Class.getAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangClass::getAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// public java.lang.annotation.Annotation[] java.lang.Class.getDeclaredAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangClass::getDeclaredAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// private synchronized void java.lang.Class.initAnnotationsIfNecessary()
void JavaLangClass::initAnnotationsIfNecessary() const {
    static jnipp::Method<void> method(clazz(), "initAnnotationsIfNecessary", "()V");
    method.call(*this);
}

// void java.lang.Class.setAnnotationType(sun.reflect.annotation.AnnotationType)
void JavaLangClass::setAnnotationType(const jnipp::Ref<SunReflectAnnotationAnnotationType>& a0) const {
    static jnipp::Method<void,SunReflectAnnotationAnnotationType> method(clazz(), "setAnnotationType", "(Lsun/reflect/annotation/AnnotationType;)V");
    method.call(*this, a0);
}

// sun.reflect.annotation.AnnotationType java.lang.Class.getAnnotationType()
jnipp::LocalRef<SunReflectAnnotationAnnotationType> JavaLangClass::getAnnotationType() const {
    static jnipp::Method<SunReflectAnnotationAnnotationType> method(clazz(), "getAnnotationType", "()Lsun/reflect/annotation/AnnotationType;");
    return method.call(*this);
}
#undef ANNOTATION
const jnipp::StaticField<jint> JavaLangClass::ANNOTATION ("java/lang/Class", "ANNOTATION", "I");
#undef ENUM
const jnipp::StaticField<jint> JavaLangClass::ENUM ("java/lang/Class", "ENUM", "I");
#undef SYNTHETIC
const jnipp::StaticField<jint> JavaLangClass::SYNTHETIC ("java/lang/Class", "SYNTHETIC", "I");
#undef allPermDomain
jnipp::StaticField<JavaSecurityProtectionDomain> JavaLangClass::allPermDomain ("java/lang/Class", "allPermDomain", "Ljava/security/ProtectionDomain;");
#undef useCaches
jnipp::StaticField<jboolean> JavaLangClass::useCaches ("java/lang/Class", "useCaches", "Z");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangClass::serialVersionUID ("java/lang/Class", "serialVersionUID", "J");
#undef serialPersistentFields
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaLangClass::serialPersistentFields ("java/lang/Class", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
#undef reflectionFactory
jnipp::StaticField<SunReflectReflectionFactory> JavaLangClass::reflectionFactory ("java/lang/Class", "reflectionFactory", "Lsun/reflect/ReflectionFactory;");
#undef initted
jnipp::StaticField<jboolean> JavaLangClass::initted ("java/lang/Class", "initted", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangReflectAccessibleObject::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/reflect/AccessibleObject"));
    return cls;
}

// protected java.lang.reflect.AccessibleObject()
jnipp::LocalRef<JavaLangReflectAccessibleObject> JavaLangReflectAccessibleObject::construct() {
    static jnipp::Constructor<JavaLangReflectAccessibleObject> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.annotation.Annotation java.lang.reflect.AccessibleObject.getAnnotation(java.lang.Class)
jnipp::LocalRef<JavaLangAnnotationAnnotation> JavaLangReflectAccessibleObject::getAnnotation(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangAnnotationAnnotation,JavaLangClass> method(clazz(), "getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;");
    return method.call(*this, a0);
}

// public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class)
jboolean JavaLangReflectAccessibleObject::isAnnotationPresent(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<jboolean,JavaLangClass> method(clazz(), "isAnnotationPresent", "(Ljava/lang/Class;)Z");
    return method.call(*this, a0);
}

// public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangReflectAccessibleObject::getAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getDeclaredAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangReflectAccessibleObject::getDeclaredAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// void java.lang.reflect.AccessibleObject.checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int) throws java.lang.IllegalAccessException
void JavaLangReflectAccessibleObject::checkAccess(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangClass>& a1, const jnipp::Ref<JavaLangObject>& a2, jint a3) const {
    static jnipp::Method<void,JavaLangClass,JavaLangClass,JavaLangObject,jint> method(clazz(), "checkAccess", "(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;I)V");
    method.call(*this, a0, a1, a2, a3);
}

// public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
void JavaLangReflectAccessibleObject::setAccessible(const jnipp::Ref<jnipp::Array<JavaLangReflectAccessibleObject>>& a0, jboolean a1) {
    static jnipp::StaticMethod<void,jnipp::Array<JavaLangReflectAccessibleObject>,jboolean> method(clazz(), "setAccessible", "([Ljava/lang/reflect/AccessibleObject;Z)V");
    method.call(a0, a1);
}

// public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
void JavaLangReflectAccessibleObject::setAccessible(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setAccessible", "(Z)V");
    method.call(*this, a0);
}

// private static void java.lang.reflect.AccessibleObject.setAccessible0(java.lang.reflect.AccessibleObject,boolean) throws java.lang.SecurityException
void JavaLangReflectAccessibleObject::setAccessible0(const jnipp::Ref<JavaLangReflectAccessibleObject>& a0, jboolean a1) {
    static jnipp::StaticMethod<void,JavaLangReflectAccessibleObject,jboolean> method(clazz(), "setAccessible0", "(Ljava/lang/reflect/AccessibleObject;Z)V");
    method.call(a0, a1);
}

// public boolean java.lang.reflect.AccessibleObject.isAccessible()
jboolean JavaLangReflectAccessibleObject::isAccessible() const {
    static jnipp::Method<jboolean> method(clazz(), "isAccessible", "()Z");
    return method.call(*this);
}

// void java.lang.reflect.AccessibleObject.slowCheckMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int,java.lang.Class) throws java.lang.IllegalAccessException
void JavaLangReflectAccessibleObject::slowCheckMemberAccess(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangClass>& a1, const jnipp::Ref<JavaLangObject>& a2, jint a3, const jnipp::Ref<JavaLangClass>& a4) const {
    static jnipp::Method<void,JavaLangClass,JavaLangClass,JavaLangObject,jint,JavaLangClass> method(clazz(), "slowCheckMemberAccess", "(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;ILjava/lang/Class;)V");
    method.call(*this, a0, a1, a2, a3, a4);
}
#undef ACCESS_PERMISSION
const jnipp::StaticField<JavaSecurityPermission> JavaLangReflectAccessibleObject::ACCESS_PERMISSION ("java/lang/reflect/AccessibleObject", "ACCESS_PERMISSION", "Ljava/security/Permission;");
#undef reflectionFactory
const jnipp::StaticField<SunReflectReflectionFactory> JavaLangReflectAccessibleObject::reflectionFactory ("java/lang/reflect/AccessibleObject", "reflectionFactory", "Lsun/reflect/ReflectionFactory;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangReflectField::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/reflect/Field"));
    return cls;
}

// java.lang.reflect.Field(java.lang.Class,java.lang.String,java.lang.Class,int,int,java.lang.String,byte[])
jnipp::LocalRef<JavaLangReflectField> JavaLangReflectField::construct(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangClass>& a2, jint a3, jint a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<jnipp::Array<jbyte>>& a6) {
    static jnipp::Constructor<JavaLangReflectField,JavaLangClass,JavaLangString,JavaLangClass,jint,jint,JavaLangString,jnipp::Array<jbyte>> constructor(clazz(), "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;IILjava/lang/String;[B)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5, a6);
}

// public java.lang.Object java.lang.reflect.Field.get(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jnipp::LocalRef<JavaLangObject> JavaLangReflectField::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public boolean java.lang.reflect.Field.equals(java.lang.Object)
jboolean JavaLangReflectField::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.lang.reflect.Field.hashCode()
jint JavaLangReflectField::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.lang.reflect.Field.getModifiers()
jint JavaLangReflectField::getModifiers() const {
    static jnipp::Method<jint> method(clazz(), "getModifiers", "()I");
    return method.call(*this);
}

// public boolean java.lang.reflect.Field.getBoolean(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jboolean JavaLangReflectField::getBoolean(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "getBoolean", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public byte java.lang.reflect.Field.getByte(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jbyte JavaLangReflectField::getByte(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jbyte,JavaLangObject> method(clazz(), "getByte", "(Ljava/lang/Object;)B");
    return method.call(*this, a0);
}

// public short java.lang.reflect.Field.getShort(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jshort JavaLangReflectField::getShort(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jshort,JavaLangObject> method(clazz(), "getShort", "(Ljava/lang/Object;)S");
    return method.call(*this, a0);
}

// public char java.lang.reflect.Field.getChar(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jchar JavaLangReflectField::getChar(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jchar,JavaLangObject> method(clazz(), "getChar", "(Ljava/lang/Object;)C");
    return method.call(*this, a0);
}

// public int java.lang.reflect.Field.getInt(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jint JavaLangReflectField::getInt(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "getInt", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public long java.lang.reflect.Field.getLong(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jlong JavaLangReflectField::getLong(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jlong,JavaLangObject> method(clazz(), "getLong", "(Ljava/lang/Object;)J");
    return method.call(*this, a0);
}

// public float java.lang.reflect.Field.getFloat(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jfloat JavaLangReflectField::getFloat(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jfloat,JavaLangObject> method(clazz(), "getFloat", "(Ljava/lang/Object;)F");
    return method.call(*this, a0);
}

// public double java.lang.reflect.Field.getDouble(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
jdouble JavaLangReflectField::getDouble(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jdouble,JavaLangObject> method(clazz(), "getDouble", "(Ljava/lang/Object;)D");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.reflect.Field.getName()
jnipp::LocalRef<JavaLangString> JavaLangReflectField::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// private synchronized java.util.Map java.lang.reflect.Field.declaredAnnotations()
jnipp::LocalRef<JavaUtilMap> JavaLangReflectField::declaredAnnotations() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "declaredAnnotations", "()Ljava/util/Map;");
    return method.call(*this);
}

// public boolean java.lang.reflect.Field.isSynthetic()
jboolean JavaLangReflectField::isSynthetic() const {
    static jnipp::Method<jboolean> method(clazz(), "isSynthetic", "()Z");
    return method.call(*this);
}

// public java.lang.Class java.lang.reflect.Field.getDeclaringClass()
jnipp::LocalRef<JavaLangClass> JavaLangReflectField::getDeclaringClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getDeclaringClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private java.lang.String java.lang.reflect.Field.getGenericSignature()
jnipp::LocalRef<JavaLangString> JavaLangReflectField::getGenericSignature() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getGenericSignature", "()Ljava/lang/String;");
    return method.call(*this);
}

// private sun.reflect.generics.factory.GenericsFactory java.lang.reflect.Field.getFactory()
jnipp::LocalRef<SunReflectGenericsFactoryGenericsFactory> JavaLangReflectField::getFactory() const {
    static jnipp::Method<SunReflectGenericsFactoryGenericsFactory> method(clazz(), "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;");
    return method.call(*this);
}

// private sun.reflect.generics.repository.FieldRepository java.lang.reflect.Field.getGenericInfo()
jnipp::LocalRef<SunReflectGenericsRepositoryFieldRepository> JavaLangReflectField::getGenericInfo() const {
    static jnipp::Method<SunReflectGenericsRepositoryFieldRepository> method(clazz(), "getGenericInfo", "()Lsun/reflect/generics/repository/FieldRepository;");
    return method.call(*this);
}

// public java.lang.annotation.Annotation java.lang.reflect.Field.getAnnotation(java.lang.Class)
jnipp::LocalRef<JavaLangAnnotationAnnotation> JavaLangReflectField::getAnnotation(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangAnnotationAnnotation,JavaLangClass> method(clazz(), "getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;");
    return method.call(*this, a0);
}

// public java.lang.annotation.Annotation[] java.lang.reflect.Field.getDeclaredAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangReflectField::getDeclaredAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// java.lang.reflect.Field java.lang.reflect.Field.copy()
jnipp::LocalRef<JavaLangReflectField> JavaLangReflectField::copy() const {
    static jnipp::Method<JavaLangReflectField> method(clazz(), "copy", "()Ljava/lang/reflect/Field;");
    return method.call(*this);
}

// public boolean java.lang.reflect.Field.isEnumConstant()
jboolean JavaLangReflectField::isEnumConstant() const {
    static jnipp::Method<jboolean> method(clazz(), "isEnumConstant", "()Z");
    return method.call(*this);
}

// public java.lang.Class java.lang.reflect.Field.getType()
jnipp::LocalRef<JavaLangClass> JavaLangReflectField::getType() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getType", "()Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.reflect.Type java.lang.reflect.Field.getGenericType()
jnipp::LocalRef<JavaLangReflectType> JavaLangReflectField::getGenericType() const {
    static jnipp::Method<JavaLangReflectType> method(clazz(), "getGenericType", "()Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public java.lang.String java.lang.reflect.Field.toGenericString()
jnipp::LocalRef<JavaLangString> JavaLangReflectField::toGenericString() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toGenericString", "()Ljava/lang/String;");
    return method.call(*this);
}

// public void java.lang.reflect.Field.set(java.lang.Object,java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::set(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaLangObject> method(clazz(), "set", "(Ljava/lang/Object;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// public void java.lang.reflect.Field.setBoolean(java.lang.Object,boolean) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::setBoolean(const jnipp::Ref<JavaLangObject>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaLangObject,jboolean> method(clazz(), "setBoolean", "(Ljava/lang/Object;Z)V");
    method.call(*this, a0, a1);
}

// public void java.lang.reflect.Field.setByte(java.lang.Object,byte) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::setByte(const jnipp::Ref<JavaLangObject>& a0, jbyte a1) const {
    static jnipp::Method<void,JavaLangObject,jbyte> method(clazz(), "setByte", "(Ljava/lang/Object;B)V");
    method.call(*this, a0, a1);
}

// public void java.lang.reflect.Field.setChar(java.lang.Object,char) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::setChar(const jnipp::Ref<JavaLangObject>& a0, jchar a1) const {
    static jnipp::Method<void,JavaLangObject,jchar> method(clazz(), "setChar", "(Ljava/lang/Object;C)V");
    method.call(*this, a0, a1);
}

// public void java.lang.reflect.Field.setShort(java.lang.Object,short) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::setShort(const jnipp::Ref<JavaLangObject>& a0, jshort a1) const {
    static jnipp::Method<void,JavaLangObject,jshort> method(clazz(), "setShort", "(Ljava/lang/Object;S)V");
    method.call(*this, a0, a1);
}

// public void java.lang.reflect.Field.setInt(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::setInt(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangObject,jint> method(clazz(), "setInt", "(Ljava/lang/Object;I)V");
    method.call(*this, a0, a1);
}

// public void java.lang.reflect.Field.setLong(java.lang.Object,long) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::setLong(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<void,JavaLangObject,jlong> method(clazz(), "setLong", "(Ljava/lang/Object;J)V");
    method.call(*this, a0, a1);
}

// public void java.lang.reflect.Field.setFloat(java.lang.Object,float) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::setFloat(const jnipp::Ref<JavaLangObject>& a0, jfloat a1) const {
    static jnipp::Method<void,JavaLangObject,jfloat> method(clazz(), "setFloat", "(Ljava/lang/Object;F)V");
    method.call(*this, a0, a1);
}

// public void java.lang.reflect.Field.setDouble(java.lang.Object,double) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
void JavaLangReflectField::setDouble(const jnipp::Ref<JavaLangObject>& a0, jdouble a1) const {
    static jnipp::Method<void,JavaLangObject,jdouble> method(clazz(), "setDouble", "(Ljava/lang/Object;D)V");
    method.call(*this, a0, a1);
}

// private sun.reflect.FieldAccessor java.lang.reflect.Field.getFieldAccessor(java.lang.Object) throws java.lang.IllegalAccessException
jnipp::LocalRef<SunReflectFieldAccessor> JavaLangReflectField::getFieldAccessor(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<SunReflectFieldAccessor,JavaLangObject> method(clazz(), "getFieldAccessor", "(Ljava/lang/Object;)Lsun/reflect/FieldAccessor;");
    return method.call(*this, a0);
}

// private sun.reflect.FieldAccessor java.lang.reflect.Field.getFieldAccessor(boolean)
jnipp::LocalRef<SunReflectFieldAccessor> JavaLangReflectField::getFieldAccessor(jboolean a0) const {
    static jnipp::Method<SunReflectFieldAccessor,jboolean> method(clazz(), "getFieldAccessor", "(Z)Lsun/reflect/FieldAccessor;");
    return method.call(*this, a0);
}

// private sun.reflect.FieldAccessor java.lang.reflect.Field.acquireFieldAccessor(boolean)
jnipp::LocalRef<SunReflectFieldAccessor> JavaLangReflectField::acquireFieldAccessor(jboolean a0) const {
    static jnipp::Method<SunReflectFieldAccessor,jboolean> method(clazz(), "acquireFieldAccessor", "(Z)Lsun/reflect/FieldAccessor;");
    return method.call(*this, a0);
}

// private void java.lang.reflect.Field.setFieldAccessor(sun.reflect.FieldAccessor,boolean)
void JavaLangReflectField::setFieldAccessor(const jnipp::Ref<SunReflectFieldAccessor>& a0, jboolean a1) const {
    static jnipp::Method<void,SunReflectFieldAccessor,jboolean> method(clazz(), "setFieldAccessor", "(Lsun/reflect/FieldAccessor;Z)V");
    method.call(*this, a0, a1);
}

// static java.lang.String java.lang.reflect.Field.getTypeName(java.lang.Class)
jnipp::LocalRef<JavaLangString> JavaLangReflectField::getTypeName(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangClass> method(clazz(), "getTypeName", "(Ljava/lang/Class;)Ljava/lang/String;");
    return method.call(a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThread::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Thread"));
    return cls;
}

// java.lang.Thread(java.lang.Runnable,java.security.AccessControlContext)
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct(const jnipp::Ref<JavaLangRunnable>& a0, const jnipp::Ref<JavaSecurityAccessControlContext>& a1) {
    static jnipp::Constructor<JavaLangThread,JavaLangRunnable,JavaSecurityAccessControlContext> constructor(clazz(), "(Ljava/lang/Runnable;Ljava/security/AccessControlContext;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Thread(java.lang.Runnable)
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct(const jnipp::Ref<JavaLangRunnable>& a0) {
    static jnipp::Constructor<JavaLangThread,JavaLangRunnable> constructor(clazz(), "(Ljava/lang/Runnable;)V");
    return constructor.construct(a0);
}

// public java.lang.Thread()
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct() {
    static jnipp::Constructor<JavaLangThread> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct(const jnipp::Ref<JavaLangThreadGroup>& a0, const jnipp::Ref<JavaLangRunnable>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::Constructor<JavaLangThread,JavaLangThreadGroup,JavaLangRunnable,JavaLangString> constructor(clazz(), "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.lang.Thread(java.lang.Runnable,java.lang.String)
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct(const jnipp::Ref<JavaLangRunnable>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaLangThread,JavaLangRunnable,JavaLangString> constructor(clazz(), "(Ljava/lang/Runnable;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Thread(java.lang.ThreadGroup,java.lang.String)
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct(const jnipp::Ref<JavaLangThreadGroup>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaLangThread,JavaLangThreadGroup,JavaLangString> constructor(clazz(), "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Thread(java.lang.String)
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangThread,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.Thread(java.lang.ThreadGroup,java.lang.Runnable)
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct(const jnipp::Ref<JavaLangThreadGroup>& a0, const jnipp::Ref<JavaLangRunnable>& a1) {
    static jnipp::Constructor<JavaLangThread,JavaLangThreadGroup,JavaLangRunnable> constructor(clazz(), "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)
jnipp::LocalRef<JavaLangThread> JavaLangThread::construct(const jnipp::Ref<JavaLangThreadGroup>& a0, const jnipp::Ref<JavaLangRunnable>& a1, const jnipp::Ref<JavaLangString>& a2, jlong a3) {
    static jnipp::Constructor<JavaLangThread,JavaLangThreadGroup,JavaLangRunnable,JavaLangString,jlong> constructor(clazz(), "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public void java.lang.Thread.run()
void JavaLangThread::run() const {
    static jnipp::Method<void> method(clazz(), "run", "()V");
    method.call(*this);
}

// private void java.lang.Thread.exit()
void JavaLangThread::exit() const {
    static jnipp::Method<void> method(clazz(), "exit", "()V");
    method.call(*this);
}

// private void java.lang.Thread.dispatchUncaughtException(java.lang.Throwable)
void JavaLangThread::dispatchUncaughtException(const jnipp::Ref<JavaLangThrowable>& a0) const {
    static jnipp::Method<void,JavaLangThrowable> method(clazz(), "dispatchUncaughtException", "(Ljava/lang/Throwable;)V");
    method.call(*this, a0);
}

// protected java.lang.Object java.lang.Thread.clone() throws java.lang.CloneNotSupportedException
jnipp::LocalRef<JavaLangObject> JavaLangThread::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public boolean java.lang.Thread.isInterrupted()
jboolean JavaLangThread::isInterrupted() const {
    static jnipp::Method<jboolean> method(clazz(), "isInterrupted", "()Z");
    return method.call(*this);
}

// private native boolean java.lang.Thread.isInterrupted(boolean)
jboolean JavaLangThread::isInterrupted(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "isInterrupted", "(Z)Z");
    return method.call(*this, a0);
}

// public static native java.lang.Thread java.lang.Thread.currentThread()
jnipp::LocalRef<JavaLangThread> JavaLangThread::currentThread() {
    static jnipp::StaticMethod<JavaLangThread> method(clazz(), "currentThread", "()Ljava/lang/Thread;");
    return method.call();
}

// private static native void java.lang.Thread.registerNatives()
void JavaLangThread::registerNatives() {
    static jnipp::StaticMethod<void> method(clazz(), "registerNatives", "()V");
    method.call();
}

// public final java.lang.String java.lang.Thread.getName()
jnipp::LocalRef<JavaLangString> JavaLangThread::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// private void java.lang.Thread.init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,java.security.AccessControlContext)
void JavaLangThread::init(const jnipp::Ref<JavaLangThreadGroup>& a0, const jnipp::Ref<JavaLangRunnable>& a1, const jnipp::Ref<JavaLangString>& a2, jlong a3, const jnipp::Ref<JavaSecurityAccessControlContext>& a4) const {
    static jnipp::Method<void,JavaLangThreadGroup,JavaLangRunnable,JavaLangString,jlong,JavaSecurityAccessControlContext> method(clazz(), "init", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V");
    method.call(*this, a0, a1, a2, a3, a4);
}

// private void java.lang.Thread.init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)
void JavaLangThread::init(const jnipp::Ref<JavaLangThreadGroup>& a0, const jnipp::Ref<JavaLangRunnable>& a1, const jnipp::Ref<JavaLangString>& a2, jlong a3) const {
    static jnipp::Method<void,JavaLangThreadGroup,JavaLangRunnable,JavaLangString,jlong> method(clazz(), "init", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V");
    method.call(*this, a0, a1, a2, a3);
}

// public final java.lang.ThreadGroup java.lang.Thread.getThreadGroup()
jnipp::LocalRef<JavaLangThreadGroup> JavaLangThread::getThreadGroup() const {
    static jnipp::Method<JavaLangThreadGroup> method(clazz(), "getThreadGroup", "()Ljava/lang/ThreadGroup;");
    return method.call(*this);
}

// public java.lang.StackTraceElement[] java.lang.Thread.getStackTrace()
jnipp::LocalRef<jnipp::Array<JavaLangStackTraceElement>> JavaLangThread::getStackTrace() const {
    static jnipp::Method<jnipp::Array<JavaLangStackTraceElement>> method(clazz(), "getStackTrace", "()[Ljava/lang/StackTraceElement;");
    return method.call(*this);
}

// public static native boolean java.lang.Thread.holdsLock(java.lang.Object)
jboolean JavaLangThread::holdsLock(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangObject> method(clazz(), "holdsLock", "(Ljava/lang/Object;)Z");
    return method.call(a0);
}

// public static void java.lang.Thread.dumpStack()
void JavaLangThread::dumpStack() {
    static jnipp::StaticMethod<void> method(clazz(), "dumpStack", "()V");
    method.call();
}

// public final void java.lang.Thread.setPriority(int)
void JavaLangThread::setPriority(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setPriority", "(I)V");
    method.call(*this, a0);
}

// public final void java.lang.Thread.setDaemon(boolean)
void JavaLangThread::setDaemon(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setDaemon", "(Z)V");
    method.call(*this, a0);
}

// public synchronized void java.lang.Thread.start()
void JavaLangThread::start() const {
    static jnipp::Method<void> method(clazz(), "start", "()V");
    method.call(*this);
}

// private static synchronized int java.lang.Thread.nextThreadNum()
jint JavaLangThread::nextThreadNum() {
    static jnipp::StaticMethod<jint> method(clazz(), "nextThreadNum", "()I");
    return method.call();
}

// private static synchronized long java.lang.Thread.nextThreadID()
jlong JavaLangThread::nextThreadID() {
    static jnipp::StaticMethod<jlong> method(clazz(), "nextThreadID", "()J");
    return method.call();
}

// void java.lang.Thread.blockedOn(sun.nio.ch.Interruptible)
void JavaLangThread::blockedOn(const jnipp::Ref<SunNioChInterruptible>& a0) const {
    static jnipp::Method<void,SunNioChInterruptible> method(clazz(), "blockedOn", "(Lsun/nio/ch/Interruptible;)V");
    method.call(*this, a0);
}

// public static native void java.lang.Thread.yield()
void JavaLangThread::yield() {
    static jnipp::StaticMethod<void> method(clazz(), "yield", "()V");
    method.call();
}

// public static void java.lang.Thread.sleep(long,int) throws java.lang.InterruptedException
void JavaLangThread::sleep(jlong a0, jint a1) {
    static jnipp::StaticMethod<void,jlong,jint> method(clazz(), "sleep", "(JI)V");
    method.call(a0, a1);
}

// public static native void java.lang.Thread.sleep(long) throws java.lang.InterruptedException
void JavaLangThread::sleep(jlong a0) {
    static jnipp::StaticMethod<void,jlong> method(clazz(), "sleep", "(J)V");
    method.call(a0);
}

// private native void java.lang.Thread.start0()
void JavaLangThread::start0() const {
    static jnipp::Method<void> method(clazz(), "start0", "()V");
    method.call(*this);
}

// public final void java.lang.Thread.stop()
void JavaLangThread::stop() const {
    static jnipp::Method<void> method(clazz(), "stop", "()V");
    method.call(*this);
}

// public final synchronized void java.lang.Thread.stop(java.lang.Throwable)
void JavaLangThread::stop(const jnipp::Ref<JavaLangThrowable>& a0) const {
    static jnipp::Method<void,JavaLangThrowable> method(clazz(), "stop", "(Ljava/lang/Throwable;)V");
    method.call(*this, a0);
}

// public void java.lang.Thread.interrupt()
void JavaLangThread::interrupt() const {
    static jnipp::Method<void> method(clazz(), "interrupt", "()V");
    method.call(*this);
}

// public static boolean java.lang.Thread.interrupted()
jboolean JavaLangThread::interrupted() {
    static jnipp::StaticMethod<jboolean> method(clazz(), "interrupted", "()Z");
    return method.call();
}

// public void java.lang.Thread.destroy()
void JavaLangThread::destroy() const {
    static jnipp::Method<void> method(clazz(), "destroy", "()V");
    method.call(*this);
}

// public final native boolean java.lang.Thread.isAlive()
jboolean JavaLangThread::isAlive() const {
    static jnipp::Method<jboolean> method(clazz(), "isAlive", "()Z");
    return method.call(*this);
}

// public final void java.lang.Thread.suspend()
void JavaLangThread::suspend() const {
    static jnipp::Method<void> method(clazz(), "suspend", "()V");
    method.call(*this);
}

// public final void java.lang.Thread.resume()
void JavaLangThread::resume() const {
    static jnipp::Method<void> method(clazz(), "resume", "()V");
    method.call(*this);
}

// public final int java.lang.Thread.getPriority()
jint JavaLangThread::getPriority() const {
    static jnipp::Method<jint> method(clazz(), "getPriority", "()I");
    return method.call(*this);
}

// public final void java.lang.Thread.setName(java.lang.String)
void JavaLangThread::setName(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "setName", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public static int java.lang.Thread.activeCount()
jint JavaLangThread::activeCount() {
    static jnipp::StaticMethod<jint> method(clazz(), "activeCount", "()I");
    return method.call();
}

// public static int java.lang.Thread.enumerate(java.lang.Thread[])
jint JavaLangThread::enumerate(const jnipp::Ref<jnipp::Array<JavaLangThread>>& a0) {
    static jnipp::StaticMethod<jint,jnipp::Array<JavaLangThread>> method(clazz(), "enumerate", "([Ljava/lang/Thread;)I");
    return method.call(a0);
}

// public native int java.lang.Thread.countStackFrames()
jint JavaLangThread::countStackFrames() const {
    static jnipp::Method<jint> method(clazz(), "countStackFrames", "()I");
    return method.call(*this);
}

// public final void java.lang.Thread.join() throws java.lang.InterruptedException
void JavaLangThread::join() const {
    static jnipp::Method<void> method(clazz(), "join", "()V");
    method.call(*this);
}

// public final synchronized void java.lang.Thread.join(long) throws java.lang.InterruptedException
void JavaLangThread::join(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "join", "(J)V");
    method.call(*this, a0);
}

// public final synchronized void java.lang.Thread.join(long,int) throws java.lang.InterruptedException
void JavaLangThread::join(jlong a0, jint a1) const {
    static jnipp::Method<void,jlong,jint> method(clazz(), "join", "(JI)V");
    method.call(*this, a0, a1);
}

// public final boolean java.lang.Thread.isDaemon()
jboolean JavaLangThread::isDaemon() const {
    static jnipp::Method<jboolean> method(clazz(), "isDaemon", "()Z");
    return method.call(*this);
}

// public final void java.lang.Thread.checkAccess()
void JavaLangThread::checkAccess() const {
    static jnipp::Method<void> method(clazz(), "checkAccess", "()V");
    method.call(*this);
}

// public java.lang.ClassLoader java.lang.Thread.getContextClassLoader()
jnipp::LocalRef<JavaLangClassLoader> JavaLangThread::getContextClassLoader() const {
    static jnipp::Method<JavaLangClassLoader> method(clazz(), "getContextClassLoader", "()Ljava/lang/ClassLoader;");
    return method.call(*this);
}

// public void java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)
void JavaLangThread::setContextClassLoader(const jnipp::Ref<JavaLangClassLoader>& a0) const {
    static jnipp::Method<void,JavaLangClassLoader> method(clazz(), "setContextClassLoader", "(Ljava/lang/ClassLoader;)V");
    method.call(*this, a0);
}

// public static java.util.Map java.lang.Thread.getAllStackTraces()
jnipp::LocalRef<JavaUtilMap> JavaLangThread::getAllStackTraces() {
    static jnipp::StaticMethod<JavaUtilMap> method(clazz(), "getAllStackTraces", "()Ljava/util/Map;");
    return method.call();
}

// private static boolean java.lang.Thread.isCCLOverridden(java.lang.Class)
jboolean JavaLangThread::isCCLOverridden(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangClass> method(clazz(), "isCCLOverridden", "(Ljava/lang/Class;)Z");
    return method.call(a0);
}

// private static boolean java.lang.Thread.auditSubclass(java.lang.Class)
jboolean JavaLangThread::auditSubclass(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangClass> method(clazz(), "auditSubclass", "(Ljava/lang/Class;)Z");
    return method.call(a0);
}

// private static native java.lang.StackTraceElement[][] java.lang.Thread.dumpThreads(java.lang.Thread[])
jnipp::LocalRef<jnipp::Array<jnipp::Array<JavaLangStackTraceElement>>> JavaLangThread::dumpThreads(const jnipp::Ref<jnipp::Array<JavaLangThread>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<jnipp::Array<JavaLangStackTraceElement>>,jnipp::Array<JavaLangThread>> method(clazz(), "dumpThreads", "([Ljava/lang/Thread;)[[Ljava/lang/StackTraceElement;");
    return method.call(a0);
}

// private static native java.lang.Thread[] java.lang.Thread.getThreads()
jnipp::LocalRef<jnipp::Array<JavaLangThread>> JavaLangThread::getThreads() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangThread>> method(clazz(), "getThreads", "()[Ljava/lang/Thread;");
    return method.call();
}

// public long java.lang.Thread.getId()
jlong JavaLangThread::getId() const {
    static jnipp::Method<jlong> method(clazz(), "getId", "()J");
    return method.call(*this);
}

// public java.lang.Thread$State java.lang.Thread.getState()
jnipp::LocalRef<JavaLangThread_State> JavaLangThread::getState() const {
    static jnipp::Method<JavaLangThread_State> method(clazz(), "getState", "()Ljava/lang/Thread$State;");
    return method.call(*this);
}

// public static void java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
void JavaLangThread::setDefaultUncaughtExceptionHandler(const jnipp::Ref<JavaLangThread_UncaughtExceptionHandler>& a0) {
    static jnipp::StaticMethod<void,JavaLangThread_UncaughtExceptionHandler> method(clazz(), "setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
    method.call(a0);
}

// public static java.lang.Thread$UncaughtExceptionHandler java.lang.Thread.getDefaultUncaughtExceptionHandler()
jnipp::LocalRef<JavaLangThread_UncaughtExceptionHandler> JavaLangThread::getDefaultUncaughtExceptionHandler() {
    static jnipp::StaticMethod<JavaLangThread_UncaughtExceptionHandler> method(clazz(), "getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
    return method.call();
}

// public java.lang.Thread$UncaughtExceptionHandler java.lang.Thread.getUncaughtExceptionHandler()
jnipp::LocalRef<JavaLangThread_UncaughtExceptionHandler> JavaLangThread::getUncaughtExceptionHandler() const {
    static jnipp::Method<JavaLangThread_UncaughtExceptionHandler> method(clazz(), "getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
    return method.call(*this);
}

// public void java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
void JavaLangThread::setUncaughtExceptionHandler(const jnipp::Ref<JavaLangThread_UncaughtExceptionHandler>& a0) const {
    static jnipp::Method<void,JavaLangThread_UncaughtExceptionHandler> method(clazz(), "setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
    method.call(*this, a0);
}

// static void java.lang.Thread.processQueue(java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentMap)
void JavaLangThread::processQueue(const jnipp::Ref<JavaLangRefReferenceQueue>& a0, const jnipp::Ref<JavaUtilConcurrentConcurrentMap>& a1) {
    static jnipp::StaticMethod<void,JavaLangRefReferenceQueue,JavaUtilConcurrentConcurrentMap> method(clazz(), "processQueue", "(Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V");
    method.call(a0, a1);
}

// private native void java.lang.Thread.setPriority0(int)
void JavaLangThread::setPriority0(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setPriority0", "(I)V");
    method.call(*this, a0);
}

// private native void java.lang.Thread.stop0(java.lang.Object)
void JavaLangThread::stop0(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "stop0", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// private native void java.lang.Thread.suspend0()
void JavaLangThread::suspend0() const {
    static jnipp::Method<void> method(clazz(), "suspend0", "()V");
    method.call(*this);
}

// private native void java.lang.Thread.resume0()
void JavaLangThread::resume0() const {
    static jnipp::Method<void> method(clazz(), "resume0", "()V");
    method.call(*this);
}

// private native void java.lang.Thread.interrupt0()
void JavaLangThread::interrupt0() const {
    static jnipp::Method<void> method(clazz(), "interrupt0", "()V");
    method.call(*this);
}

// private native void java.lang.Thread.setNativeName(java.lang.String)
void JavaLangThread::setNativeName(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "setNativeName", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}
#undef threadInitNumber
jnipp::StaticField<jint> JavaLangThread::threadInitNumber ("java/lang/Thread", "threadInitNumber", "I");
#undef threadSeqNumber
jnipp::StaticField<jlong> JavaLangThread::threadSeqNumber ("java/lang/Thread", "threadSeqNumber", "J");
#undef MIN_PRIORITY
const jnipp::StaticField<jint> JavaLangThread::MIN_PRIORITY ("java/lang/Thread", "MIN_PRIORITY", "I");
#undef NORM_PRIORITY
const jnipp::StaticField<jint> JavaLangThread::NORM_PRIORITY ("java/lang/Thread", "NORM_PRIORITY", "I");
#undef MAX_PRIORITY
const jnipp::StaticField<jint> JavaLangThread::MAX_PRIORITY ("java/lang/Thread", "MAX_PRIORITY", "I");
#undef EMPTY_STACK_TRACE
const jnipp::StaticField<jnipp::Array<JavaLangStackTraceElement>> JavaLangThread::EMPTY_STACK_TRACE ("java/lang/Thread", "EMPTY_STACK_TRACE", "[Ljava/lang/StackTraceElement;");
#undef SUBCLASS_IMPLEMENTATION_PERMISSION
const jnipp::StaticField<JavaLangRuntimePermission> JavaLangThread::SUBCLASS_IMPLEMENTATION_PERMISSION ("java/lang/Thread", "SUBCLASS_IMPLEMENTATION_PERMISSION", "Ljava/lang/RuntimePermission;");
#undef defaultUncaughtExceptionHandler
jnipp::StaticField<JavaLangThread_UncaughtExceptionHandler> JavaLangThread::defaultUncaughtExceptionHandler ("java/lang/Thread", "defaultUncaughtExceptionHandler", "Ljava/lang/Thread$UncaughtExceptionHandler;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThreadLocal_ThreadLocalMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ThreadLocal$ThreadLocalMap"));
    return cls;
}

// java.lang.ThreadLocal$ThreadLocalMap(java.lang.ThreadLocal,java.lang.Object)
jnipp::LocalRef<JavaLangThreadLocal_ThreadLocalMap> JavaLangThreadLocal_ThreadLocalMap::construct(const jnipp::Ref<JavaLangThreadLocal>& a0, const jnipp::Ref<JavaLangObject>& a1) {
    static jnipp::Constructor<JavaLangThreadLocal_ThreadLocalMap,JavaLangThreadLocal,JavaLangObject> constructor(clazz(), "(Ljava/lang/ThreadLocal;Ljava/lang/Object;)V");
    return constructor.construct(a0, a1);
}

// private java.lang.ThreadLocal$ThreadLocalMap(java.lang.ThreadLocal$ThreadLocalMap)
jnipp::LocalRef<JavaLangThreadLocal_ThreadLocalMap> JavaLangThreadLocal_ThreadLocalMap::construct(const jnipp::Ref<JavaLangThreadLocal_ThreadLocalMap>& a0) {
    static jnipp::Constructor<JavaLangThreadLocal_ThreadLocalMap,JavaLangThreadLocal_ThreadLocalMap> constructor(clazz(), "(Ljava/lang/ThreadLocal$ThreadLocalMap;)V");
    return constructor.construct(a0);
}

// java.lang.ThreadLocal$ThreadLocalMap(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal$1)
jnipp::LocalRef<JavaLangThreadLocal_ThreadLocalMap> JavaLangThreadLocal_ThreadLocalMap::construct(const jnipp::Ref<JavaLangThreadLocal_ThreadLocalMap>& a0, const jnipp::Ref<JavaLangThreadLocal_1>& a1) {
    static jnipp::Constructor<JavaLangThreadLocal_ThreadLocalMap,JavaLangThreadLocal_ThreadLocalMap,JavaLangThreadLocal_1> constructor(clazz(), "(Ljava/lang/ThreadLocal$ThreadLocalMap;Ljava/lang/ThreadLocal$1;)V");
    return constructor.construct(a0, a1);
}

// private void java.lang.ThreadLocal$ThreadLocalMap.remove(java.lang.ThreadLocal)
void JavaLangThreadLocal_ThreadLocalMap::remove(const jnipp::Ref<JavaLangThreadLocal>& a0) const {
    static jnipp::Method<void,JavaLangThreadLocal> method(clazz(), "remove", "(Ljava/lang/ThreadLocal;)V");
    method.call(*this, a0);
}

// private void java.lang.ThreadLocal$ThreadLocalMap.rehash()
void JavaLangThreadLocal_ThreadLocalMap::rehash() const {
    static jnipp::Method<void> method(clazz(), "rehash", "()V");
    method.call(*this);
}

// private void java.lang.ThreadLocal$ThreadLocalMap.set(java.lang.ThreadLocal,java.lang.Object)
void JavaLangThreadLocal_ThreadLocalMap::set(const jnipp::Ref<JavaLangThreadLocal>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangThreadLocal,JavaLangObject> method(clazz(), "set", "(Ljava/lang/ThreadLocal;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// private static int java.lang.ThreadLocal$ThreadLocalMap.nextIndex(int,int)
jint JavaLangThreadLocal_ThreadLocalMap::nextIndex(jint a0, jint a1) {
    static jnipp::StaticMethod<jint,jint,jint> method(clazz(), "nextIndex", "(II)I");
    return method.call(a0, a1);
}

// private java.lang.ThreadLocal$ThreadLocalMap$Entry java.lang.ThreadLocal$ThreadLocalMap.getEntry(java.lang.ThreadLocal)
jnipp::LocalRef<JavaLangThreadLocal_ThreadLocalMap_Entry> JavaLangThreadLocal_ThreadLocalMap::getEntry(const jnipp::Ref<JavaLangThreadLocal>& a0) const {
    static jnipp::Method<JavaLangThreadLocal_ThreadLocalMap_Entry,JavaLangThreadLocal> method(clazz(), "getEntry", "(Ljava/lang/ThreadLocal;)Ljava/lang/ThreadLocal$ThreadLocalMap$Entry;");
    return method.call(*this, a0);
}

// private void java.lang.ThreadLocal$ThreadLocalMap.resize()
void JavaLangThreadLocal_ThreadLocalMap::resize() const {
    static jnipp::Method<void> method(clazz(), "resize", "()V");
    method.call(*this);
}

// private void java.lang.ThreadLocal$ThreadLocalMap.setThreshold(int)
void JavaLangThreadLocal_ThreadLocalMap::setThreshold(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setThreshold", "(I)V");
    method.call(*this, a0);
}

// private static int java.lang.ThreadLocal$ThreadLocalMap.prevIndex(int,int)
jint JavaLangThreadLocal_ThreadLocalMap::prevIndex(jint a0, jint a1) {
    static jnipp::StaticMethod<jint,jint,jint> method(clazz(), "prevIndex", "(II)I");
    return method.call(a0, a1);
}

// private java.lang.ThreadLocal$ThreadLocalMap$Entry java.lang.ThreadLocal$ThreadLocalMap.getEntryAfterMiss(java.lang.ThreadLocal,int,java.lang.ThreadLocal$ThreadLocalMap$Entry)
jnipp::LocalRef<JavaLangThreadLocal_ThreadLocalMap_Entry> JavaLangThreadLocal_ThreadLocalMap::getEntryAfterMiss(const jnipp::Ref<JavaLangThreadLocal>& a0, jint a1, const jnipp::Ref<JavaLangThreadLocal_ThreadLocalMap_Entry>& a2) const {
    static jnipp::Method<JavaLangThreadLocal_ThreadLocalMap_Entry,JavaLangThreadLocal,jint,JavaLangThreadLocal_ThreadLocalMap_Entry> method(clazz(), "getEntryAfterMiss", "(Ljava/lang/ThreadLocal;ILjava/lang/ThreadLocal$ThreadLocalMap$Entry;)Ljava/lang/ThreadLocal$ThreadLocalMap$Entry;");
    return method.call(*this, a0, a1, a2);
}

// private void java.lang.ThreadLocal$ThreadLocalMap.replaceStaleEntry(java.lang.ThreadLocal,java.lang.Object,int)
void JavaLangThreadLocal_ThreadLocalMap::replaceStaleEntry(const jnipp::Ref<JavaLangThreadLocal>& a0, const jnipp::Ref<JavaLangObject>& a1, jint a2) const {
    static jnipp::Method<void,JavaLangThreadLocal,JavaLangObject,jint> method(clazz(), "replaceStaleEntry", "(Ljava/lang/ThreadLocal;Ljava/lang/Object;I)V");
    method.call(*this, a0, a1, a2);
}

// private int java.lang.ThreadLocal$ThreadLocalMap.expungeStaleEntry(int)
jint JavaLangThreadLocal_ThreadLocalMap::expungeStaleEntry(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "expungeStaleEntry", "(I)I");
    return method.call(*this, a0);
}

// private boolean java.lang.ThreadLocal$ThreadLocalMap.cleanSomeSlots(int,int)
jboolean JavaLangThreadLocal_ThreadLocalMap::cleanSomeSlots(jint a0, jint a1) const {
    static jnipp::Method<jboolean,jint,jint> method(clazz(), "cleanSomeSlots", "(II)Z");
    return method.call(*this, a0, a1);
}

// private void java.lang.ThreadLocal$ThreadLocalMap.expungeStaleEntries()
void JavaLangThreadLocal_ThreadLocalMap::expungeStaleEntries() const {
    static jnipp::Method<void> method(clazz(), "expungeStaleEntries", "()V");
    method.call(*this);
}
#undef INITIAL_CAPACITY
const jnipp::StaticField<jint> JavaLangThreadLocal_ThreadLocalMap::INITIAL_CAPACITY ("java/lang/ThreadLocal$ThreadLocalMap", "INITIAL_CAPACITY", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangNumber::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Number"));
    return cls;
}

// public java.lang.Number()
jnipp::LocalRef<JavaLangNumber> JavaLangNumber::construct() {
    static jnipp::Constructor<JavaLangNumber> constructor(clazz(), "()V");
    return constructor.construct();
}

// public byte java.lang.Number.byteValue()
jbyte JavaLangNumber::byteValue() const {
    static jnipp::Method<jbyte> method(clazz(), "byteValue", "()B");
    return method.call(*this);
}

// public short java.lang.Number.shortValue()
jshort JavaLangNumber::shortValue() const {
    static jnipp::Method<jshort> method(clazz(), "shortValue", "()S");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangNumber::serialVersionUID ("java/lang/Number", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentAtomicAtomicInteger::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/atomic/AtomicInteger"));
    return cls;
}

// public java.util.concurrent.atomic.AtomicInteger(int)
jnipp::LocalRef<JavaUtilConcurrentAtomicAtomicInteger> JavaUtilConcurrentAtomicAtomicInteger::construct(jint a0) {
    static jnipp::Constructor<JavaUtilConcurrentAtomicAtomicInteger,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.util.concurrent.atomic.AtomicInteger()
jnipp::LocalRef<JavaUtilConcurrentAtomicAtomicInteger> JavaUtilConcurrentAtomicAtomicInteger::construct() {
    static jnipp::Constructor<JavaUtilConcurrentAtomicAtomicInteger> constructor(clazz(), "()V");
    return constructor.construct();
}

// public final int java.util.concurrent.atomic.AtomicInteger.get()
jint JavaUtilConcurrentAtomicAtomicInteger::get() const {
    static jnipp::Method<jint> method(clazz(), "get", "()I");
    return method.call(*this);
}

// public final int java.util.concurrent.atomic.AtomicInteger.getAndSet(int)
jint JavaUtilConcurrentAtomicAtomicInteger::getAndSet(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "getAndSet", "(I)I");
    return method.call(*this, a0);
}

// public int java.util.concurrent.atomic.AtomicInteger.intValue()
jint JavaUtilConcurrentAtomicAtomicInteger::intValue() const {
    static jnipp::Method<jint> method(clazz(), "intValue", "()I");
    return method.call(*this);
}

// public long java.util.concurrent.atomic.AtomicInteger.longValue()
jlong JavaUtilConcurrentAtomicAtomicInteger::longValue() const {
    static jnipp::Method<jlong> method(clazz(), "longValue", "()J");
    return method.call(*this);
}

// public float java.util.concurrent.atomic.AtomicInteger.floatValue()
jfloat JavaUtilConcurrentAtomicAtomicInteger::floatValue() const {
    static jnipp::Method<jfloat> method(clazz(), "floatValue", "()F");
    return method.call(*this);
}

// public double java.util.concurrent.atomic.AtomicInteger.doubleValue()
jdouble JavaUtilConcurrentAtomicAtomicInteger::doubleValue() const {
    static jnipp::Method<jdouble> method(clazz(), "doubleValue", "()D");
    return method.call(*this);
}

// public final void java.util.concurrent.atomic.AtomicInteger.set(int)
void JavaUtilConcurrentAtomicAtomicInteger::set(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "set", "(I)V");
    method.call(*this, a0);
}

// public final void java.util.concurrent.atomic.AtomicInteger.lazySet(int)
void JavaUtilConcurrentAtomicAtomicInteger::lazySet(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "lazySet", "(I)V");
    method.call(*this, a0);
}

// public final int java.util.concurrent.atomic.AtomicInteger.getAndAdd(int)
jint JavaUtilConcurrentAtomicAtomicInteger::getAndAdd(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "getAndAdd", "(I)I");
    return method.call(*this, a0);
}

// public final boolean java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int)
jboolean JavaUtilConcurrentAtomicAtomicInteger::compareAndSet(jint a0, jint a1) const {
    static jnipp::Method<jboolean,jint,jint> method(clazz(), "compareAndSet", "(II)Z");
    return method.call(*this, a0, a1);
}

// public final boolean java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(int,int)
jboolean JavaUtilConcurrentAtomicAtomicInteger::weakCompareAndSet(jint a0, jint a1) const {
    static jnipp::Method<jboolean,jint,jint> method(clazz(), "weakCompareAndSet", "(II)Z");
    return method.call(*this, a0, a1);
}

// public final int java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
jint JavaUtilConcurrentAtomicAtomicInteger::getAndIncrement() const {
    static jnipp::Method<jint> method(clazz(), "getAndIncrement", "()I");
    return method.call(*this);
}

// public final int java.util.concurrent.atomic.AtomicInteger.getAndDecrement()
jint JavaUtilConcurrentAtomicAtomicInteger::getAndDecrement() const {
    static jnipp::Method<jint> method(clazz(), "getAndDecrement", "()I");
    return method.call(*this);
}

// public final int java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
jint JavaUtilConcurrentAtomicAtomicInteger::incrementAndGet() const {
    static jnipp::Method<jint> method(clazz(), "incrementAndGet", "()I");
    return method.call(*this);
}

// public final int java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
jint JavaUtilConcurrentAtomicAtomicInteger::decrementAndGet() const {
    static jnipp::Method<jint> method(clazz(), "decrementAndGet", "()I");
    return method.call(*this);
}

// public final int java.util.concurrent.atomic.AtomicInteger.addAndGet(int)
jint JavaUtilConcurrentAtomicAtomicInteger::addAndGet(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "addAndGet", "(I)I");
    return method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentAtomicAtomicInteger::serialVersionUID ("java/util/concurrent/atomic/AtomicInteger", "serialVersionUID", "J");
#undef unsafe
const jnipp::StaticField<SunMiscUnsafe> JavaUtilConcurrentAtomicAtomicInteger::unsafe ("java/util/concurrent/atomic/AtomicInteger", "unsafe", "Lsun/misc/Unsafe;");
#undef valueOffset
const jnipp::StaticField<jlong> JavaUtilConcurrentAtomicAtomicInteger::valueOffset ("java/util/concurrent/atomic/AtomicInteger", "valueOffset", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaNioByteOrder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/ByteOrder"));
    return cls;
}

// private java.nio.ByteOrder(java.lang.String)
jnipp::LocalRef<JavaNioByteOrder> JavaNioByteOrder::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaNioByteOrder,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public static java.nio.ByteOrder java.nio.ByteOrder.nativeOrder()
jnipp::LocalRef<JavaNioByteOrder> JavaNioByteOrder::nativeOrder() {
    static jnipp::StaticMethod<JavaNioByteOrder> method(clazz(), "nativeOrder", "()Ljava/nio/ByteOrder;");
    return method.call();
}
#undef BIG_ENDIAN
const jnipp::StaticField<JavaNioByteOrder> JavaNioByteOrder::BIG_ENDIAN ("java/nio/ByteOrder", "BIG_ENDIAN", "Ljava/nio/ByteOrder;");
#undef LITTLE_ENDIAN
const jnipp::StaticField<JavaNioByteOrder> JavaNioByteOrder::LITTLE_ENDIAN ("java/nio/ByteOrder", "LITTLE_ENDIAN", "Ljava/nio/ByteOrder;");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectOutputStream_PutField::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectOutputStream$PutField"));
    return cls;
}

// public java.io.ObjectOutputStream$PutField()
jnipp::LocalRef<JavaIoObjectOutputStream_PutField> JavaIoObjectOutputStream_PutField::construct() {
    static jnipp::Constructor<JavaIoObjectOutputStream_PutField> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectOutputStream_BlockDataOutputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectOutputStream$BlockDataOutputStream"));
    return cls;
}

// java.io.ObjectOutputStream$BlockDataOutputStream(java.io.OutputStream)
jnipp::LocalRef<JavaIoObjectOutputStream_BlockDataOutputStream> JavaIoObjectOutputStream_BlockDataOutputStream::construct(const jnipp::Ref<JavaIoOutputStream>& a0) {
    static jnipp::Constructor<JavaIoObjectOutputStream_BlockDataOutputStream,JavaIoOutputStream> constructor(clazz(), "(Ljava/io/OutputStream;)V");
    return constructor.construct(a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.write(int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.write(byte[]) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "write", "([B)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.write(byte[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "write", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.write(byte[],int,int,boolean) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2, jboolean a3) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint,jboolean> method(clazz(), "write", "([BIIZ)V");
    method.call(*this, a0, a1, a2, a3);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.flush() throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.close() throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeInt(int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeInt(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeInt", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeBytes(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeBytes(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeBytes", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeChar(int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeChar(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeChar", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeUTF(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeUTF(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeUTF", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeUTF(java.lang.String,long) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeUTF(const jnipp::Ref<JavaLangString>& a0, jlong a1) const {
    static jnipp::Method<void,JavaLangString,jlong> method(clazz(), "writeUTF", "(Ljava/lang/String;J)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeFloat(float) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeFloat(jfloat a0) const {
    static jnipp::Method<void,jfloat> method(clazz(), "writeFloat", "(F)V");
    method.call(*this, a0);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.drain() throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::drain() const {
    static jnipp::Method<void> method(clazz(), "drain", "()V");
    method.call(*this);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeBoolean(boolean) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeBoolean(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "writeBoolean", "(Z)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeByte(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeByte", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeShort(int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeShort(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeShort", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeLong(long) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeLong(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "writeLong", "(J)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeDouble(double) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeDouble(jdouble a0) const {
    static jnipp::Method<void,jdouble> method(clazz(), "writeDouble", "(D)V");
    method.call(*this, a0);
}

// public void java.io.ObjectOutputStream$BlockDataOutputStream.writeChars(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeChars(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeChars", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeChars(char[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeChars(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jchar>,jint,jint> method(clazz(), "writeChars", "([CII)V");
    method.call(*this, a0, a1, a2);
}

// long java.io.ObjectOutputStream$BlockDataOutputStream.getUTFLength(java.lang.String)
jlong JavaIoObjectOutputStream_BlockDataOutputStream::getUTFLength(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jlong,JavaLangString> method(clazz(), "getUTFLength", "(Ljava/lang/String;)J");
    return method.call(*this, a0);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeLongUTF(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeLongUTF(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeLongUTF", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeLongUTF(java.lang.String,long) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeLongUTF(const jnipp::Ref<JavaLangString>& a0, jlong a1) const {
    static jnipp::Method<void,JavaLangString,jlong> method(clazz(), "writeLongUTF", "(Ljava/lang/String;J)V");
    method.call(*this, a0, a1);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeInts(int[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeInts(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jint>,jint,jint> method(clazz(), "writeInts", "([III)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeLongs(long[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeLongs(const jnipp::Ref<jnipp::Array<jlong>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jlong>,jint,jint> method(clazz(), "writeLongs", "([JII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeFloats(float[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeFloats(const jnipp::Ref<jnipp::Array<jfloat>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jfloat>,jint,jint> method(clazz(), "writeFloats", "([FII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeDoubles(double[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeDoubles(const jnipp::Ref<jnipp::Array<jdouble>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jdouble>,jint,jint> method(clazz(), "writeDoubles", "([DII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeShorts(short[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeShorts(const jnipp::Ref<jnipp::Array<jshort>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jshort>,jint,jint> method(clazz(), "writeShorts", "([SII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectOutputStream$BlockDataOutputStream.writeBooleans(boolean[],int,int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeBooleans(const jnipp::Ref<jnipp::Array<jboolean>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jboolean>,jint,jint> method(clazz(), "writeBooleans", "([ZII)V");
    method.call(*this, a0, a1, a2);
}

// private void java.io.ObjectOutputStream$BlockDataOutputStream.writeBlockHeader(int) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeBlockHeader(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeBlockHeader", "(I)V");
    method.call(*this, a0);
}

// private void java.io.ObjectOutputStream$BlockDataOutputStream.writeUTFBody(java.lang.String) throws java.io.IOException
void JavaIoObjectOutputStream_BlockDataOutputStream::writeUTFBody(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeUTFBody", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// boolean java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(boolean) throws java.io.IOException
jboolean JavaIoObjectOutputStream_BlockDataOutputStream::setBlockDataMode(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "setBlockDataMode", "(Z)Z");
    return method.call(*this, a0);
}

// boolean java.io.ObjectOutputStream$BlockDataOutputStream.getBlockDataMode()
jboolean JavaIoObjectOutputStream_BlockDataOutputStream::getBlockDataMode() const {
    static jnipp::Method<jboolean> method(clazz(), "getBlockDataMode", "()Z");
    return method.call(*this);
}
#undef MAX_BLOCK_SIZE
const jnipp::StaticField<jint> JavaIoObjectOutputStream_BlockDataOutputStream::MAX_BLOCK_SIZE ("java/io/ObjectOutputStream$BlockDataOutputStream", "MAX_BLOCK_SIZE", "I");
#undef MAX_HEADER_SIZE
const jnipp::StaticField<jint> JavaIoObjectOutputStream_BlockDataOutputStream::MAX_HEADER_SIZE ("java/io/ObjectOutputStream$BlockDataOutputStream", "MAX_HEADER_SIZE", "I");
#undef CHAR_BUF_SIZE
const jnipp::StaticField<jint> JavaIoObjectOutputStream_BlockDataOutputStream::CHAR_BUF_SIZE ("java/io/ObjectOutputStream$BlockDataOutputStream", "CHAR_BUF_SIZE", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectOutputStream_DebugTraceInfoStack::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectOutputStream$DebugTraceInfoStack"));
    return cls;
}

// java.io.ObjectOutputStream$DebugTraceInfoStack()
jnipp::LocalRef<JavaIoObjectOutputStream_DebugTraceInfoStack> JavaIoObjectOutputStream_DebugTraceInfoStack::construct() {
    static jnipp::Constructor<JavaIoObjectOutputStream_DebugTraceInfoStack> constructor(clazz(), "()V");
    return constructor.construct();
}

// void java.io.ObjectOutputStream$DebugTraceInfoStack.clear()
void JavaIoObjectOutputStream_DebugTraceInfoStack::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// void java.io.ObjectOutputStream$DebugTraceInfoStack.push(java.lang.String)
void JavaIoObjectOutputStream_DebugTraceInfoStack::push(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "push", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// void java.io.ObjectOutputStream$DebugTraceInfoStack.pop()
void JavaIoObjectOutputStream_DebugTraceInfoStack::pop() const {
    static jnipp::Method<void> method(clazz(), "pop", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoExternalizable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/Externalizable"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectOutputStream_ReplaceTable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectOutputStream$ReplaceTable"));
    return cls;
}

// java.io.ObjectOutputStream$ReplaceTable(int,float)
jnipp::LocalRef<JavaIoObjectOutputStream_ReplaceTable> JavaIoObjectOutputStream_ReplaceTable::construct(jint a0, jfloat a1) {
    static jnipp::Constructor<JavaIoObjectOutputStream_ReplaceTable,jint,jfloat> constructor(clazz(), "(IF)V");
    return constructor.construct(a0, a1);
}

// void java.io.ObjectOutputStream$ReplaceTable.clear()
void JavaIoObjectOutputStream_ReplaceTable::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// int java.io.ObjectOutputStream$ReplaceTable.size()
jint JavaIoObjectOutputStream_ReplaceTable::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// java.lang.Object java.io.ObjectOutputStream$ReplaceTable.lookup(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaIoObjectOutputStream_ReplaceTable::lookup(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "lookup", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private void java.io.ObjectOutputStream$ReplaceTable.grow()
void JavaIoObjectOutputStream_ReplaceTable::grow() const {
    static jnipp::Method<void> method(clazz(), "grow", "()V");
    method.call(*this);
}

// void java.io.ObjectOutputStream$ReplaceTable.assign(java.lang.Object,java.lang.Object)
void JavaIoObjectOutputStream_ReplaceTable::assign(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaLangObject> method(clazz(), "assign", "(Ljava/lang/Object;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThrowable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Throwable"));
    return cls;
}

// protected java.lang.Throwable(java.lang.String,java.lang.Throwable,boolean,boolean)
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1, jboolean a2, jboolean a3) {
    static jnipp::Constructor<JavaLangThrowable,JavaLangString,JavaLangThrowable,jboolean,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.lang.Throwable(java.lang.Throwable)
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::construct(const jnipp::Ref<JavaLangThrowable>& a0) {
    static jnipp::Constructor<JavaLangThrowable,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/Throwable;)V");
    return constructor.construct(a0);
}

// public java.lang.Throwable(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaLangThrowable,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Throwable(java.lang.String)
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangThrowable,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.Throwable()
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::construct() {
    static jnipp::Constructor<JavaLangThrowable> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.lang.Throwable.printStackTrace()
void JavaLangThrowable::printStackTrace() const {
    static jnipp::Method<void> method(clazz(), "printStackTrace", "()V");
    method.call(*this);
}

// private void java.lang.Throwable.printStackTrace(java.lang.Throwable$PrintStreamOrWriter)
void JavaLangThrowable::printStackTrace(const jnipp::Ref<JavaLangThrowable_PrintStreamOrWriter>& a0) const {
    static jnipp::Method<void,JavaLangThrowable_PrintStreamOrWriter> method(clazz(), "printStackTrace", "(Ljava/lang/Throwable$PrintStreamOrWriter;)V");
    method.call(*this, a0);
}

// public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
void JavaLangThrowable::printStackTrace(const jnipp::Ref<JavaIoPrintWriter>& a0) const {
    static jnipp::Method<void,JavaIoPrintWriter> method(clazz(), "printStackTrace", "(Ljava/io/PrintWriter;)V");
    method.call(*this, a0);
}

// public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
void JavaLangThrowable::printStackTrace(const jnipp::Ref<JavaIoPrintStream>& a0) const {
    static jnipp::Method<void,JavaIoPrintStream> method(clazz(), "printStackTrace", "(Ljava/io/PrintStream;)V");
    method.call(*this, a0);
}

// public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::fillInStackTrace() const {
    static jnipp::Method<JavaLangThrowable> method(clazz(), "fillInStackTrace", "()Ljava/lang/Throwable;");
    return method.call(*this);
}

// private native java.lang.Throwable java.lang.Throwable.fillInStackTrace(int)
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::fillInStackTrace(jint a0) const {
    static jnipp::Method<JavaLangThrowable,jint> method(clazz(), "fillInStackTrace", "(I)Ljava/lang/Throwable;");
    return method.call(*this, a0);
}

// public synchronized java.lang.Throwable java.lang.Throwable.getCause()
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::getCause() const {
    static jnipp::Method<JavaLangThrowable> method(clazz(), "getCause", "()Ljava/lang/Throwable;");
    return method.call(*this);
}

// public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
jnipp::LocalRef<JavaLangThrowable> JavaLangThrowable::initCause(const jnipp::Ref<JavaLangThrowable>& a0) const {
    static jnipp::Method<JavaLangThrowable,JavaLangThrowable> method(clazz(), "initCause", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.Throwable.getMessage()
jnipp::LocalRef<JavaLangString> JavaLangThrowable::getMessage() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getMessage", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.Throwable.getLocalizedMessage()
jnipp::LocalRef<JavaLangString> JavaLangThrowable::getLocalizedMessage() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getLocalizedMessage", "()Ljava/lang/String;");
    return method.call(*this);
}

// private void java.lang.Throwable.printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)
void JavaLangThrowable::printEnclosedStackTrace(const jnipp::Ref<JavaLangThrowable_PrintStreamOrWriter>& a0, const jnipp::Ref<jnipp::Array<JavaLangStackTraceElement>>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaUtilSet>& a4) const {
    static jnipp::Method<void,JavaLangThrowable_PrintStreamOrWriter,jnipp::Array<JavaLangStackTraceElement>,JavaLangString,JavaLangString,JavaUtilSet> method(clazz(), "printEnclosedStackTrace", "(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V");
    method.call(*this, a0, a1, a2, a3, a4);
}

// public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
jnipp::LocalRef<jnipp::Array<JavaLangStackTraceElement>> JavaLangThrowable::getStackTrace() const {
    static jnipp::Method<jnipp::Array<JavaLangStackTraceElement>> method(clazz(), "getStackTrace", "()[Ljava/lang/StackTraceElement;");
    return method.call(*this);
}

// private synchronized java.lang.StackTraceElement[] java.lang.Throwable.getOurStackTrace()
jnipp::LocalRef<jnipp::Array<JavaLangStackTraceElement>> JavaLangThrowable::getOurStackTrace() const {
    static jnipp::Method<jnipp::Array<JavaLangStackTraceElement>> method(clazz(), "getOurStackTrace", "()[Ljava/lang/StackTraceElement;");
    return method.call(*this);
}

// public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
void JavaLangThrowable::setStackTrace(const jnipp::Ref<jnipp::Array<JavaLangStackTraceElement>>& a0) const {
    static jnipp::Method<void,jnipp::Array<JavaLangStackTraceElement>> method(clazz(), "setStackTrace", "([Ljava/lang/StackTraceElement;)V");
    method.call(*this, a0);
}

// native int java.lang.Throwable.getStackTraceDepth()
jint JavaLangThrowable::getStackTraceDepth() const {
    static jnipp::Method<jint> method(clazz(), "getStackTraceDepth", "()I");
    return method.call(*this);
}

// native java.lang.StackTraceElement java.lang.Throwable.getStackTraceElement(int)
jnipp::LocalRef<JavaLangStackTraceElement> JavaLangThrowable::getStackTraceElement(jint a0) const {
    static jnipp::Method<JavaLangStackTraceElement,jint> method(clazz(), "getStackTraceElement", "(I)Ljava/lang/StackTraceElement;");
    return method.call(*this, a0);
}

// private void java.lang.Throwable.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaLangThrowable::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private synchronized void java.lang.Throwable.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaLangThrowable::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
void JavaLangThrowable::addSuppressed(const jnipp::Ref<JavaLangThrowable>& a0) const {
    static jnipp::Method<void,JavaLangThrowable> method(clazz(), "addSuppressed", "(Ljava/lang/Throwable;)V");
    method.call(*this, a0);
}

// public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
jnipp::LocalRef<jnipp::Array<JavaLangThrowable>> JavaLangThrowable::getSuppressed() const {
    static jnipp::Method<jnipp::Array<JavaLangThrowable>> method(clazz(), "getSuppressed", "()[Ljava/lang/Throwable;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangThrowable::serialVersionUID ("java/lang/Throwable", "serialVersionUID", "J");
#undef UNASSIGNED_STACK
const jnipp::StaticField<jnipp::Array<JavaLangStackTraceElement>> JavaLangThrowable::UNASSIGNED_STACK ("java/lang/Throwable", "UNASSIGNED_STACK", "[Ljava/lang/StackTraceElement;");
#undef SUPPRESSED_SENTINEL
const jnipp::StaticField<JavaUtilList> JavaLangThrowable::SUPPRESSED_SENTINEL ("java/lang/Throwable", "SUPPRESSED_SENTINEL", "Ljava/util/List;");
#undef NULL_CAUSE_MESSAGE
const jnipp::StaticField<JavaLangString> JavaLangThrowable::NULL_CAUSE_MESSAGE ("java/lang/Throwable", "NULL_CAUSE_MESSAGE", "Ljava/lang/String;");
#undef SELF_SUPPRESSION_MESSAGE
const jnipp::StaticField<JavaLangString> JavaLangThrowable::SELF_SUPPRESSION_MESSAGE ("java/lang/Throwable", "SELF_SUPPRESSION_MESSAGE", "Ljava/lang/String;");
#undef CAUSE_CAPTION
const jnipp::StaticField<JavaLangString> JavaLangThrowable::CAUSE_CAPTION ("java/lang/Throwable", "CAUSE_CAPTION", "Ljava/lang/String;");
#undef SUPPRESSED_CAPTION
const jnipp::StaticField<JavaLangString> JavaLangThrowable::SUPPRESSED_CAPTION ("java/lang/Throwable", "SUPPRESSED_CAPTION", "Ljava/lang/String;");
#undef EMPTY_THROWABLE_ARRAY
const jnipp::StaticField<jnipp::Array<JavaLangThrowable>> JavaLangThrowable::EMPTY_THROWABLE_ARRAY ("java/lang/Throwable", "EMPTY_THROWABLE_ARRAY", "[Ljava/lang/Throwable;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaLangThrowable::$assertionsDisabled ("java/lang/Throwable", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Exception"));
    return cls;
}

// protected java.lang.Exception(java.lang.String,java.lang.Throwable,boolean,boolean)
jnipp::LocalRef<JavaLangException> JavaLangException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1, jboolean a2, jboolean a3) {
    static jnipp::Constructor<JavaLangException,JavaLangString,JavaLangThrowable,jboolean,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.lang.Exception(java.lang.Throwable)
jnipp::LocalRef<JavaLangException> JavaLangException::construct(const jnipp::Ref<JavaLangThrowable>& a0) {
    static jnipp::Constructor<JavaLangException,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/Throwable;)V");
    return constructor.construct(a0);
}

// public java.lang.Exception(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaLangException> JavaLangException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaLangException,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Exception(java.lang.String)
jnipp::LocalRef<JavaLangException> JavaLangException::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangException,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.Exception()
jnipp::LocalRef<JavaLangException> JavaLangException::construct() {
    static jnipp::Constructor<JavaLangException> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangException::serialVersionUID ("java/lang/Exception", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoIOException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/IOException"));
    return cls;
}

// public java.io.IOException(java.lang.Throwable)
jnipp::LocalRef<JavaIoIOException> JavaIoIOException::construct(const jnipp::Ref<JavaLangThrowable>& a0) {
    static jnipp::Constructor<JavaIoIOException,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/Throwable;)V");
    return constructor.construct(a0);
}

// public java.io.IOException(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaIoIOException> JavaIoIOException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaIoIOException,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}

// public java.io.IOException(java.lang.String)
jnipp::LocalRef<JavaIoIOException> JavaIoIOException::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaIoIOException,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.io.IOException()
jnipp::LocalRef<JavaIoIOException> JavaIoIOException::construct() {
    static jnipp::Constructor<JavaIoIOException> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaIoIOException::serialVersionUID ("java/io/IOException", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectOutputStream_HandleTable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectOutputStream$HandleTable"));
    return cls;
}

// java.io.ObjectOutputStream$HandleTable(int,float)
jnipp::LocalRef<JavaIoObjectOutputStream_HandleTable> JavaIoObjectOutputStream_HandleTable::construct(jint a0, jfloat a1) {
    static jnipp::Constructor<JavaIoObjectOutputStream_HandleTable,jint,jfloat> constructor(clazz(), "(IF)V");
    return constructor.construct(a0, a1);
}

// private int java.io.ObjectOutputStream$HandleTable.hash(java.lang.Object)
jint JavaIoObjectOutputStream_HandleTable::hash(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "hash", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// void java.io.ObjectOutputStream$HandleTable.clear()
void JavaIoObjectOutputStream_HandleTable::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// int java.io.ObjectOutputStream$HandleTable.size()
jint JavaIoObjectOutputStream_HandleTable::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// int java.io.ObjectOutputStream$HandleTable.lookup(java.lang.Object)
jint JavaIoObjectOutputStream_HandleTable::lookup(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "lookup", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// private void java.io.ObjectOutputStream$HandleTable.insert(java.lang.Object,int)
void JavaIoObjectOutputStream_HandleTable::insert(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangObject,jint> method(clazz(), "insert", "(Ljava/lang/Object;I)V");
    method.call(*this, a0, a1);
}

// private void java.io.ObjectOutputStream$HandleTable.growSpine()
void JavaIoObjectOutputStream_HandleTable::growSpine() const {
    static jnipp::Method<void> method(clazz(), "growSpine", "()V");
    method.call(*this);
}

// private void java.io.ObjectOutputStream$HandleTable.growEntries()
void JavaIoObjectOutputStream_HandleTable::growEntries() const {
    static jnipp::Method<void> method(clazz(), "growEntries", "()V");
    method.call(*this);
}

// int java.io.ObjectOutputStream$HandleTable.assign(java.lang.Object)
jint JavaIoObjectOutputStream_HandleTable::assign(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "assign", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoSerialCallbackContext::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/SerialCallbackContext"));
    return cls;
}

// public java.io.SerialCallbackContext(java.lang.Object,java.io.ObjectStreamClass)
jnipp::LocalRef<JavaIoSerialCallbackContext> JavaIoSerialCallbackContext::construct(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) {
    static jnipp::Constructor<JavaIoSerialCallbackContext,JavaLangObject,JavaIoObjectStreamClass> constructor(clazz(), "(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V");
    return constructor.construct(a0, a1);
}

// private void java.io.SerialCallbackContext.checkAndSetUsed() throws java.io.NotActiveException
void JavaIoSerialCallbackContext::checkAndSetUsed() const {
    static jnipp::Method<void> method(clazz(), "checkAndSetUsed", "()V");
    method.call(*this);
}

// public java.lang.Object java.io.SerialCallbackContext.getObj() throws java.io.NotActiveException
jnipp::LocalRef<JavaLangObject> JavaIoSerialCallbackContext::getObj() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getObj", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.io.ObjectStreamClass java.io.SerialCallbackContext.getDesc()
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoSerialCallbackContext::getDesc() const {
    static jnipp::Method<JavaIoObjectStreamClass> method(clazz(), "getDesc", "()Ljava/io/ObjectStreamClass;");
    return method.call(*this);
}

// public void java.io.SerialCallbackContext.setUsed()
void JavaIoSerialCallbackContext::setUsed() const {
    static jnipp::Method<void> method(clazz(), "setUsed", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectStreamClass::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectStreamClass"));
    return cls;
}

// java.io.ObjectStreamClass()
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectStreamClass::construct() {
    static jnipp::Constructor<JavaIoObjectStreamClass> constructor(clazz(), "()V");
    return constructor.construct();
}

// private java.io.ObjectStreamClass(java.lang.Class)
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectStreamClass::construct(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::Constructor<JavaIoObjectStreamClass,JavaLangClass> constructor(clazz(), "(Ljava/lang/Class;)V");
    return constructor.construct(a0);
}

// public java.lang.String java.io.ObjectStreamClass.getName()
jnipp::LocalRef<JavaLangString> JavaIoObjectStreamClass::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// java.lang.Object java.io.ObjectStreamClass.newInstance() throws java.lang.InstantiationException,java.lang.reflect.InvocationTargetException,java.lang.UnsupportedOperationException
jnipp::LocalRef<JavaLangObject> JavaIoObjectStreamClass::newInstance() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "newInstance", "()Ljava/lang/Object;");
    return method.call(*this);
}

// java.io.ObjectStreamField[] java.io.ObjectStreamClass.getFields(boolean)
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass::getFields(jboolean a0) const {
    static jnipp::Method<jnipp::Array<JavaIoObjectStreamField>,jboolean> method(clazz(), "getFields", "(Z)[Ljava/io/ObjectStreamField;");
    return method.call(*this, a0);
}

// public java.io.ObjectStreamField[] java.io.ObjectStreamClass.getFields()
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass::getFields() const {
    static jnipp::Method<jnipp::Array<JavaIoObjectStreamField>> method(clazz(), "getFields", "()[Ljava/io/ObjectStreamField;");
    return method.call(*this);
}

// java.io.ObjectStreamField java.io.ObjectStreamClass.getField(java.lang.String,java.lang.Class)
jnipp::LocalRef<JavaIoObjectStreamField> JavaIoObjectStreamClass::getField(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangClass>& a1) const {
    static jnipp::Method<JavaIoObjectStreamField,JavaLangString,JavaLangClass> method(clazz(), "getField", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/ObjectStreamField;");
    return method.call(*this, a0, a1);
}

// public java.io.ObjectStreamField java.io.ObjectStreamClass.getField(java.lang.String)
jnipp::LocalRef<JavaIoObjectStreamField> JavaIoObjectStreamClass::getField(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaIoObjectStreamField,JavaLangString> method(clazz(), "getField", "(Ljava/lang/String;)Ljava/io/ObjectStreamField;");
    return method.call(*this, a0);
}

// boolean java.io.ObjectStreamClass.isEnum()
jboolean JavaIoObjectStreamClass::isEnum() const {
    static jnipp::Method<jboolean> method(clazz(), "isEnum", "()Z");
    return method.call(*this);
}

// static void java.io.ObjectStreamClass.processQueue(java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentMap)
void JavaIoObjectStreamClass::processQueue(const jnipp::Ref<JavaLangRefReferenceQueue>& a0, const jnipp::Ref<JavaUtilConcurrentConcurrentMap>& a1) {
    static jnipp::StaticMethod<void,JavaLangRefReferenceQueue,JavaUtilConcurrentConcurrentMap> method(clazz(), "processQueue", "(Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V");
    method.call(a0, a1);
}

// public static java.io.ObjectStreamClass java.io.ObjectStreamClass.lookup(java.lang.Class)
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectStreamClass::lookup(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaIoObjectStreamClass,JavaLangClass> method(clazz(), "lookup", "(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;");
    return method.call(a0);
}

// static java.io.ObjectStreamClass java.io.ObjectStreamClass.lookup(java.lang.Class,boolean)
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectStreamClass::lookup(const jnipp::Ref<JavaLangClass>& a0, jboolean a1) {
    static jnipp::StaticMethod<JavaIoObjectStreamClass,JavaLangClass,jboolean> method(clazz(), "lookup", "(Ljava/lang/Class;Z)Ljava/io/ObjectStreamClass;");
    return method.call(a0, a1);
}

// public java.lang.Class java.io.ObjectStreamClass.forClass()
jnipp::LocalRef<JavaLangClass> JavaIoObjectStreamClass::forClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "forClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private static java.lang.String java.io.ObjectStreamClass.getClassSignature(java.lang.Class)
jnipp::LocalRef<JavaLangString> JavaIoObjectStreamClass::getClassSignature(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangClass> method(clazz(), "getClassSignature", "(Ljava/lang/Class;)Ljava/lang/String;");
    return method.call(a0);
}

// void java.io.ObjectStreamClass.writeNonProxy(java.io.ObjectOutputStream) throws java.io.IOException
void JavaIoObjectStreamClass::writeNonProxy(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeNonProxy", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// boolean java.io.ObjectStreamClass.hasWriteReplaceMethod()
jboolean JavaIoObjectStreamClass::hasWriteReplaceMethod() const {
    static jnipp::Method<jboolean> method(clazz(), "hasWriteReplaceMethod", "()Z");
    return method.call(*this);
}

// java.lang.Object java.io.ObjectStreamClass.invokeWriteReplace(java.lang.Object) throws java.io.IOException,java.lang.UnsupportedOperationException
jnipp::LocalRef<JavaLangObject> JavaIoObjectStreamClass::invokeWriteReplace(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "invokeWriteReplace", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// boolean java.io.ObjectStreamClass.isProxy()
jboolean JavaIoObjectStreamClass::isProxy() const {
    static jnipp::Method<jboolean> method(clazz(), "isProxy", "()Z");
    return method.call(*this);
}

// java.io.ObjectStreamClass java.io.ObjectStreamClass.getSuperDesc()
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectStreamClass::getSuperDesc() const {
    static jnipp::Method<JavaIoObjectStreamClass> method(clazz(), "getSuperDesc", "()Ljava/io/ObjectStreamClass;");
    return method.call(*this);
}

// void java.io.ObjectStreamClass.checkSerialize() throws java.io.InvalidClassException
void JavaIoObjectStreamClass::checkSerialize() const {
    static jnipp::Method<void> method(clazz(), "checkSerialize", "()V");
    method.call(*this);
}

// boolean java.io.ObjectStreamClass.hasWriteObjectMethod()
jboolean JavaIoObjectStreamClass::hasWriteObjectMethod() const {
    static jnipp::Method<jboolean> method(clazz(), "hasWriteObjectMethod", "()Z");
    return method.call(*this);
}

// void java.io.ObjectStreamClass.invokeWriteObject(java.lang.Object,java.io.ObjectOutputStream) throws java.io.IOException,java.lang.UnsupportedOperationException
void JavaIoObjectStreamClass::invokeWriteObject(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectOutputStream>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaIoObjectOutputStream> method(clazz(), "invokeWriteObject", "(Ljava/lang/Object;Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0, a1);
}

// void java.io.ObjectStreamClass.checkDefaultSerialize() throws java.io.InvalidClassException
void JavaIoObjectStreamClass::checkDefaultSerialize() const {
    static jnipp::Method<void> method(clazz(), "checkDefaultSerialize", "()V");
    method.call(*this);
}

// void java.io.ObjectStreamClass.getPrimFieldValues(java.lang.Object,byte[])
void JavaIoObjectStreamClass::getPrimFieldValues(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) const {
    static jnipp::Method<void,JavaLangObject,jnipp::Array<jbyte>> method(clazz(), "getPrimFieldValues", "(Ljava/lang/Object;[B)V");
    method.call(*this, a0, a1);
}

// void java.io.ObjectStreamClass.getObjFieldValues(java.lang.Object,java.lang.Object[])
void JavaIoObjectStreamClass::getObjFieldValues(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<void,JavaLangObject,jnipp::Array<JavaLangObject>> method(clazz(), "getObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// private static native void java.io.ObjectStreamClass.initNative()
void JavaIoObjectStreamClass::initNative() {
    static jnipp::StaticMethod<void> method(clazz(), "initNative", "()V");
    method.call();
}

// public static java.io.ObjectStreamClass java.io.ObjectStreamClass.lookupAny(java.lang.Class)
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectStreamClass::lookupAny(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaIoObjectStreamClass,JavaLangClass> method(clazz(), "lookupAny", "(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;");
    return method.call(a0);
}

// public long java.io.ObjectStreamClass.getSerialVersionUID()
jlong JavaIoObjectStreamClass::getSerialVersionUID() const {
    static jnipp::Method<jlong> method(clazz(), "getSerialVersionUID", "()J");
    return method.call(*this);
}

// java.io.ObjectStreamClass java.io.ObjectStreamClass.getLocalDesc()
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectStreamClass::getLocalDesc() const {
    static jnipp::Method<JavaIoObjectStreamClass> method(clazz(), "getLocalDesc", "()Ljava/io/ObjectStreamClass;");
    return method.call(*this);
}

// boolean java.io.ObjectStreamClass.isSerializable()
jboolean JavaIoObjectStreamClass::isSerializable() const {
    static jnipp::Method<jboolean> method(clazz(), "isSerializable", "()Z");
    return method.call(*this);
}

// private java.io.ObjectStreamClass$ClassDataSlot[] java.io.ObjectStreamClass.getClassDataLayout0() throws java.io.InvalidClassException
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamClass_ClassDataSlot>> JavaIoObjectStreamClass::getClassDataLayout0() const {
    static jnipp::Method<jnipp::Array<JavaIoObjectStreamClass_ClassDataSlot>> method(clazz(), "getClassDataLayout0", "()[Ljava/io/ObjectStreamClass$ClassDataSlot;");
    return method.call(*this);
}

// private void java.io.ObjectStreamClass.computeFieldOffsets() throws java.io.InvalidClassException
void JavaIoObjectStreamClass::computeFieldOffsets() const {
    static jnipp::Method<void> method(clazz(), "computeFieldOffsets", "()V");
    method.call(*this);
}

// private java.io.ObjectStreamClass java.io.ObjectStreamClass.getVariantFor(java.lang.Class) throws java.io.InvalidClassException
jnipp::LocalRef<JavaIoObjectStreamClass> JavaIoObjectStreamClass::getVariantFor(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaIoObjectStreamClass,JavaLangClass> method(clazz(), "getVariantFor", "(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;");
    return method.call(*this, a0);
}

// private static java.lang.reflect.Constructor java.io.ObjectStreamClass.getExternalizableConstructor(java.lang.Class)
jnipp::LocalRef<JavaLangReflectConstructor> JavaIoObjectStreamClass::getExternalizableConstructor(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangReflectConstructor,JavaLangClass> method(clazz(), "getExternalizableConstructor", "(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;");
    return method.call(a0);
}

// private static java.lang.reflect.Constructor java.io.ObjectStreamClass.getSerializableConstructor(java.lang.Class)
jnipp::LocalRef<JavaLangReflectConstructor> JavaIoObjectStreamClass::getSerializableConstructor(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangReflectConstructor,JavaLangClass> method(clazz(), "getSerializableConstructor", "(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;");
    return method.call(a0);
}

// private static java.lang.reflect.Method java.io.ObjectStreamClass.getInheritableMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class)
jnipp::LocalRef<JavaLangReflectMethod> JavaIoObjectStreamClass::getInheritableMethod(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a2, const jnipp::Ref<JavaLangClass>& a3) {
    static jnipp::StaticMethod<JavaLangReflectMethod,JavaLangClass,JavaLangString,jnipp::Array<JavaLangClass>,JavaLangClass> method(clazz(), "getInheritableMethod", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Method;");
    return method.call(a0, a1, a2, a3);
}

// private static java.lang.reflect.Method java.io.ObjectStreamClass.getPrivateMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class)
jnipp::LocalRef<JavaLangReflectMethod> JavaIoObjectStreamClass::getPrivateMethod(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a2, const jnipp::Ref<JavaLangClass>& a3) {
    static jnipp::StaticMethod<JavaLangReflectMethod,JavaLangClass,JavaLangString,jnipp::Array<JavaLangClass>,JavaLangClass> method(clazz(), "getPrivateMethod", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Method;");
    return method.call(a0, a1, a2, a3);
}

// private static boolean java.io.ObjectStreamClass.packageEquals(java.lang.Class,java.lang.Class)
jboolean JavaIoObjectStreamClass::packageEquals(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangClass>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangClass,JavaLangClass> method(clazz(), "packageEquals", "(Ljava/lang/Class;Ljava/lang/Class;)Z");
    return method.call(a0, a1);
}

// private static java.lang.String java.io.ObjectStreamClass.getPackageName(java.lang.Class)
jnipp::LocalRef<JavaLangString> JavaIoObjectStreamClass::getPackageName(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangClass> method(clazz(), "getPackageName", "(Ljava/lang/Class;)Ljava/lang/String;");
    return method.call(a0);
}

// private static boolean java.io.ObjectStreamClass.classNamesEqual(java.lang.String,java.lang.String)
jboolean JavaIoObjectStreamClass::classNamesEqual(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,JavaLangString> method(clazz(), "classNamesEqual", "(Ljava/lang/String;Ljava/lang/String;)Z");
    return method.call(a0, a1);
}

// private static java.lang.String java.io.ObjectStreamClass.getMethodSignature(java.lang.Class[],java.lang.Class)
jnipp::LocalRef<JavaLangString> JavaIoObjectStreamClass::getMethodSignature(const jnipp::Ref<jnipp::Array<JavaLangClass>>& a0, const jnipp::Ref<JavaLangClass>& a1) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<JavaLangClass>,JavaLangClass> method(clazz(), "getMethodSignature", "([Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/String;");
    return method.call(a0, a1);
}

// private static void java.io.ObjectStreamClass.throwMiscException(java.lang.Throwable) throws java.io.IOException
void JavaIoObjectStreamClass::throwMiscException(const jnipp::Ref<JavaLangThrowable>& a0) {
    static jnipp::StaticMethod<void,JavaLangThrowable> method(clazz(), "throwMiscException", "(Ljava/lang/Throwable;)V");
    method.call(a0);
}

// private static java.io.ObjectStreamField[] java.io.ObjectStreamClass.getSerialFields(java.lang.Class) throws java.io.InvalidClassException
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass::getSerialFields(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaIoObjectStreamField>,JavaLangClass> method(clazz(), "getSerialFields", "(Ljava/lang/Class;)[Ljava/io/ObjectStreamField;");
    return method.call(a0);
}

// private static java.io.ObjectStreamField[] java.io.ObjectStreamClass.getDeclaredSerialFields(java.lang.Class) throws java.io.InvalidClassException
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass::getDeclaredSerialFields(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaIoObjectStreamField>,JavaLangClass> method(clazz(), "getDeclaredSerialFields", "(Ljava/lang/Class;)[Ljava/io/ObjectStreamField;");
    return method.call(a0);
}

// private static java.io.ObjectStreamField[] java.io.ObjectStreamClass.getDefaultSerialFields(java.lang.Class)
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass::getDefaultSerialFields(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaIoObjectStreamField>,JavaLangClass> method(clazz(), "getDefaultSerialFields", "(Ljava/lang/Class;)[Ljava/io/ObjectStreamField;");
    return method.call(a0);
}

// private static java.lang.Long java.io.ObjectStreamClass.getDeclaredSUID(java.lang.Class)
jnipp::LocalRef<JavaLangLong> JavaIoObjectStreamClass::getDeclaredSUID(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangLong,JavaLangClass> method(clazz(), "getDeclaredSUID", "(Ljava/lang/Class;)Ljava/lang/Long;");
    return method.call(a0);
}

// private static long java.io.ObjectStreamClass.computeDefaultSUID(java.lang.Class)
jlong JavaIoObjectStreamClass::computeDefaultSUID(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jlong,JavaLangClass> method(clazz(), "computeDefaultSUID", "(Ljava/lang/Class;)J");
    return method.call(a0);
}

// private static native boolean java.io.ObjectStreamClass.hasStaticInitializer(java.lang.Class)
jboolean JavaIoObjectStreamClass::hasStaticInitializer(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangClass> method(clazz(), "hasStaticInitializer", "(Ljava/lang/Class;)Z");
    return method.call(a0);
}

// private static java.io.ObjectStreamClass$FieldReflector java.io.ObjectStreamClass.getReflector(java.io.ObjectStreamField[],java.io.ObjectStreamClass) throws java.io.InvalidClassException
jnipp::LocalRef<JavaIoObjectStreamClass_FieldReflector> JavaIoObjectStreamClass::getReflector(const jnipp::Ref<jnipp::Array<JavaIoObjectStreamField>>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) {
    static jnipp::StaticMethod<JavaIoObjectStreamClass_FieldReflector,jnipp::Array<JavaIoObjectStreamField>,JavaIoObjectStreamClass> method(clazz(), "getReflector", "([Ljava/io/ObjectStreamField;Ljava/io/ObjectStreamClass;)Ljava/io/ObjectStreamClass$FieldReflector;");
    return method.call(a0, a1);
}

// private static java.io.ObjectStreamField[] java.io.ObjectStreamClass.matchFields(java.io.ObjectStreamField[],java.io.ObjectStreamClass) throws java.io.InvalidClassException
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass::matchFields(const jnipp::Ref<jnipp::Array<JavaIoObjectStreamField>>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) {
    static jnipp::StaticMethod<jnipp::Array<JavaIoObjectStreamField>,jnipp::Array<JavaIoObjectStreamField>,JavaIoObjectStreamClass> method(clazz(), "matchFields", "([Ljava/io/ObjectStreamField;Ljava/io/ObjectStreamClass;)[Ljava/io/ObjectStreamField;");
    return method.call(a0, a1);
}

// boolean java.io.ObjectStreamClass.hasWriteObjectData()
jboolean JavaIoObjectStreamClass::hasWriteObjectData() const {
    static jnipp::Method<jboolean> method(clazz(), "hasWriteObjectData", "()Z");
    return method.call(*this);
}

// void java.io.ObjectStreamClass.readNonProxy(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaIoObjectStreamClass::readNonProxy(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readNonProxy", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// java.lang.ClassNotFoundException java.io.ObjectStreamClass.getResolveException()
jnipp::LocalRef<JavaLangClassNotFoundException> JavaIoObjectStreamClass::getResolveException() const {
    static jnipp::Method<JavaLangClassNotFoundException> method(clazz(), "getResolveException", "()Ljava/lang/ClassNotFoundException;");
    return method.call(*this);
}

// void java.io.ObjectStreamClass.initProxy(java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass) throws java.io.InvalidClassException
void JavaIoObjectStreamClass::initProxy(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangClassNotFoundException>& a1, const jnipp::Ref<JavaIoObjectStreamClass>& a2) const {
    static jnipp::Method<void,JavaLangClass,JavaLangClassNotFoundException,JavaIoObjectStreamClass> method(clazz(), "initProxy", "(Ljava/lang/Class;Ljava/lang/ClassNotFoundException;Ljava/io/ObjectStreamClass;)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectStreamClass.initNonProxy(java.io.ObjectStreamClass,java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass) throws java.io.InvalidClassException
void JavaIoObjectStreamClass::initNonProxy(const jnipp::Ref<JavaIoObjectStreamClass>& a0, const jnipp::Ref<JavaLangClass>& a1, const jnipp::Ref<JavaLangClassNotFoundException>& a2, const jnipp::Ref<JavaIoObjectStreamClass>& a3) const {
    static jnipp::Method<void,JavaIoObjectStreamClass,JavaLangClass,JavaLangClassNotFoundException,JavaIoObjectStreamClass> method(clazz(), "initNonProxy", "(Ljava/io/ObjectStreamClass;Ljava/lang/Class;Ljava/lang/ClassNotFoundException;Ljava/io/ObjectStreamClass;)V");
    method.call(*this, a0, a1, a2, a3);
}

// void java.io.ObjectStreamClass.checkDeserialize() throws java.io.InvalidClassException
void JavaIoObjectStreamClass::checkDeserialize() const {
    static jnipp::Method<void> method(clazz(), "checkDeserialize", "()V");
    method.call(*this);
}

// boolean java.io.ObjectStreamClass.isInstantiable()
jboolean JavaIoObjectStreamClass::isInstantiable() const {
    static jnipp::Method<jboolean> method(clazz(), "isInstantiable", "()Z");
    return method.call(*this);
}

// boolean java.io.ObjectStreamClass.isExternalizable()
jboolean JavaIoObjectStreamClass::isExternalizable() const {
    static jnipp::Method<jboolean> method(clazz(), "isExternalizable", "()Z");
    return method.call(*this);
}

// boolean java.io.ObjectStreamClass.hasReadResolveMethod()
jboolean JavaIoObjectStreamClass::hasReadResolveMethod() const {
    static jnipp::Method<jboolean> method(clazz(), "hasReadResolveMethod", "()Z");
    return method.call(*this);
}

// java.lang.Object java.io.ObjectStreamClass.invokeReadResolve(java.lang.Object) throws java.io.IOException,java.lang.UnsupportedOperationException
jnipp::LocalRef<JavaLangObject> JavaIoObjectStreamClass::invokeReadResolve(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "invokeReadResolve", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// boolean java.io.ObjectStreamClass.hasBlockExternalData()
jboolean JavaIoObjectStreamClass::hasBlockExternalData() const {
    static jnipp::Method<jboolean> method(clazz(), "hasBlockExternalData", "()Z");
    return method.call(*this);
}

// java.io.ObjectStreamClass$ClassDataSlot[] java.io.ObjectStreamClass.getClassDataLayout() throws java.io.InvalidClassException
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamClass_ClassDataSlot>> JavaIoObjectStreamClass::getClassDataLayout() const {
    static jnipp::Method<jnipp::Array<JavaIoObjectStreamClass_ClassDataSlot>> method(clazz(), "getClassDataLayout", "()[Ljava/io/ObjectStreamClass$ClassDataSlot;");
    return method.call(*this);
}

// boolean java.io.ObjectStreamClass.hasReadObjectMethod()
jboolean JavaIoObjectStreamClass::hasReadObjectMethod() const {
    static jnipp::Method<jboolean> method(clazz(), "hasReadObjectMethod", "()Z");
    return method.call(*this);
}

// void java.io.ObjectStreamClass.invokeReadObject(java.lang.Object,java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException,java.lang.UnsupportedOperationException
void JavaIoObjectStreamClass::invokeReadObject(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaIoObjectInputStream>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaIoObjectInputStream> method(clazz(), "invokeReadObject", "(Ljava/lang/Object;Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0, a1);
}

// boolean java.io.ObjectStreamClass.hasReadObjectNoDataMethod()
jboolean JavaIoObjectStreamClass::hasReadObjectNoDataMethod() const {
    static jnipp::Method<jboolean> method(clazz(), "hasReadObjectNoDataMethod", "()Z");
    return method.call(*this);
}

// void java.io.ObjectStreamClass.invokeReadObjectNoData(java.lang.Object) throws java.io.IOException,java.lang.UnsupportedOperationException
void JavaIoObjectStreamClass::invokeReadObjectNoData(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "invokeReadObjectNoData", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// int java.io.ObjectStreamClass.getPrimDataSize()
jint JavaIoObjectStreamClass::getPrimDataSize() const {
    static jnipp::Method<jint> method(clazz(), "getPrimDataSize", "()I");
    return method.call(*this);
}

// void java.io.ObjectStreamClass.setPrimFieldValues(java.lang.Object,byte[])
void JavaIoObjectStreamClass::setPrimFieldValues(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) const {
    static jnipp::Method<void,JavaLangObject,jnipp::Array<jbyte>> method(clazz(), "setPrimFieldValues", "(Ljava/lang/Object;[B)V");
    method.call(*this, a0, a1);
}

// int java.io.ObjectStreamClass.getNumObjFields()
jint JavaIoObjectStreamClass::getNumObjFields() const {
    static jnipp::Method<jint> method(clazz(), "getNumObjFields", "()I");
    return method.call(*this);
}

// void java.io.ObjectStreamClass.setObjFieldValues(java.lang.Object,java.lang.Object[])
void JavaIoObjectStreamClass::setObjFieldValues(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<void,JavaLangObject,jnipp::Array<JavaLangObject>> method(clazz(), "setObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}
#undef NO_FIELDS
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass::NO_FIELDS ("java/io/ObjectStreamClass", "NO_FIELDS", "[Ljava/io/ObjectStreamField;");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaIoObjectStreamClass::serialVersionUID ("java/io/ObjectStreamClass", "serialVersionUID", "J");
#undef serialPersistentFields
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass::serialPersistentFields ("java/io/ObjectStreamClass", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
#undef reflFactory
const jnipp::StaticField<SunReflectReflectionFactory> JavaIoObjectStreamClass::reflFactory ("java/io/ObjectStreamClass", "reflFactory", "Lsun/reflect/ReflectionFactory;");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectOutputStream_PutFieldImpl::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectOutputStream$PutFieldImpl"));
    return cls;
}

// java.io.ObjectOutputStream$PutFieldImpl(java.io.ObjectOutputStream,java.io.ObjectStreamClass)
jnipp::LocalRef<JavaIoObjectOutputStream_PutFieldImpl> JavaIoObjectOutputStream_PutFieldImpl::construct(const jnipp::Ref<JavaIoObjectOutputStream>& a0, const jnipp::Ref<JavaIoObjectStreamClass>& a1) {
    static jnipp::Constructor<JavaIoObjectOutputStream_PutFieldImpl,JavaIoObjectOutputStream,JavaIoObjectStreamClass> constructor(clazz(), "(Ljava/io/ObjectOutputStream;Ljava/io/ObjectStreamClass;)V");
    return constructor.construct(a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,long)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, jlong a1) const {
    static jnipp::Method<void,JavaLangString,jlong> method(clazz(), "put", "(Ljava/lang/String;J)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,float)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, jfloat a1) const {
    static jnipp::Method<void,JavaLangString,jfloat> method(clazz(), "put", "(Ljava/lang/String;F)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,int)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangString,jint> method(clazz(), "put", "(Ljava/lang/String;I)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,double)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, jdouble a1) const {
    static jnipp::Method<void,JavaLangString,jdouble> method(clazz(), "put", "(Ljava/lang/String;D)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,java.lang.Object)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangObject> method(clazz(), "put", "(Ljava/lang/String;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,boolean)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaLangString,jboolean> method(clazz(), "put", "(Ljava/lang/String;Z)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,byte)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, jbyte a1) const {
    static jnipp::Method<void,JavaLangString,jbyte> method(clazz(), "put", "(Ljava/lang/String;B)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,char)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, jchar a1) const {
    static jnipp::Method<void,JavaLangString,jchar> method(clazz(), "put", "(Ljava/lang/String;C)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.put(java.lang.String,short)
void JavaIoObjectOutputStream_PutFieldImpl::put(const jnipp::Ref<JavaLangString>& a0, jshort a1) const {
    static jnipp::Method<void,JavaLangString,jshort> method(clazz(), "put", "(Ljava/lang/String;S)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectOutputStream$PutFieldImpl.write(java.io.ObjectOutput) throws java.io.IOException
void JavaIoObjectOutputStream_PutFieldImpl::write(const jnipp::Ref<JavaIoObjectOutput>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutput> method(clazz(), "write", "(Ljava/io/ObjectOutput;)V");
    method.call(*this, a0);
}

// void java.io.ObjectOutputStream$PutFieldImpl.writeFields() throws java.io.IOException
void JavaIoObjectOutputStream_PutFieldImpl::writeFields() const {
    static jnipp::Method<void> method(clazz(), "writeFields", "()V");
    method.call(*this);
}

// private int java.io.ObjectOutputStream$PutFieldImpl.getFieldOffset(java.lang.String,java.lang.Class)
jint JavaIoObjectOutputStream_PutFieldImpl::getFieldOffset(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangClass>& a1) const {
    static jnipp::Method<jint,JavaLangString,JavaLangClass> method(clazz(), "getFieldOffset", "(Ljava/lang/String;Ljava/lang/Class;)I");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputStream_HandleTable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputStream$HandleTable"));
    return cls;
}

// java.io.ObjectInputStream$HandleTable(int)
jnipp::LocalRef<JavaIoObjectInputStream_HandleTable> JavaIoObjectInputStream_HandleTable::construct(jint a0) {
    static jnipp::Constructor<JavaIoObjectInputStream_HandleTable,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// void java.io.ObjectInputStream$HandleTable.clear()
void JavaIoObjectInputStream_HandleTable::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// int java.io.ObjectInputStream$HandleTable.size()
jint JavaIoObjectInputStream_HandleTable::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// private void java.io.ObjectInputStream$HandleTable.grow()
void JavaIoObjectInputStream_HandleTable::grow() const {
    static jnipp::Method<void> method(clazz(), "grow", "()V");
    method.call(*this);
}

// void java.io.ObjectInputStream$HandleTable.markDependency(int,int)
void JavaIoObjectInputStream_HandleTable::markDependency(jint a0, jint a1) const {
    static jnipp::Method<void,jint,jint> method(clazz(), "markDependency", "(II)V");
    method.call(*this, a0, a1);
}

// java.lang.ClassNotFoundException java.io.ObjectInputStream$HandleTable.lookupException(int)
jnipp::LocalRef<JavaLangClassNotFoundException> JavaIoObjectInputStream_HandleTable::lookupException(jint a0) const {
    static jnipp::Method<JavaLangClassNotFoundException,jint> method(clazz(), "lookupException", "(I)Ljava/lang/ClassNotFoundException;");
    return method.call(*this, a0);
}

// void java.io.ObjectInputStream$HandleTable.setObject(int,java.lang.Object)
void JavaIoObjectInputStream_HandleTable::setObject(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,jint,JavaLangObject> method(clazz(), "setObject", "(ILjava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// java.lang.Object java.io.ObjectInputStream$HandleTable.lookupObject(int)
jnipp::LocalRef<JavaLangObject> JavaIoObjectInputStream_HandleTable::lookupObject(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "lookupObject", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// int java.io.ObjectInputStream$HandleTable.assign(java.lang.Object)
jint JavaIoObjectInputStream_HandleTable::assign(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "assign", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// void java.io.ObjectInputStream$HandleTable.markException(int,java.lang.ClassNotFoundException)
void JavaIoObjectInputStream_HandleTable::markException(jint a0, const jnipp::Ref<JavaLangClassNotFoundException>& a1) const {
    static jnipp::Method<void,jint,JavaLangClassNotFoundException> method(clazz(), "markException", "(ILjava/lang/ClassNotFoundException;)V");
    method.call(*this, a0, a1);
}

// void java.io.ObjectInputStream$HandleTable.finish(int)
void JavaIoObjectInputStream_HandleTable::finish(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "finish", "(I)V");
    method.call(*this, a0);
}
#undef STATUS_OK
const jnipp::StaticField<jbyte> JavaIoObjectInputStream_HandleTable::STATUS_OK ("java/io/ObjectInputStream$HandleTable", "STATUS_OK", "B");
#undef STATUS_UNKNOWN
const jnipp::StaticField<jbyte> JavaIoObjectInputStream_HandleTable::STATUS_UNKNOWN ("java/io/ObjectInputStream$HandleTable", "STATUS_UNKNOWN", "B");
#undef STATUS_EXCEPTION
const jnipp::StaticField<jbyte> JavaIoObjectInputStream_HandleTable::STATUS_EXCEPTION ("java/io/ObjectInputStream$HandleTable", "STATUS_EXCEPTION", "B");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputStream_BlockDataInputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputStream$BlockDataInputStream"));
    return cls;
}

// java.io.ObjectInputStream$BlockDataInputStream(java.io.ObjectInputStream,java.io.InputStream)
jnipp::LocalRef<JavaIoObjectInputStream_BlockDataInputStream> JavaIoObjectInputStream_BlockDataInputStream::construct(const jnipp::Ref<JavaIoObjectInputStream>& a0, const jnipp::Ref<JavaIoInputStream>& a1) {
    static jnipp::Constructor<JavaIoObjectInputStream_BlockDataInputStream,JavaIoObjectInputStream,JavaIoInputStream> constructor(clazz(), "(Ljava/io/ObjectInputStream;Ljava/io/InputStream;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String java.io.ObjectInputStream$BlockDataInputStream.readLine() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoObjectInputStream_BlockDataInputStream::readLine() const {
    static jnipp::Method<JavaLangString> method(clazz(), "readLine", "()Ljava/lang/String;");
    return method.call(*this);
}

// public void java.io.ObjectInputStream$BlockDataInputStream.close() throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// public int java.io.ObjectInputStream$BlockDataInputStream.readInt() throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::readInt() const {
    static jnipp::Method<jint> method(clazz(), "readInt", "()I");
    return method.call(*this);
}

// int java.io.ObjectInputStream$BlockDataInputStream.peek() throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::peek() const {
    static jnipp::Method<jint> method(clazz(), "peek", "()I");
    return method.call(*this);
}

// public int java.io.ObjectInputStream$BlockDataInputStream.read() throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::read() const {
    static jnipp::Method<jint> method(clazz(), "read", "()I");
    return method.call(*this);
}

// int java.io.ObjectInputStream$BlockDataInputStream.read(byte[],int,int,boolean) throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2, jboolean a3) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint,jboolean> method(clazz(), "read", "([BIIZ)I");
    return method.call(*this, a0, a1, a2, a3);
}

// public int java.io.ObjectInputStream$BlockDataInputStream.read(byte[],int,int) throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public long java.io.ObjectInputStream$BlockDataInputStream.skip(long) throws java.io.IOException
jlong JavaIoObjectInputStream_BlockDataInputStream::skip(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "skip", "(J)J");
    return method.call(*this, a0);
}

// public int java.io.ObjectInputStream$BlockDataInputStream.available() throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::available() const {
    static jnipp::Method<jint> method(clazz(), "available", "()I");
    return method.call(*this);
}

// public char java.io.ObjectInputStream$BlockDataInputStream.readChar() throws java.io.IOException
jchar JavaIoObjectInputStream_BlockDataInputStream::readChar() const {
    static jnipp::Method<jchar> method(clazz(), "readChar", "()C");
    return method.call(*this);
}

// public java.lang.String java.io.ObjectInputStream$BlockDataInputStream.readUTF() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoObjectInputStream_BlockDataInputStream::readUTF() const {
    static jnipp::Method<JavaLangString> method(clazz(), "readUTF", "()Ljava/lang/String;");
    return method.call(*this);
}

// public void java.io.ObjectInputStream$BlockDataInputStream.readFully(byte[],int,int,boolean) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readFully(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2, jboolean a3) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint,jboolean> method(clazz(), "readFully", "([BIIZ)V");
    method.call(*this, a0, a1, a2, a3);
}

// public void java.io.ObjectInputStream$BlockDataInputStream.readFully(byte[]) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readFully(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "readFully", "([B)V");
    method.call(*this, a0);
}

// public void java.io.ObjectInputStream$BlockDataInputStream.readFully(byte[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readFully(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "readFully", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public float java.io.ObjectInputStream$BlockDataInputStream.readFloat() throws java.io.IOException
jfloat JavaIoObjectInputStream_BlockDataInputStream::readFloat() const {
    static jnipp::Method<jfloat> method(clazz(), "readFloat", "()F");
    return method.call(*this);
}

// private int java.io.ObjectInputStream$BlockDataInputStream.readBlockHeader(boolean) throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::readBlockHeader(jboolean a0) const {
    static jnipp::Method<jint,jboolean> method(clazz(), "readBlockHeader", "(Z)I");
    return method.call(*this, a0);
}

// private void java.io.ObjectInputStream$BlockDataInputStream.refill() throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::refill() const {
    static jnipp::Method<void> method(clazz(), "refill", "()V");
    method.call(*this);
}

// private java.lang.String java.io.ObjectInputStream$BlockDataInputStream.readUTFBody(long) throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoObjectInputStream_BlockDataInputStream::readUTFBody(jlong a0) const {
    static jnipp::Method<JavaLangString,jlong> method(clazz(), "readUTFBody", "(J)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private long java.io.ObjectInputStream$BlockDataInputStream.readUTFSpan(java.lang.StringBuilder,long) throws java.io.IOException
jlong JavaIoObjectInputStream_BlockDataInputStream::readUTFSpan(const jnipp::Ref<JavaLangStringBuilder>& a0, jlong a1) const {
    static jnipp::Method<jlong,JavaLangStringBuilder,jlong> method(clazz(), "readUTFSpan", "(Ljava/lang/StringBuilder;J)J");
    return method.call(*this, a0, a1);
}

// private int java.io.ObjectInputStream$BlockDataInputStream.readUTFChar(java.lang.StringBuilder,long) throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::readUTFChar(const jnipp::Ref<JavaLangStringBuilder>& a0, jlong a1) const {
    static jnipp::Method<jint,JavaLangStringBuilder,jlong> method(clazz(), "readUTFChar", "(Ljava/lang/StringBuilder;J)I");
    return method.call(*this, a0, a1);
}

// public boolean java.io.ObjectInputStream$BlockDataInputStream.readBoolean() throws java.io.IOException
jboolean JavaIoObjectInputStream_BlockDataInputStream::readBoolean() const {
    static jnipp::Method<jboolean> method(clazz(), "readBoolean", "()Z");
    return method.call(*this);
}

// public byte java.io.ObjectInputStream$BlockDataInputStream.readByte() throws java.io.IOException
jbyte JavaIoObjectInputStream_BlockDataInputStream::readByte() const {
    static jnipp::Method<jbyte> method(clazz(), "readByte", "()B");
    return method.call(*this);
}

// public int java.io.ObjectInputStream$BlockDataInputStream.readUnsignedByte() throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::readUnsignedByte() const {
    static jnipp::Method<jint> method(clazz(), "readUnsignedByte", "()I");
    return method.call(*this);
}

// public short java.io.ObjectInputStream$BlockDataInputStream.readShort() throws java.io.IOException
jshort JavaIoObjectInputStream_BlockDataInputStream::readShort() const {
    static jnipp::Method<jshort> method(clazz(), "readShort", "()S");
    return method.call(*this);
}

// public int java.io.ObjectInputStream$BlockDataInputStream.readUnsignedShort() throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::readUnsignedShort() const {
    static jnipp::Method<jint> method(clazz(), "readUnsignedShort", "()I");
    return method.call(*this);
}

// public long java.io.ObjectInputStream$BlockDataInputStream.readLong() throws java.io.IOException
jlong JavaIoObjectInputStream_BlockDataInputStream::readLong() const {
    static jnipp::Method<jlong> method(clazz(), "readLong", "()J");
    return method.call(*this);
}

// public double java.io.ObjectInputStream$BlockDataInputStream.readDouble() throws java.io.IOException
jdouble JavaIoObjectInputStream_BlockDataInputStream::readDouble() const {
    static jnipp::Method<jdouble> method(clazz(), "readDouble", "()D");
    return method.call(*this);
}

// public int java.io.ObjectInputStream$BlockDataInputStream.skipBytes(int) throws java.io.IOException
jint JavaIoObjectInputStream_BlockDataInputStream::skipBytes(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "skipBytes", "(I)I");
    return method.call(*this, a0);
}

// boolean java.io.ObjectInputStream$BlockDataInputStream.setBlockDataMode(boolean) throws java.io.IOException
jboolean JavaIoObjectInputStream_BlockDataInputStream::setBlockDataMode(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "setBlockDataMode", "(Z)Z");
    return method.call(*this, a0);
}

// boolean java.io.ObjectInputStream$BlockDataInputStream.getBlockDataMode()
jboolean JavaIoObjectInputStream_BlockDataInputStream::getBlockDataMode() const {
    static jnipp::Method<jboolean> method(clazz(), "getBlockDataMode", "()Z");
    return method.call(*this);
}

// int java.io.ObjectInputStream$BlockDataInputStream.currentBlockRemaining()
jint JavaIoObjectInputStream_BlockDataInputStream::currentBlockRemaining() const {
    static jnipp::Method<jint> method(clazz(), "currentBlockRemaining", "()I");
    return method.call(*this);
}

// byte java.io.ObjectInputStream$BlockDataInputStream.peekByte() throws java.io.IOException
jbyte JavaIoObjectInputStream_BlockDataInputStream::peekByte() const {
    static jnipp::Method<jbyte> method(clazz(), "peekByte", "()B");
    return method.call(*this);
}

// java.lang.String java.io.ObjectInputStream$BlockDataInputStream.readLongUTF() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoObjectInputStream_BlockDataInputStream::readLongUTF() const {
    static jnipp::Method<JavaLangString> method(clazz(), "readLongUTF", "()Ljava/lang/String;");
    return method.call(*this);
}

// void java.io.ObjectInputStream$BlockDataInputStream.readInts(int[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readInts(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jint>,jint,jint> method(clazz(), "readInts", "([III)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectInputStream$BlockDataInputStream.readLongs(long[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readLongs(const jnipp::Ref<jnipp::Array<jlong>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jlong>,jint,jint> method(clazz(), "readLongs", "([JII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectInputStream$BlockDataInputStream.readFloats(float[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readFloats(const jnipp::Ref<jnipp::Array<jfloat>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jfloat>,jint,jint> method(clazz(), "readFloats", "([FII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectInputStream$BlockDataInputStream.readDoubles(double[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readDoubles(const jnipp::Ref<jnipp::Array<jdouble>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jdouble>,jint,jint> method(clazz(), "readDoubles", "([DII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectInputStream$BlockDataInputStream.readShorts(short[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readShorts(const jnipp::Ref<jnipp::Array<jshort>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jshort>,jint,jint> method(clazz(), "readShorts", "([SII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectInputStream$BlockDataInputStream.readChars(char[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readChars(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jchar>,jint,jint> method(clazz(), "readChars", "([CII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectInputStream$BlockDataInputStream.readBooleans(boolean[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::readBooleans(const jnipp::Ref<jnipp::Array<jboolean>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jboolean>,jint,jint> method(clazz(), "readBooleans", "([ZII)V");
    method.call(*this, a0, a1, a2);
}

// void java.io.ObjectInputStream$BlockDataInputStream.skipBlockData() throws java.io.IOException
void JavaIoObjectInputStream_BlockDataInputStream::skipBlockData() const {
    static jnipp::Method<void> method(clazz(), "skipBlockData", "()V");
    method.call(*this);
}
#undef MAX_BLOCK_SIZE
const jnipp::StaticField<jint> JavaIoObjectInputStream_BlockDataInputStream::MAX_BLOCK_SIZE ("java/io/ObjectInputStream$BlockDataInputStream", "MAX_BLOCK_SIZE", "I");
#undef MAX_HEADER_SIZE
const jnipp::StaticField<jint> JavaIoObjectInputStream_BlockDataInputStream::MAX_HEADER_SIZE ("java/io/ObjectInputStream$BlockDataInputStream", "MAX_HEADER_SIZE", "I");
#undef CHAR_BUF_SIZE
const jnipp::StaticField<jint> JavaIoObjectInputStream_BlockDataInputStream::CHAR_BUF_SIZE ("java/io/ObjectInputStream$BlockDataInputStream", "CHAR_BUF_SIZE", "I");
#undef HEADER_BLOCKED
const jnipp::StaticField<jint> JavaIoObjectInputStream_BlockDataInputStream::HEADER_BLOCKED ("java/io/ObjectInputStream$BlockDataInputStream", "HEADER_BLOCKED", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClassLoader::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ClassLoader"));
    return cls;
}

// protected java.lang.ClassLoader(java.lang.ClassLoader)
jnipp::LocalRef<JavaLangClassLoader> JavaLangClassLoader::construct(const jnipp::Ref<JavaLangClassLoader>& a0) {
    static jnipp::Constructor<JavaLangClassLoader,JavaLangClassLoader> constructor(clazz(), "(Ljava/lang/ClassLoader;)V");
    return constructor.construct(a0);
}

// protected java.lang.ClassLoader()
jnipp::LocalRef<JavaLangClassLoader> JavaLangClassLoader::construct() {
    static jnipp::Constructor<JavaLangClassLoader> constructor(clazz(), "()V");
    return constructor.construct();
}

// private java.lang.ClassLoader(java.lang.Void,java.lang.ClassLoader)
jnipp::LocalRef<JavaLangClassLoader> JavaLangClassLoader::construct(const jnipp::Ref<JavaLangVoid>& a0, const jnipp::Ref<JavaLangClassLoader>& a1) {
    static jnipp::Constructor<JavaLangClassLoader,JavaLangVoid,JavaLangClassLoader> constructor(clazz(), "(Ljava/lang/Void;Ljava/lang/ClassLoader;)V");
    return constructor.construct(a0, a1);
}

// protected java.lang.Class java.lang.ClassLoader.loadClass(java.lang.String,boolean) throws java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::loadClass(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<JavaLangClass,JavaLangString,jboolean> method(clazz(), "loadClass", "(Ljava/lang/String;Z)Ljava/lang/Class;");
    return method.call(*this, a0, a1);
}

// public java.lang.Class java.lang.ClassLoader.loadClass(java.lang.String) throws java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::loadClass(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// private java.lang.Class java.lang.ClassLoader.loadClassInternal(java.lang.String) throws java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::loadClassInternal(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "loadClassInternal", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// static long java.lang.ClassLoader.findNative(java.lang.ClassLoader,java.lang.String)
jlong JavaLangClassLoader::findNative(const jnipp::Ref<JavaLangClassLoader>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<jlong,JavaLangClassLoader,JavaLangString> method(clazz(), "findNative", "(Ljava/lang/ClassLoader;Ljava/lang/String;)J");
    return method.call(a0, a1);
}

// void java.lang.ClassLoader.addClass(java.lang.Class)
void JavaLangClassLoader::addClass(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<void,JavaLangClass> method(clazz(), "addClass", "(Ljava/lang/Class;)V");
    method.call(*this, a0);
}

// public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
jnipp::LocalRef<JavaLangClassLoader> JavaLangClassLoader::getSystemClassLoader() {
    static jnipp::StaticMethod<JavaLangClassLoader> method(clazz(), "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
    return method.call();
}

// private void java.lang.ClassLoader.checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)
void JavaLangClassLoader::checkPackageAccess(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaSecurityProtectionDomain>& a1) const {
    static jnipp::Method<void,JavaLangClass,JavaSecurityProtectionDomain> method(clazz(), "checkPackageAccess", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V");
    method.call(*this, a0, a1);
}

// private static native void java.lang.ClassLoader.registerNatives()
void JavaLangClassLoader::registerNatives() {
    static jnipp::StaticMethod<void> method(clazz(), "registerNatives", "()V");
    method.call();
}

// static java.lang.ClassLoader java.lang.ClassLoader.getClassLoader(java.lang.Class)
jnipp::LocalRef<JavaLangClassLoader> JavaLangClassLoader::getClassLoader(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangClassLoader,JavaLangClass> method(clazz(), "getClassLoader", "(Ljava/lang/Class;)Ljava/lang/ClassLoader;");
    return method.call(a0);
}

// protected java.lang.Package java.lang.ClassLoader.getPackage(java.lang.String)
jnipp::LocalRef<JavaLangPackage> JavaLangClassLoader::getPackage(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangPackage,JavaLangString> method(clazz(), "getPackage", "(Ljava/lang/String;)Ljava/lang/Package;");
    return method.call(*this, a0);
}

// protected final void java.lang.ClassLoader.setSigners(java.lang.Class,java.lang.Object[])
void JavaLangClassLoader::setSigners(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<void,JavaLangClass,jnipp::Array<JavaLangObject>> method(clazz(), "setSigners", "(Ljava/lang/Class;[Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// public java.io.InputStream java.lang.ClassLoader.getResourceAsStream(java.lang.String)
jnipp::LocalRef<JavaIoInputStream> JavaLangClassLoader::getResourceAsStream(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaIoInputStream,JavaLangString> method(clazz(), "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
    return method.call(*this, a0);
}

// public java.net.URL java.lang.ClassLoader.getResource(java.lang.String)
jnipp::LocalRef<JavaNetURL> JavaLangClassLoader::getResource(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNetURL,JavaLangString> method(clazz(), "getResource", "(Ljava/lang/String;)Ljava/net/URL;");
    return method.call(*this, a0);
}

// boolean java.lang.ClassLoader.desiredAssertionStatus(java.lang.String)
jboolean JavaLangClassLoader::desiredAssertionStatus(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "desiredAssertionStatus", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// static void java.lang.ClassLoader.checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)
void JavaLangClassLoader::checkClassLoaderPermission(const jnipp::Ref<JavaLangClassLoader>& a0, const jnipp::Ref<JavaLangClass>& a1) {
    static jnipp::StaticMethod<void,JavaLangClassLoader,JavaLangClass> method(clazz(), "checkClassLoaderPermission", "(Ljava/lang/ClassLoader;Ljava/lang/Class;)V");
    method.call(a0, a1);
}

// public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
jnipp::LocalRef<JavaIoInputStream> JavaLangClassLoader::getSystemResourceAsStream(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaIoInputStream,JavaLangString> method(clazz(), "getSystemResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
    return method.call(a0);
}

// public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
jnipp::LocalRef<JavaNetURL> JavaLangClassLoader::getSystemResource(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetURL,JavaLangString> method(clazz(), "getSystemResource", "(Ljava/lang/String;)Ljava/net/URL;");
    return method.call(a0);
}

// private static java.lang.Void java.lang.ClassLoader.checkCreateClassLoader()
jnipp::LocalRef<JavaLangVoid> JavaLangClassLoader::checkCreateClassLoader() {
    static jnipp::StaticMethod<JavaLangVoid> method(clazz(), "checkCreateClassLoader", "()Ljava/lang/Void;");
    return method.call();
}

// protected java.lang.Object java.lang.ClassLoader.getClassLoadingLock(java.lang.String)
jnipp::LocalRef<JavaLangObject> JavaLangClassLoader::getClassLoadingLock(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangString> method(clazz(), "getClassLoadingLock", "(Ljava/lang/String;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// protected java.lang.Class java.lang.ClassLoader.findClass(java.lang.String) throws java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::findClass(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "findClass", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// protected final java.lang.Class java.lang.ClassLoader.defineClass(byte[],int,int) throws java.lang.ClassFormatError
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::defineClass(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaLangClass,jnipp::Array<jbyte>,jint,jint> method(clazz(), "defineClass", "([BII)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2);
}

// protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::defineClass(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3, const jnipp::Ref<JavaSecurityProtectionDomain>& a4) const {
    static jnipp::Method<JavaLangClass,JavaLangString,jnipp::Array<jbyte>,jint,jint,JavaSecurityProtectionDomain> method(clazz(), "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2, a3, a4);
}

// protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int) throws java.lang.ClassFormatError
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::defineClass(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3) const {
    static jnipp::Method<JavaLangClass,JavaLangString,jnipp::Array<jbyte>,jint,jint> method(clazz(), "defineClass", "(Ljava/lang/String;[BII)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2, a3);
}

// protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain) throws java.lang.ClassFormatError
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::defineClass(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaNioByteBuffer>& a1, const jnipp::Ref<JavaSecurityProtectionDomain>& a2) const {
    static jnipp::Method<JavaLangClass,JavaLangString,JavaNioByteBuffer,JavaSecurityProtectionDomain> method(clazz(), "defineClass", "(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2);
}

// private java.security.ProtectionDomain java.lang.ClassLoader.preDefineClass(java.lang.String,java.security.ProtectionDomain)
jnipp::LocalRef<JavaSecurityProtectionDomain> JavaLangClassLoader::preDefineClass(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaSecurityProtectionDomain>& a1) const {
    static jnipp::Method<JavaSecurityProtectionDomain,JavaLangString,JavaSecurityProtectionDomain> method(clazz(), "preDefineClass", "(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain;");
    return method.call(*this, a0, a1);
}

// private java.lang.String java.lang.ClassLoader.defineClassSourceLocation(java.security.ProtectionDomain)
jnipp::LocalRef<JavaLangString> JavaLangClassLoader::defineClassSourceLocation(const jnipp::Ref<JavaSecurityProtectionDomain>& a0) const {
    static jnipp::Method<JavaLangString,JavaSecurityProtectionDomain> method(clazz(), "defineClassSourceLocation", "(Ljava/security/ProtectionDomain;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private java.lang.Class java.lang.ClassLoader.defineTransformedClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.ClassFormatError,java.lang.String) throws java.lang.ClassFormatError
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::defineTransformedClass(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3, const jnipp::Ref<JavaSecurityProtectionDomain>& a4, const jnipp::Ref<JavaLangClassFormatError>& a5, const jnipp::Ref<JavaLangString>& a6) const {
    static jnipp::Method<JavaLangClass,JavaLangString,jnipp::Array<jbyte>,jint,jint,JavaSecurityProtectionDomain,JavaLangClassFormatError,JavaLangString> method(clazz(), "defineTransformedClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/ClassFormatError;Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2, a3, a4, a5, a6);
}

// private void java.lang.ClassLoader.postDefineClass(java.lang.Class,java.security.ProtectionDomain)
void JavaLangClassLoader::postDefineClass(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaSecurityProtectionDomain>& a1) const {
    static jnipp::Method<void,JavaLangClass,JavaSecurityProtectionDomain> method(clazz(), "postDefineClass", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V");
    method.call(*this, a0, a1);
}

// private native java.lang.Class java.lang.ClassLoader.defineClass0(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::defineClass0(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3, const jnipp::Ref<JavaSecurityProtectionDomain>& a4) const {
    static jnipp::Method<JavaLangClass,JavaLangString,jnipp::Array<jbyte>,jint,jint,JavaSecurityProtectionDomain> method(clazz(), "defineClass0", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2, a3, a4);
}

// private native java.lang.Class java.lang.ClassLoader.defineClass1(java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.String)
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::defineClass1(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3, const jnipp::Ref<JavaSecurityProtectionDomain>& a4, const jnipp::Ref<JavaLangString>& a5) const {
    static jnipp::Method<JavaLangClass,JavaLangString,jnipp::Array<jbyte>,jint,jint,JavaSecurityProtectionDomain,JavaLangString> method(clazz(), "defineClass1", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2, a3, a4, a5);
}

// private native java.lang.Class java.lang.ClassLoader.defineClass2(java.lang.String,java.nio.ByteBuffer,int,int,java.security.ProtectionDomain,java.lang.String)
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::defineClass2(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaNioByteBuffer>& a1, jint a2, jint a3, const jnipp::Ref<JavaSecurityProtectionDomain>& a4, const jnipp::Ref<JavaLangString>& a5) const {
    static jnipp::Method<JavaLangClass,JavaLangString,JavaNioByteBuffer,jint,jint,JavaSecurityProtectionDomain,JavaLangString> method(clazz(), "defineClass2", "(Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2, a3, a4, a5);
}

// private boolean java.lang.ClassLoader.checkName(java.lang.String)
jboolean JavaLangClassLoader::checkName(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "checkName", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// private void java.lang.ClassLoader.checkCerts(java.lang.String,java.security.CodeSource)
void JavaLangClassLoader::checkCerts(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaSecurityCodeSource>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaSecurityCodeSource> method(clazz(), "checkCerts", "(Ljava/lang/String;Ljava/security/CodeSource;)V");
    method.call(*this, a0, a1);
}

// private boolean java.lang.ClassLoader.compareCerts(java.security.cert.Certificate[],java.security.cert.Certificate[])
jboolean JavaLangClassLoader::compareCerts(const jnipp::Ref<jnipp::Array<JavaSecurityCertCertificate>>& a0, const jnipp::Ref<jnipp::Array<JavaSecurityCertCertificate>>& a1) const {
    static jnipp::Method<jboolean,jnipp::Array<JavaSecurityCertCertificate>,jnipp::Array<JavaSecurityCertCertificate>> method(clazz(), "compareCerts", "([Ljava/security/cert/Certificate;[Ljava/security/cert/Certificate;)Z");
    return method.call(*this, a0, a1);
}

// protected final void java.lang.ClassLoader.resolveClass(java.lang.Class)
void JavaLangClassLoader::resolveClass(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<void,JavaLangClass> method(clazz(), "resolveClass", "(Ljava/lang/Class;)V");
    method.call(*this, a0);
}

// private native void java.lang.ClassLoader.resolveClass0(java.lang.Class)
void JavaLangClassLoader::resolveClass0(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<void,JavaLangClass> method(clazz(), "resolveClass0", "(Ljava/lang/Class;)V");
    method.call(*this, a0);
}

// protected final java.lang.Class java.lang.ClassLoader.findSystemClass(java.lang.String) throws java.lang.ClassNotFoundException
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::findSystemClass(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "findSystemClass", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// private java.lang.Class java.lang.ClassLoader.findBootstrapClassOrNull(java.lang.String)
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::findBootstrapClassOrNull(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "findBootstrapClassOrNull", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// private native java.lang.Class java.lang.ClassLoader.findBootstrapClass(java.lang.String)
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::findBootstrapClass(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "findBootstrapClass", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// protected final java.lang.Class java.lang.ClassLoader.findLoadedClass(java.lang.String)
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::findLoadedClass(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "findLoadedClass", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// private final native java.lang.Class java.lang.ClassLoader.findLoadedClass0(java.lang.String)
jnipp::LocalRef<JavaLangClass> JavaLangClassLoader::findLoadedClass0(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "findLoadedClass0", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// public java.util.Enumeration java.lang.ClassLoader.getResources(java.lang.String) throws java.io.IOException
jnipp::LocalRef<JavaUtilEnumeration> JavaLangClassLoader::getResources(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilEnumeration,JavaLangString> method(clazz(), "getResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
    return method.call(*this, a0);
}

// protected java.net.URL java.lang.ClassLoader.findResource(java.lang.String)
jnipp::LocalRef<JavaNetURL> JavaLangClassLoader::findResource(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNetURL,JavaLangString> method(clazz(), "findResource", "(Ljava/lang/String;)Ljava/net/URL;");
    return method.call(*this, a0);
}

// protected java.util.Enumeration java.lang.ClassLoader.findResources(java.lang.String) throws java.io.IOException
jnipp::LocalRef<JavaUtilEnumeration> JavaLangClassLoader::findResources(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilEnumeration,JavaLangString> method(clazz(), "findResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
    return method.call(*this, a0);
}

// protected static boolean java.lang.ClassLoader.registerAsParallelCapable()
jboolean JavaLangClassLoader::registerAsParallelCapable() {
    static jnipp::StaticMethod<jboolean> method(clazz(), "registerAsParallelCapable", "()Z");
    return method.call();
}

// public static java.util.Enumeration java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
jnipp::LocalRef<JavaUtilEnumeration> JavaLangClassLoader::getSystemResources(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilEnumeration,JavaLangString> method(clazz(), "getSystemResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
    return method.call(a0);
}

// private static java.net.URL java.lang.ClassLoader.getBootstrapResource(java.lang.String)
jnipp::LocalRef<JavaNetURL> JavaLangClassLoader::getBootstrapResource(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetURL,JavaLangString> method(clazz(), "getBootstrapResource", "(Ljava/lang/String;)Ljava/net/URL;");
    return method.call(a0);
}

// private static java.util.Enumeration java.lang.ClassLoader.getBootstrapResources(java.lang.String) throws java.io.IOException
jnipp::LocalRef<JavaUtilEnumeration> JavaLangClassLoader::getBootstrapResources(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilEnumeration,JavaLangString> method(clazz(), "getBootstrapResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
    return method.call(a0);
}

// static sun.misc.URLClassPath java.lang.ClassLoader.getBootstrapClassPath()
jnipp::LocalRef<SunMiscURLClassPath> JavaLangClassLoader::getBootstrapClassPath() {
    static jnipp::StaticMethod<SunMiscURLClassPath> method(clazz(), "getBootstrapClassPath", "()Lsun/misc/URLClassPath;");
    return method.call();
}

// public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
jnipp::LocalRef<JavaLangClassLoader> JavaLangClassLoader::getParent() const {
    static jnipp::Method<JavaLangClassLoader> method(clazz(), "getParent", "()Ljava/lang/ClassLoader;");
    return method.call(*this);
}

// private static synchronized void java.lang.ClassLoader.initSystemClassLoader()
void JavaLangClassLoader::initSystemClassLoader() {
    static jnipp::StaticMethod<void> method(clazz(), "initSystemClassLoader", "()V");
    method.call();
}

// boolean java.lang.ClassLoader.isAncestor(java.lang.ClassLoader)
jboolean JavaLangClassLoader::isAncestor(const jnipp::Ref<JavaLangClassLoader>& a0) const {
    static jnipp::Method<jboolean,JavaLangClassLoader> method(clazz(), "isAncestor", "(Ljava/lang/ClassLoader;)Z");
    return method.call(*this, a0);
}

// private static boolean java.lang.ClassLoader.needsClassLoaderPermissionCheck(java.lang.ClassLoader,java.lang.ClassLoader)
jboolean JavaLangClassLoader::needsClassLoaderPermissionCheck(const jnipp::Ref<JavaLangClassLoader>& a0, const jnipp::Ref<JavaLangClassLoader>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangClassLoader,JavaLangClassLoader> method(clazz(), "needsClassLoaderPermissionCheck", "(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z");
    return method.call(a0, a1);
}

// protected java.lang.Package java.lang.ClassLoader.definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) throws java.lang.IllegalArgumentException
jnipp::LocalRef<JavaLangPackage> JavaLangClassLoader::definePackage(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaLangString>& a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<JavaLangString>& a6, const jnipp::Ref<JavaNetURL>& a7) const {
    static jnipp::Method<JavaLangPackage,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaNetURL> method(clazz(), "definePackage", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;");
    return method.call(*this, a0, a1, a2, a3, a4, a5, a6, a7);
}

// protected java.lang.Package[] java.lang.ClassLoader.getPackages()
jnipp::LocalRef<jnipp::Array<JavaLangPackage>> JavaLangClassLoader::getPackages() const {
    static jnipp::Method<jnipp::Array<JavaLangPackage>> method(clazz(), "getPackages", "()[Ljava/lang/Package;");
    return method.call(*this);
}

// protected java.lang.String java.lang.ClassLoader.findLibrary(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaLangClassLoader::findLibrary(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "findLibrary", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private static java.lang.String[] java.lang.ClassLoader.initializePath(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaLangClassLoader::initializePath(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>,JavaLangString> method(clazz(), "initializePath", "(Ljava/lang/String;)[Ljava/lang/String;");
    return method.call(a0);
}

// static void java.lang.ClassLoader.loadLibrary(java.lang.Class,java.lang.String,boolean)
void JavaLangClassLoader::loadLibrary(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangString>& a1, jboolean a2) {
    static jnipp::StaticMethod<void,JavaLangClass,JavaLangString,jboolean> method(clazz(), "loadLibrary", "(Ljava/lang/Class;Ljava/lang/String;Z)V");
    method.call(a0, a1, a2);
}

// private static boolean java.lang.ClassLoader.loadLibrary0(java.lang.Class,java.io.File)
jboolean JavaLangClassLoader::loadLibrary0(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaIoFile>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangClass,JavaIoFile> method(clazz(), "loadLibrary0", "(Ljava/lang/Class;Ljava/io/File;)Z");
    return method.call(a0, a1);
}

// private static boolean java.lang.ClassLoader.loadLibrary1(java.lang.Class,java.io.File)
jboolean JavaLangClassLoader::loadLibrary1(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaIoFile>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangClass,JavaIoFile> method(clazz(), "loadLibrary1", "(Ljava/lang/Class;Ljava/io/File;)Z");
    return method.call(a0, a1);
}

// public void java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
void JavaLangClassLoader::setDefaultAssertionStatus(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setDefaultAssertionStatus", "(Z)V");
    method.call(*this, a0);
}

// public void java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
void JavaLangClassLoader::setPackageAssertionStatus(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaLangString,jboolean> method(clazz(), "setPackageAssertionStatus", "(Ljava/lang/String;Z)V");
    method.call(*this, a0, a1);
}

// public void java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
void JavaLangClassLoader::setClassAssertionStatus(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaLangString,jboolean> method(clazz(), "setClassAssertionStatus", "(Ljava/lang/String;Z)V");
    method.call(*this, a0, a1);
}

// public void java.lang.ClassLoader.clearAssertionStatus()
void JavaLangClassLoader::clearAssertionStatus() const {
    static jnipp::Method<void> method(clazz(), "clearAssertionStatus", "()V");
    method.call(*this);
}

// private void java.lang.ClassLoader.initializeJavaAssertionMaps()
void JavaLangClassLoader::initializeJavaAssertionMaps() const {
    static jnipp::Method<void> method(clazz(), "initializeJavaAssertionMaps", "()V");
    method.call(*this);
}

// private static native java.lang.AssertionStatusDirectives java.lang.ClassLoader.retrieveDirectives()
jnipp::LocalRef<JavaLangAssertionStatusDirectives> JavaLangClassLoader::retrieveDirectives() {
    static jnipp::StaticMethod<JavaLangAssertionStatusDirectives> method(clazz(), "retrieveDirectives", "()Ljava/lang/AssertionStatusDirectives;");
    return method.call();
}
#undef nocerts
const jnipp::StaticField<jnipp::Array<JavaSecurityCertCertificate>> JavaLangClassLoader::nocerts ("java/lang/ClassLoader", "nocerts", "[Ljava/security/cert/Certificate;");
#undef scl
jnipp::StaticField<JavaLangClassLoader> JavaLangClassLoader::scl ("java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
#undef sclSet
jnipp::StaticField<jboolean> JavaLangClassLoader::sclSet ("java/lang/ClassLoader", "sclSet", "Z");
#undef loadedLibraryNames
jnipp::StaticField<JavaUtilVector> JavaLangClassLoader::loadedLibraryNames ("java/lang/ClassLoader", "loadedLibraryNames", "Ljava/util/Vector;");
#undef systemNativeLibraries
jnipp::StaticField<JavaUtilVector> JavaLangClassLoader::systemNativeLibraries ("java/lang/ClassLoader", "systemNativeLibraries", "Ljava/util/Vector;");
#undef nativeLibraryContext
jnipp::StaticField<JavaUtilStack> JavaLangClassLoader::nativeLibraryContext ("java/lang/ClassLoader", "nativeLibraryContext", "Ljava/util/Stack;");
#undef usr_paths
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaLangClassLoader::usr_paths ("java/lang/ClassLoader", "usr_paths", "[Ljava/lang/String;");
#undef sys_paths
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaLangClassLoader::sys_paths ("java/lang/ClassLoader", "sys_paths", "[Ljava/lang/String;");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputValidation::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputValidation"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputStream_ValidationList::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputStream$ValidationList"));
    return cls;
}

// java.io.ObjectInputStream$ValidationList()
jnipp::LocalRef<JavaIoObjectInputStream_ValidationList> JavaIoObjectInputStream_ValidationList::construct() {
    static jnipp::Constructor<JavaIoObjectInputStream_ValidationList> constructor(clazz(), "()V");
    return constructor.construct();
}

// void java.io.ObjectInputStream$ValidationList.register(java.io.ObjectInputValidation,int) throws java.io.InvalidObjectException
void JavaIoObjectInputStream_ValidationList::register_(const jnipp::Ref<JavaIoObjectInputValidation>& a0, jint a1) const {
    static jnipp::Method<void,JavaIoObjectInputValidation,jint> method(clazz(), "register", "(Ljava/io/ObjectInputValidation;I)V");
    method.call(*this, a0, a1);
}

// public void java.io.ObjectInputStream$ValidationList.clear()
void JavaIoObjectInputStream_ValidationList::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// void java.io.ObjectInputStream$ValidationList.doCallbacks() throws java.io.InvalidObjectException
void JavaIoObjectInputStream_ValidationList::doCallbacks() const {
    static jnipp::Method<void> method(clazz(), "doCallbacks", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputStream_GetField::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputStream$GetField"));
    return cls;
}

// public java.io.ObjectInputStream$GetField()
jnipp::LocalRef<JavaIoObjectInputStream_GetField> JavaIoObjectInputStream_GetField::construct() {
    static jnipp::Constructor<JavaIoObjectInputStream_GetField> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilAbstractMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/AbstractMap"));
    return cls;
}

// protected java.util.AbstractMap()
jnipp::LocalRef<JavaUtilAbstractMap> JavaUtilAbstractMap::construct() {
    static jnipp::Constructor<JavaUtilAbstractMap> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Object java.util.AbstractMap.remove(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilAbstractMap::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.AbstractMap.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilAbstractMap::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilAbstractMap::put(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public boolean java.util.AbstractMap.equals(java.lang.Object)
jboolean JavaUtilAbstractMap::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public java.util.Collection java.util.AbstractMap.values()
jnipp::LocalRef<JavaUtilCollection> JavaUtilAbstractMap::values() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "values", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public int java.util.AbstractMap.hashCode()
jint JavaUtilAbstractMap::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// protected java.lang.Object java.util.AbstractMap.clone() throws java.lang.CloneNotSupportedException
jnipp::LocalRef<JavaLangObject> JavaUtilAbstractMap::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public void java.util.AbstractMap.clear()
void JavaUtilAbstractMap::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public boolean java.util.AbstractMap.isEmpty()
jboolean JavaUtilAbstractMap::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public int java.util.AbstractMap.size()
jint JavaUtilAbstractMap::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public void java.util.AbstractMap.putAll(java.util.Map)
void JavaUtilAbstractMap::putAll(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "putAll", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// public java.util.Set java.util.AbstractMap.keySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilAbstractMap::keySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "keySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public boolean java.util.AbstractMap.containsValue(java.lang.Object)
jboolean JavaUtilAbstractMap::containsValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsValue", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.AbstractMap.containsKey(java.lang.Object)
jboolean JavaUtilAbstractMap::containsKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsKey", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// private static boolean java.util.AbstractMap.eq(java.lang.Object,java.lang.Object)
jboolean JavaUtilAbstractMap::eq(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangObject,JavaLangObject> method(clazz(), "eq", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
    return method.call(a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilHashMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/HashMap"));
    return cls;
}

// public java.util.HashMap(java.util.Map)
jnipp::LocalRef<JavaUtilHashMap> JavaUtilHashMap::construct(const jnipp::Ref<JavaUtilMap>& a0) {
    static jnipp::Constructor<JavaUtilHashMap,JavaUtilMap> constructor(clazz(), "(Ljava/util/Map;)V");
    return constructor.construct(a0);
}

// public java.util.HashMap()
jnipp::LocalRef<JavaUtilHashMap> JavaUtilHashMap::construct() {
    static jnipp::Constructor<JavaUtilHashMap> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.HashMap(int)
jnipp::LocalRef<JavaUtilHashMap> JavaUtilHashMap::construct(jint a0) {
    static jnipp::Constructor<JavaUtilHashMap,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.util.HashMap(int,float)
jnipp::LocalRef<JavaUtilHashMap> JavaUtilHashMap::construct(jint a0, jfloat a1) {
    static jnipp::Constructor<JavaUtilHashMap,jint,jfloat> constructor(clazz(), "(IF)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Object java.util.HashMap.remove(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.HashMap.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap::put(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// final int java.util.HashMap.hash(java.lang.Object)
jint JavaUtilHashMap::hash(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "hash", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public java.util.Collection java.util.HashMap.values()
jnipp::LocalRef<JavaUtilCollection> JavaUtilHashMap::values() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "values", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public java.lang.Object java.util.HashMap.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public void java.util.HashMap.clear()
void JavaUtilHashMap::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public boolean java.util.HashMap.isEmpty()
jboolean JavaUtilHashMap::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public int java.util.HashMap.size()
jint JavaUtilHashMap::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public java.util.Set java.util.HashMap.entrySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilHashMap::entrySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "entrySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public void java.util.HashMap.putAll(java.util.Map)
void JavaUtilHashMap::putAll(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "putAll", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// void java.util.HashMap.init()
void JavaUtilHashMap::init() const {
    static jnipp::Method<void> method(clazz(), "init", "()V");
    method.call(*this);
}

// private void java.util.HashMap.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilHashMap::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.util.HashMap.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaUtilHashMap::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public java.util.Set java.util.HashMap.keySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilHashMap::keySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "keySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// float java.util.HashMap.loadFactor()
jfloat JavaUtilHashMap::loadFactor() const {
    static jnipp::Method<jfloat> method(clazz(), "loadFactor", "()F");
    return method.call(*this);
}

// final boolean java.util.HashMap.initHashSeedAsNeeded(int)
jboolean JavaUtilHashMap::initHashSeedAsNeeded(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "initHashSeedAsNeeded", "(I)Z");
    return method.call(*this, a0);
}

// public boolean java.util.HashMap.containsValue(java.lang.Object)
jboolean JavaUtilHashMap::containsValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsValue", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.HashMap.containsKey(java.lang.Object)
jboolean JavaUtilHashMap::containsKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsKey", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// int java.util.HashMap.capacity()
jint JavaUtilHashMap::capacity() const {
    static jnipp::Method<jint> method(clazz(), "capacity", "()I");
    return method.call(*this);
}

// private static int java.util.HashMap.roundUpToPowerOf2(int)
jint JavaUtilHashMap::roundUpToPowerOf2(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "roundUpToPowerOf2", "(I)I");
    return method.call(a0);
}

// private void java.util.HashMap.inflateTable(int)
void JavaUtilHashMap::inflateTable(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "inflateTable", "(I)V");
    method.call(*this, a0);
}

// static int java.util.HashMap.indexFor(int,int)
jint JavaUtilHashMap::indexFor(jint a0, jint a1) {
    static jnipp::StaticMethod<jint,jint,jint> method(clazz(), "indexFor", "(II)I");
    return method.call(a0, a1);
}

// private java.lang.Object java.util.HashMap.getForNullKey()
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap::getForNullKey() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getForNullKey", "()Ljava/lang/Object;");
    return method.call(*this);
}

// final java.util.HashMap$Entry java.util.HashMap.getEntry(java.lang.Object)
jnipp::LocalRef<JavaUtilHashMap_Entry> JavaUtilHashMap::getEntry(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaUtilHashMap_Entry,JavaLangObject> method(clazz(), "getEntry", "(Ljava/lang/Object;)Ljava/util/HashMap$Entry;");
    return method.call(*this, a0);
}

// private java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap::putForNullKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "putForNullKey", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private void java.util.HashMap.putForCreate(java.lang.Object,java.lang.Object)
void JavaUtilHashMap::putForCreate(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangObject,JavaLangObject> method(clazz(), "putForCreate", "(Ljava/lang/Object;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// private void java.util.HashMap.putAllForCreate(java.util.Map)
void JavaUtilHashMap::putAllForCreate(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "putAllForCreate", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// void java.util.HashMap.resize(int)
void JavaUtilHashMap::resize(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "resize", "(I)V");
    method.call(*this, a0);
}

// void java.util.HashMap.transfer(java.util.HashMap$Entry[],boolean)
void JavaUtilHashMap::transfer(const jnipp::Ref<jnipp::Array<JavaUtilHashMap_Entry>>& a0, jboolean a1) const {
    static jnipp::Method<void,jnipp::Array<JavaUtilHashMap_Entry>,jboolean> method(clazz(), "transfer", "([Ljava/util/HashMap$Entry;Z)V");
    method.call(*this, a0, a1);
}

// final java.util.HashMap$Entry java.util.HashMap.removeEntryForKey(java.lang.Object)
jnipp::LocalRef<JavaUtilHashMap_Entry> JavaUtilHashMap::removeEntryForKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaUtilHashMap_Entry,JavaLangObject> method(clazz(), "removeEntryForKey", "(Ljava/lang/Object;)Ljava/util/HashMap$Entry;");
    return method.call(*this, a0);
}

// final java.util.HashMap$Entry java.util.HashMap.removeMapping(java.lang.Object)
jnipp::LocalRef<JavaUtilHashMap_Entry> JavaUtilHashMap::removeMapping(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaUtilHashMap_Entry,JavaLangObject> method(clazz(), "removeMapping", "(Ljava/lang/Object;)Ljava/util/HashMap$Entry;");
    return method.call(*this, a0);
}

// private boolean java.util.HashMap.containsNullValue()
jboolean JavaUtilHashMap::containsNullValue() const {
    static jnipp::Method<jboolean> method(clazz(), "containsNullValue", "()Z");
    return method.call(*this);
}

// void java.util.HashMap.addEntry(int,java.lang.Object,java.lang.Object,int)
void JavaUtilHashMap::addEntry(jint a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2, jint a3) const {
    static jnipp::Method<void,jint,JavaLangObject,JavaLangObject,jint> method(clazz(), "addEntry", "(ILjava/lang/Object;Ljava/lang/Object;I)V");
    method.call(*this, a0, a1, a2, a3);
}

// void java.util.HashMap.createEntry(int,java.lang.Object,java.lang.Object,int)
void JavaUtilHashMap::createEntry(jint a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2, jint a3) const {
    static jnipp::Method<void,jint,JavaLangObject,JavaLangObject,jint> method(clazz(), "createEntry", "(ILjava/lang/Object;Ljava/lang/Object;I)V");
    method.call(*this, a0, a1, a2, a3);
}

// java.util.Iterator java.util.HashMap.newKeyIterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilHashMap::newKeyIterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "newKeyIterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// java.util.Iterator java.util.HashMap.newValueIterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilHashMap::newValueIterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "newValueIterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// java.util.Iterator java.util.HashMap.newEntryIterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilHashMap::newEntryIterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "newEntryIterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// private java.util.Set java.util.HashMap.entrySet0()
jnipp::LocalRef<JavaUtilSet> JavaUtilHashMap::entrySet0() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "entrySet0", "()Ljava/util/Set;");
    return method.call(*this);
}
#undef DEFAULT_INITIAL_CAPACITY
const jnipp::StaticField<jint> JavaUtilHashMap::DEFAULT_INITIAL_CAPACITY ("java/util/HashMap", "DEFAULT_INITIAL_CAPACITY", "I");
#undef MAXIMUM_CAPACITY
const jnipp::StaticField<jint> JavaUtilHashMap::MAXIMUM_CAPACITY ("java/util/HashMap", "MAXIMUM_CAPACITY", "I");
#undef DEFAULT_LOAD_FACTOR
const jnipp::StaticField<jfloat> JavaUtilHashMap::DEFAULT_LOAD_FACTOR ("java/util/HashMap", "DEFAULT_LOAD_FACTOR", "F");
#undef EMPTY_TABLE
const jnipp::StaticField<jnipp::Array<JavaUtilHashMap_Entry>> JavaUtilHashMap::EMPTY_TABLE ("java/util/HashMap", "EMPTY_TABLE", "[Ljava/util/HashMap$Entry;");
#undef ALTERNATIVE_HASHING_THRESHOLD_DEFAULT
const jnipp::StaticField<jint> JavaUtilHashMap::ALTERNATIVE_HASHING_THRESHOLD_DEFAULT ("java/util/HashMap", "ALTERNATIVE_HASHING_THRESHOLD_DEFAULT", "I");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilHashMap::serialVersionUID ("java/util/HashMap", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilLocaleBaseLocale_Cache::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/locale/BaseLocale$Cache"));
    return cls;
}

// public sun.util.locale.BaseLocale$Cache()
jnipp::LocalRef<SunUtilLocaleBaseLocale_Cache> SunUtilLocaleBaseLocale_Cache::construct() {
    static jnipp::Constructor<SunUtilLocaleBaseLocale_Cache> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected sun.util.locale.BaseLocale sun.util.locale.BaseLocale$Cache.createObject(sun.util.locale.BaseLocale$Key)
jnipp::LocalRef<SunUtilLocaleBaseLocale> SunUtilLocaleBaseLocale_Cache::createObject(const jnipp::Ref<SunUtilLocaleBaseLocale_Key>& a0) const {
    static jnipp::Method<SunUtilLocaleBaseLocale,SunUtilLocaleBaseLocale_Key> method(clazz(), "createObject", "(Lsun/util/locale/BaseLocale$Key;)Lsun/util/locale/BaseLocale;");
    return method.call(*this, a0);
}

// protected sun.util.locale.BaseLocale$Key sun.util.locale.BaseLocale$Cache.normalizeKey(sun.util.locale.BaseLocale$Key)
jnipp::LocalRef<SunUtilLocaleBaseLocale_Key> SunUtilLocaleBaseLocale_Cache::normalizeKey(const jnipp::Ref<SunUtilLocaleBaseLocale_Key>& a0) const {
    static jnipp::Method<SunUtilLocaleBaseLocale_Key,SunUtilLocaleBaseLocale_Key> method(clazz(), "normalizeKey", "(Lsun/util/locale/BaseLocale$Key;)Lsun/util/locale/BaseLocale$Key;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunUtilLocaleBaseLocale_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/locale/BaseLocale$1"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilResourceBundle_CacheKey::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/ResourceBundle$CacheKey"));
    return cls;
}

// java.util.ResourceBundle$CacheKey(java.lang.String,java.util.Locale,java.lang.ClassLoader)
jnipp::LocalRef<JavaUtilResourceBundle_CacheKey> JavaUtilResourceBundle_CacheKey::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaLangClassLoader>& a2) {
    static jnipp::Constructor<JavaUtilResourceBundle_CacheKey,JavaLangString,JavaUtilLocale,JavaLangClassLoader> constructor(clazz(), "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)V");
    return constructor.construct(a0, a1, a2);
}

// private java.lang.Throwable java.util.ResourceBundle$CacheKey.getCause()
jnipp::LocalRef<JavaLangThrowable> JavaUtilResourceBundle_CacheKey::getCause() const {
    static jnipp::Method<JavaLangThrowable> method(clazz(), "getCause", "()Ljava/lang/Throwable;");
    return method.call(*this);
}

// public boolean java.util.ResourceBundle$CacheKey.equals(java.lang.Object)
jboolean JavaUtilResourceBundle_CacheKey::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.ResourceBundle$CacheKey.hashCode()
jint JavaUtilResourceBundle_CacheKey::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object java.util.ResourceBundle$CacheKey.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilResourceBundle_CacheKey::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// java.lang.String java.util.ResourceBundle$CacheKey.getName()
jnipp::LocalRef<JavaLangString> JavaUtilResourceBundle_CacheKey::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// java.util.ResourceBundle$CacheKey java.util.ResourceBundle$CacheKey.setName(java.lang.String)
jnipp::LocalRef<JavaUtilResourceBundle_CacheKey> JavaUtilResourceBundle_CacheKey::setName(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilResourceBundle_CacheKey,JavaLangString> method(clazz(), "setName", "(Ljava/lang/String;)Ljava/util/ResourceBundle$CacheKey;");
    return method.call(*this, a0);
}

// java.lang.ClassLoader java.util.ResourceBundle$CacheKey.getLoader()
jnipp::LocalRef<JavaLangClassLoader> JavaUtilResourceBundle_CacheKey::getLoader() const {
    static jnipp::Method<JavaLangClassLoader> method(clazz(), "getLoader", "()Ljava/lang/ClassLoader;");
    return method.call(*this);
}

// java.util.Locale java.util.ResourceBundle$CacheKey.getLocale()
jnipp::LocalRef<JavaUtilLocale> JavaUtilResourceBundle_CacheKey::getLocale() const {
    static jnipp::Method<JavaUtilLocale> method(clazz(), "getLocale", "()Ljava/util/Locale;");
    return method.call(*this);
}

// java.util.ResourceBundle$CacheKey java.util.ResourceBundle$CacheKey.setLocale(java.util.Locale)
jnipp::LocalRef<JavaUtilResourceBundle_CacheKey> JavaUtilResourceBundle_CacheKey::setLocale(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaUtilResourceBundle_CacheKey,JavaUtilLocale> method(clazz(), "setLocale", "(Ljava/util/Locale;)Ljava/util/ResourceBundle$CacheKey;");
    return method.call(*this, a0);
}

// void java.util.ResourceBundle$CacheKey.setFormat(java.lang.String)
void JavaUtilResourceBundle_CacheKey::setFormat(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "setFormat", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// java.lang.String java.util.ResourceBundle$CacheKey.getFormat()
jnipp::LocalRef<JavaLangString> JavaUtilResourceBundle_CacheKey::getFormat() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getFormat", "()Ljava/lang/String;");
    return method.call(*this);
}

// private void java.util.ResourceBundle$CacheKey.calculateHashCode()
void JavaUtilResourceBundle_CacheKey::calculateHashCode() const {
    static jnipp::Method<void> method(clazz(), "calculateHashCode", "()V");
    method.call(*this);
}

// private void java.util.ResourceBundle$CacheKey.setCause(java.lang.Throwable)
void JavaUtilResourceBundle_CacheKey::setCause(const jnipp::Ref<JavaLangThrowable>& a0) const {
    static jnipp::Method<void,JavaLangThrowable> method(clazz(), "setCause", "(Ljava/lang/Throwable;)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilList::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/List"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilResourceBundle_Control::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/ResourceBundle$Control"));
    return cls;
}

// protected java.util.ResourceBundle$Control()
jnipp::LocalRef<JavaUtilResourceBundle_Control> JavaUtilResourceBundle_Control::construct() {
    static jnipp::Constructor<JavaUtilResourceBundle_Control> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.List java.util.ResourceBundle$Control.getFormats(java.lang.String)
jnipp::LocalRef<JavaUtilList> JavaUtilResourceBundle_Control::getFormats(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilList,JavaLangString> method(clazz(), "getFormats", "(Ljava/lang/String;)Ljava/util/List;");
    return method.call(*this, a0);
}

// public java.util.List java.util.ResourceBundle$Control.getCandidateLocales(java.lang.String,java.util.Locale)
jnipp::LocalRef<JavaUtilList> JavaUtilResourceBundle_Control::getCandidateLocales(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1) const {
    static jnipp::Method<JavaUtilList,JavaLangString,JavaUtilLocale> method(clazz(), "getCandidateLocales", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/List;");
    return method.call(*this, a0, a1);
}

// public java.util.Locale java.util.ResourceBundle$Control.getFallbackLocale(java.lang.String,java.util.Locale)
jnipp::LocalRef<JavaUtilLocale> JavaUtilResourceBundle_Control::getFallbackLocale(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1) const {
    static jnipp::Method<JavaUtilLocale,JavaLangString,JavaUtilLocale> method(clazz(), "getFallbackLocale", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;");
    return method.call(*this, a0, a1);
}

// public java.util.ResourceBundle java.util.ResourceBundle$Control.newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean) throws java.lang.IllegalAccessException,java.lang.InstantiationException,java.io.IOException
jnipp::LocalRef<JavaUtilResourceBundle> JavaUtilResourceBundle_Control::newBundle(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangClassLoader>& a3, jboolean a4) const {
    static jnipp::Method<JavaUtilResourceBundle,JavaLangString,JavaUtilLocale,JavaLangString,JavaLangClassLoader,jboolean> method(clazz(), "newBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;");
    return method.call(*this, a0, a1, a2, a3, a4);
}

// public boolean java.util.ResourceBundle$Control.needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)
jboolean JavaUtilResourceBundle_Control::needsReload(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangClassLoader>& a3, const jnipp::Ref<JavaUtilResourceBundle>& a4, jlong a5) const {
    static jnipp::Method<jboolean,JavaLangString,JavaUtilLocale,JavaLangString,JavaLangClassLoader,JavaUtilResourceBundle,jlong> method(clazz(), "needsReload", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle;J)Z");
    return method.call(*this, a0, a1, a2, a3, a4, a5);
}

// public long java.util.ResourceBundle$Control.getTimeToLive(java.lang.String,java.util.Locale)
jlong JavaUtilResourceBundle_Control::getTimeToLive(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1) const {
    static jnipp::Method<jlong,JavaLangString,JavaUtilLocale> method(clazz(), "getTimeToLive", "(Ljava/lang/String;Ljava/util/Locale;)J");
    return method.call(*this, a0, a1);
}

// public static final java.util.ResourceBundle$Control java.util.ResourceBundle$Control.getControl(java.util.List)
jnipp::LocalRef<JavaUtilResourceBundle_Control> JavaUtilResourceBundle_Control::getControl(const jnipp::Ref<JavaUtilList>& a0) {
    static jnipp::StaticMethod<JavaUtilResourceBundle_Control,JavaUtilList> method(clazz(), "getControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;");
    return method.call(a0);
}

// public static final java.util.ResourceBundle$Control java.util.ResourceBundle$Control.getNoFallbackControl(java.util.List)
jnipp::LocalRef<JavaUtilResourceBundle_Control> JavaUtilResourceBundle_Control::getNoFallbackControl(const jnipp::Ref<JavaUtilList>& a0) {
    static jnipp::StaticMethod<JavaUtilResourceBundle_Control,JavaUtilList> method(clazz(), "getNoFallbackControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;");
    return method.call(a0);
}

// public java.lang.String java.util.ResourceBundle$Control.toBundleName(java.lang.String,java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaUtilResourceBundle_Control::toBundleName(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1) const {
    static jnipp::Method<JavaLangString,JavaLangString,JavaUtilLocale> method(clazz(), "toBundleName", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public final java.lang.String java.util.ResourceBundle$Control.toResourceName(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilResourceBundle_Control::toResourceName(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangString,JavaLangString,JavaLangString> method(clazz(), "toResourceName", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}
#undef FORMAT_DEFAULT
const jnipp::StaticField<JavaUtilList> JavaUtilResourceBundle_Control::FORMAT_DEFAULT ("java/util/ResourceBundle$Control", "FORMAT_DEFAULT", "Ljava/util/List;");
#undef FORMAT_CLASS
const jnipp::StaticField<JavaUtilList> JavaUtilResourceBundle_Control::FORMAT_CLASS ("java/util/ResourceBundle$Control", "FORMAT_CLASS", "Ljava/util/List;");
#undef FORMAT_PROPERTIES
const jnipp::StaticField<JavaUtilList> JavaUtilResourceBundle_Control::FORMAT_PROPERTIES ("java/util/ResourceBundle$Control", "FORMAT_PROPERTIES", "Ljava/util/List;");
#undef TTL_DONT_CACHE
const jnipp::StaticField<jlong> JavaUtilResourceBundle_Control::TTL_DONT_CACHE ("java/util/ResourceBundle$Control", "TTL_DONT_CACHE", "J");
#undef TTL_NO_EXPIRATION_CONTROL
const jnipp::StaticField<jlong> JavaUtilResourceBundle_Control::TTL_NO_EXPIRATION_CONTROL ("java/util/ResourceBundle$Control", "TTL_NO_EXPIRATION_CONTROL", "J");
#undef INSTANCE
const jnipp::StaticField<JavaUtilResourceBundle_Control> JavaUtilResourceBundle_Control::INSTANCE ("java/util/ResourceBundle$Control", "INSTANCE", "Ljava/util/ResourceBundle$Control;");
#undef CANDIDATES_CACHE
const jnipp::StaticField<JavaUtilResourceBundle_Control_CandidateListCache> JavaUtilResourceBundle_Control::CANDIDATES_CACHE ("java/util/ResourceBundle$Control", "CANDIDATES_CACHE", "Ljava/util/ResourceBundle$Control$CandidateListCache;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRefReferenceQueue::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ref/ReferenceQueue"));
    return cls;
}

// public java.lang.ref.ReferenceQueue()
jnipp::LocalRef<JavaLangRefReferenceQueue> JavaLangRefReferenceQueue::construct() {
    static jnipp::Constructor<JavaLangRefReferenceQueue> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.ref.Reference java.lang.ref.ReferenceQueue.remove(long) throws java.lang.IllegalArgumentException,java.lang.InterruptedException
jnipp::LocalRef<JavaLangRefReference> JavaLangRefReferenceQueue::remove(jlong a0) const {
    static jnipp::Method<JavaLangRefReference,jlong> method(clazz(), "remove", "(J)Ljava/lang/ref/Reference;");
    return method.call(*this, a0);
}

// public java.lang.ref.Reference java.lang.ref.ReferenceQueue.remove() throws java.lang.InterruptedException
jnipp::LocalRef<JavaLangRefReference> JavaLangRefReferenceQueue::remove() const {
    static jnipp::Method<JavaLangRefReference> method(clazz(), "remove", "()Ljava/lang/ref/Reference;");
    return method.call(*this);
}

// boolean java.lang.ref.ReferenceQueue.enqueue(java.lang.ref.Reference)
jboolean JavaLangRefReferenceQueue::enqueue(const jnipp::Ref<JavaLangRefReference>& a0) const {
    static jnipp::Method<jboolean,JavaLangRefReference> method(clazz(), "enqueue", "(Ljava/lang/ref/Reference;)Z");
    return method.call(*this, a0);
}

// public java.lang.ref.Reference java.lang.ref.ReferenceQueue.poll()
jnipp::LocalRef<JavaLangRefReference> JavaLangRefReferenceQueue::poll() const {
    static jnipp::Method<JavaLangRefReference> method(clazz(), "poll", "()Ljava/lang/ref/Reference;");
    return method.call(*this);
}

// private java.lang.ref.Reference java.lang.ref.ReferenceQueue.reallyPoll()
jnipp::LocalRef<JavaLangRefReference> JavaLangRefReferenceQueue::reallyPoll() const {
    static jnipp::Method<JavaLangRefReference> method(clazz(), "reallyPoll", "()Ljava/lang/ref/Reference;");
    return method.call(*this);
}
#undef NULL
jnipp::StaticField<JavaLangRefReferenceQueue> JavaLangRefReferenceQueue::NULL ("java/lang/ref/ReferenceQueue", "NULL", "Ljava/lang/ref/ReferenceQueue;");
#undef ENQUEUED
jnipp::StaticField<JavaLangRefReferenceQueue> JavaLangRefReferenceQueue::ENQUEUED ("java/lang/ref/ReferenceQueue", "ENQUEUED", "Ljava/lang/ref/ReferenceQueue;");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentConcurrentMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/ConcurrentMap"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilEnumeration::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Enumeration"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunUtilLocaleExtension::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/locale/Extension"));
    return cls;
}

// protected sun.util.locale.Extension(char)
jnipp::LocalRef<SunUtilLocaleExtension> SunUtilLocaleExtension::construct(jchar a0) {
    static jnipp::Constructor<SunUtilLocaleExtension,jchar> constructor(clazz(), "(C)V");
    return constructor.construct(a0);
}

// sun.util.locale.Extension(char,java.lang.String)
jnipp::LocalRef<SunUtilLocaleExtension> SunUtilLocaleExtension::construct(jchar a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<SunUtilLocaleExtension,jchar,JavaLangString> constructor(clazz(), "(CLjava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String sun.util.locale.Extension.getValue()
jnipp::LocalRef<JavaLangString> SunUtilLocaleExtension::getValue() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getValue", "()Ljava/lang/String;");
    return method.call(*this);
}

// public char sun.util.locale.Extension.getKey()
jchar SunUtilLocaleExtension::getKey() const {
    static jnipp::Method<jchar> method(clazz(), "getKey", "()C");
    return method.call(*this);
}

// protected void sun.util.locale.Extension.setValue(java.lang.String)
void SunUtilLocaleExtension::setValue(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "setValue", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public java.lang.String sun.util.locale.Extension.getID()
jnipp::LocalRef<JavaLangString> SunUtilLocaleExtension::getID() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getID", "()Ljava/lang/String;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangCharacter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Character"));
    return cls;
}

// public java.lang.Character(char)
jnipp::LocalRef<JavaLangCharacter> JavaLangCharacter::construct(jchar a0) {
    static jnipp::Constructor<JavaLangCharacter,jchar> constructor(clazz(), "(C)V");
    return constructor.construct(a0);
}

// public static boolean java.lang.Character.isJavaIdentifierStart(char)
jboolean JavaLangCharacter::isJavaIdentifierStart(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isJavaIdentifierStart", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isJavaIdentifierStart(int)
jboolean JavaLangCharacter::isJavaIdentifierStart(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isJavaIdentifierStart", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isJavaIdentifierPart(char)
jboolean JavaLangCharacter::isJavaIdentifierPart(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isJavaIdentifierPart", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isJavaIdentifierPart(int)
jboolean JavaLangCharacter::isJavaIdentifierPart(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isJavaIdentifierPart", "(I)Z");
    return method.call(a0);
}

// public boolean java.lang.Character.equals(java.lang.Object)
jboolean JavaLangCharacter::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.lang.Character.hashCode()
jint JavaLangCharacter::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public static char java.lang.Character.reverseBytes(char)
jchar JavaLangCharacter::reverseBytes(jchar a0) {
    static jnipp::StaticMethod<jchar,jchar> method(clazz(), "reverseBytes", "(C)C");
    return method.call(a0);
}

// public int java.lang.Character.compareTo(java.lang.Character)
jint JavaLangCharacter::compareTo(const jnipp::Ref<JavaLangCharacter>& a0) const {
    static jnipp::Method<jint,JavaLangCharacter> method(clazz(), "compareTo", "(Ljava/lang/Character;)I");
    return method.call(*this, a0);
}

// public char java.lang.Character.charValue()
jchar JavaLangCharacter::charValue() const {
    static jnipp::Method<jchar> method(clazz(), "charValue", "()C");
    return method.call(*this);
}

// public static java.lang.Character java.lang.Character.valueOf(char)
jnipp::LocalRef<JavaLangCharacter> JavaLangCharacter::valueOf(jchar a0) {
    static jnipp::StaticMethod<JavaLangCharacter,jchar> method(clazz(), "valueOf", "(C)Ljava/lang/Character;");
    return method.call(a0);
}

// public static java.lang.String java.lang.Character.getName(int)
jnipp::LocalRef<JavaLangString> JavaLangCharacter::getName(jint a0) {
    static jnipp::StaticMethod<JavaLangString,jint> method(clazz(), "getName", "(I)Ljava/lang/String;");
    return method.call(a0);
}

// public static int java.lang.Character.codePointAt(char[],int,int)
jint JavaLangCharacter::codePointAt(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "codePointAt", "([CII)I");
    return method.call(a0, a1, a2);
}

// public static int java.lang.Character.codePointAt(char[],int)
jint JavaLangCharacter::codePointAt(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint> method(clazz(), "codePointAt", "([CI)I");
    return method.call(a0, a1);
}

// public static int java.lang.Character.codePointAt(java.lang.CharSequence,int)
jint JavaLangCharacter::codePointAt(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1) {
    static jnipp::StaticMethod<jint,JavaLangCharSequence,jint> method(clazz(), "codePointAt", "(Ljava/lang/CharSequence;I)I");
    return method.call(a0, a1);
}

// public static int java.lang.Character.codePointBefore(char[],int,int)
jint JavaLangCharacter::codePointBefore(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "codePointBefore", "([CII)I");
    return method.call(a0, a1, a2);
}

// public static int java.lang.Character.codePointBefore(char[],int)
jint JavaLangCharacter::codePointBefore(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint> method(clazz(), "codePointBefore", "([CI)I");
    return method.call(a0, a1);
}

// public static int java.lang.Character.codePointBefore(java.lang.CharSequence,int)
jint JavaLangCharacter::codePointBefore(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1) {
    static jnipp::StaticMethod<jint,JavaLangCharSequence,jint> method(clazz(), "codePointBefore", "(Ljava/lang/CharSequence;I)I");
    return method.call(a0, a1);
}

// public static int java.lang.Character.codePointCount(char[],int,int)
jint JavaLangCharacter::codePointCount(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "codePointCount", "([CII)I");
    return method.call(a0, a1, a2);
}

// public static int java.lang.Character.codePointCount(java.lang.CharSequence,int,int)
jint JavaLangCharacter::codePointCount(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,JavaLangCharSequence,jint,jint> method(clazz(), "codePointCount", "(Ljava/lang/CharSequence;II)I");
    return method.call(a0, a1, a2);
}

// public static int java.lang.Character.offsetByCodePoints(char[],int,int,int,int)
jint JavaLangCharacter::offsetByCodePoints(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2, jint a3, jint a4) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint,jint,jint> method(clazz(), "offsetByCodePoints", "([CIIII)I");
    return method.call(a0, a1, a2, a3, a4);
}

// public static int java.lang.Character.offsetByCodePoints(java.lang.CharSequence,int,int)
jint JavaLangCharacter::offsetByCodePoints(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,JavaLangCharSequence,jint,jint> method(clazz(), "offsetByCodePoints", "(Ljava/lang/CharSequence;II)I");
    return method.call(a0, a1, a2);
}

// public static int java.lang.Character.toLowerCase(int)
jint JavaLangCharacter::toLowerCase(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "toLowerCase", "(I)I");
    return method.call(a0);
}

// public static char java.lang.Character.toLowerCase(char)
jchar JavaLangCharacter::toLowerCase(jchar a0) {
    static jnipp::StaticMethod<jchar,jchar> method(clazz(), "toLowerCase", "(C)C");
    return method.call(a0);
}

// public static int java.lang.Character.toUpperCase(int)
jint JavaLangCharacter::toUpperCase(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "toUpperCase", "(I)I");
    return method.call(a0);
}

// public static char java.lang.Character.toUpperCase(char)
jchar JavaLangCharacter::toUpperCase(jchar a0) {
    static jnipp::StaticMethod<jchar,jchar> method(clazz(), "toUpperCase", "(C)C");
    return method.call(a0);
}

// public static boolean java.lang.Character.isBmpCodePoint(int)
jboolean JavaLangCharacter::isBmpCodePoint(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isBmpCodePoint", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isValidCodePoint(int)
jboolean JavaLangCharacter::isValidCodePoint(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isValidCodePoint", "(I)Z");
    return method.call(a0);
}

// static void java.lang.Character.toSurrogates(int,char[],int)
void JavaLangCharacter::toSurrogates(jint a0, const jnipp::Ref<jnipp::Array<jchar>>& a1, jint a2) {
    static jnipp::StaticMethod<void,jint,jnipp::Array<jchar>,jint> method(clazz(), "toSurrogates", "(I[CI)V");
    method.call(a0, a1, a2);
}

// static int java.lang.Character.codePointAtImpl(char[],int,int)
jint JavaLangCharacter::codePointAtImpl(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "codePointAtImpl", "([CII)I");
    return method.call(a0, a1, a2);
}

// static int java.lang.Character.codePointBeforeImpl(char[],int,int)
jint JavaLangCharacter::codePointBeforeImpl(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "codePointBeforeImpl", "([CII)I");
    return method.call(a0, a1, a2);
}

// static int java.lang.Character.codePointCountImpl(char[],int,int)
jint JavaLangCharacter::codePointCountImpl(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "codePointCountImpl", "([CII)I");
    return method.call(a0, a1, a2);
}

// static int java.lang.Character.offsetByCodePointsImpl(char[],int,int,int,int)
jint JavaLangCharacter::offsetByCodePointsImpl(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2, jint a3, jint a4) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jint,jint,jint,jint> method(clazz(), "offsetByCodePointsImpl", "([CIIII)I");
    return method.call(a0, a1, a2, a3, a4);
}

// public static int java.lang.Character.compare(char,char)
jint JavaLangCharacter::compare(jchar a0, jchar a1) {
    static jnipp::StaticMethod<jint,jchar,jchar> method(clazz(), "compare", "(CC)I");
    return method.call(a0, a1);
}

// public static char java.lang.Character.highSurrogate(int)
jchar JavaLangCharacter::highSurrogate(jint a0) {
    static jnipp::StaticMethod<jchar,jint> method(clazz(), "highSurrogate", "(I)C");
    return method.call(a0);
}

// public static char java.lang.Character.lowSurrogate(int)
jchar JavaLangCharacter::lowSurrogate(jint a0) {
    static jnipp::StaticMethod<jchar,jint> method(clazz(), "lowSurrogate", "(I)C");
    return method.call(a0);
}

// public static int java.lang.Character.charCount(int)
jint JavaLangCharacter::charCount(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "charCount", "(I)I");
    return method.call(a0);
}

// public static int java.lang.Character.toChars(int,char[],int)
jint JavaLangCharacter::toChars(jint a0, const jnipp::Ref<jnipp::Array<jchar>>& a1, jint a2) {
    static jnipp::StaticMethod<jint,jint,jnipp::Array<jchar>,jint> method(clazz(), "toChars", "(I[CI)I");
    return method.call(a0, a1, a2);
}

// public static char[] java.lang.Character.toChars(int)
jnipp::LocalRef<jnipp::Array<jchar>> JavaLangCharacter::toChars(jint a0) {
    static jnipp::StaticMethod<jnipp::Array<jchar>,jint> method(clazz(), "toChars", "(I)[C");
    return method.call(a0);
}

// static int java.lang.Character.toUpperCaseEx(int)
jint JavaLangCharacter::toUpperCaseEx(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "toUpperCaseEx", "(I)I");
    return method.call(a0);
}

// static char[] java.lang.Character.toUpperCaseCharArray(int)
jnipp::LocalRef<jnipp::Array<jchar>> JavaLangCharacter::toUpperCaseCharArray(jint a0) {
    static jnipp::StaticMethod<jnipp::Array<jchar>,jint> method(clazz(), "toUpperCaseCharArray", "(I)[C");
    return method.call(a0);
}

// public static int java.lang.Character.getType(char)
jint JavaLangCharacter::getType(jchar a0) {
    static jnipp::StaticMethod<jint,jchar> method(clazz(), "getType", "(C)I");
    return method.call(a0);
}

// public static int java.lang.Character.getType(int)
jint JavaLangCharacter::getType(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "getType", "(I)I");
    return method.call(a0);
}

// public static boolean java.lang.Character.isLowSurrogate(char)
jboolean JavaLangCharacter::isLowSurrogate(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isLowSurrogate", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isHighSurrogate(char)
jboolean JavaLangCharacter::isHighSurrogate(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isHighSurrogate", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isSupplementaryCodePoint(int)
jboolean JavaLangCharacter::isSupplementaryCodePoint(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isSupplementaryCodePoint", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isSurrogate(char)
jboolean JavaLangCharacter::isSurrogate(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isSurrogate", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isSurrogatePair(char,char)
jboolean JavaLangCharacter::isSurrogatePair(jchar a0, jchar a1) {
    static jnipp::StaticMethod<jboolean,jchar,jchar> method(clazz(), "isSurrogatePair", "(CC)Z");
    return method.call(a0, a1);
}

// public static int java.lang.Character.toCodePoint(char,char)
jint JavaLangCharacter::toCodePoint(jchar a0, jchar a1) {
    static jnipp::StaticMethod<jint,jchar,jchar> method(clazz(), "toCodePoint", "(CC)I");
    return method.call(a0, a1);
}

// public static boolean java.lang.Character.isLowerCase(int)
jboolean JavaLangCharacter::isLowerCase(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isLowerCase", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isLowerCase(char)
jboolean JavaLangCharacter::isLowerCase(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isLowerCase", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isUpperCase(char)
jboolean JavaLangCharacter::isUpperCase(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isUpperCase", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isUpperCase(int)
jboolean JavaLangCharacter::isUpperCase(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isUpperCase", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isTitleCase(int)
jboolean JavaLangCharacter::isTitleCase(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isTitleCase", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isTitleCase(char)
jboolean JavaLangCharacter::isTitleCase(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isTitleCase", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isDigit(char)
jboolean JavaLangCharacter::isDigit(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isDigit", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isDigit(int)
jboolean JavaLangCharacter::isDigit(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isDigit", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isDefined(char)
jboolean JavaLangCharacter::isDefined(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isDefined", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isDefined(int)
jboolean JavaLangCharacter::isDefined(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isDefined", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isLetter(int)
jboolean JavaLangCharacter::isLetter(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isLetter", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isLetter(char)
jboolean JavaLangCharacter::isLetter(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isLetter", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isLetterOrDigit(char)
jboolean JavaLangCharacter::isLetterOrDigit(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isLetterOrDigit", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isLetterOrDigit(int)
jboolean JavaLangCharacter::isLetterOrDigit(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isLetterOrDigit", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isJavaLetter(char)
jboolean JavaLangCharacter::isJavaLetter(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isJavaLetter", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isJavaLetterOrDigit(char)
jboolean JavaLangCharacter::isJavaLetterOrDigit(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isJavaLetterOrDigit", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isAlphabetic(int)
jboolean JavaLangCharacter::isAlphabetic(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isAlphabetic", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isIdeographic(int)
jboolean JavaLangCharacter::isIdeographic(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isIdeographic", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isUnicodeIdentifierStart(int)
jboolean JavaLangCharacter::isUnicodeIdentifierStart(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isUnicodeIdentifierStart", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isUnicodeIdentifierStart(char)
jboolean JavaLangCharacter::isUnicodeIdentifierStart(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isUnicodeIdentifierStart", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isUnicodeIdentifierPart(int)
jboolean JavaLangCharacter::isUnicodeIdentifierPart(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isUnicodeIdentifierPart", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isUnicodeIdentifierPart(char)
jboolean JavaLangCharacter::isUnicodeIdentifierPart(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isUnicodeIdentifierPart", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isIdentifierIgnorable(char)
jboolean JavaLangCharacter::isIdentifierIgnorable(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isIdentifierIgnorable", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isIdentifierIgnorable(int)
jboolean JavaLangCharacter::isIdentifierIgnorable(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isIdentifierIgnorable", "(I)Z");
    return method.call(a0);
}

// public static char java.lang.Character.toTitleCase(char)
jchar JavaLangCharacter::toTitleCase(jchar a0) {
    static jnipp::StaticMethod<jchar,jchar> method(clazz(), "toTitleCase", "(C)C");
    return method.call(a0);
}

// public static int java.lang.Character.toTitleCase(int)
jint JavaLangCharacter::toTitleCase(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "toTitleCase", "(I)I");
    return method.call(a0);
}

// public static int java.lang.Character.digit(int,int)
jint JavaLangCharacter::digit(jint a0, jint a1) {
    static jnipp::StaticMethod<jint,jint,jint> method(clazz(), "digit", "(II)I");
    return method.call(a0, a1);
}

// public static int java.lang.Character.digit(char,int)
jint JavaLangCharacter::digit(jchar a0, jint a1) {
    static jnipp::StaticMethod<jint,jchar,jint> method(clazz(), "digit", "(CI)I");
    return method.call(a0, a1);
}

// public static int java.lang.Character.getNumericValue(int)
jint JavaLangCharacter::getNumericValue(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "getNumericValue", "(I)I");
    return method.call(a0);
}

// public static int java.lang.Character.getNumericValue(char)
jint JavaLangCharacter::getNumericValue(jchar a0) {
    static jnipp::StaticMethod<jint,jchar> method(clazz(), "getNumericValue", "(C)I");
    return method.call(a0);
}

// public static boolean java.lang.Character.isSpace(char)
jboolean JavaLangCharacter::isSpace(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isSpace", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isSpaceChar(char)
jboolean JavaLangCharacter::isSpaceChar(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isSpaceChar", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isSpaceChar(int)
jboolean JavaLangCharacter::isSpaceChar(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isSpaceChar", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isWhitespace(int)
jboolean JavaLangCharacter::isWhitespace(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isWhitespace", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isWhitespace(char)
jboolean JavaLangCharacter::isWhitespace(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isWhitespace", "(C)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isISOControl(int)
jboolean JavaLangCharacter::isISOControl(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isISOControl", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isISOControl(char)
jboolean JavaLangCharacter::isISOControl(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isISOControl", "(C)Z");
    return method.call(a0);
}

// public static char java.lang.Character.forDigit(int,int)
jchar JavaLangCharacter::forDigit(jint a0, jint a1) {
    static jnipp::StaticMethod<jchar,jint,jint> method(clazz(), "forDigit", "(II)C");
    return method.call(a0, a1);
}

// public static byte java.lang.Character.getDirectionality(char)
jbyte JavaLangCharacter::getDirectionality(jchar a0) {
    static jnipp::StaticMethod<jbyte,jchar> method(clazz(), "getDirectionality", "(C)B");
    return method.call(a0);
}

// public static byte java.lang.Character.getDirectionality(int)
jbyte JavaLangCharacter::getDirectionality(jint a0) {
    static jnipp::StaticMethod<jbyte,jint> method(clazz(), "getDirectionality", "(I)B");
    return method.call(a0);
}

// public static boolean java.lang.Character.isMirrored(int)
jboolean JavaLangCharacter::isMirrored(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isMirrored", "(I)Z");
    return method.call(a0);
}

// public static boolean java.lang.Character.isMirrored(char)
jboolean JavaLangCharacter::isMirrored(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isMirrored", "(C)Z");
    return method.call(a0);
}
#undef MIN_RADIX
const jnipp::StaticField<jint> JavaLangCharacter::MIN_RADIX ("java/lang/Character", "MIN_RADIX", "I");
#undef MAX_RADIX
const jnipp::StaticField<jint> JavaLangCharacter::MAX_RADIX ("java/lang/Character", "MAX_RADIX", "I");
#undef MIN_VALUE
const jnipp::StaticField<jchar> JavaLangCharacter::MIN_VALUE ("java/lang/Character", "MIN_VALUE", "C");
#undef MAX_VALUE
const jnipp::StaticField<jchar> JavaLangCharacter::MAX_VALUE ("java/lang/Character", "MAX_VALUE", "C");
#undef TYPE
const jnipp::StaticField<JavaLangClass> JavaLangCharacter::TYPE ("java/lang/Character", "TYPE", "Ljava/lang/Class;");
#undef UNASSIGNED
const jnipp::StaticField<jbyte> JavaLangCharacter::UNASSIGNED ("java/lang/Character", "UNASSIGNED", "B");
#undef UPPERCASE_LETTER
const jnipp::StaticField<jbyte> JavaLangCharacter::UPPERCASE_LETTER ("java/lang/Character", "UPPERCASE_LETTER", "B");
#undef LOWERCASE_LETTER
const jnipp::StaticField<jbyte> JavaLangCharacter::LOWERCASE_LETTER ("java/lang/Character", "LOWERCASE_LETTER", "B");
#undef TITLECASE_LETTER
const jnipp::StaticField<jbyte> JavaLangCharacter::TITLECASE_LETTER ("java/lang/Character", "TITLECASE_LETTER", "B");
#undef MODIFIER_LETTER
const jnipp::StaticField<jbyte> JavaLangCharacter::MODIFIER_LETTER ("java/lang/Character", "MODIFIER_LETTER", "B");
#undef OTHER_LETTER
const jnipp::StaticField<jbyte> JavaLangCharacter::OTHER_LETTER ("java/lang/Character", "OTHER_LETTER", "B");
#undef NON_SPACING_MARK
const jnipp::StaticField<jbyte> JavaLangCharacter::NON_SPACING_MARK ("java/lang/Character", "NON_SPACING_MARK", "B");
#undef ENCLOSING_MARK
const jnipp::StaticField<jbyte> JavaLangCharacter::ENCLOSING_MARK ("java/lang/Character", "ENCLOSING_MARK", "B");
#undef COMBINING_SPACING_MARK
const jnipp::StaticField<jbyte> JavaLangCharacter::COMBINING_SPACING_MARK ("java/lang/Character", "COMBINING_SPACING_MARK", "B");
#undef DECIMAL_DIGIT_NUMBER
const jnipp::StaticField<jbyte> JavaLangCharacter::DECIMAL_DIGIT_NUMBER ("java/lang/Character", "DECIMAL_DIGIT_NUMBER", "B");
#undef LETTER_NUMBER
const jnipp::StaticField<jbyte> JavaLangCharacter::LETTER_NUMBER ("java/lang/Character", "LETTER_NUMBER", "B");
#undef OTHER_NUMBER
const jnipp::StaticField<jbyte> JavaLangCharacter::OTHER_NUMBER ("java/lang/Character", "OTHER_NUMBER", "B");
#undef SPACE_SEPARATOR
const jnipp::StaticField<jbyte> JavaLangCharacter::SPACE_SEPARATOR ("java/lang/Character", "SPACE_SEPARATOR", "B");
#undef LINE_SEPARATOR
const jnipp::StaticField<jbyte> JavaLangCharacter::LINE_SEPARATOR ("java/lang/Character", "LINE_SEPARATOR", "B");
#undef PARAGRAPH_SEPARATOR
const jnipp::StaticField<jbyte> JavaLangCharacter::PARAGRAPH_SEPARATOR ("java/lang/Character", "PARAGRAPH_SEPARATOR", "B");
#undef CONTROL
const jnipp::StaticField<jbyte> JavaLangCharacter::CONTROL ("java/lang/Character", "CONTROL", "B");
#undef FORMAT
const jnipp::StaticField<jbyte> JavaLangCharacter::FORMAT ("java/lang/Character", "FORMAT", "B");
#undef PRIVATE_USE
const jnipp::StaticField<jbyte> JavaLangCharacter::PRIVATE_USE ("java/lang/Character", "PRIVATE_USE", "B");
#undef SURROGATE
const jnipp::StaticField<jbyte> JavaLangCharacter::SURROGATE ("java/lang/Character", "SURROGATE", "B");
#undef DASH_PUNCTUATION
const jnipp::StaticField<jbyte> JavaLangCharacter::DASH_PUNCTUATION ("java/lang/Character", "DASH_PUNCTUATION", "B");
#undef START_PUNCTUATION
const jnipp::StaticField<jbyte> JavaLangCharacter::START_PUNCTUATION ("java/lang/Character", "START_PUNCTUATION", "B");
#undef END_PUNCTUATION
const jnipp::StaticField<jbyte> JavaLangCharacter::END_PUNCTUATION ("java/lang/Character", "END_PUNCTUATION", "B");
#undef CONNECTOR_PUNCTUATION
const jnipp::StaticField<jbyte> JavaLangCharacter::CONNECTOR_PUNCTUATION ("java/lang/Character", "CONNECTOR_PUNCTUATION", "B");
#undef OTHER_PUNCTUATION
const jnipp::StaticField<jbyte> JavaLangCharacter::OTHER_PUNCTUATION ("java/lang/Character", "OTHER_PUNCTUATION", "B");
#undef MATH_SYMBOL
const jnipp::StaticField<jbyte> JavaLangCharacter::MATH_SYMBOL ("java/lang/Character", "MATH_SYMBOL", "B");
#undef CURRENCY_SYMBOL
const jnipp::StaticField<jbyte> JavaLangCharacter::CURRENCY_SYMBOL ("java/lang/Character", "CURRENCY_SYMBOL", "B");
#undef MODIFIER_SYMBOL
const jnipp::StaticField<jbyte> JavaLangCharacter::MODIFIER_SYMBOL ("java/lang/Character", "MODIFIER_SYMBOL", "B");
#undef OTHER_SYMBOL
const jnipp::StaticField<jbyte> JavaLangCharacter::OTHER_SYMBOL ("java/lang/Character", "OTHER_SYMBOL", "B");
#undef INITIAL_QUOTE_PUNCTUATION
const jnipp::StaticField<jbyte> JavaLangCharacter::INITIAL_QUOTE_PUNCTUATION ("java/lang/Character", "INITIAL_QUOTE_PUNCTUATION", "B");
#undef FINAL_QUOTE_PUNCTUATION
const jnipp::StaticField<jbyte> JavaLangCharacter::FINAL_QUOTE_PUNCTUATION ("java/lang/Character", "FINAL_QUOTE_PUNCTUATION", "B");
#undef ERROR
const jnipp::StaticField<jint> JavaLangCharacter::ERROR ("java/lang/Character", "ERROR", "I");
#undef DIRECTIONALITY_UNDEFINED
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_UNDEFINED ("java/lang/Character", "DIRECTIONALITY_UNDEFINED", "B");
#undef DIRECTIONALITY_LEFT_TO_RIGHT
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_LEFT_TO_RIGHT ("java/lang/Character", "DIRECTIONALITY_LEFT_TO_RIGHT", "B");
#undef DIRECTIONALITY_RIGHT_TO_LEFT
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_RIGHT_TO_LEFT ("java/lang/Character", "DIRECTIONALITY_RIGHT_TO_LEFT", "B");
#undef DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC ("java/lang/Character", "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", "B");
#undef DIRECTIONALITY_EUROPEAN_NUMBER
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_EUROPEAN_NUMBER ("java/lang/Character", "DIRECTIONALITY_EUROPEAN_NUMBER", "B");
#undef DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR ("java/lang/Character", "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", "B");
#undef DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR ("java/lang/Character", "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", "B");
#undef DIRECTIONALITY_ARABIC_NUMBER
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_ARABIC_NUMBER ("java/lang/Character", "DIRECTIONALITY_ARABIC_NUMBER", "B");
#undef DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR ("java/lang/Character", "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", "B");
#undef DIRECTIONALITY_NONSPACING_MARK
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_NONSPACING_MARK ("java/lang/Character", "DIRECTIONALITY_NONSPACING_MARK", "B");
#undef DIRECTIONALITY_BOUNDARY_NEUTRAL
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_BOUNDARY_NEUTRAL ("java/lang/Character", "DIRECTIONALITY_BOUNDARY_NEUTRAL", "B");
#undef DIRECTIONALITY_PARAGRAPH_SEPARATOR
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_PARAGRAPH_SEPARATOR ("java/lang/Character", "DIRECTIONALITY_PARAGRAPH_SEPARATOR", "B");
#undef DIRECTIONALITY_SEGMENT_SEPARATOR
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_SEGMENT_SEPARATOR ("java/lang/Character", "DIRECTIONALITY_SEGMENT_SEPARATOR", "B");
#undef DIRECTIONALITY_WHITESPACE
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_WHITESPACE ("java/lang/Character", "DIRECTIONALITY_WHITESPACE", "B");
#undef DIRECTIONALITY_OTHER_NEUTRALS
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_OTHER_NEUTRALS ("java/lang/Character", "DIRECTIONALITY_OTHER_NEUTRALS", "B");
#undef DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING ("java/lang/Character", "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", "B");
#undef DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE ("java/lang/Character", "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", "B");
#undef DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING ("java/lang/Character", "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", "B");
#undef DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE ("java/lang/Character", "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", "B");
#undef DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
const jnipp::StaticField<jbyte> JavaLangCharacter::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT ("java/lang/Character", "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", "B");
#undef MIN_HIGH_SURROGATE
const jnipp::StaticField<jchar> JavaLangCharacter::MIN_HIGH_SURROGATE ("java/lang/Character", "MIN_HIGH_SURROGATE", "C");
#undef MAX_HIGH_SURROGATE
const jnipp::StaticField<jchar> JavaLangCharacter::MAX_HIGH_SURROGATE ("java/lang/Character", "MAX_HIGH_SURROGATE", "C");
#undef MIN_LOW_SURROGATE
const jnipp::StaticField<jchar> JavaLangCharacter::MIN_LOW_SURROGATE ("java/lang/Character", "MIN_LOW_SURROGATE", "C");
#undef MAX_LOW_SURROGATE
const jnipp::StaticField<jchar> JavaLangCharacter::MAX_LOW_SURROGATE ("java/lang/Character", "MAX_LOW_SURROGATE", "C");
#undef MIN_SURROGATE
const jnipp::StaticField<jchar> JavaLangCharacter::MIN_SURROGATE ("java/lang/Character", "MIN_SURROGATE", "C");
#undef MAX_SURROGATE
const jnipp::StaticField<jchar> JavaLangCharacter::MAX_SURROGATE ("java/lang/Character", "MAX_SURROGATE", "C");
#undef MIN_SUPPLEMENTARY_CODE_POINT
const jnipp::StaticField<jint> JavaLangCharacter::MIN_SUPPLEMENTARY_CODE_POINT ("java/lang/Character", "MIN_SUPPLEMENTARY_CODE_POINT", "I");
#undef MIN_CODE_POINT
const jnipp::StaticField<jint> JavaLangCharacter::MIN_CODE_POINT ("java/lang/Character", "MIN_CODE_POINT", "I");
#undef MAX_CODE_POINT
const jnipp::StaticField<jint> JavaLangCharacter::MAX_CODE_POINT ("java/lang/Character", "MAX_CODE_POINT", "I");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangCharacter::serialVersionUID ("java/lang/Character", "serialVersionUID", "J");
#undef SIZE
const jnipp::StaticField<jint> JavaLangCharacter::SIZE ("java/lang/Character", "SIZE", "I");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaLangCharacter::$assertionsDisabled ("java/lang/Character", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaTextAttributedCharacterIterator_Attribute::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/AttributedCharacterIterator$Attribute"));
    return cls;
}

// protected java.text.AttributedCharacterIterator$Attribute(java.lang.String)
jnipp::LocalRef<JavaTextAttributedCharacterIterator_Attribute> JavaTextAttributedCharacterIterator_Attribute::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaTextAttributedCharacterIterator_Attribute,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public final boolean java.text.AttributedCharacterIterator$Attribute.equals(java.lang.Object)
jboolean JavaTextAttributedCharacterIterator_Attribute::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public final int java.text.AttributedCharacterIterator$Attribute.hashCode()
jint JavaTextAttributedCharacterIterator_Attribute::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// protected java.lang.String java.text.AttributedCharacterIterator$Attribute.getName()
jnipp::LocalRef<JavaLangString> JavaTextAttributedCharacterIterator_Attribute::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// protected java.lang.Object java.text.AttributedCharacterIterator$Attribute.readResolve() throws java.io.InvalidObjectException
jnipp::LocalRef<JavaLangObject> JavaTextAttributedCharacterIterator_Attribute::readResolve() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "readResolve", "()Ljava/lang/Object;");
    return method.call(*this);
}
#undef instanceMap
const jnipp::StaticField<JavaUtilMap> JavaTextAttributedCharacterIterator_Attribute::instanceMap ("java/text/AttributedCharacterIterator$Attribute", "instanceMap", "Ljava/util/Map;");
#undef LANGUAGE
const jnipp::StaticField<JavaTextAttributedCharacterIterator_Attribute> JavaTextAttributedCharacterIterator_Attribute::LANGUAGE ("java/text/AttributedCharacterIterator$Attribute", "LANGUAGE", "Ljava/text/AttributedCharacterIterator$Attribute;");
#undef READING
const jnipp::StaticField<JavaTextAttributedCharacterIterator_Attribute> JavaTextAttributedCharacterIterator_Attribute::READING ("java/text/AttributedCharacterIterator$Attribute", "READING", "Ljava/text/AttributedCharacterIterator$Attribute;");
#undef INPUT_METHOD_SEGMENT
const jnipp::StaticField<JavaTextAttributedCharacterIterator_Attribute> JavaTextAttributedCharacterIterator_Attribute::INPUT_METHOD_SEGMENT ("java/text/AttributedCharacterIterator$Attribute", "INPUT_METHOD_SEGMENT", "Ljava/text/AttributedCharacterIterator$Attribute;");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaTextAttributedCharacterIterator_Attribute::serialVersionUID ("java/text/AttributedCharacterIterator$Attribute", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaTextAttributedCharacterIterator::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/AttributedCharacterIterator"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaTextParsePosition::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/ParsePosition"));
    return cls;
}

// public java.text.ParsePosition(int)
jnipp::LocalRef<JavaTextParsePosition> JavaTextParsePosition::construct(jint a0) {
    static jnipp::Constructor<JavaTextParsePosition,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public boolean java.text.ParsePosition.equals(java.lang.Object)
jboolean JavaTextParsePosition::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.text.ParsePosition.hashCode()
jint JavaTextParsePosition::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.text.ParsePosition.getIndex()
jint JavaTextParsePosition::getIndex() const {
    static jnipp::Method<jint> method(clazz(), "getIndex", "()I");
    return method.call(*this);
}

// public void java.text.ParsePosition.setIndex(int)
void JavaTextParsePosition::setIndex(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setIndex", "(I)V");
    method.call(*this, a0);
}

// public void java.text.ParsePosition.setErrorIndex(int)
void JavaTextParsePosition::setErrorIndex(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setErrorIndex", "(I)V");
    method.call(*this, a0);
}

// public int java.text.ParsePosition.getErrorIndex()
jint JavaTextParsePosition::getErrorIndex() const {
    static jnipp::Method<jint> method(clazz(), "getErrorIndex", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaTextFieldPosition::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/FieldPosition"));
    return cls;
}

// public java.text.FieldPosition(java.text.Format$Field,int)
jnipp::LocalRef<JavaTextFieldPosition> JavaTextFieldPosition::construct(const jnipp::Ref<JavaTextFormat_Field>& a0, jint a1) {
    static jnipp::Constructor<JavaTextFieldPosition,JavaTextFormat_Field,jint> constructor(clazz(), "(Ljava/text/Format$Field;I)V");
    return constructor.construct(a0, a1);
}

// public java.text.FieldPosition(java.text.Format$Field)
jnipp::LocalRef<JavaTextFieldPosition> JavaTextFieldPosition::construct(const jnipp::Ref<JavaTextFormat_Field>& a0) {
    static jnipp::Constructor<JavaTextFieldPosition,JavaTextFormat_Field> constructor(clazz(), "(Ljava/text/Format$Field;)V");
    return constructor.construct(a0);
}

// public java.text.FieldPosition(int)
jnipp::LocalRef<JavaTextFieldPosition> JavaTextFieldPosition::construct(jint a0) {
    static jnipp::Constructor<JavaTextFieldPosition,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public boolean java.text.FieldPosition.equals(java.lang.Object)
jboolean JavaTextFieldPosition::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.text.FieldPosition.hashCode()
jint JavaTextFieldPosition::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.text.FieldPosition.getField()
jint JavaTextFieldPosition::getField() const {
    static jnipp::Method<jint> method(clazz(), "getField", "()I");
    return method.call(*this);
}

// public java.text.Format$Field java.text.FieldPosition.getFieldAttribute()
jnipp::LocalRef<JavaTextFormat_Field> JavaTextFieldPosition::getFieldAttribute() const {
    static jnipp::Method<JavaTextFormat_Field> method(clazz(), "getFieldAttribute", "()Ljava/text/Format$Field;");
    return method.call(*this);
}

// public void java.text.FieldPosition.setBeginIndex(int)
void JavaTextFieldPosition::setBeginIndex(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setBeginIndex", "(I)V");
    method.call(*this, a0);
}

// public void java.text.FieldPosition.setEndIndex(int)
void JavaTextFieldPosition::setEndIndex(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setEndIndex", "(I)V");
    method.call(*this, a0);
}

// public int java.text.FieldPosition.getBeginIndex()
jint JavaTextFieldPosition::getBeginIndex() const {
    static jnipp::Method<jint> method(clazz(), "getBeginIndex", "()I");
    return method.call(*this);
}

// public int java.text.FieldPosition.getEndIndex()
jint JavaTextFieldPosition::getEndIndex() const {
    static jnipp::Method<jint> method(clazz(), "getEndIndex", "()I");
    return method.call(*this);
}

// java.text.Format$FieldDelegate java.text.FieldPosition.getFieldDelegate()
jnipp::LocalRef<JavaTextFormat_FieldDelegate> JavaTextFieldPosition::getFieldDelegate() const {
    static jnipp::Method<JavaTextFormat_FieldDelegate> method(clazz(), "getFieldDelegate", "()Ljava/text/Format$FieldDelegate;");
    return method.call(*this);
}

// private boolean java.text.FieldPosition.matchesField(java.text.Format$Field,int)
jboolean JavaTextFieldPosition::matchesField(const jnipp::Ref<JavaTextFormat_Field>& a0, jint a1) const {
    static jnipp::Method<jboolean,JavaTextFormat_Field,jint> method(clazz(), "matchesField", "(Ljava/text/Format$Field;I)Z");
    return method.call(*this, a0, a1);
}

// private boolean java.text.FieldPosition.matchesField(java.text.Format$Field)
jboolean JavaTextFieldPosition::matchesField(const jnipp::Ref<JavaTextFormat_Field>& a0) const {
    static jnipp::Method<jboolean,JavaTextFormat_Field> method(clazz(), "matchesField", "(Ljava/text/Format$Field;)Z");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaTextCharacterIterator::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/CharacterIterator"));
    return cls;
}
#undef DONE
const jnipp::StaticField<jchar> JavaTextCharacterIterator::DONE ("java/text/CharacterIterator", "DONE", "C");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilLocale_LocaleKey::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Locale$LocaleKey"));
    return cls;
}

// java.util.Locale$LocaleKey(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions,java.util.Locale$1)
jnipp::LocalRef<JavaUtilLocale_LocaleKey> JavaUtilLocale_LocaleKey::construct(const jnipp::Ref<SunUtilLocaleBaseLocale>& a0, const jnipp::Ref<SunUtilLocaleLocaleExtensions>& a1, const jnipp::Ref<JavaUtilLocale_1>& a2) {
    static jnipp::Constructor<JavaUtilLocale_LocaleKey,SunUtilLocaleBaseLocale,SunUtilLocaleLocaleExtensions,JavaUtilLocale_1> constructor(clazz(), "(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;Ljava/util/Locale$1;)V");
    return constructor.construct(a0, a1, a2);
}

// private java.util.Locale$LocaleKey(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)
jnipp::LocalRef<JavaUtilLocale_LocaleKey> JavaUtilLocale_LocaleKey::construct(const jnipp::Ref<SunUtilLocaleBaseLocale>& a0, const jnipp::Ref<SunUtilLocaleLocaleExtensions>& a1) {
    static jnipp::Constructor<JavaUtilLocale_LocaleKey,SunUtilLocaleBaseLocale,SunUtilLocaleLocaleExtensions> constructor(clazz(), "(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;)V");
    return constructor.construct(a0, a1);
}

// public boolean java.util.Locale$LocaleKey.equals(java.lang.Object)
jboolean JavaUtilLocale_LocaleKey::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.Locale$LocaleKey.hashCode()
jint JavaUtilLocale_LocaleKey::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetURL::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/URL"));
    return cls;
}

// public java.net.URL(java.net.URL,java.lang.String,java.net.URLStreamHandler) throws java.net.MalformedURLException
jnipp::LocalRef<JavaNetURL> JavaNetURL::construct(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaNetURLStreamHandler>& a2) {
    static jnipp::Constructor<JavaNetURL,JavaNetURL,JavaLangString,JavaNetURLStreamHandler> constructor(clazz(), "(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.net.URL(java.net.URL,java.lang.String) throws java.net.MalformedURLException
jnipp::LocalRef<JavaNetURL> JavaNetURL::construct(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaNetURL,JavaNetURL,JavaLangString> constructor(clazz(), "(Ljava/net/URL;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.net.URL(java.lang.String) throws java.net.MalformedURLException
jnipp::LocalRef<JavaNetURL> JavaNetURL::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaNetURL,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.net.URL(java.lang.String,java.lang.String,int,java.lang.String) throws java.net.MalformedURLException
jnipp::LocalRef<JavaNetURL> JavaNetURL::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jint a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::Constructor<JavaNetURL,JavaLangString,JavaLangString,jint,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.net.URL(java.lang.String,java.lang.String,java.lang.String) throws java.net.MalformedURLException
jnipp::LocalRef<JavaNetURL> JavaNetURL::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::Constructor<JavaNetURL,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.net.URL(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler) throws java.net.MalformedURLException
jnipp::LocalRef<JavaNetURL> JavaNetURL::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jint a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaNetURLStreamHandler>& a4) {
    static jnipp::Constructor<JavaNetURL,JavaLangString,JavaLangString,jint,JavaLangString,JavaNetURLStreamHandler> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V");
    return constructor.construct(a0, a1, a2, a3, a4);
}

// public boolean java.net.URL.equals(java.lang.Object)
jboolean JavaNetURL::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public synchronized int java.net.URL.hashCode()
jint JavaNetURL::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public final java.io.InputStream java.net.URL.openStream() throws java.io.IOException
jnipp::LocalRef<JavaIoInputStream> JavaNetURL::openStream() const {
    static jnipp::Method<JavaIoInputStream> method(clazz(), "openStream", "()Ljava/io/InputStream;");
    return method.call(*this);
}

// private synchronized void java.net.URL.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaNetURL::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private synchronized void java.net.URL.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaNetURL::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// protected void java.net.URL.set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)
void JavaNetURL::set(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jint a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaLangString>& a4) const {
    static jnipp::Method<void,JavaLangString,JavaLangString,jint,JavaLangString,JavaLangString> method(clazz(), "set", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1, a2, a3, a4);
}

// protected void java.net.URL.set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void JavaNetURL::set(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jint a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaLangString>& a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<JavaLangString>& a6, const jnipp::Ref<JavaLangString>& a7) const {
    static jnipp::Method<void,JavaLangString,JavaLangString,jint,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString> method(clazz(), "set", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1, a2, a3, a4, a5, a6, a7);
}

// public java.lang.String java.net.URL.getPath()
jnipp::LocalRef<JavaLangString> JavaNetURL::getPath() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getPath", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.net.URI java.net.URL.toURI() throws java.net.URISyntaxException
jnipp::LocalRef<JavaNetURI> JavaNetURL::toURI() const {
    static jnipp::Method<JavaNetURI> method(clazz(), "toURI", "()Ljava/net/URI;");
    return method.call(*this);
}

// public java.lang.String java.net.URL.getAuthority()
jnipp::LocalRef<JavaLangString> JavaNetURL::getAuthority() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getAuthority", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URL.getQuery()
jnipp::LocalRef<JavaLangString> JavaNetURL::getQuery() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getQuery", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.net.URLConnection java.net.URL.openConnection() throws java.io.IOException
jnipp::LocalRef<JavaNetURLConnection> JavaNetURL::openConnection() const {
    static jnipp::Method<JavaNetURLConnection> method(clazz(), "openConnection", "()Ljava/net/URLConnection;");
    return method.call(*this);
}

// public java.net.URLConnection java.net.URL.openConnection(java.net.Proxy) throws java.io.IOException
jnipp::LocalRef<JavaNetURLConnection> JavaNetURL::openConnection(const jnipp::Ref<JavaNetProxy>& a0) const {
    static jnipp::Method<JavaNetURLConnection,JavaNetProxy> method(clazz(), "openConnection", "(Ljava/net/Proxy;)Ljava/net/URLConnection;");
    return method.call(*this, a0);
}

// public java.lang.String java.net.URL.getProtocol()
jnipp::LocalRef<JavaLangString> JavaNetURL::getProtocol() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getProtocol", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URL.getFile()
jnipp::LocalRef<JavaLangString> JavaNetURL::getFile() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getFile", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URL.getHost()
jnipp::LocalRef<JavaLangString> JavaNetURL::getHost() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getHost", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URL.getRef()
jnipp::LocalRef<JavaLangString> JavaNetURL::getRef() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getRef", "()Ljava/lang/String;");
    return method.call(*this);
}

// private boolean java.net.URL.isValidProtocol(java.lang.String)
jboolean JavaNetURL::isValidProtocol(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "isValidProtocol", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// private void java.net.URL.checkSpecifyHandler(java.lang.SecurityManager)
void JavaNetURL::checkSpecifyHandler(const jnipp::Ref<JavaLangSecurityManager>& a0) const {
    static jnipp::Method<void,JavaLangSecurityManager> method(clazz(), "checkSpecifyHandler", "(Ljava/lang/SecurityManager;)V");
    method.call(*this, a0);
}

// public java.lang.String java.net.URL.getUserInfo()
jnipp::LocalRef<JavaLangString> JavaNetURL::getUserInfo() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getUserInfo", "()Ljava/lang/String;");
    return method.call(*this);
}

// public int java.net.URL.getPort()
jint JavaNetURL::getPort() const {
    static jnipp::Method<jint> method(clazz(), "getPort", "()I");
    return method.call(*this);
}

// public int java.net.URL.getDefaultPort()
jint JavaNetURL::getDefaultPort() const {
    static jnipp::Method<jint> method(clazz(), "getDefaultPort", "()I");
    return method.call(*this);
}

// public boolean java.net.URL.sameFile(java.net.URL)
jboolean JavaNetURL::sameFile(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<jboolean,JavaNetURL> method(clazz(), "sameFile", "(Ljava/net/URL;)Z");
    return method.call(*this, a0);
}

// public java.lang.String java.net.URL.toExternalForm()
jnipp::LocalRef<JavaLangString> JavaNetURL::toExternalForm() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toExternalForm", "()Ljava/lang/String;");
    return method.call(*this);
}

// public final java.lang.Object java.net.URL.getContent() throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaNetURL::getContent() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getContent", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public final java.lang.Object java.net.URL.getContent(java.lang.Class[]) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaNetURL::getContent(const jnipp::Ref<jnipp::Array<JavaLangClass>>& a0) const {
    static jnipp::Method<JavaLangObject,jnipp::Array<JavaLangClass>> method(clazz(), "getContent", "([Ljava/lang/Class;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public static void java.net.URL.setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)
void JavaNetURL::setURLStreamHandlerFactory(const jnipp::Ref<JavaNetURLStreamHandlerFactory>& a0) {
    static jnipp::StaticMethod<void,JavaNetURLStreamHandlerFactory> method(clazz(), "setURLStreamHandlerFactory", "(Ljava/net/URLStreamHandlerFactory;)V");
    method.call(a0);
}

// static java.net.URLStreamHandler java.net.URL.getURLStreamHandler(java.lang.String)
jnipp::LocalRef<JavaNetURLStreamHandler> JavaNetURL::getURLStreamHandler(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetURLStreamHandler,JavaLangString> method(clazz(), "getURLStreamHandler", "(Ljava/lang/String;)Ljava/net/URLStreamHandler;");
    return method.call(a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaNetURL::serialVersionUID ("java/net/URL", "serialVersionUID", "J");
#undef protocolPathProp
const jnipp::StaticField<JavaLangString> JavaNetURL::protocolPathProp ("java/net/URL", "protocolPathProp", "Ljava/lang/String;");
#undef factory
jnipp::StaticField<JavaNetURLStreamHandlerFactory> JavaNetURL::factory ("java/net/URL", "factory", "Ljava/net/URLStreamHandlerFactory;");
#undef handlers
jnipp::StaticField<JavaUtilHashtable> JavaNetURL::handlers ("java/net/URL", "handlers", "Ljava/util/Hashtable;");
#undef streamHandlerLock
jnipp::StaticField<JavaLangObject> JavaNetURL::streamHandlerLock ("java/net/URL", "streamHandlerLock", "Ljava/lang/Object;");
#undef GOPHER
const jnipp::StaticField<JavaLangString> JavaNetURL::GOPHER ("java/net/URL", "GOPHER", "Ljava/lang/String;");
#undef ENABLE_GOPHER_PROP
const jnipp::StaticField<JavaLangString> JavaNetURL::ENABLE_GOPHER_PROP ("java/net/URL", "ENABLE_GOPHER_PROP", "Ljava/lang/String;");
#undef enableGopher
const jnipp::StaticField<jboolean> JavaNetURL::enableGopher ("java/net/URL", "enableGopher", "Z");
#undef JDK_PACKAGE_PREFIX
const jnipp::StaticField<JavaLangString> JavaNetURL::JDK_PACKAGE_PREFIX ("java/net/URL", "JDK_PACKAGE_PREFIX", "Ljava/lang/String;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectConstantPool::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/ConstantPool"));
    return cls;
}

// public sun.reflect.ConstantPool()
jnipp::LocalRef<SunReflectConstantPool> SunReflectConstantPool::construct() {
    static jnipp::Constructor<SunReflectConstantPool> constructor(clazz(), "()V");
    return constructor.construct();
}

// public int sun.reflect.ConstantPool.getSize()
jint SunReflectConstantPool::getSize() const {
    static jnipp::Method<jint> method(clazz(), "getSize", "()I");
    return method.call(*this);
}

// public java.lang.Class sun.reflect.ConstantPool.getClassAt(int)
jnipp::LocalRef<JavaLangClass> SunReflectConstantPool::getClassAt(jint a0) const {
    static jnipp::Method<JavaLangClass,jint> method(clazz(), "getClassAt", "(I)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// public java.lang.Class sun.reflect.ConstantPool.getClassAtIfLoaded(int)
jnipp::LocalRef<JavaLangClass> SunReflectConstantPool::getClassAtIfLoaded(jint a0) const {
    static jnipp::Method<JavaLangClass,jint> method(clazz(), "getClassAtIfLoaded", "(I)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// public java.lang.reflect.Member sun.reflect.ConstantPool.getMethodAt(int)
jnipp::LocalRef<JavaLangReflectMember> SunReflectConstantPool::getMethodAt(jint a0) const {
    static jnipp::Method<JavaLangReflectMember,jint> method(clazz(), "getMethodAt", "(I)Ljava/lang/reflect/Member;");
    return method.call(*this, a0);
}

// public java.lang.reflect.Member sun.reflect.ConstantPool.getMethodAtIfLoaded(int)
jnipp::LocalRef<JavaLangReflectMember> SunReflectConstantPool::getMethodAtIfLoaded(jint a0) const {
    static jnipp::Method<JavaLangReflectMember,jint> method(clazz(), "getMethodAtIfLoaded", "(I)Ljava/lang/reflect/Member;");
    return method.call(*this, a0);
}

// public java.lang.reflect.Field sun.reflect.ConstantPool.getFieldAt(int)
jnipp::LocalRef<JavaLangReflectField> SunReflectConstantPool::getFieldAt(jint a0) const {
    static jnipp::Method<JavaLangReflectField,jint> method(clazz(), "getFieldAt", "(I)Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// public java.lang.reflect.Field sun.reflect.ConstantPool.getFieldAtIfLoaded(int)
jnipp::LocalRef<JavaLangReflectField> SunReflectConstantPool::getFieldAtIfLoaded(jint a0) const {
    static jnipp::Method<JavaLangReflectField,jint> method(clazz(), "getFieldAtIfLoaded", "(I)Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// public java.lang.String[] sun.reflect.ConstantPool.getMemberRefInfoAt(int)
jnipp::LocalRef<jnipp::Array<JavaLangString>> SunReflectConstantPool::getMemberRefInfoAt(jint a0) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,jint> method(clazz(), "getMemberRefInfoAt", "(I)[Ljava/lang/String;");
    return method.call(*this, a0);
}

// public int sun.reflect.ConstantPool.getIntAt(int)
jint SunReflectConstantPool::getIntAt(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "getIntAt", "(I)I");
    return method.call(*this, a0);
}

// public long sun.reflect.ConstantPool.getLongAt(int)
jlong SunReflectConstantPool::getLongAt(jint a0) const {
    static jnipp::Method<jlong,jint> method(clazz(), "getLongAt", "(I)J");
    return method.call(*this, a0);
}

// public float sun.reflect.ConstantPool.getFloatAt(int)
jfloat SunReflectConstantPool::getFloatAt(jint a0) const {
    static jnipp::Method<jfloat,jint> method(clazz(), "getFloatAt", "(I)F");
    return method.call(*this, a0);
}

// public double sun.reflect.ConstantPool.getDoubleAt(int)
jdouble SunReflectConstantPool::getDoubleAt(jint a0) const {
    static jnipp::Method<jdouble,jint> method(clazz(), "getDoubleAt", "(I)D");
    return method.call(*this, a0);
}

// public java.lang.String sun.reflect.ConstantPool.getStringAt(int)
jnipp::LocalRef<JavaLangString> SunReflectConstantPool::getStringAt(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "getStringAt", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String sun.reflect.ConstantPool.getUTF8At(int)
jnipp::LocalRef<JavaLangString> SunReflectConstantPool::getUTF8At(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "getUTF8At", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private native int sun.reflect.ConstantPool.getSize0(java.lang.Object)
jint SunReflectConstantPool::getSize0(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "getSize0", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// private native java.lang.Class sun.reflect.ConstantPool.getClassAt0(java.lang.Object,int)
jnipp::LocalRef<JavaLangClass> SunReflectConstantPool::getClassAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangClass,JavaLangObject,jint> method(clazz(), "getClassAt0", "(Ljava/lang/Object;I)Ljava/lang/Class;");
    return method.call(*this, a0, a1);
}

// private native java.lang.Class sun.reflect.ConstantPool.getClassAtIfLoaded0(java.lang.Object,int)
jnipp::LocalRef<JavaLangClass> SunReflectConstantPool::getClassAtIfLoaded0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangClass,JavaLangObject,jint> method(clazz(), "getClassAtIfLoaded0", "(Ljava/lang/Object;I)Ljava/lang/Class;");
    return method.call(*this, a0, a1);
}

// private native java.lang.reflect.Member sun.reflect.ConstantPool.getMethodAt0(java.lang.Object,int)
jnipp::LocalRef<JavaLangReflectMember> SunReflectConstantPool::getMethodAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangReflectMember,JavaLangObject,jint> method(clazz(), "getMethodAt0", "(Ljava/lang/Object;I)Ljava/lang/reflect/Member;");
    return method.call(*this, a0, a1);
}

// private native java.lang.reflect.Member sun.reflect.ConstantPool.getMethodAtIfLoaded0(java.lang.Object,int)
jnipp::LocalRef<JavaLangReflectMember> SunReflectConstantPool::getMethodAtIfLoaded0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangReflectMember,JavaLangObject,jint> method(clazz(), "getMethodAtIfLoaded0", "(Ljava/lang/Object;I)Ljava/lang/reflect/Member;");
    return method.call(*this, a0, a1);
}

// private native java.lang.reflect.Field sun.reflect.ConstantPool.getFieldAt0(java.lang.Object,int)
jnipp::LocalRef<JavaLangReflectField> SunReflectConstantPool::getFieldAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangReflectField,JavaLangObject,jint> method(clazz(), "getFieldAt0", "(Ljava/lang/Object;I)Ljava/lang/reflect/Field;");
    return method.call(*this, a0, a1);
}

// private native java.lang.reflect.Field sun.reflect.ConstantPool.getFieldAtIfLoaded0(java.lang.Object,int)
jnipp::LocalRef<JavaLangReflectField> SunReflectConstantPool::getFieldAtIfLoaded0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangReflectField,JavaLangObject,jint> method(clazz(), "getFieldAtIfLoaded0", "(Ljava/lang/Object;I)Ljava/lang/reflect/Field;");
    return method.call(*this, a0, a1);
}

// private native java.lang.String[] sun.reflect.ConstantPool.getMemberRefInfoAt0(java.lang.Object,int)
jnipp::LocalRef<jnipp::Array<JavaLangString>> SunReflectConstantPool::getMemberRefInfoAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaLangObject,jint> method(clazz(), "getMemberRefInfoAt0", "(Ljava/lang/Object;I)[Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// private native int sun.reflect.ConstantPool.getIntAt0(java.lang.Object,int)
jint SunReflectConstantPool::getIntAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangObject,jint> method(clazz(), "getIntAt0", "(Ljava/lang/Object;I)I");
    return method.call(*this, a0, a1);
}

// private native long sun.reflect.ConstantPool.getLongAt0(java.lang.Object,int)
jlong SunReflectConstantPool::getLongAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jlong,JavaLangObject,jint> method(clazz(), "getLongAt0", "(Ljava/lang/Object;I)J");
    return method.call(*this, a0, a1);
}

// private native float sun.reflect.ConstantPool.getFloatAt0(java.lang.Object,int)
jfloat SunReflectConstantPool::getFloatAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jfloat,JavaLangObject,jint> method(clazz(), "getFloatAt0", "(Ljava/lang/Object;I)F");
    return method.call(*this, a0, a1);
}

// private native double sun.reflect.ConstantPool.getDoubleAt0(java.lang.Object,int)
jdouble SunReflectConstantPool::getDoubleAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jdouble,JavaLangObject,jint> method(clazz(), "getDoubleAt0", "(Ljava/lang/Object;I)D");
    return method.call(*this, a0, a1);
}

// private native java.lang.String sun.reflect.ConstantPool.getStringAt0(java.lang.Object,int)
jnipp::LocalRef<JavaLangString> SunReflectConstantPool::getStringAt0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangString,JavaLangObject,jint> method(clazz(), "getStringAt0", "(Ljava/lang/Object;I)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// private native java.lang.String sun.reflect.ConstantPool.getUTF8At0(java.lang.Object,int)
jnipp::LocalRef<JavaLangString> SunReflectConstantPool::getUTF8At0(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangString,JavaLangObject,jint> method(clazz(), "getUTF8At0", "(Ljava/lang/Object;I)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectAnnotationAnnotationType::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/annotation/AnnotationType"));
    return cls;
}

// private sun.reflect.annotation.AnnotationType(java.lang.Class)
jnipp::LocalRef<SunReflectAnnotationAnnotationType> SunReflectAnnotationAnnotationType::construct(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::Constructor<SunReflectAnnotationAnnotationType,JavaLangClass> constructor(clazz(), "(Ljava/lang/Class;)V");
    return constructor.construct(a0);
}

// public static synchronized sun.reflect.annotation.AnnotationType sun.reflect.annotation.AnnotationType.getInstance(java.lang.Class)
jnipp::LocalRef<SunReflectAnnotationAnnotationType> SunReflectAnnotationAnnotationType::getInstance(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<SunReflectAnnotationAnnotationType,JavaLangClass> method(clazz(), "getInstance", "(Ljava/lang/Class;)Lsun/reflect/annotation/AnnotationType;");
    return method.call(a0);
}

// public boolean sun.reflect.annotation.AnnotationType.isInherited()
jboolean SunReflectAnnotationAnnotationType::isInherited() const {
    static jnipp::Method<jboolean> method(clazz(), "isInherited", "()Z");
    return method.call(*this);
}

// public static java.lang.Class sun.reflect.annotation.AnnotationType.invocationHandlerReturnType(java.lang.Class)
jnipp::LocalRef<JavaLangClass> SunReflectAnnotationAnnotationType::invocationHandlerReturnType(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangClass,JavaLangClass> method(clazz(), "invocationHandlerReturnType", "(Ljava/lang/Class;)Ljava/lang/Class;");
    return method.call(a0);
}

// public java.util.Map sun.reflect.annotation.AnnotationType.memberTypes()
jnipp::LocalRef<JavaUtilMap> SunReflectAnnotationAnnotationType::memberTypes() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "memberTypes", "()Ljava/util/Map;");
    return method.call(*this);
}

// public java.util.Map sun.reflect.annotation.AnnotationType.memberDefaults()
jnipp::LocalRef<JavaUtilMap> SunReflectAnnotationAnnotationType::memberDefaults() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "memberDefaults", "()Ljava/util/Map;");
    return method.call(*this);
}

// public java.util.Map sun.reflect.annotation.AnnotationType.members()
jnipp::LocalRef<JavaUtilMap> SunReflectAnnotationAnnotationType::members() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "members", "()Ljava/util/Map;");
    return method.call(*this);
}

// public java.lang.annotation.RetentionPolicy sun.reflect.annotation.AnnotationType.retention()
jnipp::LocalRef<JavaLangAnnotationRetentionPolicy> SunReflectAnnotationAnnotationType::retention() const {
    static jnipp::Method<JavaLangAnnotationRetentionPolicy> method(clazz(), "retention", "()Ljava/lang/annotation/RetentionPolicy;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsRepositoryAbstractRepository::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/repository/AbstractRepository"));
    return cls;
}

// protected sun.reflect.generics.repository.AbstractRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryAbstractRepository> SunReflectGenericsRepositoryAbstractRepository::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::Constructor<SunReflectGenericsRepositoryAbstractRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> constructor(clazz(), "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)V");
    return constructor.construct(a0, a1);
}

// private sun.reflect.generics.factory.GenericsFactory sun.reflect.generics.repository.AbstractRepository.getFactory()
jnipp::LocalRef<SunReflectGenericsFactoryGenericsFactory> SunReflectGenericsRepositoryAbstractRepository::getFactory() const {
    static jnipp::Method<SunReflectGenericsFactoryGenericsFactory> method(clazz(), "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;");
    return method.call(*this);
}

// protected sun.reflect.generics.visitor.Reifier sun.reflect.generics.repository.AbstractRepository.getReifier()
jnipp::LocalRef<SunReflectGenericsVisitorReifier> SunReflectGenericsRepositoryAbstractRepository::getReifier() const {
    static jnipp::Method<SunReflectGenericsVisitorReifier> method(clazz(), "getReifier", "()Lsun/reflect/generics/visitor/Reifier;");
    return method.call(*this);
}

// protected sun.reflect.generics.tree.Tree sun.reflect.generics.repository.AbstractRepository.getTree()
jnipp::LocalRef<SunReflectGenericsTreeTree> SunReflectGenericsRepositoryAbstractRepository::getTree() const {
    static jnipp::Method<SunReflectGenericsTreeTree> method(clazz(), "getTree", "()Lsun/reflect/generics/tree/Tree;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsRepositoryGenericDeclRepository::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/repository/GenericDeclRepository"));
    return cls;
}

// protected sun.reflect.generics.repository.GenericDeclRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryGenericDeclRepository> SunReflectGenericsRepositoryGenericDeclRepository::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::Constructor<SunReflectGenericsRepositoryGenericDeclRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> constructor(clazz(), "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.reflect.TypeVariable[] sun.reflect.generics.repository.GenericDeclRepository.getTypeParameters()
jnipp::LocalRef<jnipp::Array<JavaLangReflectTypeVariable>> SunReflectGenericsRepositoryGenericDeclRepository::getTypeParameters() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectTypeVariable>> method(clazz(), "getTypeParameters", "()[Ljava/lang/reflect/TypeVariable;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsRepositoryClassRepository::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/repository/ClassRepository"));
    return cls;
}

// private sun.reflect.generics.repository.ClassRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryClassRepository> SunReflectGenericsRepositoryClassRepository::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::Constructor<SunReflectGenericsRepositoryClassRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> constructor(clazz(), "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.reflect.Type sun.reflect.generics.repository.ClassRepository.getSuperclass()
jnipp::LocalRef<JavaLangReflectType> SunReflectGenericsRepositoryClassRepository::getSuperclass() const {
    static jnipp::Method<JavaLangReflectType> method(clazz(), "getSuperclass", "()Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public java.lang.reflect.Type[] sun.reflect.generics.repository.ClassRepository.getSuperInterfaces()
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> SunReflectGenericsRepositoryClassRepository::getSuperInterfaces() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>> method(clazz(), "getSuperInterfaces", "()[Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public static sun.reflect.generics.repository.ClassRepository sun.reflect.generics.repository.ClassRepository.make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryClassRepository> SunReflectGenericsRepositoryClassRepository::make(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::StaticMethod<SunReflectGenericsRepositoryClassRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> method(clazz(), "make", "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/repository/ClassRepository;");
    return method.call(a0, a1);
}

// protected sun.reflect.generics.tree.ClassSignature sun.reflect.generics.repository.ClassRepository.parse(java.lang.String)
jnipp::LocalRef<SunReflectGenericsTreeClassSignature> SunReflectGenericsRepositoryClassRepository::parse(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<SunReflectGenericsTreeClassSignature,JavaLangString> method(clazz(), "parse", "(Ljava/lang/String;)Lsun/reflect/generics/tree/ClassSignature;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilWeakHashMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/WeakHashMap"));
    return cls;
}

// public java.util.WeakHashMap()
jnipp::LocalRef<JavaUtilWeakHashMap> JavaUtilWeakHashMap::construct() {
    static jnipp::Constructor<JavaUtilWeakHashMap> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.WeakHashMap(int)
jnipp::LocalRef<JavaUtilWeakHashMap> JavaUtilWeakHashMap::construct(jint a0) {
    static jnipp::Constructor<JavaUtilWeakHashMap,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.util.WeakHashMap(int,float)
jnipp::LocalRef<JavaUtilWeakHashMap> JavaUtilWeakHashMap::construct(jint a0, jfloat a1) {
    static jnipp::Constructor<JavaUtilWeakHashMap,jint,jfloat> constructor(clazz(), "(IF)V");
    return constructor.construct(a0, a1);
}

// public java.util.WeakHashMap(java.util.Map)
jnipp::LocalRef<JavaUtilWeakHashMap> JavaUtilWeakHashMap::construct(const jnipp::Ref<JavaUtilMap>& a0) {
    static jnipp::Constructor<JavaUtilWeakHashMap,JavaUtilMap> constructor(clazz(), "(Ljava/util/Map;)V");
    return constructor.construct(a0);
}

// public java.lang.Object java.util.WeakHashMap.remove(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilWeakHashMap::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.WeakHashMap.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilWeakHashMap::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilWeakHashMap::put(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// int java.util.WeakHashMap.hash(java.lang.Object)
jint JavaUtilWeakHashMap::hash(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "hash", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public java.util.Collection java.util.WeakHashMap.values()
jnipp::LocalRef<JavaUtilCollection> JavaUtilWeakHashMap::values() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "values", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public void java.util.WeakHashMap.clear()
void JavaUtilWeakHashMap::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public boolean java.util.WeakHashMap.isEmpty()
jboolean JavaUtilWeakHashMap::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public int java.util.WeakHashMap.size()
jint JavaUtilWeakHashMap::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public java.util.Set java.util.WeakHashMap.entrySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilWeakHashMap::entrySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "entrySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public void java.util.WeakHashMap.putAll(java.util.Map)
void JavaUtilWeakHashMap::putAll(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "putAll", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// public java.util.Set java.util.WeakHashMap.keySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilWeakHashMap::keySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "keySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public boolean java.util.WeakHashMap.containsValue(java.lang.Object)
jboolean JavaUtilWeakHashMap::containsValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsValue", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.WeakHashMap.containsKey(java.lang.Object)
jboolean JavaUtilWeakHashMap::containsKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsKey", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// private static boolean java.util.WeakHashMap.eq(java.lang.Object,java.lang.Object)
jboolean JavaUtilWeakHashMap::eq(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangObject,JavaLangObject> method(clazz(), "eq", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
    return method.call(a0, a1);
}

// private static int java.util.WeakHashMap.indexFor(int,int)
jint JavaUtilWeakHashMap::indexFor(jint a0, jint a1) {
    static jnipp::StaticMethod<jint,jint,jint> method(clazz(), "indexFor", "(II)I");
    return method.call(a0, a1);
}

// java.util.WeakHashMap$Entry java.util.WeakHashMap.getEntry(java.lang.Object)
jnipp::LocalRef<JavaUtilWeakHashMap_Entry> JavaUtilWeakHashMap::getEntry(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaUtilWeakHashMap_Entry,JavaLangObject> method(clazz(), "getEntry", "(Ljava/lang/Object;)Ljava/util/WeakHashMap$Entry;");
    return method.call(*this, a0);
}

// void java.util.WeakHashMap.resize(int)
void JavaUtilWeakHashMap::resize(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "resize", "(I)V");
    method.call(*this, a0);
}

// private void java.util.WeakHashMap.transfer(java.util.WeakHashMap$Entry[],java.util.WeakHashMap$Entry[],boolean)
void JavaUtilWeakHashMap::transfer(const jnipp::Ref<jnipp::Array<JavaUtilWeakHashMap_Entry>>& a0, const jnipp::Ref<jnipp::Array<JavaUtilWeakHashMap_Entry>>& a1, jboolean a2) const {
    static jnipp::Method<void,jnipp::Array<JavaUtilWeakHashMap_Entry>,jnipp::Array<JavaUtilWeakHashMap_Entry>,jboolean> method(clazz(), "transfer", "([Ljava/util/WeakHashMap$Entry;[Ljava/util/WeakHashMap$Entry;Z)V");
    method.call(*this, a0, a1, a2);
}

// boolean java.util.WeakHashMap.removeMapping(java.lang.Object)
jboolean JavaUtilWeakHashMap::removeMapping(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "removeMapping", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// private boolean java.util.WeakHashMap.containsNullValue()
jboolean JavaUtilWeakHashMap::containsNullValue() const {
    static jnipp::Method<jboolean> method(clazz(), "containsNullValue", "()Z");
    return method.call(*this);
}

// private void java.util.WeakHashMap.expungeStaleEntries()
void JavaUtilWeakHashMap::expungeStaleEntries() const {
    static jnipp::Method<void> method(clazz(), "expungeStaleEntries", "()V");
    method.call(*this);
}

// private java.util.WeakHashMap$Entry[] java.util.WeakHashMap.newTable(int)
jnipp::LocalRef<jnipp::Array<JavaUtilWeakHashMap_Entry>> JavaUtilWeakHashMap::newTable(jint a0) const {
    static jnipp::Method<jnipp::Array<JavaUtilWeakHashMap_Entry>,jint> method(clazz(), "newTable", "(I)[Ljava/util/WeakHashMap$Entry;");
    return method.call(*this, a0);
}

// private static java.lang.Object java.util.WeakHashMap.maskNull(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilWeakHashMap::maskNull(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::StaticMethod<JavaLangObject,JavaLangObject> method(clazz(), "maskNull", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(a0);
}

// static java.lang.Object java.util.WeakHashMap.unmaskNull(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilWeakHashMap::unmaskNull(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::StaticMethod<JavaLangObject,JavaLangObject> method(clazz(), "unmaskNull", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(a0);
}

// private java.util.WeakHashMap$Entry[] java.util.WeakHashMap.getTable()
jnipp::LocalRef<jnipp::Array<JavaUtilWeakHashMap_Entry>> JavaUtilWeakHashMap::getTable() const {
    static jnipp::Method<jnipp::Array<JavaUtilWeakHashMap_Entry>> method(clazz(), "getTable", "()[Ljava/util/WeakHashMap$Entry;");
    return method.call(*this);
}
#undef DEFAULT_INITIAL_CAPACITY
const jnipp::StaticField<jint> JavaUtilWeakHashMap::DEFAULT_INITIAL_CAPACITY ("java/util/WeakHashMap", "DEFAULT_INITIAL_CAPACITY", "I");
#undef MAXIMUM_CAPACITY
const jnipp::StaticField<jint> JavaUtilWeakHashMap::MAXIMUM_CAPACITY ("java/util/WeakHashMap", "MAXIMUM_CAPACITY", "I");
#undef DEFAULT_LOAD_FACTOR
const jnipp::StaticField<jfloat> JavaUtilWeakHashMap::DEFAULT_LOAD_FACTOR ("java/util/WeakHashMap", "DEFAULT_LOAD_FACTOR", "F");
#undef ALTERNATIVE_HASHING_THRESHOLD_DEFAULT
const jnipp::StaticField<jint> JavaUtilWeakHashMap::ALTERNATIVE_HASHING_THRESHOLD_DEFAULT ("java/util/WeakHashMap", "ALTERNATIVE_HASHING_THRESHOLD_DEFAULT", "I");
#undef NULL_KEY
const jnipp::StaticField<JavaLangObject> JavaUtilWeakHashMap::NULL_KEY ("java/util/WeakHashMap", "NULL_KEY", "Ljava/lang/Object;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClassValue_ClassValueMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ClassValue$ClassValueMap"));
    return cls;
}

// java.lang.ClassValue$ClassValueMap(java.lang.Class)
jnipp::LocalRef<JavaLangClassValue_ClassValueMap> JavaLangClassValue_ClassValueMap::construct(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::Constructor<JavaLangClassValue_ClassValueMap,JavaLangClass> constructor(clazz(), "(Ljava/lang/Class;)V");
    return constructor.construct(a0);
}

// java.lang.ClassValue$Entry[] java.lang.ClassValue$ClassValueMap.getCache()
jnipp::LocalRef<jnipp::Array<JavaLangClassValue_Entry>> JavaLangClassValue_ClassValueMap::getCache() const {
    static jnipp::Method<jnipp::Array<JavaLangClassValue_Entry>> method(clazz(), "getCache", "()[Ljava/lang/ClassValue$Entry;");
    return method.call(*this);
}

// synchronized java.lang.ClassValue$Entry java.lang.ClassValue$ClassValueMap.startEntry(java.lang.ClassValue)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_ClassValueMap::startEntry(const jnipp::Ref<JavaLangClassValue>& a0) const {
    static jnipp::Method<JavaLangClassValue_Entry,JavaLangClassValue> method(clazz(), "startEntry", "(Ljava/lang/ClassValue;)Ljava/lang/ClassValue$Entry;");
    return method.call(*this, a0);
}

// synchronized java.lang.ClassValue$Entry java.lang.ClassValue$ClassValueMap.finishEntry(java.lang.ClassValue,java.lang.ClassValue$Entry)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_ClassValueMap::finishEntry(const jnipp::Ref<JavaLangClassValue>& a0, const jnipp::Ref<JavaLangClassValue_Entry>& a1) const {
    static jnipp::Method<JavaLangClassValue_Entry,JavaLangClassValue,JavaLangClassValue_Entry> method(clazz(), "finishEntry", "(Ljava/lang/ClassValue;Ljava/lang/ClassValue$Entry;)Ljava/lang/ClassValue$Entry;");
    return method.call(*this, a0, a1);
}

// synchronized void java.lang.ClassValue$ClassValueMap.removeEntry(java.lang.ClassValue)
void JavaLangClassValue_ClassValueMap::removeEntry(const jnipp::Ref<JavaLangClassValue>& a0) const {
    static jnipp::Method<void,JavaLangClassValue> method(clazz(), "removeEntry", "(Ljava/lang/ClassValue;)V");
    method.call(*this, a0);
}

// synchronized void java.lang.ClassValue$ClassValueMap.changeEntry(java.lang.ClassValue,java.lang.Object)
void JavaLangClassValue_ClassValueMap::changeEntry(const jnipp::Ref<JavaLangClassValue>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangClassValue,JavaLangObject> method(clazz(), "changeEntry", "(Ljava/lang/ClassValue;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// static java.lang.ClassValue$Entry java.lang.ClassValue$ClassValueMap.loadFromCache(java.lang.ClassValue$Entry[],int)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_ClassValueMap::loadFromCache(const jnipp::Ref<jnipp::Array<JavaLangClassValue_Entry>>& a0, jint a1) {
    static jnipp::StaticMethod<JavaLangClassValue_Entry,jnipp::Array<JavaLangClassValue_Entry>,jint> method(clazz(), "loadFromCache", "([Ljava/lang/ClassValue$Entry;I)Ljava/lang/ClassValue$Entry;");
    return method.call(a0, a1);
}

// static java.lang.ClassValue$Entry java.lang.ClassValue$ClassValueMap.probeHomeLocation(java.lang.ClassValue$Entry[],java.lang.ClassValue)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_ClassValueMap::probeHomeLocation(const jnipp::Ref<jnipp::Array<JavaLangClassValue_Entry>>& a0, const jnipp::Ref<JavaLangClassValue>& a1) {
    static jnipp::StaticMethod<JavaLangClassValue_Entry,jnipp::Array<JavaLangClassValue_Entry>,JavaLangClassValue> method(clazz(), "probeHomeLocation", "([Ljava/lang/ClassValue$Entry;Ljava/lang/ClassValue;)Ljava/lang/ClassValue$Entry;");
    return method.call(a0, a1);
}

// static java.lang.ClassValue$Entry java.lang.ClassValue$ClassValueMap.probeBackupLocations(java.lang.ClassValue$Entry[],java.lang.ClassValue)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_ClassValueMap::probeBackupLocations(const jnipp::Ref<jnipp::Array<JavaLangClassValue_Entry>>& a0, const jnipp::Ref<JavaLangClassValue>& a1) {
    static jnipp::StaticMethod<JavaLangClassValue_Entry,jnipp::Array<JavaLangClassValue_Entry>,JavaLangClassValue> method(clazz(), "probeBackupLocations", "([Ljava/lang/ClassValue$Entry;Ljava/lang/ClassValue;)Ljava/lang/ClassValue$Entry;");
    return method.call(a0, a1);
}

// private static int java.lang.ClassValue$ClassValueMap.entryDislocation(java.lang.ClassValue$Entry[],int,java.lang.ClassValue$Entry)
jint JavaLangClassValue_ClassValueMap::entryDislocation(const jnipp::Ref<jnipp::Array<JavaLangClassValue_Entry>>& a0, jint a1, const jnipp::Ref<JavaLangClassValue_Entry>& a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<JavaLangClassValue_Entry>,jint,JavaLangClassValue_Entry> method(clazz(), "entryDislocation", "([Ljava/lang/ClassValue$Entry;ILjava/lang/ClassValue$Entry;)I");
    return method.call(a0, a1, a2);
}

// private void java.lang.ClassValue$ClassValueMap.sizeCache(int)
void JavaLangClassValue_ClassValueMap::sizeCache(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "sizeCache", "(I)V");
    method.call(*this, a0);
}

// private void java.lang.ClassValue$ClassValueMap.checkCacheLoad()
void JavaLangClassValue_ClassValueMap::checkCacheLoad() const {
    static jnipp::Method<void> method(clazz(), "checkCacheLoad", "()V");
    method.call(*this);
}

// private void java.lang.ClassValue$ClassValueMap.reduceCacheLoad()
void JavaLangClassValue_ClassValueMap::reduceCacheLoad() const {
    static jnipp::Method<void> method(clazz(), "reduceCacheLoad", "()V");
    method.call(*this);
}

// private void java.lang.ClassValue$ClassValueMap.removeStaleEntries(java.lang.ClassValue$Entry[],int,int)
void JavaLangClassValue_ClassValueMap::removeStaleEntries(const jnipp::Ref<jnipp::Array<JavaLangClassValue_Entry>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<JavaLangClassValue_Entry>,jint,jint> method(clazz(), "removeStaleEntries", "([Ljava/lang/ClassValue$Entry;II)V");
    method.call(*this, a0, a1, a2);
}

// private void java.lang.ClassValue$ClassValueMap.removeStaleEntries()
void JavaLangClassValue_ClassValueMap::removeStaleEntries() const {
    static jnipp::Method<void> method(clazz(), "removeStaleEntries", "()V");
    method.call(*this);
}

// private void java.lang.ClassValue$ClassValueMap.removeStaleEntries(java.lang.ClassValue)
void JavaLangClassValue_ClassValueMap::removeStaleEntries(const jnipp::Ref<JavaLangClassValue>& a0) const {
    static jnipp::Method<void,JavaLangClassValue> method(clazz(), "removeStaleEntries", "(Ljava/lang/ClassValue;)V");
    method.call(*this, a0);
}

// private java.lang.ClassValue$Entry java.lang.ClassValue$ClassValueMap.findReplacement(java.lang.ClassValue$Entry[],int)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_ClassValueMap::findReplacement(const jnipp::Ref<jnipp::Array<JavaLangClassValue_Entry>>& a0, jint a1) const {
    static jnipp::Method<JavaLangClassValue_Entry,jnipp::Array<JavaLangClassValue_Entry>,jint> method(clazz(), "findReplacement", "([Ljava/lang/ClassValue$Entry;I)Ljava/lang/ClassValue$Entry;");
    return method.call(*this, a0, a1);
}

// private void java.lang.ClassValue$ClassValueMap.addToCache(java.lang.ClassValue$Entry)
void JavaLangClassValue_ClassValueMap::addToCache(const jnipp::Ref<JavaLangClassValue_Entry>& a0) const {
    static jnipp::Method<void,JavaLangClassValue_Entry> method(clazz(), "addToCache", "(Ljava/lang/ClassValue$Entry;)V");
    method.call(*this, a0);
}

// private void java.lang.ClassValue$ClassValueMap.addToCache(java.lang.ClassValue,java.lang.ClassValue$Entry)
void JavaLangClassValue_ClassValueMap::addToCache(const jnipp::Ref<JavaLangClassValue>& a0, const jnipp::Ref<JavaLangClassValue_Entry>& a1) const {
    static jnipp::Method<void,JavaLangClassValue,JavaLangClassValue_Entry> method(clazz(), "addToCache", "(Ljava/lang/ClassValue;Ljava/lang/ClassValue$Entry;)V");
    method.call(*this, a0, a1);
}

// private java.lang.ClassValue$Entry java.lang.ClassValue$ClassValueMap.placeInCache(java.lang.ClassValue$Entry[],int,java.lang.ClassValue$Entry,boolean)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_ClassValueMap::placeInCache(const jnipp::Ref<jnipp::Array<JavaLangClassValue_Entry>>& a0, jint a1, const jnipp::Ref<JavaLangClassValue_Entry>& a2, jboolean a3) const {
    static jnipp::Method<JavaLangClassValue_Entry,jnipp::Array<JavaLangClassValue_Entry>,jint,JavaLangClassValue_Entry,jboolean> method(clazz(), "placeInCache", "([Ljava/lang/ClassValue$Entry;ILjava/lang/ClassValue$Entry;Z)Ljava/lang/ClassValue$Entry;");
    return method.call(*this, a0, a1, a2, a3);
}

// private java.lang.ClassValue$Entry java.lang.ClassValue$ClassValueMap.overwrittenEntry(java.lang.ClassValue$Entry)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_ClassValueMap::overwrittenEntry(const jnipp::Ref<JavaLangClassValue_Entry>& a0) const {
    static jnipp::Method<JavaLangClassValue_Entry,JavaLangClassValue_Entry> method(clazz(), "overwrittenEntry", "(Ljava/lang/ClassValue$Entry;)Ljava/lang/ClassValue$Entry;");
    return method.call(*this, a0);
}
#undef INITIAL_ENTRIES
const jnipp::StaticField<jint> JavaLangClassValue_ClassValueMap::INITIAL_ENTRIES ("java/lang/ClassValue$ClassValueMap", "INITIAL_ENTRIES", "I");
#undef CACHE_LOAD_LIMIT
const jnipp::StaticField<jint> JavaLangClassValue_ClassValueMap::CACHE_LOAD_LIMIT ("java/lang/ClassValue$ClassValueMap", "CACHE_LOAD_LIMIT", "I");
#undef PROBE_LIMIT
const jnipp::StaticField<jint> JavaLangClassValue_ClassValueMap::PROBE_LIMIT ("java/lang/ClassValue$ClassValueMap", "PROBE_LIMIT", "I");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaLangClassValue_ClassValueMap::$assertionsDisabled ("java/lang/ClassValue$ClassValueMap", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangPackage::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Package"));
    return cls;
}

// private java.lang.Package(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)
jnipp::LocalRef<JavaLangPackage> JavaLangPackage::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilJarManifest>& a1, const jnipp::Ref<JavaNetURL>& a2, const jnipp::Ref<JavaLangClassLoader>& a3) {
    static jnipp::Constructor<JavaLangPackage,JavaLangString,JavaUtilJarManifest,JavaNetURL,JavaLangClassLoader> constructor(clazz(), "(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// java.lang.Package(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader,java.lang.Package$1)
jnipp::LocalRef<JavaLangPackage> JavaLangPackage::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilJarManifest>& a1, const jnipp::Ref<JavaNetURL>& a2, const jnipp::Ref<JavaLangClassLoader>& a3, const jnipp::Ref<JavaLangPackage_1>& a4) {
    static jnipp::Constructor<JavaLangPackage,JavaLangString,JavaUtilJarManifest,JavaNetURL,JavaLangClassLoader,JavaLangPackage_1> constructor(clazz(), "(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;Ljava/lang/ClassLoader;Ljava/lang/Package$1;)V");
    return constructor.construct(a0, a1, a2, a3, a4);
}

// java.lang.Package(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.lang.ClassLoader)
jnipp::LocalRef<JavaLangPackage> JavaLangPackage::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaLangString>& a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<JavaLangString>& a6, const jnipp::Ref<JavaNetURL>& a7, const jnipp::Ref<JavaLangClassLoader>& a8) {
    static jnipp::Constructor<JavaLangPackage,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaNetURL,JavaLangClassLoader> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;Ljava/lang/ClassLoader;)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5, a6, a7, a8);
}

// public int java.lang.Package.hashCode()
jint JavaLangPackage::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.String java.lang.Package.getName()
jnipp::LocalRef<JavaLangString> JavaLangPackage::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static java.lang.Package java.lang.Package.getPackage(java.lang.String)
jnipp::LocalRef<JavaLangPackage> JavaLangPackage::getPackage(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangPackage,JavaLangString> method(clazz(), "getPackage", "(Ljava/lang/String;)Ljava/lang/Package;");
    return method.call(a0);
}

// static java.lang.Package java.lang.Package.getPackage(java.lang.Class)
jnipp::LocalRef<JavaLangPackage> JavaLangPackage::getPackage(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangPackage,JavaLangClass> method(clazz(), "getPackage", "(Ljava/lang/Class;)Ljava/lang/Package;");
    return method.call(a0);
}

// public java.lang.annotation.Annotation java.lang.Package.getAnnotation(java.lang.Class)
jnipp::LocalRef<JavaLangAnnotationAnnotation> JavaLangPackage::getAnnotation(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangAnnotationAnnotation,JavaLangClass> method(clazz(), "getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;");
    return method.call(*this, a0);
}

// public boolean java.lang.Package.isAnnotationPresent(java.lang.Class)
jboolean JavaLangPackage::isAnnotationPresent(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<jboolean,JavaLangClass> method(clazz(), "isAnnotationPresent", "(Ljava/lang/Class;)Z");
    return method.call(*this, a0);
}

// public java.lang.annotation.Annotation[] java.lang.Package.getAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangPackage::getAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// public java.lang.annotation.Annotation[] java.lang.Package.getDeclaredAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangPackage::getDeclaredAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// public static java.lang.Package[] java.lang.Package.getPackages()
jnipp::LocalRef<jnipp::Array<JavaLangPackage>> JavaLangPackage::getPackages() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangPackage>> method(clazz(), "getPackages", "()[Ljava/lang/Package;");
    return method.call();
}

// static java.lang.Package java.lang.Package.getSystemPackage(java.lang.String)
jnipp::LocalRef<JavaLangPackage> JavaLangPackage::getSystemPackage(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangPackage,JavaLangString> method(clazz(), "getSystemPackage", "(Ljava/lang/String;)Ljava/lang/Package;");
    return method.call(a0);
}

// static java.lang.Package[] java.lang.Package.getSystemPackages()
jnipp::LocalRef<jnipp::Array<JavaLangPackage>> JavaLangPackage::getSystemPackages() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangPackage>> method(clazz(), "getSystemPackages", "()[Ljava/lang/Package;");
    return method.call();
}

// public boolean java.lang.Package.isSealed()
jboolean JavaLangPackage::isSealed() const {
    static jnipp::Method<jboolean> method(clazz(), "isSealed", "()Z");
    return method.call(*this);
}

// public boolean java.lang.Package.isSealed(java.net.URL)
jboolean JavaLangPackage::isSealed(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<jboolean,JavaNetURL> method(clazz(), "isSealed", "(Ljava/net/URL;)Z");
    return method.call(*this, a0);
}

// public boolean java.lang.Package.isCompatibleWith(java.lang.String) throws java.lang.NumberFormatException
jboolean JavaLangPackage::isCompatibleWith(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "isCompatibleWith", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// public java.lang.String java.lang.Package.getSpecificationTitle()
jnipp::LocalRef<JavaLangString> JavaLangPackage::getSpecificationTitle() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getSpecificationTitle", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.Package.getSpecificationVersion()
jnipp::LocalRef<JavaLangString> JavaLangPackage::getSpecificationVersion() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getSpecificationVersion", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.Package.getSpecificationVendor()
jnipp::LocalRef<JavaLangString> JavaLangPackage::getSpecificationVendor() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getSpecificationVendor", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.Package.getImplementationTitle()
jnipp::LocalRef<JavaLangString> JavaLangPackage::getImplementationTitle() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getImplementationTitle", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.Package.getImplementationVersion()
jnipp::LocalRef<JavaLangString> JavaLangPackage::getImplementationVersion() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getImplementationVersion", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.Package.getImplementationVendor()
jnipp::LocalRef<JavaLangString> JavaLangPackage::getImplementationVendor() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getImplementationVendor", "()Ljava/lang/String;");
    return method.call(*this);
}

// private java.lang.Class java.lang.Package.getPackageInfo()
jnipp::LocalRef<JavaLangClass> JavaLangPackage::getPackageInfo() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getPackageInfo", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private static java.lang.Package java.lang.Package.defineSystemPackage(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangPackage> JavaLangPackage::defineSystemPackage(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaLangPackage,JavaLangString,JavaLangString> method(clazz(), "defineSystemPackage", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Package;");
    return method.call(a0, a1);
}

// private static java.util.jar.Manifest java.lang.Package.loadManifest(java.lang.String)
jnipp::LocalRef<JavaUtilJarManifest> JavaLangPackage::loadManifest(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilJarManifest,JavaLangString> method(clazz(), "loadManifest", "(Ljava/lang/String;)Ljava/util/jar/Manifest;");
    return method.call(a0);
}

// private static native java.lang.String java.lang.Package.getSystemPackage0(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaLangPackage::getSystemPackage0(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "getSystemPackage0", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// private static native java.lang.String[] java.lang.Package.getSystemPackages0()
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaLangPackage::getSystemPackages0() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>> method(clazz(), "getSystemPackages0", "()[Ljava/lang/String;");
    return method.call();
}
#undef pkgs
jnipp::StaticField<JavaUtilMap> JavaLangPackage::pkgs ("java/lang/Package", "pkgs", "Ljava/util/Map;");
#undef urls
jnipp::StaticField<JavaUtilMap> JavaLangPackage::urls ("java/lang/Package", "urls", "Ljava/util/Map;");
#undef mans
jnipp::StaticField<JavaUtilMap> JavaLangPackage::mans ("java/lang/Package", "mans", "Ljava/util/Map;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangSecurityManager::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/SecurityManager"));
    return cls;
}

// public java.lang.SecurityManager()
jnipp::LocalRef<JavaLangSecurityManager> JavaLangSecurityManager::construct() {
    static jnipp::Constructor<JavaLangSecurityManager> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.lang.SecurityManager.checkPackageAccess(java.lang.String)
void JavaLangSecurityManager::checkPackageAccess(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkPackageAccess", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkMemberAccess(java.lang.Class,int)
void JavaLangSecurityManager::checkMemberAccess(const jnipp::Ref<JavaLangClass>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangClass,jint> method(clazz(), "checkMemberAccess", "(Ljava/lang/Class;I)V");
    method.call(*this, a0, a1);
}

// public void java.lang.SecurityManager.checkPermission(java.security.Permission,java.lang.Object)
void JavaLangSecurityManager::checkPermission(const jnipp::Ref<JavaSecurityPermission>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaSecurityPermission,JavaLangObject> method(clazz(), "checkPermission", "(Ljava/security/Permission;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// public void java.lang.SecurityManager.checkPermission(java.security.Permission)
void JavaLangSecurityManager::checkPermission(const jnipp::Ref<JavaSecurityPermission>& a0) const {
    static jnipp::Method<void,JavaSecurityPermission> method(clazz(), "checkPermission", "(Ljava/security/Permission;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkCreateClassLoader()
void JavaLangSecurityManager::checkCreateClassLoader() const {
    static jnipp::Method<void> method(clazz(), "checkCreateClassLoader", "()V");
    method.call(*this);
}

// private static java.lang.String[] java.lang.SecurityManager.getPackages(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaLangSecurityManager::getPackages(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>,JavaLangString> method(clazz(), "getPackages", "(Ljava/lang/String;)[Ljava/lang/String;");
    return method.call(a0);
}

// public void java.lang.SecurityManager.checkPropertiesAccess()
void JavaLangSecurityManager::checkPropertiesAccess() const {
    static jnipp::Method<void> method(clazz(), "checkPropertiesAccess", "()V");
    method.call(*this);
}

// public void java.lang.SecurityManager.checkPropertyAccess(java.lang.String)
void JavaLangSecurityManager::checkPropertyAccess(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkPropertyAccess", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public java.lang.ThreadGroup java.lang.SecurityManager.getThreadGroup()
jnipp::LocalRef<JavaLangThreadGroup> JavaLangSecurityManager::getThreadGroup() const {
    static jnipp::Method<JavaLangThreadGroup> method(clazz(), "getThreadGroup", "()Ljava/lang/ThreadGroup;");
    return method.call(*this);
}

// public void java.lang.SecurityManager.checkAccess(java.lang.ThreadGroup)
void JavaLangSecurityManager::checkAccess(const jnipp::Ref<JavaLangThreadGroup>& a0) const {
    static jnipp::Method<void,JavaLangThreadGroup> method(clazz(), "checkAccess", "(Ljava/lang/ThreadGroup;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkAccess(java.lang.Thread)
void JavaLangSecurityManager::checkAccess(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<void,JavaLangThread> method(clazz(), "checkAccess", "(Ljava/lang/Thread;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkExit(int)
void JavaLangSecurityManager::checkExit(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "checkExit", "(I)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkLink(java.lang.String)
void JavaLangSecurityManager::checkLink(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkLink", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkRead(java.lang.String)
void JavaLangSecurityManager::checkRead(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkRead", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkRead(java.lang.String,java.lang.Object)
void JavaLangSecurityManager::checkRead(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangObject> method(clazz(), "checkRead", "(Ljava/lang/String;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// public void java.lang.SecurityManager.checkRead(java.io.FileDescriptor)
void JavaLangSecurityManager::checkRead(const jnipp::Ref<JavaIoFileDescriptor>& a0) const {
    static jnipp::Method<void,JavaIoFileDescriptor> method(clazz(), "checkRead", "(Ljava/io/FileDescriptor;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkWrite(java.io.FileDescriptor)
void JavaLangSecurityManager::checkWrite(const jnipp::Ref<JavaIoFileDescriptor>& a0) const {
    static jnipp::Method<void,JavaIoFileDescriptor> method(clazz(), "checkWrite", "(Ljava/io/FileDescriptor;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkWrite(java.lang.String)
void JavaLangSecurityManager::checkWrite(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkWrite", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkDelete(java.lang.String)
void JavaLangSecurityManager::checkDelete(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkDelete", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkExec(java.lang.String)
void JavaLangSecurityManager::checkExec(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkExec", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkConnect(java.lang.String,int)
void JavaLangSecurityManager::checkConnect(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangString,jint> method(clazz(), "checkConnect", "(Ljava/lang/String;I)V");
    method.call(*this, a0, a1);
}

// public void java.lang.SecurityManager.checkConnect(java.lang.String,int,java.lang.Object)
void JavaLangSecurityManager::checkConnect(const jnipp::Ref<JavaLangString>& a0, jint a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<void,JavaLangString,jint,JavaLangObject> method(clazz(), "checkConnect", "(Ljava/lang/String;ILjava/lang/Object;)V");
    method.call(*this, a0, a1, a2);
}

// public void java.lang.SecurityManager.checkSetFactory()
void JavaLangSecurityManager::checkSetFactory() const {
    static jnipp::Method<void> method(clazz(), "checkSetFactory", "()V");
    method.call(*this);
}

// private boolean java.lang.SecurityManager.hasAllPermission()
jboolean JavaLangSecurityManager::hasAllPermission() const {
    static jnipp::Method<jboolean> method(clazz(), "hasAllPermission", "()Z");
    return method.call(*this);
}

// public boolean java.lang.SecurityManager.getInCheck()
jboolean JavaLangSecurityManager::getInCheck() const {
    static jnipp::Method<jboolean> method(clazz(), "getInCheck", "()Z");
    return method.call(*this);
}

// protected native java.lang.Class[] java.lang.SecurityManager.getClassContext()
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangSecurityManager::getClassContext() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getClassContext", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// protected java.lang.ClassLoader java.lang.SecurityManager.currentClassLoader()
jnipp::LocalRef<JavaLangClassLoader> JavaLangSecurityManager::currentClassLoader() const {
    static jnipp::Method<JavaLangClassLoader> method(clazz(), "currentClassLoader", "()Ljava/lang/ClassLoader;");
    return method.call(*this);
}

// private native java.lang.ClassLoader java.lang.SecurityManager.currentClassLoader0()
jnipp::LocalRef<JavaLangClassLoader> JavaLangSecurityManager::currentClassLoader0() const {
    static jnipp::Method<JavaLangClassLoader> method(clazz(), "currentClassLoader0", "()Ljava/lang/ClassLoader;");
    return method.call(*this);
}

// protected java.lang.Class java.lang.SecurityManager.currentLoadedClass()
jnipp::LocalRef<JavaLangClass> JavaLangSecurityManager::currentLoadedClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "currentLoadedClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// protected native int java.lang.SecurityManager.classDepth(java.lang.String)
jint JavaLangSecurityManager::classDepth(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "classDepth", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// protected int java.lang.SecurityManager.classLoaderDepth()
jint JavaLangSecurityManager::classLoaderDepth() const {
    static jnipp::Method<jint> method(clazz(), "classLoaderDepth", "()I");
    return method.call(*this);
}

// private native int java.lang.SecurityManager.classLoaderDepth0()
jint JavaLangSecurityManager::classLoaderDepth0() const {
    static jnipp::Method<jint> method(clazz(), "classLoaderDepth0", "()I");
    return method.call(*this);
}

// protected boolean java.lang.SecurityManager.inClass(java.lang.String)
jboolean JavaLangSecurityManager::inClass(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "inClass", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// protected boolean java.lang.SecurityManager.inClassLoader()
jboolean JavaLangSecurityManager::inClassLoader() const {
    static jnipp::Method<jboolean> method(clazz(), "inClassLoader", "()Z");
    return method.call(*this);
}

// public java.lang.Object java.lang.SecurityManager.getSecurityContext()
jnipp::LocalRef<JavaLangObject> JavaLangSecurityManager::getSecurityContext() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getSecurityContext", "()Ljava/lang/Object;");
    return method.call(*this);
}

// private static java.lang.ThreadGroup java.lang.SecurityManager.getRootGroup()
jnipp::LocalRef<JavaLangThreadGroup> JavaLangSecurityManager::getRootGroup() {
    static jnipp::StaticMethod<JavaLangThreadGroup> method(clazz(), "getRootGroup", "()Ljava/lang/ThreadGroup;");
    return method.call();
}

// public void java.lang.SecurityManager.checkListen(int)
void JavaLangSecurityManager::checkListen(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "checkListen", "(I)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkAccept(java.lang.String,int)
void JavaLangSecurityManager::checkAccept(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangString,jint> method(clazz(), "checkAccept", "(Ljava/lang/String;I)V");
    method.call(*this, a0, a1);
}

// public void java.lang.SecurityManager.checkMulticast(java.net.InetAddress,byte)
void JavaLangSecurityManager::checkMulticast(const jnipp::Ref<JavaNetInetAddress>& a0, jbyte a1) const {
    static jnipp::Method<void,JavaNetInetAddress,jbyte> method(clazz(), "checkMulticast", "(Ljava/net/InetAddress;B)V");
    method.call(*this, a0, a1);
}

// public void java.lang.SecurityManager.checkMulticast(java.net.InetAddress)
void JavaLangSecurityManager::checkMulticast(const jnipp::Ref<JavaNetInetAddress>& a0) const {
    static jnipp::Method<void,JavaNetInetAddress> method(clazz(), "checkMulticast", "(Ljava/net/InetAddress;)V");
    method.call(*this, a0);
}

// public boolean java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object)
jboolean JavaLangSecurityManager::checkTopLevelWindow(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "checkTopLevelWindow", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkPrintJobAccess()
void JavaLangSecurityManager::checkPrintJobAccess() const {
    static jnipp::Method<void> method(clazz(), "checkPrintJobAccess", "()V");
    method.call(*this);
}

// public void java.lang.SecurityManager.checkSystemClipboardAccess()
void JavaLangSecurityManager::checkSystemClipboardAccess() const {
    static jnipp::Method<void> method(clazz(), "checkSystemClipboardAccess", "()V");
    method.call(*this);
}

// public void java.lang.SecurityManager.checkAwtEventQueueAccess()
void JavaLangSecurityManager::checkAwtEventQueueAccess() const {
    static jnipp::Method<void> method(clazz(), "checkAwtEventQueueAccess", "()V");
    method.call(*this);
}

// public void java.lang.SecurityManager.checkPackageDefinition(java.lang.String)
void JavaLangSecurityManager::checkPackageDefinition(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkPackageDefinition", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.lang.SecurityManager.checkSecurityAccess(java.lang.String)
void JavaLangSecurityManager::checkSecurityAccess(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "checkSecurityAccess", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// private native java.lang.Class java.lang.SecurityManager.currentLoadedClass0()
jnipp::LocalRef<JavaLangClass> JavaLangSecurityManager::currentLoadedClass0() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "currentLoadedClass0", "()Ljava/lang/Class;");
    return method.call(*this);
}
#undef rootGroup
jnipp::StaticField<JavaLangThreadGroup> JavaLangSecurityManager::rootGroup ("java/lang/SecurityManager", "rootGroup", "Ljava/lang/ThreadGroup;");
#undef packageAccessValid
jnipp::StaticField<jboolean> JavaLangSecurityManager::packageAccessValid ("java/lang/SecurityManager", "packageAccessValid", "Z");
#undef packageAccess
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaLangSecurityManager::packageAccess ("java/lang/SecurityManager", "packageAccess", "[Ljava/lang/String;");
#undef packageAccessLock
const jnipp::StaticField<JavaLangObject> JavaLangSecurityManager::packageAccessLock ("java/lang/SecurityManager", "packageAccessLock", "Ljava/lang/Object;");
#undef packageDefinitionValid
jnipp::StaticField<jboolean> JavaLangSecurityManager::packageDefinitionValid ("java/lang/SecurityManager", "packageDefinitionValid", "Z");
#undef packageDefinition
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaLangSecurityManager::packageDefinition ("java/lang/SecurityManager", "packageDefinition", "[Ljava/lang/String;");
#undef packageDefinitionLock
const jnipp::StaticField<JavaLangObject> JavaLangSecurityManager::packageDefinitionLock ("java/lang/SecurityManager", "packageDefinitionLock", "Ljava/lang/Object;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangReflectTypeVariable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/reflect/TypeVariable"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangReflectConstructor::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/reflect/Constructor"));
    return cls;
}

// java.lang.reflect.Constructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])
jnipp::LocalRef<JavaLangReflectConstructor> JavaLangReflectConstructor::construct(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a1, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a2, jint a3, jint a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<jnipp::Array<jbyte>>& a6, const jnipp::Ref<jnipp::Array<jbyte>>& a7) {
    static jnipp::Constructor<JavaLangReflectConstructor,JavaLangClass,jnipp::Array<JavaLangClass>,jnipp::Array<JavaLangClass>,jint,jint,JavaLangString,jnipp::Array<jbyte>,jnipp::Array<jbyte>> constructor(clazz(), "(Ljava/lang/Class;[Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5, a6, a7);
}

// public boolean java.lang.reflect.Constructor.equals(java.lang.Object)
jboolean JavaLangReflectConstructor::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.lang.reflect.Constructor.hashCode()
jint JavaLangReflectConstructor::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.lang.reflect.Constructor.getModifiers()
jint JavaLangReflectConstructor::getModifiers() const {
    static jnipp::Method<jint> method(clazz(), "getModifiers", "()I");
    return method.call(*this);
}

// public java.lang.String java.lang.reflect.Constructor.getName()
jnipp::LocalRef<JavaLangString> JavaLangReflectConstructor::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// private synchronized java.util.Map java.lang.reflect.Constructor.declaredAnnotations()
jnipp::LocalRef<JavaUtilMap> JavaLangReflectConstructor::declaredAnnotations() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "declaredAnnotations", "()Ljava/util/Map;");
    return method.call(*this);
}

// public java.lang.Object java.lang.reflect.Constructor.newInstance(java.lang.Object[]) throws java.lang.InstantiationException,java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
jnipp::LocalRef<JavaLangObject> JavaLangReflectConstructor::newInstance(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0) const {
    static jnipp::Method<JavaLangObject,jnipp::Array<JavaLangObject>> method(clazz(), "newInstance", "([Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public boolean java.lang.reflect.Constructor.isSynthetic()
jboolean JavaLangReflectConstructor::isSynthetic() const {
    static jnipp::Method<jboolean> method(clazz(), "isSynthetic", "()Z");
    return method.call(*this);
}

// public java.lang.reflect.TypeVariable[] java.lang.reflect.Constructor.getTypeParameters()
jnipp::LocalRef<jnipp::Array<JavaLangReflectTypeVariable>> JavaLangReflectConstructor::getTypeParameters() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectTypeVariable>> method(clazz(), "getTypeParameters", "()[Ljava/lang/reflect/TypeVariable;");
    return method.call(*this);
}

// public java.lang.Class java.lang.reflect.Constructor.getDeclaringClass()
jnipp::LocalRef<JavaLangClass> JavaLangReflectConstructor::getDeclaringClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getDeclaringClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private sun.reflect.generics.factory.GenericsFactory java.lang.reflect.Constructor.getFactory()
jnipp::LocalRef<SunReflectGenericsFactoryGenericsFactory> JavaLangReflectConstructor::getFactory() const {
    static jnipp::Method<SunReflectGenericsFactoryGenericsFactory> method(clazz(), "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;");
    return method.call(*this);
}

// private sun.reflect.generics.repository.ConstructorRepository java.lang.reflect.Constructor.getGenericInfo()
jnipp::LocalRef<SunReflectGenericsRepositoryConstructorRepository> JavaLangReflectConstructor::getGenericInfo() const {
    static jnipp::Method<SunReflectGenericsRepositoryConstructorRepository> method(clazz(), "getGenericInfo", "()Lsun/reflect/generics/repository/ConstructorRepository;");
    return method.call(*this);
}

// byte[] java.lang.reflect.Constructor.getRawAnnotations()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaLangReflectConstructor::getRawAnnotations() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getRawAnnotations", "()[B");
    return method.call(*this);
}

// public java.lang.annotation.Annotation java.lang.reflect.Constructor.getAnnotation(java.lang.Class)
jnipp::LocalRef<JavaLangAnnotationAnnotation> JavaLangReflectConstructor::getAnnotation(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangAnnotationAnnotation,JavaLangClass> method(clazz(), "getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;");
    return method.call(*this, a0);
}

// public java.lang.annotation.Annotation[] java.lang.reflect.Constructor.getDeclaredAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangReflectConstructor::getDeclaredAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// public java.lang.Class[] java.lang.reflect.Constructor.getParameterTypes()
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangReflectConstructor::getParameterTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getParameterTypes", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// java.lang.reflect.Constructor java.lang.reflect.Constructor.copy()
jnipp::LocalRef<JavaLangReflectConstructor> JavaLangReflectConstructor::copy() const {
    static jnipp::Method<JavaLangReflectConstructor> method(clazz(), "copy", "()Ljava/lang/reflect/Constructor;");
    return method.call(*this);
}

// public java.lang.String java.lang.reflect.Constructor.toGenericString()
jnipp::LocalRef<JavaLangString> JavaLangReflectConstructor::toGenericString() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toGenericString", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericParameterTypes()
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> JavaLangReflectConstructor::getGenericParameterTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>> method(clazz(), "getGenericParameterTypes", "()[Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public java.lang.Class[] java.lang.reflect.Constructor.getExceptionTypes()
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangReflectConstructor::getExceptionTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getExceptionTypes", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericExceptionTypes()
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> JavaLangReflectConstructor::getGenericExceptionTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>> method(clazz(), "getGenericExceptionTypes", "()[Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public boolean java.lang.reflect.Constructor.isVarArgs()
jboolean JavaLangReflectConstructor::isVarArgs() const {
    static jnipp::Method<jboolean> method(clazz(), "isVarArgs", "()Z");
    return method.call(*this);
}

// public java.lang.annotation.Annotation[][] java.lang.reflect.Constructor.getParameterAnnotations()
jnipp::LocalRef<jnipp::Array<jnipp::Array<JavaLangAnnotationAnnotation>>> JavaLangReflectConstructor::getParameterAnnotations() const {
    static jnipp::Method<jnipp::Array<jnipp::Array<JavaLangAnnotationAnnotation>>> method(clazz(), "getParameterAnnotations", "()[[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// private sun.reflect.ConstructorAccessor java.lang.reflect.Constructor.acquireConstructorAccessor()
jnipp::LocalRef<SunReflectConstructorAccessor> JavaLangReflectConstructor::acquireConstructorAccessor() const {
    static jnipp::Method<SunReflectConstructorAccessor> method(clazz(), "acquireConstructorAccessor", "()Lsun/reflect/ConstructorAccessor;");
    return method.call(*this);
}

// sun.reflect.ConstructorAccessor java.lang.reflect.Constructor.getConstructorAccessor()
jnipp::LocalRef<SunReflectConstructorAccessor> JavaLangReflectConstructor::getConstructorAccessor() const {
    static jnipp::Method<SunReflectConstructorAccessor> method(clazz(), "getConstructorAccessor", "()Lsun/reflect/ConstructorAccessor;");
    return method.call(*this);
}

// void java.lang.reflect.Constructor.setConstructorAccessor(sun.reflect.ConstructorAccessor)
void JavaLangReflectConstructor::setConstructorAccessor(const jnipp::Ref<SunReflectConstructorAccessor>& a0) const {
    static jnipp::Method<void,SunReflectConstructorAccessor> method(clazz(), "setConstructorAccessor", "(Lsun/reflect/ConstructorAccessor;)V");
    method.call(*this, a0);
}

// int java.lang.reflect.Constructor.getSlot()
jint JavaLangReflectConstructor::getSlot() const {
    static jnipp::Method<jint> method(clazz(), "getSlot", "()I");
    return method.call(*this);
}

// java.lang.String java.lang.reflect.Constructor.getSignature()
jnipp::LocalRef<JavaLangString> JavaLangReflectConstructor::getSignature() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getSignature", "()Ljava/lang/String;");
    return method.call(*this);
}

// byte[] java.lang.reflect.Constructor.getRawParameterAnnotations()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaLangReflectConstructor::getRawParameterAnnotations() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getRawParameterAnnotations", "()[B");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsFactoryGenericsFactory::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/factory/GenericsFactory"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClass_EnclosingMethodInfo::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Class$EnclosingMethodInfo"));
    return cls;
}

// private java.lang.Class$EnclosingMethodInfo(java.lang.Object[])
jnipp::LocalRef<JavaLangClass_EnclosingMethodInfo> JavaLangClass_EnclosingMethodInfo::construct(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0) {
    static jnipp::Constructor<JavaLangClass_EnclosingMethodInfo,jnipp::Array<JavaLangObject>> constructor(clazz(), "([Ljava/lang/Object;)V");
    return constructor.construct(a0);
}

// java.lang.Class$EnclosingMethodInfo(java.lang.Object[],java.lang.Class$1)
jnipp::LocalRef<JavaLangClass_EnclosingMethodInfo> JavaLangClass_EnclosingMethodInfo::construct(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0, const jnipp::Ref<JavaLangClass_1>& a1) {
    static jnipp::Constructor<JavaLangClass_EnclosingMethodInfo,jnipp::Array<JavaLangObject>,JavaLangClass_1> constructor(clazz(), "([Ljava/lang/Object;Ljava/lang/Class$1;)V");
    return constructor.construct(a0, a1);
}

// java.lang.String java.lang.Class$EnclosingMethodInfo.getName()
jnipp::LocalRef<JavaLangString> JavaLangClass_EnclosingMethodInfo::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// java.lang.Class java.lang.Class$EnclosingMethodInfo.getEnclosingClass()
jnipp::LocalRef<JavaLangClass> JavaLangClass_EnclosingMethodInfo::getEnclosingClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getEnclosingClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// boolean java.lang.Class$EnclosingMethodInfo.isMethod()
jboolean JavaLangClass_EnclosingMethodInfo::isMethod() const {
    static jnipp::Method<jboolean> method(clazz(), "isMethod", "()Z");
    return method.call(*this);
}

// java.lang.String java.lang.Class$EnclosingMethodInfo.getDescriptor()
jnipp::LocalRef<JavaLangString> JavaLangClass_EnclosingMethodInfo::getDescriptor() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDescriptor", "()Ljava/lang/String;");
    return method.call(*this);
}

// boolean java.lang.Class$EnclosingMethodInfo.isConstructor()
jboolean JavaLangClass_EnclosingMethodInfo::isConstructor() const {
    static jnipp::Method<jboolean> method(clazz(), "isConstructor", "()Z");
    return method.call(*this);
}

// boolean java.lang.Class$EnclosingMethodInfo.isPartial()
jboolean JavaLangClass_EnclosingMethodInfo::isPartial() const {
    static jnipp::Method<jboolean> method(clazz(), "isPartial", "()Z");
    return method.call(*this);
}
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaLangClass_EnclosingMethodInfo::$assertionsDisabled ("java/lang/Class$EnclosingMethodInfo", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectReflectionFactory::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/ReflectionFactory"));
    return cls;
}

// private sun.reflect.ReflectionFactory()
jnipp::LocalRef<SunReflectReflectionFactory> SunReflectReflectionFactory::construct() {
    static jnipp::Constructor<SunReflectReflectionFactory> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.reflect.Constructor sun.reflect.ReflectionFactory.newConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])
jnipp::LocalRef<JavaLangReflectConstructor> SunReflectReflectionFactory::newConstructor(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a1, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a2, jint a3, jint a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<jnipp::Array<jbyte>>& a6, const jnipp::Ref<jnipp::Array<jbyte>>& a7) const {
    static jnipp::Method<JavaLangReflectConstructor,JavaLangClass,jnipp::Array<JavaLangClass>,jnipp::Array<JavaLangClass>,jint,jint,JavaLangString,jnipp::Array<jbyte>,jnipp::Array<jbyte>> method(clazz(), "newConstructor", "(Ljava/lang/Class;[Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B)Ljava/lang/reflect/Constructor;");
    return method.call(*this, a0, a1, a2, a3, a4, a5, a6, a7);
}

// public java.lang.reflect.Field sun.reflect.ReflectionFactory.newField(java.lang.Class,java.lang.String,java.lang.Class,int,int,java.lang.String,byte[])
jnipp::LocalRef<JavaLangReflectField> SunReflectReflectionFactory::newField(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangClass>& a2, jint a3, jint a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<jnipp::Array<jbyte>>& a6) const {
    static jnipp::Method<JavaLangReflectField,JavaLangClass,JavaLangString,JavaLangClass,jint,jint,JavaLangString,jnipp::Array<jbyte>> method(clazz(), "newField", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;IILjava/lang/String;[B)Ljava/lang/reflect/Field;");
    return method.call(*this, a0, a1, a2, a3, a4, a5, a6);
}

// public java.lang.reflect.Method sun.reflect.ReflectionFactory.newMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,int,java.lang.String,byte[],byte[],byte[])
jnipp::LocalRef<JavaLangReflectMethod> SunReflectReflectionFactory::newMethod(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a2, const jnipp::Ref<JavaLangClass>& a3, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a4, jint a5, jint a6, const jnipp::Ref<JavaLangString>& a7, const jnipp::Ref<jnipp::Array<jbyte>>& a8, const jnipp::Ref<jnipp::Array<jbyte>>& a9, const jnipp::Ref<jnipp::Array<jbyte>>& a10) const {
    static jnipp::Method<JavaLangReflectMethod,JavaLangClass,JavaLangString,jnipp::Array<JavaLangClass>,JavaLangClass,jnipp::Array<JavaLangClass>,jint,jint,JavaLangString,jnipp::Array<jbyte>,jnipp::Array<jbyte>,jnipp::Array<jbyte>> method(clazz(), "newMethod", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B[B)Ljava/lang/reflect/Method;");
    return method.call(*this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

// public static sun.reflect.ReflectionFactory sun.reflect.ReflectionFactory.getReflectionFactory()
jnipp::LocalRef<SunReflectReflectionFactory> SunReflectReflectionFactory::getReflectionFactory() {
    static jnipp::StaticMethod<SunReflectReflectionFactory> method(clazz(), "getReflectionFactory", "()Lsun/reflect/ReflectionFactory;");
    return method.call();
}

// private static void sun.reflect.ReflectionFactory.checkInitted()
void SunReflectReflectionFactory::checkInitted() {
    static jnipp::StaticMethod<void> method(clazz(), "checkInitted", "()V");
    method.call();
}

// public java.lang.reflect.Field sun.reflect.ReflectionFactory.copyField(java.lang.reflect.Field)
jnipp::LocalRef<JavaLangReflectField> SunReflectReflectionFactory::copyField(const jnipp::Ref<JavaLangReflectField>& a0) const {
    static jnipp::Method<JavaLangReflectField,JavaLangReflectField> method(clazz(), "copyField", "(Ljava/lang/reflect/Field;)Ljava/lang/reflect/Field;");
    return method.call(*this, a0);
}

// public java.lang.reflect.Method sun.reflect.ReflectionFactory.copyMethod(java.lang.reflect.Method)
jnipp::LocalRef<JavaLangReflectMethod> SunReflectReflectionFactory::copyMethod(const jnipp::Ref<JavaLangReflectMethod>& a0) const {
    static jnipp::Method<JavaLangReflectMethod,JavaLangReflectMethod> method(clazz(), "copyMethod", "(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;");
    return method.call(*this, a0);
}

// public java.lang.reflect.Constructor sun.reflect.ReflectionFactory.copyConstructor(java.lang.reflect.Constructor)
jnipp::LocalRef<JavaLangReflectConstructor> SunReflectReflectionFactory::copyConstructor(const jnipp::Ref<JavaLangReflectConstructor>& a0) const {
    static jnipp::Method<JavaLangReflectConstructor,JavaLangReflectConstructor> method(clazz(), "copyConstructor", "(Ljava/lang/reflect/Constructor;)Ljava/lang/reflect/Constructor;");
    return method.call(*this, a0);
}

// public sun.reflect.FieldAccessor sun.reflect.ReflectionFactory.newFieldAccessor(java.lang.reflect.Field,boolean)
jnipp::LocalRef<SunReflectFieldAccessor> SunReflectReflectionFactory::newFieldAccessor(const jnipp::Ref<JavaLangReflectField>& a0, jboolean a1) const {
    static jnipp::Method<SunReflectFieldAccessor,JavaLangReflectField,jboolean> method(clazz(), "newFieldAccessor", "(Ljava/lang/reflect/Field;Z)Lsun/reflect/FieldAccessor;");
    return method.call(*this, a0, a1);
}

// public sun.reflect.MethodAccessor sun.reflect.ReflectionFactory.getMethodAccessor(java.lang.reflect.Method)
jnipp::LocalRef<SunReflectMethodAccessor> SunReflectReflectionFactory::getMethodAccessor(const jnipp::Ref<JavaLangReflectMethod>& a0) const {
    static jnipp::Method<SunReflectMethodAccessor,JavaLangReflectMethod> method(clazz(), "getMethodAccessor", "(Ljava/lang/reflect/Method;)Lsun/reflect/MethodAccessor;");
    return method.call(*this, a0);
}

// public void sun.reflect.ReflectionFactory.setMethodAccessor(java.lang.reflect.Method,sun.reflect.MethodAccessor)
void SunReflectReflectionFactory::setMethodAccessor(const jnipp::Ref<JavaLangReflectMethod>& a0, const jnipp::Ref<SunReflectMethodAccessor>& a1) const {
    static jnipp::Method<void,JavaLangReflectMethod,SunReflectMethodAccessor> method(clazz(), "setMethodAccessor", "(Ljava/lang/reflect/Method;Lsun/reflect/MethodAccessor;)V");
    method.call(*this, a0, a1);
}

// public sun.reflect.MethodAccessor sun.reflect.ReflectionFactory.newMethodAccessor(java.lang.reflect.Method)
jnipp::LocalRef<SunReflectMethodAccessor> SunReflectReflectionFactory::newMethodAccessor(const jnipp::Ref<JavaLangReflectMethod>& a0) const {
    static jnipp::Method<SunReflectMethodAccessor,JavaLangReflectMethod> method(clazz(), "newMethodAccessor", "(Ljava/lang/reflect/Method;)Lsun/reflect/MethodAccessor;");
    return method.call(*this, a0);
}

// public sun.reflect.ConstructorAccessor sun.reflect.ReflectionFactory.getConstructorAccessor(java.lang.reflect.Constructor)
jnipp::LocalRef<SunReflectConstructorAccessor> SunReflectReflectionFactory::getConstructorAccessor(const jnipp::Ref<JavaLangReflectConstructor>& a0) const {
    static jnipp::Method<SunReflectConstructorAccessor,JavaLangReflectConstructor> method(clazz(), "getConstructorAccessor", "(Ljava/lang/reflect/Constructor;)Lsun/reflect/ConstructorAccessor;");
    return method.call(*this, a0);
}

// public void sun.reflect.ReflectionFactory.setConstructorAccessor(java.lang.reflect.Constructor,sun.reflect.ConstructorAccessor)
void SunReflectReflectionFactory::setConstructorAccessor(const jnipp::Ref<JavaLangReflectConstructor>& a0, const jnipp::Ref<SunReflectConstructorAccessor>& a1) const {
    static jnipp::Method<void,JavaLangReflectConstructor,SunReflectConstructorAccessor> method(clazz(), "setConstructorAccessor", "(Ljava/lang/reflect/Constructor;Lsun/reflect/ConstructorAccessor;)V");
    method.call(*this, a0, a1);
}

// public sun.reflect.ConstructorAccessor sun.reflect.ReflectionFactory.newConstructorAccessor(java.lang.reflect.Constructor)
jnipp::LocalRef<SunReflectConstructorAccessor> SunReflectReflectionFactory::newConstructorAccessor(const jnipp::Ref<JavaLangReflectConstructor>& a0) const {
    static jnipp::Method<SunReflectConstructorAccessor,JavaLangReflectConstructor> method(clazz(), "newConstructorAccessor", "(Ljava/lang/reflect/Constructor;)Lsun/reflect/ConstructorAccessor;");
    return method.call(*this, a0);
}

// private static sun.reflect.LangReflectAccess sun.reflect.ReflectionFactory.langReflectAccess()
jnipp::LocalRef<SunReflectLangReflectAccess> SunReflectReflectionFactory::langReflectAccess() {
    static jnipp::StaticMethod<SunReflectLangReflectAccess> method(clazz(), "langReflectAccess", "()Lsun/reflect/LangReflectAccess;");
    return method.call();
}

// static int sun.reflect.ReflectionFactory.inflationThreshold()
jint SunReflectReflectionFactory::inflationThreshold() {
    static jnipp::StaticMethod<jint> method(clazz(), "inflationThreshold", "()I");
    return method.call();
}

// public void sun.reflect.ReflectionFactory.setLangReflectAccess(sun.reflect.LangReflectAccess)
void SunReflectReflectionFactory::setLangReflectAccess(const jnipp::Ref<SunReflectLangReflectAccess>& a0) const {
    static jnipp::Method<void,SunReflectLangReflectAccess> method(clazz(), "setLangReflectAccess", "(Lsun/reflect/LangReflectAccess;)V");
    method.call(*this, a0);
}

// public java.lang.reflect.Constructor sun.reflect.ReflectionFactory.newConstructorForSerialization(java.lang.Class,java.lang.reflect.Constructor)
jnipp::LocalRef<JavaLangReflectConstructor> SunReflectReflectionFactory::newConstructorForSerialization(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangReflectConstructor>& a1) const {
    static jnipp::Method<JavaLangReflectConstructor,JavaLangClass,JavaLangReflectConstructor> method(clazz(), "newConstructorForSerialization", "(Ljava/lang/Class;Ljava/lang/reflect/Constructor;)Ljava/lang/reflect/Constructor;");
    return method.call(*this, a0, a1);
}
#undef initted
jnipp::StaticField<jboolean> SunReflectReflectionFactory::initted ("sun/reflect/ReflectionFactory", "initted", "Z");
#undef reflectionFactoryAccessPerm
jnipp::StaticField<JavaSecurityPermission> SunReflectReflectionFactory::reflectionFactoryAccessPerm ("sun/reflect/ReflectionFactory", "reflectionFactoryAccessPerm", "Ljava/security/Permission;");
#undef soleInstance
jnipp::StaticField<SunReflectReflectionFactory> SunReflectReflectionFactory::soleInstance ("sun/reflect/ReflectionFactory", "soleInstance", "Lsun/reflect/ReflectionFactory;");
#undef langReflectAccess
jnipp::StaticField<SunReflectLangReflectAccess> SunReflectReflectionFactory::langReflectAccess_ ("sun/reflect/ReflectionFactory", "langReflectAccess", "Lsun/reflect/LangReflectAccess;");
#undef noInflation
jnipp::StaticField<jboolean> SunReflectReflectionFactory::noInflation ("sun/reflect/ReflectionFactory", "noInflation", "Z");
#undef inflationThreshold
jnipp::StaticField<jint> SunReflectReflectionFactory::inflationThreshold_ ("sun/reflect/ReflectionFactory", "inflationThreshold", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityProtectionDomain::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/ProtectionDomain"));
    return cls;
}

// public java.security.ProtectionDomain(java.security.CodeSource,java.security.PermissionCollection)
jnipp::LocalRef<JavaSecurityProtectionDomain> JavaSecurityProtectionDomain::construct(const jnipp::Ref<JavaSecurityCodeSource>& a0, const jnipp::Ref<JavaSecurityPermissionCollection>& a1) {
    static jnipp::Constructor<JavaSecurityProtectionDomain,JavaSecurityCodeSource,JavaSecurityPermissionCollection> constructor(clazz(), "(Ljava/security/CodeSource;Ljava/security/PermissionCollection;)V");
    return constructor.construct(a0, a1);
}

// public java.security.ProtectionDomain(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])
jnipp::LocalRef<JavaSecurityProtectionDomain> JavaSecurityProtectionDomain::construct(const jnipp::Ref<JavaSecurityCodeSource>& a0, const jnipp::Ref<JavaSecurityPermissionCollection>& a1, const jnipp::Ref<JavaLangClassLoader>& a2, const jnipp::Ref<jnipp::Array<JavaSecurityPrincipal>>& a3) {
    static jnipp::Constructor<JavaSecurityProtectionDomain,JavaSecurityCodeSource,JavaSecurityPermissionCollection,JavaLangClassLoader,jnipp::Array<JavaSecurityPrincipal>> constructor(clazz(), "(Ljava/security/CodeSource;Ljava/security/PermissionCollection;Ljava/lang/ClassLoader;[Ljava/security/Principal;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// boolean java.security.ProtectionDomain.impliesCreateAccessControlContext()
jboolean JavaSecurityProtectionDomain::impliesCreateAccessControlContext() const {
    static jnipp::Method<jboolean> method(clazz(), "impliesCreateAccessControlContext", "()Z");
    return method.call(*this);
}

// public final java.lang.ClassLoader java.security.ProtectionDomain.getClassLoader()
jnipp::LocalRef<JavaLangClassLoader> JavaSecurityProtectionDomain::getClassLoader() const {
    static jnipp::Method<JavaLangClassLoader> method(clazz(), "getClassLoader", "()Ljava/lang/ClassLoader;");
    return method.call(*this);
}

// public final java.security.CodeSource java.security.ProtectionDomain.getCodeSource()
jnipp::LocalRef<JavaSecurityCodeSource> JavaSecurityProtectionDomain::getCodeSource() const {
    static jnipp::Method<JavaSecurityCodeSource> method(clazz(), "getCodeSource", "()Ljava/security/CodeSource;");
    return method.call(*this);
}

// public final java.security.Principal[] java.security.ProtectionDomain.getPrincipals()
jnipp::LocalRef<jnipp::Array<JavaSecurityPrincipal>> JavaSecurityProtectionDomain::getPrincipals() const {
    static jnipp::Method<jnipp::Array<JavaSecurityPrincipal>> method(clazz(), "getPrincipals", "()[Ljava/security/Principal;");
    return method.call(*this);
}

// public final java.security.PermissionCollection java.security.ProtectionDomain.getPermissions()
jnipp::LocalRef<JavaSecurityPermissionCollection> JavaSecurityProtectionDomain::getPermissions() const {
    static jnipp::Method<JavaSecurityPermissionCollection> method(clazz(), "getPermissions", "()Ljava/security/PermissionCollection;");
    return method.call(*this);
}

// public boolean java.security.ProtectionDomain.implies(java.security.Permission)
jboolean JavaSecurityProtectionDomain::implies(const jnipp::Ref<JavaSecurityPermission>& a0) const {
    static jnipp::Method<jboolean,JavaSecurityPermission> method(clazz(), "implies", "(Ljava/security/Permission;)Z");
    return method.call(*this, a0);
}

// private static boolean java.security.ProtectionDomain.seeAllp()
jboolean JavaSecurityProtectionDomain::seeAllp() {
    static jnipp::StaticMethod<jboolean> method(clazz(), "seeAllp", "()Z");
    return method.call();
}

// private java.security.PermissionCollection java.security.ProtectionDomain.mergePermissions()
jnipp::LocalRef<JavaSecurityPermissionCollection> JavaSecurityProtectionDomain::mergePermissions() const {
    static jnipp::Method<JavaSecurityPermissionCollection> method(clazz(), "mergePermissions", "()Ljava/security/PermissionCollection;");
    return method.call(*this);
}
#undef debug
const jnipp::StaticField<SunSecurityUtilDebug> JavaSecurityProtectionDomain::debug ("java/security/ProtectionDomain", "debug", "Lsun/security/util/Debug;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangReflectMethod::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/reflect/Method"));
    return cls;
}

// java.lang.reflect.Method(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,int,java.lang.String,byte[],byte[],byte[])
jnipp::LocalRef<JavaLangReflectMethod> JavaLangReflectMethod::construct(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a2, const jnipp::Ref<JavaLangClass>& a3, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a4, jint a5, jint a6, const jnipp::Ref<JavaLangString>& a7, const jnipp::Ref<jnipp::Array<jbyte>>& a8, const jnipp::Ref<jnipp::Array<jbyte>>& a9, const jnipp::Ref<jnipp::Array<jbyte>>& a10) {
    static jnipp::Constructor<JavaLangReflectMethod,JavaLangClass,JavaLangString,jnipp::Array<JavaLangClass>,JavaLangClass,jnipp::Array<JavaLangClass>,jint,jint,JavaLangString,jnipp::Array<jbyte>,jnipp::Array<jbyte>,jnipp::Array<jbyte>> constructor(clazz(), "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B[B)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

// public java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[]) throws java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
jnipp::LocalRef<JavaLangObject> JavaLangReflectMethod::invoke(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,jnipp::Array<JavaLangObject>> method(clazz(), "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public boolean java.lang.reflect.Method.equals(java.lang.Object)
jboolean JavaLangReflectMethod::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.lang.reflect.Method.hashCode()
jint JavaLangReflectMethod::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.lang.reflect.Method.getModifiers()
jint JavaLangReflectMethod::getModifiers() const {
    static jnipp::Method<jint> method(clazz(), "getModifiers", "()I");
    return method.call(*this);
}

// private java.lang.Class java.lang.reflect.Method.getCallerClass()
jnipp::LocalRef<JavaLangClass> JavaLangReflectMethod::getCallerClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getCallerClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.String java.lang.reflect.Method.getName()
jnipp::LocalRef<JavaLangString> JavaLangReflectMethod::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// private synchronized java.util.Map java.lang.reflect.Method.declaredAnnotations()
jnipp::LocalRef<JavaUtilMap> JavaLangReflectMethod::declaredAnnotations() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "declaredAnnotations", "()Ljava/util/Map;");
    return method.call(*this);
}

// public boolean java.lang.reflect.Method.isSynthetic()
jboolean JavaLangReflectMethod::isSynthetic() const {
    static jnipp::Method<jboolean> method(clazz(), "isSynthetic", "()Z");
    return method.call(*this);
}

// public java.lang.reflect.TypeVariable[] java.lang.reflect.Method.getTypeParameters()
jnipp::LocalRef<jnipp::Array<JavaLangReflectTypeVariable>> JavaLangReflectMethod::getTypeParameters() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectTypeVariable>> method(clazz(), "getTypeParameters", "()[Ljava/lang/reflect/TypeVariable;");
    return method.call(*this);
}

// public java.lang.Class java.lang.reflect.Method.getDeclaringClass()
jnipp::LocalRef<JavaLangClass> JavaLangReflectMethod::getDeclaringClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getDeclaringClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private java.lang.String java.lang.reflect.Method.getGenericSignature()
jnipp::LocalRef<JavaLangString> JavaLangReflectMethod::getGenericSignature() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getGenericSignature", "()Ljava/lang/String;");
    return method.call(*this);
}

// private sun.reflect.generics.factory.GenericsFactory java.lang.reflect.Method.getFactory()
jnipp::LocalRef<SunReflectGenericsFactoryGenericsFactory> JavaLangReflectMethod::getFactory() const {
    static jnipp::Method<SunReflectGenericsFactoryGenericsFactory> method(clazz(), "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;");
    return method.call(*this);
}

// private sun.reflect.generics.repository.MethodRepository java.lang.reflect.Method.getGenericInfo()
jnipp::LocalRef<SunReflectGenericsRepositoryMethodRepository> JavaLangReflectMethod::getGenericInfo() const {
    static jnipp::Method<SunReflectGenericsRepositoryMethodRepository> method(clazz(), "getGenericInfo", "()Lsun/reflect/generics/repository/MethodRepository;");
    return method.call(*this);
}

// public java.lang.annotation.Annotation java.lang.reflect.Method.getAnnotation(java.lang.Class)
jnipp::LocalRef<JavaLangAnnotationAnnotation> JavaLangReflectMethod::getAnnotation(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangAnnotationAnnotation,JavaLangClass> method(clazz(), "getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;");
    return method.call(*this, a0);
}

// public java.lang.annotation.Annotation[] java.lang.reflect.Method.getDeclaredAnnotations()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationAnnotation>> JavaLangReflectMethod::getDeclaredAnnotations() const {
    static jnipp::Method<jnipp::Array<JavaLangAnnotationAnnotation>> method(clazz(), "getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}

// public java.lang.Class java.lang.reflect.Method.getReturnType()
jnipp::LocalRef<JavaLangClass> JavaLangReflectMethod::getReturnType() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getReturnType", "()Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.Class[] java.lang.reflect.Method.getParameterTypes()
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangReflectMethod::getParameterTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getParameterTypes", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// java.lang.reflect.Method java.lang.reflect.Method.copy()
jnipp::LocalRef<JavaLangReflectMethod> JavaLangReflectMethod::copy() const {
    static jnipp::Method<JavaLangReflectMethod> method(clazz(), "copy", "()Ljava/lang/reflect/Method;");
    return method.call(*this);
}

// public java.lang.String java.lang.reflect.Method.toGenericString()
jnipp::LocalRef<JavaLangString> JavaLangReflectMethod::toGenericString() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toGenericString", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.reflect.Type java.lang.reflect.Method.getGenericReturnType()
jnipp::LocalRef<JavaLangReflectType> JavaLangReflectMethod::getGenericReturnType() const {
    static jnipp::Method<JavaLangReflectType> method(clazz(), "getGenericReturnType", "()Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> JavaLangReflectMethod::getGenericParameterTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>> method(clazz(), "getGenericParameterTypes", "()[Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public java.lang.Class[] java.lang.reflect.Method.getExceptionTypes()
jnipp::LocalRef<jnipp::Array<JavaLangClass>> JavaLangReflectMethod::getExceptionTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangClass>> method(clazz(), "getExceptionTypes", "()[Ljava/lang/Class;");
    return method.call(*this);
}

// public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericExceptionTypes()
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> JavaLangReflectMethod::getGenericExceptionTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>> method(clazz(), "getGenericExceptionTypes", "()[Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public boolean java.lang.reflect.Method.isBridge()
jboolean JavaLangReflectMethod::isBridge() const {
    static jnipp::Method<jboolean> method(clazz(), "isBridge", "()Z");
    return method.call(*this);
}

// public boolean java.lang.reflect.Method.isVarArgs()
jboolean JavaLangReflectMethod::isVarArgs() const {
    static jnipp::Method<jboolean> method(clazz(), "isVarArgs", "()Z");
    return method.call(*this);
}

// private sun.reflect.MethodAccessor java.lang.reflect.Method.acquireMethodAccessor()
jnipp::LocalRef<SunReflectMethodAccessor> JavaLangReflectMethod::acquireMethodAccessor() const {
    static jnipp::Method<SunReflectMethodAccessor> method(clazz(), "acquireMethodAccessor", "()Lsun/reflect/MethodAccessor;");
    return method.call(*this);
}

// sun.reflect.MethodAccessor java.lang.reflect.Method.getMethodAccessor()
jnipp::LocalRef<SunReflectMethodAccessor> JavaLangReflectMethod::getMethodAccessor() const {
    static jnipp::Method<SunReflectMethodAccessor> method(clazz(), "getMethodAccessor", "()Lsun/reflect/MethodAccessor;");
    return method.call(*this);
}

// void java.lang.reflect.Method.setMethodAccessor(sun.reflect.MethodAccessor)
void JavaLangReflectMethod::setMethodAccessor(const jnipp::Ref<SunReflectMethodAccessor>& a0) const {
    static jnipp::Method<void,SunReflectMethodAccessor> method(clazz(), "setMethodAccessor", "(Lsun/reflect/MethodAccessor;)V");
    method.call(*this, a0);
}

// public java.lang.Object java.lang.reflect.Method.getDefaultValue()
jnipp::LocalRef<JavaLangObject> JavaLangReflectMethod::getDefaultValue() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getDefaultValue", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.annotation.Annotation[][] java.lang.reflect.Method.getParameterAnnotations()
jnipp::LocalRef<jnipp::Array<jnipp::Array<JavaLangAnnotationAnnotation>>> JavaLangReflectMethod::getParameterAnnotations() const {
    static jnipp::Method<jnipp::Array<jnipp::Array<JavaLangAnnotationAnnotation>>> method(clazz(), "getParameterAnnotations", "()[[Ljava/lang/annotation/Annotation;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangReflectType::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/reflect/Type"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilCollection::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Collection"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRefReference::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ref/Reference"));
    return cls;
}

// java.lang.ref.Reference(java.lang.Object,java.lang.ref.ReferenceQueue)
jnipp::LocalRef<JavaLangRefReference> JavaLangRefReference::construct(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangRefReferenceQueue>& a1) {
    static jnipp::Constructor<JavaLangRefReference,JavaLangObject,JavaLangRefReferenceQueue> constructor(clazz(), "(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V");
    return constructor.construct(a0, a1);
}

// java.lang.ref.Reference(java.lang.Object)
jnipp::LocalRef<JavaLangRefReference> JavaLangRefReference::construct(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::Constructor<JavaLangRefReference,JavaLangObject> constructor(clazz(), "(Ljava/lang/Object;)V");
    return constructor.construct(a0);
}

// public java.lang.Object java.lang.ref.Reference.get()
jnipp::LocalRef<JavaLangObject> JavaLangRefReference::get() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "get", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public void java.lang.ref.Reference.clear()
void JavaLangRefReference::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public boolean java.lang.ref.Reference.isEnqueued()
jboolean JavaLangRefReference::isEnqueued() const {
    static jnipp::Method<jboolean> method(clazz(), "isEnqueued", "()Z");
    return method.call(*this);
}

// public boolean java.lang.ref.Reference.enqueue()
jboolean JavaLangRefReference::enqueue() const {
    static jnipp::Method<jboolean> method(clazz(), "enqueue", "()Z");
    return method.call(*this);
}
#undef lock
jnipp::StaticField<JavaLangRefReference_Lock> JavaLangRefReference::lock ("java/lang/ref/Reference", "lock", "Ljava/lang/ref/Reference$Lock;");
#undef pending
jnipp::StaticField<JavaLangRefReference> JavaLangRefReference::pending ("java/lang/ref/Reference", "pending", "Ljava/lang/ref/Reference;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRefSoftReference::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ref/SoftReference"));
    return cls;
}

// public java.lang.ref.SoftReference(java.lang.Object)
jnipp::LocalRef<JavaLangRefSoftReference> JavaLangRefSoftReference::construct(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::Constructor<JavaLangRefSoftReference,JavaLangObject> constructor(clazz(), "(Ljava/lang/Object;)V");
    return constructor.construct(a0);
}

// public java.lang.ref.SoftReference(java.lang.Object,java.lang.ref.ReferenceQueue)
jnipp::LocalRef<JavaLangRefSoftReference> JavaLangRefSoftReference::construct(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangRefReferenceQueue>& a1) {
    static jnipp::Constructor<JavaLangRefSoftReference,JavaLangObject,JavaLangRefReferenceQueue> constructor(clazz(), "(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Object java.lang.ref.SoftReference.get()
jnipp::LocalRef<JavaLangObject> JavaLangRefSoftReference::get() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "get", "()Ljava/lang/Object;");
    return method.call(*this);
}
#undef clock
jnipp::StaticField<jlong> JavaLangRefSoftReference::clock ("java/lang/ref/SoftReference", "clock", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangAnnotationAnnotation::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/annotation/Annotation"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityPermission::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/Permission"));
    return cls;
}

// public java.security.Permission(java.lang.String)
jnipp::LocalRef<JavaSecurityPermission> JavaSecurityPermission::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaSecurityPermission,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public final java.lang.String java.security.Permission.getName()
jnipp::LocalRef<JavaLangString> JavaSecurityPermission::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.security.PermissionCollection java.security.Permission.newPermissionCollection()
jnipp::LocalRef<JavaSecurityPermissionCollection> JavaSecurityPermission::newPermissionCollection() const {
    static jnipp::Method<JavaSecurityPermissionCollection> method(clazz(), "newPermissionCollection", "()Ljava/security/PermissionCollection;");
    return method.call(*this);
}

// public void java.security.Permission.checkGuard(java.lang.Object) throws java.lang.SecurityException
void JavaSecurityPermission::checkGuard(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "checkGuard", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityPermission::serialVersionUID ("java/security/Permission", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsRepositoryFieldRepository::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/repository/FieldRepository"));
    return cls;
}

// protected sun.reflect.generics.repository.FieldRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryFieldRepository> SunReflectGenericsRepositoryFieldRepository::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::Constructor<SunReflectGenericsRepositoryFieldRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> constructor(clazz(), "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)V");
    return constructor.construct(a0, a1);
}

// public static sun.reflect.generics.repository.FieldRepository sun.reflect.generics.repository.FieldRepository.make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryFieldRepository> SunReflectGenericsRepositoryFieldRepository::make(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::StaticMethod<SunReflectGenericsRepositoryFieldRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> method(clazz(), "make", "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/repository/FieldRepository;");
    return method.call(a0, a1);
}

// public java.lang.reflect.Type sun.reflect.generics.repository.FieldRepository.getGenericType()
jnipp::LocalRef<JavaLangReflectType> SunReflectGenericsRepositoryFieldRepository::getGenericType() const {
    static jnipp::Method<JavaLangReflectType> method(clazz(), "getGenericType", "()Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// protected sun.reflect.generics.tree.TypeSignature sun.reflect.generics.repository.FieldRepository.parse(java.lang.String)
jnipp::LocalRef<SunReflectGenericsTreeTypeSignature> SunReflectGenericsRepositoryFieldRepository::parse(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<SunReflectGenericsTreeTypeSignature,JavaLangString> method(clazz(), "parse", "(Ljava/lang/String;)Lsun/reflect/generics/tree/TypeSignature;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectFieldAccessor::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/FieldAccessor"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRunnable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Runnable"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangStackTraceElement::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/StackTraceElement"));
    return cls;
}

// public java.lang.StackTraceElement(java.lang.String,java.lang.String,java.lang.String,int)
jnipp::LocalRef<JavaLangStackTraceElement> JavaLangStackTraceElement::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, jint a3) {
    static jnipp::Constructor<JavaLangStackTraceElement,JavaLangString,JavaLangString,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public boolean java.lang.StackTraceElement.equals(java.lang.Object)
jboolean JavaLangStackTraceElement::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.lang.StackTraceElement.hashCode()
jint JavaLangStackTraceElement::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.String java.lang.StackTraceElement.getFileName()
jnipp::LocalRef<JavaLangString> JavaLangStackTraceElement::getFileName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getFileName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public int java.lang.StackTraceElement.getLineNumber()
jint JavaLangStackTraceElement::getLineNumber() const {
    static jnipp::Method<jint> method(clazz(), "getLineNumber", "()I");
    return method.call(*this);
}

// public java.lang.String java.lang.StackTraceElement.getClassName()
jnipp::LocalRef<JavaLangString> JavaLangStackTraceElement::getClassName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getClassName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.lang.StackTraceElement.getMethodName()
jnipp::LocalRef<JavaLangString> JavaLangStackTraceElement::getMethodName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getMethodName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public boolean java.lang.StackTraceElement.isNativeMethod()
jboolean JavaLangStackTraceElement::isNativeMethod() const {
    static jnipp::Method<jboolean> method(clazz(), "isNativeMethod", "()Z");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangStackTraceElement::serialVersionUID ("java/lang/StackTraceElement", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityBasicPermission::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/BasicPermission"));
    return cls;
}

// public java.security.BasicPermission(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaSecurityBasicPermission> JavaSecurityBasicPermission::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaSecurityBasicPermission,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.security.BasicPermission(java.lang.String)
jnipp::LocalRef<JavaSecurityBasicPermission> JavaSecurityBasicPermission::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaSecurityBasicPermission,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public boolean java.security.BasicPermission.equals(java.lang.Object)
jboolean JavaSecurityBasicPermission::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.security.BasicPermission.hashCode()
jint JavaSecurityBasicPermission::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// final java.lang.String java.security.BasicPermission.getCanonicalName()
jnipp::LocalRef<JavaLangString> JavaSecurityBasicPermission::getCanonicalName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getCanonicalName", "()Ljava/lang/String;");
    return method.call(*this);
}

// private void java.security.BasicPermission.init(java.lang.String)
void JavaSecurityBasicPermission::init(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "init", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// private void java.security.BasicPermission.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaSecurityBasicPermission::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// public boolean java.security.BasicPermission.implies(java.security.Permission)
jboolean JavaSecurityBasicPermission::implies(const jnipp::Ref<JavaSecurityPermission>& a0) const {
    static jnipp::Method<jboolean,JavaSecurityPermission> method(clazz(), "implies", "(Ljava/security/Permission;)Z");
    return method.call(*this, a0);
}

// public java.lang.String java.security.BasicPermission.getActions()
jnipp::LocalRef<JavaLangString> JavaSecurityBasicPermission::getActions() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getActions", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.security.PermissionCollection java.security.BasicPermission.newPermissionCollection()
jnipp::LocalRef<JavaSecurityPermissionCollection> JavaSecurityBasicPermission::newPermissionCollection() const {
    static jnipp::Method<JavaSecurityPermissionCollection> method(clazz(), "newPermissionCollection", "()Ljava/security/PermissionCollection;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityBasicPermission::serialVersionUID ("java/security/BasicPermission", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRuntimePermission::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/RuntimePermission"));
    return cls;
}

// public java.lang.RuntimePermission(java.lang.String)
jnipp::LocalRef<JavaLangRuntimePermission> JavaLangRuntimePermission::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangRuntimePermission,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.RuntimePermission(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangRuntimePermission> JavaLangRuntimePermission::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaLangRuntimePermission,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangRuntimePermission::serialVersionUID ("java/lang/RuntimePermission", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& SunNioChInterruptible::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/nio/ch/Interruptible"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThread_State::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Thread$State"));
    return cls;
}

// private java.lang.Thread$State(java.lang.String,int)
jnipp::LocalRef<JavaLangThread_State> JavaLangThread_State::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaLangThread_State,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public static java.lang.Thread$State[] java.lang.Thread$State.values()
jnipp::LocalRef<jnipp::Array<JavaLangThread_State>> JavaLangThread_State::values() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangThread_State>> method(clazz(), "values", "()[Ljava/lang/Thread$State;");
    return method.call();
}

// public static java.lang.Thread$State java.lang.Thread$State.valueOf(java.lang.String)
jnipp::LocalRef<JavaLangThread_State> JavaLangThread_State::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangThread_State,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/lang/Thread$State;");
    return method.call(a0);
}
#undef NEW
const jnipp::StaticField<JavaLangThread_State> JavaLangThread_State::NEW ("java/lang/Thread$State", "NEW", "Ljava/lang/Thread$State;");
#undef RUNNABLE
const jnipp::StaticField<JavaLangThread_State> JavaLangThread_State::RUNNABLE ("java/lang/Thread$State", "RUNNABLE", "Ljava/lang/Thread$State;");
#undef BLOCKED
const jnipp::StaticField<JavaLangThread_State> JavaLangThread_State::BLOCKED ("java/lang/Thread$State", "BLOCKED", "Ljava/lang/Thread$State;");
#undef WAITING
const jnipp::StaticField<JavaLangThread_State> JavaLangThread_State::WAITING ("java/lang/Thread$State", "WAITING", "Ljava/lang/Thread$State;");
#undef TIMED_WAITING
const jnipp::StaticField<JavaLangThread_State> JavaLangThread_State::TIMED_WAITING ("java/lang/Thread$State", "TIMED_WAITING", "Ljava/lang/Thread$State;");
#undef TERMINATED
const jnipp::StaticField<JavaLangThread_State> JavaLangThread_State::TERMINATED ("java/lang/Thread$State", "TERMINATED", "Ljava/lang/Thread$State;");
#undef $VALUES
const jnipp::StaticField<jnipp::Array<JavaLangThread_State>> JavaLangThread_State::$VALUES ("java/lang/Thread$State", "$VALUES", "[Ljava/lang/Thread$State;");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityAccessControlContext::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/AccessControlContext"));
    return cls;
}

// java.security.AccessControlContext(java.security.ProtectionDomain[],boolean)
jnipp::LocalRef<JavaSecurityAccessControlContext> JavaSecurityAccessControlContext::construct(const jnipp::Ref<jnipp::Array<JavaSecurityProtectionDomain>>& a0, jboolean a1) {
    static jnipp::Constructor<JavaSecurityAccessControlContext,jnipp::Array<JavaSecurityProtectionDomain>,jboolean> constructor(clazz(), "([Ljava/security/ProtectionDomain;Z)V");
    return constructor.construct(a0, a1);
}

// java.security.AccessControlContext(java.security.ProtectionDomain[],java.security.DomainCombiner)
jnipp::LocalRef<JavaSecurityAccessControlContext> JavaSecurityAccessControlContext::construct(const jnipp::Ref<jnipp::Array<JavaSecurityProtectionDomain>>& a0, const jnipp::Ref<JavaSecurityDomainCombiner>& a1) {
    static jnipp::Constructor<JavaSecurityAccessControlContext,jnipp::Array<JavaSecurityProtectionDomain>,JavaSecurityDomainCombiner> constructor(clazz(), "([Ljava/security/ProtectionDomain;Ljava/security/DomainCombiner;)V");
    return constructor.construct(a0, a1);
}

// public java.security.AccessControlContext(java.security.AccessControlContext,java.security.DomainCombiner)
jnipp::LocalRef<JavaSecurityAccessControlContext> JavaSecurityAccessControlContext::construct(const jnipp::Ref<JavaSecurityAccessControlContext>& a0, const jnipp::Ref<JavaSecurityDomainCombiner>& a1) {
    static jnipp::Constructor<JavaSecurityAccessControlContext,JavaSecurityAccessControlContext,JavaSecurityDomainCombiner> constructor(clazz(), "(Ljava/security/AccessControlContext;Ljava/security/DomainCombiner;)V");
    return constructor.construct(a0, a1);
}

// public java.security.AccessControlContext(java.security.ProtectionDomain[])
jnipp::LocalRef<JavaSecurityAccessControlContext> JavaSecurityAccessControlContext::construct(const jnipp::Ref<jnipp::Array<JavaSecurityProtectionDomain>>& a0) {
    static jnipp::Constructor<JavaSecurityAccessControlContext,jnipp::Array<JavaSecurityProtectionDomain>> constructor(clazz(), "([Ljava/security/ProtectionDomain;)V");
    return constructor.construct(a0);
}

// java.security.AccessControlContext(java.security.ProtectionDomain[],java.security.AccessControlContext)
jnipp::LocalRef<JavaSecurityAccessControlContext> JavaSecurityAccessControlContext::construct(const jnipp::Ref<jnipp::Array<JavaSecurityProtectionDomain>>& a0, const jnipp::Ref<JavaSecurityAccessControlContext>& a1) {
    static jnipp::Constructor<JavaSecurityAccessControlContext,jnipp::Array<JavaSecurityProtectionDomain>,JavaSecurityAccessControlContext> constructor(clazz(), "([Ljava/security/ProtectionDomain;Ljava/security/AccessControlContext;)V");
    return constructor.construct(a0, a1);
}

// boolean java.security.AccessControlContext.isPrivileged()
jboolean JavaSecurityAccessControlContext::isPrivileged() const {
    static jnipp::Method<jboolean> method(clazz(), "isPrivileged", "()Z");
    return method.call(*this);
}

// public boolean java.security.AccessControlContext.equals(java.lang.Object)
jboolean JavaSecurityAccessControlContext::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.security.AccessControlContext.hashCode()
jint JavaSecurityAccessControlContext::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public void java.security.AccessControlContext.checkPermission(java.security.Permission) throws java.security.AccessControlException
void JavaSecurityAccessControlContext::checkPermission(const jnipp::Ref<JavaSecurityPermission>& a0) const {
    static jnipp::Method<void,JavaSecurityPermission> method(clazz(), "checkPermission", "(Ljava/security/Permission;)V");
    method.call(*this, a0);
}

// static sun.security.util.Debug java.security.AccessControlContext.getDebug()
jnipp::LocalRef<SunSecurityUtilDebug> JavaSecurityAccessControlContext::getDebug() {
    static jnipp::StaticMethod<SunSecurityUtilDebug> method(clazz(), "getDebug", "()Lsun/security/util/Debug;");
    return method.call();
}

// java.security.ProtectionDomain[] java.security.AccessControlContext.getContext()
jnipp::LocalRef<jnipp::Array<JavaSecurityProtectionDomain>> JavaSecurityAccessControlContext::getContext() const {
    static jnipp::Method<jnipp::Array<JavaSecurityProtectionDomain>> method(clazz(), "getContext", "()[Ljava/security/ProtectionDomain;");
    return method.call(*this);
}

// java.security.DomainCombiner java.security.AccessControlContext.getAssignedCombiner()
jnipp::LocalRef<JavaSecurityDomainCombiner> JavaSecurityAccessControlContext::getAssignedCombiner() const {
    static jnipp::Method<JavaSecurityDomainCombiner> method(clazz(), "getAssignedCombiner", "()Ljava/security/DomainCombiner;");
    return method.call(*this);
}

// public java.security.DomainCombiner java.security.AccessControlContext.getDomainCombiner()
jnipp::LocalRef<JavaSecurityDomainCombiner> JavaSecurityAccessControlContext::getDomainCombiner() const {
    static jnipp::Method<JavaSecurityDomainCombiner> method(clazz(), "getDomainCombiner", "()Ljava/security/DomainCombiner;");
    return method.call(*this);
}

// java.security.AccessControlContext java.security.AccessControlContext.optimize()
jnipp::LocalRef<JavaSecurityAccessControlContext> JavaSecurityAccessControlContext::optimize() const {
    static jnipp::Method<JavaSecurityAccessControlContext> method(clazz(), "optimize", "()Ljava/security/AccessControlContext;");
    return method.call(*this);
}

// private java.security.AccessControlContext java.security.AccessControlContext.goCombiner(java.security.ProtectionDomain[],java.security.AccessControlContext)
jnipp::LocalRef<JavaSecurityAccessControlContext> JavaSecurityAccessControlContext::goCombiner(const jnipp::Ref<jnipp::Array<JavaSecurityProtectionDomain>>& a0, const jnipp::Ref<JavaSecurityAccessControlContext>& a1) const {
    static jnipp::Method<JavaSecurityAccessControlContext,jnipp::Array<JavaSecurityProtectionDomain>,JavaSecurityAccessControlContext> method(clazz(), "goCombiner", "([Ljava/security/ProtectionDomain;Ljava/security/AccessControlContext;)Ljava/security/AccessControlContext;");
    return method.call(*this, a0, a1);
}

// private boolean java.security.AccessControlContext.containsAllPDs(java.security.AccessControlContext)
jboolean JavaSecurityAccessControlContext::containsAllPDs(const jnipp::Ref<JavaSecurityAccessControlContext>& a0) const {
    static jnipp::Method<jboolean,JavaSecurityAccessControlContext> method(clazz(), "containsAllPDs", "(Ljava/security/AccessControlContext;)Z");
    return method.call(*this, a0);
}
#undef debugInit
jnipp::StaticField<jboolean> JavaSecurityAccessControlContext::debugInit ("java/security/AccessControlContext", "debugInit", "Z");
#undef debug
jnipp::StaticField<SunSecurityUtilDebug> JavaSecurityAccessControlContext::debug ("java/security/AccessControlContext", "debug", "Lsun/security/util/Debug;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThread_UncaughtExceptionHandler::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Thread$UncaughtExceptionHandler"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThreadGroup::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ThreadGroup"));
    return cls;
}

// private java.lang.ThreadGroup(java.lang.Void,java.lang.ThreadGroup,java.lang.String)
jnipp::LocalRef<JavaLangThreadGroup> JavaLangThreadGroup::construct(const jnipp::Ref<JavaLangVoid>& a0, const jnipp::Ref<JavaLangThreadGroup>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::Constructor<JavaLangThreadGroup,JavaLangVoid,JavaLangThreadGroup,JavaLangString> constructor(clazz(), "(Ljava/lang/Void;Ljava/lang/ThreadGroup;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.lang.ThreadGroup(java.lang.ThreadGroup,java.lang.String)
jnipp::LocalRef<JavaLangThreadGroup> JavaLangThreadGroup::construct(const jnipp::Ref<JavaLangThreadGroup>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaLangThreadGroup,JavaLangThreadGroup,JavaLangString> constructor(clazz(), "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.ThreadGroup(java.lang.String)
jnipp::LocalRef<JavaLangThreadGroup> JavaLangThreadGroup::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangThreadGroup,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// private java.lang.ThreadGroup()
jnipp::LocalRef<JavaLangThreadGroup> JavaLangThreadGroup::construct() {
    static jnipp::Constructor<JavaLangThreadGroup> constructor(clazz(), "()V");
    return constructor.construct();
}

// void java.lang.ThreadGroup.add(java.lang.Thread)
void JavaLangThreadGroup::add(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<void,JavaLangThread> method(clazz(), "add", "(Ljava/lang/Thread;)V");
    method.call(*this, a0);
}

// private final void java.lang.ThreadGroup.add(java.lang.ThreadGroup)
void JavaLangThreadGroup::add(const jnipp::Ref<JavaLangThreadGroup>& a0) const {
    static jnipp::Method<void,JavaLangThreadGroup> method(clazz(), "add", "(Ljava/lang/ThreadGroup;)V");
    method.call(*this, a0);
}

// private void java.lang.ThreadGroup.remove(java.lang.ThreadGroup)
void JavaLangThreadGroup::remove(const jnipp::Ref<JavaLangThreadGroup>& a0) const {
    static jnipp::Method<void,JavaLangThreadGroup> method(clazz(), "remove", "(Ljava/lang/ThreadGroup;)V");
    method.call(*this, a0);
}

// private void java.lang.ThreadGroup.remove(java.lang.Thread)
void JavaLangThreadGroup::remove(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<void,JavaLangThread> method(clazz(), "remove", "(Ljava/lang/Thread;)V");
    method.call(*this, a0);
}

// public void java.lang.ThreadGroup.uncaughtException(java.lang.Thread,java.lang.Throwable)
void JavaLangThreadGroup::uncaughtException(const jnipp::Ref<JavaLangThread>& a0, const jnipp::Ref<JavaLangThrowable>& a1) const {
    static jnipp::Method<void,JavaLangThread,JavaLangThrowable> method(clazz(), "uncaughtException", "(Ljava/lang/Thread;Ljava/lang/Throwable;)V");
    method.call(*this, a0, a1);
}

// public final java.lang.String java.lang.ThreadGroup.getName()
jnipp::LocalRef<JavaLangString> JavaLangThreadGroup::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public final java.lang.ThreadGroup java.lang.ThreadGroup.getParent()
jnipp::LocalRef<JavaLangThreadGroup> JavaLangThreadGroup::getParent() const {
    static jnipp::Method<JavaLangThreadGroup> method(clazz(), "getParent", "()Ljava/lang/ThreadGroup;");
    return method.call(*this);
}

// public final void java.lang.ThreadGroup.setDaemon(boolean)
void JavaLangThreadGroup::setDaemon(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setDaemon", "(Z)V");
    method.call(*this, a0);
}

// public final void java.lang.ThreadGroup.stop()
void JavaLangThreadGroup::stop() const {
    static jnipp::Method<void> method(clazz(), "stop", "()V");
    method.call(*this);
}

// public final void java.lang.ThreadGroup.interrupt()
void JavaLangThreadGroup::interrupt() const {
    static jnipp::Method<void> method(clazz(), "interrupt", "()V");
    method.call(*this);
}

// public final void java.lang.ThreadGroup.destroy()
void JavaLangThreadGroup::destroy() const {
    static jnipp::Method<void> method(clazz(), "destroy", "()V");
    method.call(*this);
}

// public final void java.lang.ThreadGroup.suspend()
void JavaLangThreadGroup::suspend() const {
    static jnipp::Method<void> method(clazz(), "suspend", "()V");
    method.call(*this);
}

// public final void java.lang.ThreadGroup.resume()
void JavaLangThreadGroup::resume() const {
    static jnipp::Method<void> method(clazz(), "resume", "()V");
    method.call(*this);
}

// public int java.lang.ThreadGroup.activeCount()
jint JavaLangThreadGroup::activeCount() const {
    static jnipp::Method<jint> method(clazz(), "activeCount", "()I");
    return method.call(*this);
}

// private int java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[],int,boolean)
jint JavaLangThreadGroup::enumerate(const jnipp::Ref<jnipp::Array<JavaLangThreadGroup>>& a0, jint a1, jboolean a2) const {
    static jnipp::Method<jint,jnipp::Array<JavaLangThreadGroup>,jint,jboolean> method(clazz(), "enumerate", "([Ljava/lang/ThreadGroup;IZ)I");
    return method.call(*this, a0, a1, a2);
}

// public int java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[],boolean)
jint JavaLangThreadGroup::enumerate(const jnipp::Ref<jnipp::Array<JavaLangThreadGroup>>& a0, jboolean a1) const {
    static jnipp::Method<jint,jnipp::Array<JavaLangThreadGroup>,jboolean> method(clazz(), "enumerate", "([Ljava/lang/ThreadGroup;Z)I");
    return method.call(*this, a0, a1);
}

// public int java.lang.ThreadGroup.enumerate(java.lang.Thread[],boolean)
jint JavaLangThreadGroup::enumerate(const jnipp::Ref<jnipp::Array<JavaLangThread>>& a0, jboolean a1) const {
    static jnipp::Method<jint,jnipp::Array<JavaLangThread>,jboolean> method(clazz(), "enumerate", "([Ljava/lang/Thread;Z)I");
    return method.call(*this, a0, a1);
}

// private int java.lang.ThreadGroup.enumerate(java.lang.Thread[],int,boolean)
jint JavaLangThreadGroup::enumerate(const jnipp::Ref<jnipp::Array<JavaLangThread>>& a0, jint a1, jboolean a2) const {
    static jnipp::Method<jint,jnipp::Array<JavaLangThread>,jint,jboolean> method(clazz(), "enumerate", "([Ljava/lang/Thread;IZ)I");
    return method.call(*this, a0, a1, a2);
}

// public int java.lang.ThreadGroup.enumerate(java.lang.Thread[])
jint JavaLangThreadGroup::enumerate(const jnipp::Ref<jnipp::Array<JavaLangThread>>& a0) const {
    static jnipp::Method<jint,jnipp::Array<JavaLangThread>> method(clazz(), "enumerate", "([Ljava/lang/Thread;)I");
    return method.call(*this, a0);
}

// public int java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[])
jint JavaLangThreadGroup::enumerate(const jnipp::Ref<jnipp::Array<JavaLangThreadGroup>>& a0) const {
    static jnipp::Method<jint,jnipp::Array<JavaLangThreadGroup>> method(clazz(), "enumerate", "([Ljava/lang/ThreadGroup;)I");
    return method.call(*this, a0);
}

// public final boolean java.lang.ThreadGroup.isDaemon()
jboolean JavaLangThreadGroup::isDaemon() const {
    static jnipp::Method<jboolean> method(clazz(), "isDaemon", "()Z");
    return method.call(*this);
}

// public final void java.lang.ThreadGroup.checkAccess()
void JavaLangThreadGroup::checkAccess() const {
    static jnipp::Method<void> method(clazz(), "checkAccess", "()V");
    method.call(*this);
}

// void java.lang.ThreadGroup.addUnstarted()
void JavaLangThreadGroup::addUnstarted() const {
    static jnipp::Method<void> method(clazz(), "addUnstarted", "()V");
    method.call(*this);
}

// void java.lang.ThreadGroup.threadStartFailed(java.lang.Thread)
void JavaLangThreadGroup::threadStartFailed(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<void,JavaLangThread> method(clazz(), "threadStartFailed", "(Ljava/lang/Thread;)V");
    method.call(*this, a0);
}

// void java.lang.ThreadGroup.threadTerminated(java.lang.Thread)
void JavaLangThreadGroup::threadTerminated(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<void,JavaLangThread> method(clazz(), "threadTerminated", "(Ljava/lang/Thread;)V");
    method.call(*this, a0);
}

// public final int java.lang.ThreadGroup.getMaxPriority()
jint JavaLangThreadGroup::getMaxPriority() const {
    static jnipp::Method<jint> method(clazz(), "getMaxPriority", "()I");
    return method.call(*this);
}

// private static java.lang.Void java.lang.ThreadGroup.checkParentAccess(java.lang.ThreadGroup)
jnipp::LocalRef<JavaLangVoid> JavaLangThreadGroup::checkParentAccess(const jnipp::Ref<JavaLangThreadGroup>& a0) {
    static jnipp::StaticMethod<JavaLangVoid,JavaLangThreadGroup> method(clazz(), "checkParentAccess", "(Ljava/lang/ThreadGroup;)Ljava/lang/Void;");
    return method.call(a0);
}

// public synchronized boolean java.lang.ThreadGroup.isDestroyed()
jboolean JavaLangThreadGroup::isDestroyed() const {
    static jnipp::Method<jboolean> method(clazz(), "isDestroyed", "()Z");
    return method.call(*this);
}

// public final void java.lang.ThreadGroup.setMaxPriority(int)
void JavaLangThreadGroup::setMaxPriority(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setMaxPriority", "(I)V");
    method.call(*this, a0);
}

// public final boolean java.lang.ThreadGroup.parentOf(java.lang.ThreadGroup)
jboolean JavaLangThreadGroup::parentOf(const jnipp::Ref<JavaLangThreadGroup>& a0) const {
    static jnipp::Method<jboolean,JavaLangThreadGroup> method(clazz(), "parentOf", "(Ljava/lang/ThreadGroup;)Z");
    return method.call(*this, a0);
}

// public int java.lang.ThreadGroup.activeGroupCount()
jint JavaLangThreadGroup::activeGroupCount() const {
    static jnipp::Method<jint> method(clazz(), "activeGroupCount", "()I");
    return method.call(*this);
}

// private boolean java.lang.ThreadGroup.stopOrSuspend(boolean)
jboolean JavaLangThreadGroup::stopOrSuspend(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "stopOrSuspend", "(Z)Z");
    return method.call(*this, a0);
}

// public void java.lang.ThreadGroup.list()
void JavaLangThreadGroup::list() const {
    static jnipp::Method<void> method(clazz(), "list", "()V");
    method.call(*this);
}

// void java.lang.ThreadGroup.list(java.io.PrintStream,int)
void JavaLangThreadGroup::list(const jnipp::Ref<JavaIoPrintStream>& a0, jint a1) const {
    static jnipp::Method<void,JavaIoPrintStream,jint> method(clazz(), "list", "(Ljava/io/PrintStream;I)V");
    method.call(*this, a0, a1);
}

// public boolean java.lang.ThreadGroup.allowThreadSuspension(boolean)
jboolean JavaLangThreadGroup::allowThreadSuspension(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "allowThreadSuspension", "(Z)Z");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRefWeakReference::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ref/WeakReference"));
    return cls;
}

// public java.lang.ref.WeakReference(java.lang.Object)
jnipp::LocalRef<JavaLangRefWeakReference> JavaLangRefWeakReference::construct(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::Constructor<JavaLangRefWeakReference,JavaLangObject> constructor(clazz(), "(Ljava/lang/Object;)V");
    return constructor.construct(a0);
}

// public java.lang.ref.WeakReference(java.lang.Object,java.lang.ref.ReferenceQueue)
jnipp::LocalRef<JavaLangRefWeakReference> JavaLangRefWeakReference::construct(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangRefReferenceQueue>& a1) {
    static jnipp::Constructor<JavaLangRefWeakReference,JavaLangObject,JavaLangRefReferenceQueue> constructor(clazz(), "(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V");
    return constructor.construct(a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThreadLocal_ThreadLocalMap_Entry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ThreadLocal$ThreadLocalMap$Entry"));
    return cls;
}

// java.lang.ThreadLocal$ThreadLocalMap$Entry(java.lang.ThreadLocal,java.lang.Object)
jnipp::LocalRef<JavaLangThreadLocal_ThreadLocalMap_Entry> JavaLangThreadLocal_ThreadLocalMap_Entry::construct(const jnipp::Ref<JavaLangThreadLocal>& a0, const jnipp::Ref<JavaLangObject>& a1) {
    static jnipp::Constructor<JavaLangThreadLocal_ThreadLocalMap_Entry,JavaLangThreadLocal,JavaLangObject> constructor(clazz(), "(Ljava/lang/ThreadLocal;Ljava/lang/Object;)V");
    return constructor.construct(a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThreadLocal_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ThreadLocal$1"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunMiscUnsafe::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/misc/Unsafe"));
    return cls;
}

// private sun.misc.Unsafe()
jnipp::LocalRef<SunMiscUnsafe> SunMiscUnsafe::construct() {
    static jnipp::Constructor<SunMiscUnsafe> constructor(clazz(), "()V");
    return constructor.construct();
}

// public native java.lang.Object sun.misc.Unsafe.allocateInstance(java.lang.Class) throws java.lang.InstantiationException
jnipp::LocalRef<JavaLangObject> SunMiscUnsafe::allocateInstance(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangClass> method(clazz(), "allocateInstance", "(Ljava/lang/Class;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public native void sun.misc.Unsafe.copyMemory(java.lang.Object,long,java.lang.Object,long,long)
void SunMiscUnsafe::copyMemory(const jnipp::Ref<JavaLangObject>& a0, jlong a1, const jnipp::Ref<JavaLangObject>& a2, jlong a3, jlong a4) const {
    static jnipp::Method<void,JavaLangObject,jlong,JavaLangObject,jlong,jlong> method(clazz(), "copyMemory", "(Ljava/lang/Object;JLjava/lang/Object;JJ)V");
    method.call(*this, a0, a1, a2, a3, a4);
}

// public void sun.misc.Unsafe.copyMemory(long,long,long)
void SunMiscUnsafe::copyMemory(jlong a0, jlong a1, jlong a2) const {
    static jnipp::Method<void,jlong,jlong,jlong> method(clazz(), "copyMemory", "(JJJ)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.park(boolean,long)
void SunMiscUnsafe::park(jboolean a0, jlong a1) const {
    static jnipp::Method<void,jboolean,jlong> method(clazz(), "park", "(ZJ)V");
    method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.unpark(java.lang.Object)
void SunMiscUnsafe::unpark(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "unpark", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public java.lang.Object sun.misc.Unsafe.getObject(java.lang.Object,int)
jnipp::LocalRef<JavaLangObject> SunMiscUnsafe::getObject(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,jint> method(clazz(), "getObject", "(Ljava/lang/Object;I)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public native java.lang.Object sun.misc.Unsafe.getObject(java.lang.Object,long)
jnipp::LocalRef<JavaLangObject> SunMiscUnsafe::getObject(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,jlong> method(clazz(), "getObject", "(Ljava/lang/Object;J)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putObject(java.lang.Object,long,java.lang.Object)
void SunMiscUnsafe::putObject(const jnipp::Ref<JavaLangObject>& a0, jlong a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,JavaLangObject> method(clazz(), "putObject", "(Ljava/lang/Object;JLjava/lang/Object;)V");
    method.call(*this, a0, a1, a2);
}

// public void sun.misc.Unsafe.putObject(java.lang.Object,int,java.lang.Object)
void SunMiscUnsafe::putObject(const jnipp::Ref<JavaLangObject>& a0, jint a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<void,JavaLangObject,jint,JavaLangObject> method(clazz(), "putObject", "(Ljava/lang/Object;ILjava/lang/Object;)V");
    method.call(*this, a0, a1, a2);
}

// public native boolean sun.misc.Unsafe.getBoolean(java.lang.Object,long)
jboolean SunMiscUnsafe::getBoolean(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jboolean,JavaLangObject,jlong> method(clazz(), "getBoolean", "(Ljava/lang/Object;J)Z");
    return method.call(*this, a0, a1);
}

// public boolean sun.misc.Unsafe.getBoolean(java.lang.Object,int)
jboolean SunMiscUnsafe::getBoolean(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jboolean,JavaLangObject,jint> method(clazz(), "getBoolean", "(Ljava/lang/Object;I)Z");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putBoolean(java.lang.Object,long,boolean)
void SunMiscUnsafe::putBoolean(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jboolean a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jboolean> method(clazz(), "putBoolean", "(Ljava/lang/Object;JZ)V");
    method.call(*this, a0, a1, a2);
}

// public void sun.misc.Unsafe.putBoolean(java.lang.Object,int,boolean)
void SunMiscUnsafe::putBoolean(const jnipp::Ref<JavaLangObject>& a0, jint a1, jboolean a2) const {
    static jnipp::Method<void,JavaLangObject,jint,jboolean> method(clazz(), "putBoolean", "(Ljava/lang/Object;IZ)V");
    method.call(*this, a0, a1, a2);
}

// public byte sun.misc.Unsafe.getByte(java.lang.Object,int)
jbyte SunMiscUnsafe::getByte(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jbyte,JavaLangObject,jint> method(clazz(), "getByte", "(Ljava/lang/Object;I)B");
    return method.call(*this, a0, a1);
}

// public native byte sun.misc.Unsafe.getByte(long)
jbyte SunMiscUnsafe::getByte(jlong a0) const {
    static jnipp::Method<jbyte,jlong> method(clazz(), "getByte", "(J)B");
    return method.call(*this, a0);
}

// public native byte sun.misc.Unsafe.getByte(java.lang.Object,long)
jbyte SunMiscUnsafe::getByte(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jbyte,JavaLangObject,jlong> method(clazz(), "getByte", "(Ljava/lang/Object;J)B");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putByte(long,byte)
void SunMiscUnsafe::putByte(jlong a0, jbyte a1) const {
    static jnipp::Method<void,jlong,jbyte> method(clazz(), "putByte", "(JB)V");
    method.call(*this, a0, a1);
}

// public void sun.misc.Unsafe.putByte(java.lang.Object,int,byte)
void SunMiscUnsafe::putByte(const jnipp::Ref<JavaLangObject>& a0, jint a1, jbyte a2) const {
    static jnipp::Method<void,JavaLangObject,jint,jbyte> method(clazz(), "putByte", "(Ljava/lang/Object;IB)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putByte(java.lang.Object,long,byte)
void SunMiscUnsafe::putByte(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jbyte a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jbyte> method(clazz(), "putByte", "(Ljava/lang/Object;JB)V");
    method.call(*this, a0, a1, a2);
}

// public native short sun.misc.Unsafe.getShort(java.lang.Object,long)
jshort SunMiscUnsafe::getShort(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jshort,JavaLangObject,jlong> method(clazz(), "getShort", "(Ljava/lang/Object;J)S");
    return method.call(*this, a0, a1);
}

// public short sun.misc.Unsafe.getShort(java.lang.Object,int)
jshort SunMiscUnsafe::getShort(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jshort,JavaLangObject,jint> method(clazz(), "getShort", "(Ljava/lang/Object;I)S");
    return method.call(*this, a0, a1);
}

// public native short sun.misc.Unsafe.getShort(long)
jshort SunMiscUnsafe::getShort(jlong a0) const {
    static jnipp::Method<jshort,jlong> method(clazz(), "getShort", "(J)S");
    return method.call(*this, a0);
}

// public void sun.misc.Unsafe.putShort(java.lang.Object,int,short)
void SunMiscUnsafe::putShort(const jnipp::Ref<JavaLangObject>& a0, jint a1, jshort a2) const {
    static jnipp::Method<void,JavaLangObject,jint,jshort> method(clazz(), "putShort", "(Ljava/lang/Object;IS)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putShort(java.lang.Object,long,short)
void SunMiscUnsafe::putShort(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jshort a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jshort> method(clazz(), "putShort", "(Ljava/lang/Object;JS)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putShort(long,short)
void SunMiscUnsafe::putShort(jlong a0, jshort a1) const {
    static jnipp::Method<void,jlong,jshort> method(clazz(), "putShort", "(JS)V");
    method.call(*this, a0, a1);
}

// public char sun.misc.Unsafe.getChar(java.lang.Object,int)
jchar SunMiscUnsafe::getChar(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jchar,JavaLangObject,jint> method(clazz(), "getChar", "(Ljava/lang/Object;I)C");
    return method.call(*this, a0, a1);
}

// public native char sun.misc.Unsafe.getChar(long)
jchar SunMiscUnsafe::getChar(jlong a0) const {
    static jnipp::Method<jchar,jlong> method(clazz(), "getChar", "(J)C");
    return method.call(*this, a0);
}

// public native char sun.misc.Unsafe.getChar(java.lang.Object,long)
jchar SunMiscUnsafe::getChar(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jchar,JavaLangObject,jlong> method(clazz(), "getChar", "(Ljava/lang/Object;J)C");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putChar(long,char)
void SunMiscUnsafe::putChar(jlong a0, jchar a1) const {
    static jnipp::Method<void,jlong,jchar> method(clazz(), "putChar", "(JC)V");
    method.call(*this, a0, a1);
}

// public void sun.misc.Unsafe.putChar(java.lang.Object,int,char)
void SunMiscUnsafe::putChar(const jnipp::Ref<JavaLangObject>& a0, jint a1, jchar a2) const {
    static jnipp::Method<void,JavaLangObject,jint,jchar> method(clazz(), "putChar", "(Ljava/lang/Object;IC)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putChar(java.lang.Object,long,char)
void SunMiscUnsafe::putChar(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jchar a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jchar> method(clazz(), "putChar", "(Ljava/lang/Object;JC)V");
    method.call(*this, a0, a1, a2);
}

// public native int sun.misc.Unsafe.getInt(java.lang.Object,long)
jint SunMiscUnsafe::getInt(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jint,JavaLangObject,jlong> method(clazz(), "getInt", "(Ljava/lang/Object;J)I");
    return method.call(*this, a0, a1);
}

// public native int sun.misc.Unsafe.getInt(long)
jint SunMiscUnsafe::getInt(jlong a0) const {
    static jnipp::Method<jint,jlong> method(clazz(), "getInt", "(J)I");
    return method.call(*this, a0);
}

// public int sun.misc.Unsafe.getInt(java.lang.Object,int)
jint SunMiscUnsafe::getInt(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangObject,jint> method(clazz(), "getInt", "(Ljava/lang/Object;I)I");
    return method.call(*this, a0, a1);
}

// public void sun.misc.Unsafe.putInt(java.lang.Object,int,int)
void SunMiscUnsafe::putInt(const jnipp::Ref<JavaLangObject>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,JavaLangObject,jint,jint> method(clazz(), "putInt", "(Ljava/lang/Object;II)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putInt(long,int)
void SunMiscUnsafe::putInt(jlong a0, jint a1) const {
    static jnipp::Method<void,jlong,jint> method(clazz(), "putInt", "(JI)V");
    method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putInt(java.lang.Object,long,int)
void SunMiscUnsafe::putInt(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jint a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jint> method(clazz(), "putInt", "(Ljava/lang/Object;JI)V");
    method.call(*this, a0, a1, a2);
}

// public native long sun.misc.Unsafe.getLong(java.lang.Object,long)
jlong SunMiscUnsafe::getLong(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jlong,JavaLangObject,jlong> method(clazz(), "getLong", "(Ljava/lang/Object;J)J");
    return method.call(*this, a0, a1);
}

// public native long sun.misc.Unsafe.getLong(long)
jlong SunMiscUnsafe::getLong(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "getLong", "(J)J");
    return method.call(*this, a0);
}

// public long sun.misc.Unsafe.getLong(java.lang.Object,int)
jlong SunMiscUnsafe::getLong(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jlong,JavaLangObject,jint> method(clazz(), "getLong", "(Ljava/lang/Object;I)J");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putLong(long,long)
void SunMiscUnsafe::putLong(jlong a0, jlong a1) const {
    static jnipp::Method<void,jlong,jlong> method(clazz(), "putLong", "(JJ)V");
    method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putLong(java.lang.Object,long,long)
void SunMiscUnsafe::putLong(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jlong a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jlong> method(clazz(), "putLong", "(Ljava/lang/Object;JJ)V");
    method.call(*this, a0, a1, a2);
}

// public void sun.misc.Unsafe.putLong(java.lang.Object,int,long)
void SunMiscUnsafe::putLong(const jnipp::Ref<JavaLangObject>& a0, jint a1, jlong a2) const {
    static jnipp::Method<void,JavaLangObject,jint,jlong> method(clazz(), "putLong", "(Ljava/lang/Object;IJ)V");
    method.call(*this, a0, a1, a2);
}

// public float sun.misc.Unsafe.getFloat(java.lang.Object,int)
jfloat SunMiscUnsafe::getFloat(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jfloat,JavaLangObject,jint> method(clazz(), "getFloat", "(Ljava/lang/Object;I)F");
    return method.call(*this, a0, a1);
}

// public native float sun.misc.Unsafe.getFloat(long)
jfloat SunMiscUnsafe::getFloat(jlong a0) const {
    static jnipp::Method<jfloat,jlong> method(clazz(), "getFloat", "(J)F");
    return method.call(*this, a0);
}

// public native float sun.misc.Unsafe.getFloat(java.lang.Object,long)
jfloat SunMiscUnsafe::getFloat(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jfloat,JavaLangObject,jlong> method(clazz(), "getFloat", "(Ljava/lang/Object;J)F");
    return method.call(*this, a0, a1);
}

// public void sun.misc.Unsafe.putFloat(java.lang.Object,int,float)
void SunMiscUnsafe::putFloat(const jnipp::Ref<JavaLangObject>& a0, jint a1, jfloat a2) const {
    static jnipp::Method<void,JavaLangObject,jint,jfloat> method(clazz(), "putFloat", "(Ljava/lang/Object;IF)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putFloat(long,float)
void SunMiscUnsafe::putFloat(jlong a0, jfloat a1) const {
    static jnipp::Method<void,jlong,jfloat> method(clazz(), "putFloat", "(JF)V");
    method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putFloat(java.lang.Object,long,float)
void SunMiscUnsafe::putFloat(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jfloat a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jfloat> method(clazz(), "putFloat", "(Ljava/lang/Object;JF)V");
    method.call(*this, a0, a1, a2);
}

// public native double sun.misc.Unsafe.getDouble(long)
jdouble SunMiscUnsafe::getDouble(jlong a0) const {
    static jnipp::Method<jdouble,jlong> method(clazz(), "getDouble", "(J)D");
    return method.call(*this, a0);
}

// public double sun.misc.Unsafe.getDouble(java.lang.Object,int)
jdouble SunMiscUnsafe::getDouble(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jdouble,JavaLangObject,jint> method(clazz(), "getDouble", "(Ljava/lang/Object;I)D");
    return method.call(*this, a0, a1);
}

// public native double sun.misc.Unsafe.getDouble(java.lang.Object,long)
jdouble SunMiscUnsafe::getDouble(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jdouble,JavaLangObject,jlong> method(clazz(), "getDouble", "(Ljava/lang/Object;J)D");
    return method.call(*this, a0, a1);
}

// public void sun.misc.Unsafe.putDouble(java.lang.Object,int,double)
void SunMiscUnsafe::putDouble(const jnipp::Ref<JavaLangObject>& a0, jint a1, jdouble a2) const {
    static jnipp::Method<void,JavaLangObject,jint,jdouble> method(clazz(), "putDouble", "(Ljava/lang/Object;ID)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putDouble(long,double)
void SunMiscUnsafe::putDouble(jlong a0, jdouble a1) const {
    static jnipp::Method<void,jlong,jdouble> method(clazz(), "putDouble", "(JD)V");
    method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putDouble(java.lang.Object,long,double)
void SunMiscUnsafe::putDouble(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jdouble a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jdouble> method(clazz(), "putDouble", "(Ljava/lang/Object;JD)V");
    method.call(*this, a0, a1, a2);
}

// public native java.lang.Object sun.misc.Unsafe.getObjectVolatile(java.lang.Object,long)
jnipp::LocalRef<JavaLangObject> SunMiscUnsafe::getObjectVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,jlong> method(clazz(), "getObjectVolatile", "(Ljava/lang/Object;J)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putObjectVolatile(java.lang.Object,long,java.lang.Object)
void SunMiscUnsafe::putObjectVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,JavaLangObject> method(clazz(), "putObjectVolatile", "(Ljava/lang/Object;JLjava/lang/Object;)V");
    method.call(*this, a0, a1, a2);
}

// public native boolean sun.misc.Unsafe.getBooleanVolatile(java.lang.Object,long)
jboolean SunMiscUnsafe::getBooleanVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jboolean,JavaLangObject,jlong> method(clazz(), "getBooleanVolatile", "(Ljava/lang/Object;J)Z");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putBooleanVolatile(java.lang.Object,long,boolean)
void SunMiscUnsafe::putBooleanVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jboolean a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jboolean> method(clazz(), "putBooleanVolatile", "(Ljava/lang/Object;JZ)V");
    method.call(*this, a0, a1, a2);
}

// public native byte sun.misc.Unsafe.getByteVolatile(java.lang.Object,long)
jbyte SunMiscUnsafe::getByteVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jbyte,JavaLangObject,jlong> method(clazz(), "getByteVolatile", "(Ljava/lang/Object;J)B");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putByteVolatile(java.lang.Object,long,byte)
void SunMiscUnsafe::putByteVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jbyte a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jbyte> method(clazz(), "putByteVolatile", "(Ljava/lang/Object;JB)V");
    method.call(*this, a0, a1, a2);
}

// public native short sun.misc.Unsafe.getShortVolatile(java.lang.Object,long)
jshort SunMiscUnsafe::getShortVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jshort,JavaLangObject,jlong> method(clazz(), "getShortVolatile", "(Ljava/lang/Object;J)S");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putShortVolatile(java.lang.Object,long,short)
void SunMiscUnsafe::putShortVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jshort a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jshort> method(clazz(), "putShortVolatile", "(Ljava/lang/Object;JS)V");
    method.call(*this, a0, a1, a2);
}

// public native char sun.misc.Unsafe.getCharVolatile(java.lang.Object,long)
jchar SunMiscUnsafe::getCharVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jchar,JavaLangObject,jlong> method(clazz(), "getCharVolatile", "(Ljava/lang/Object;J)C");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putCharVolatile(java.lang.Object,long,char)
void SunMiscUnsafe::putCharVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jchar a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jchar> method(clazz(), "putCharVolatile", "(Ljava/lang/Object;JC)V");
    method.call(*this, a0, a1, a2);
}

// public native int sun.misc.Unsafe.getIntVolatile(java.lang.Object,long)
jint SunMiscUnsafe::getIntVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jint,JavaLangObject,jlong> method(clazz(), "getIntVolatile", "(Ljava/lang/Object;J)I");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putIntVolatile(java.lang.Object,long,int)
void SunMiscUnsafe::putIntVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jint a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jint> method(clazz(), "putIntVolatile", "(Ljava/lang/Object;JI)V");
    method.call(*this, a0, a1, a2);
}

// public native long sun.misc.Unsafe.getLongVolatile(java.lang.Object,long)
jlong SunMiscUnsafe::getLongVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jlong,JavaLangObject,jlong> method(clazz(), "getLongVolatile", "(Ljava/lang/Object;J)J");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putLongVolatile(java.lang.Object,long,long)
void SunMiscUnsafe::putLongVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jlong a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jlong> method(clazz(), "putLongVolatile", "(Ljava/lang/Object;JJ)V");
    method.call(*this, a0, a1, a2);
}

// public native float sun.misc.Unsafe.getFloatVolatile(java.lang.Object,long)
jfloat SunMiscUnsafe::getFloatVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jfloat,JavaLangObject,jlong> method(clazz(), "getFloatVolatile", "(Ljava/lang/Object;J)F");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putFloatVolatile(java.lang.Object,long,float)
void SunMiscUnsafe::putFloatVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jfloat a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jfloat> method(clazz(), "putFloatVolatile", "(Ljava/lang/Object;JF)V");
    method.call(*this, a0, a1, a2);
}

// public native double sun.misc.Unsafe.getDoubleVolatile(java.lang.Object,long)
jdouble SunMiscUnsafe::getDoubleVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<jdouble,JavaLangObject,jlong> method(clazz(), "getDoubleVolatile", "(Ljava/lang/Object;J)D");
    return method.call(*this, a0, a1);
}

// public native void sun.misc.Unsafe.putDoubleVolatile(java.lang.Object,long,double)
void SunMiscUnsafe::putDoubleVolatile(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jdouble a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jdouble> method(clazz(), "putDoubleVolatile", "(Ljava/lang/Object;JD)V");
    method.call(*this, a0, a1, a2);
}

// public native long sun.misc.Unsafe.getAddress(long)
jlong SunMiscUnsafe::getAddress(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "getAddress", "(J)J");
    return method.call(*this, a0);
}

// public native void sun.misc.Unsafe.putAddress(long,long)
void SunMiscUnsafe::putAddress(jlong a0, jlong a1) const {
    static jnipp::Method<void,jlong,jlong> method(clazz(), "putAddress", "(JJ)V");
    method.call(*this, a0, a1);
}

// public final native boolean sun.misc.Unsafe.compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)
jboolean SunMiscUnsafe::compareAndSwapObject(const jnipp::Ref<JavaLangObject>& a0, jlong a1, const jnipp::Ref<JavaLangObject>& a2, const jnipp::Ref<JavaLangObject>& a3) const {
    static jnipp::Method<jboolean,JavaLangObject,jlong,JavaLangObject,JavaLangObject> method(clazz(), "compareAndSwapObject", "(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z");
    return method.call(*this, a0, a1, a2, a3);
}

// public final native boolean sun.misc.Unsafe.compareAndSwapLong(java.lang.Object,long,long,long)
jboolean SunMiscUnsafe::compareAndSwapLong(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jlong a2, jlong a3) const {
    static jnipp::Method<jboolean,JavaLangObject,jlong,jlong,jlong> method(clazz(), "compareAndSwapLong", "(Ljava/lang/Object;JJJ)Z");
    return method.call(*this, a0, a1, a2, a3);
}

// public final native boolean sun.misc.Unsafe.compareAndSwapInt(java.lang.Object,long,int,int)
jboolean SunMiscUnsafe::compareAndSwapInt(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jint a2, jint a3) const {
    static jnipp::Method<jboolean,JavaLangObject,jlong,jint,jint> method(clazz(), "compareAndSwapInt", "(Ljava/lang/Object;JII)Z");
    return method.call(*this, a0, a1, a2, a3);
}

// public native void sun.misc.Unsafe.putOrderedObject(java.lang.Object,long,java.lang.Object)
void SunMiscUnsafe::putOrderedObject(const jnipp::Ref<JavaLangObject>& a0, jlong a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,JavaLangObject> method(clazz(), "putOrderedObject", "(Ljava/lang/Object;JLjava/lang/Object;)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putOrderedLong(java.lang.Object,long,long)
void SunMiscUnsafe::putOrderedLong(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jlong a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jlong> method(clazz(), "putOrderedLong", "(Ljava/lang/Object;JJ)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.putOrderedInt(java.lang.Object,long,int)
void SunMiscUnsafe::putOrderedInt(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jint a2) const {
    static jnipp::Method<void,JavaLangObject,jlong,jint> method(clazz(), "putOrderedInt", "(Ljava/lang/Object;JI)V");
    method.call(*this, a0, a1, a2);
}

// private static native void sun.misc.Unsafe.registerNatives()
void SunMiscUnsafe::registerNatives() {
    static jnipp::StaticMethod<void> method(clazz(), "registerNatives", "()V");
    method.call();
}

// public native void sun.misc.Unsafe.throwException(java.lang.Throwable)
void SunMiscUnsafe::throwException(const jnipp::Ref<JavaLangThrowable>& a0) const {
    static jnipp::Method<void,JavaLangThrowable> method(clazz(), "throwException", "(Ljava/lang/Throwable;)V");
    method.call(*this, a0);
}

// public native java.lang.Class sun.misc.Unsafe.defineClass(java.lang.String,byte[],int,int)
jnipp::LocalRef<JavaLangClass> SunMiscUnsafe::defineClass(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3) const {
    static jnipp::Method<JavaLangClass,JavaLangString,jnipp::Array<jbyte>,jint,jint> method(clazz(), "defineClass", "(Ljava/lang/String;[BII)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2, a3);
}

// public native java.lang.Class sun.misc.Unsafe.defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain)
jnipp::LocalRef<JavaLangClass> SunMiscUnsafe::defineClass(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3, const jnipp::Ref<JavaLangClassLoader>& a4, const jnipp::Ref<JavaSecurityProtectionDomain>& a5) const {
    static jnipp::Method<JavaLangClass,JavaLangString,jnipp::Array<jbyte>,jint,jint,JavaLangClassLoader,JavaSecurityProtectionDomain> method(clazz(), "defineClass", "(Ljava/lang/String;[BIILjava/lang/ClassLoader;Ljava/security/ProtectionDomain;)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2, a3, a4, a5);
}

// public java.lang.Object sun.misc.Unsafe.staticFieldBase(java.lang.Class)
jnipp::LocalRef<JavaLangObject> SunMiscUnsafe::staticFieldBase(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangClass> method(clazz(), "staticFieldBase", "(Ljava/lang/Class;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public native java.lang.Object sun.misc.Unsafe.staticFieldBase(java.lang.reflect.Field)
jnipp::LocalRef<JavaLangObject> SunMiscUnsafe::staticFieldBase(const jnipp::Ref<JavaLangReflectField>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangReflectField> method(clazz(), "staticFieldBase", "(Ljava/lang/reflect/Field;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public int sun.misc.Unsafe.fieldOffset(java.lang.reflect.Field)
jint SunMiscUnsafe::fieldOffset(const jnipp::Ref<JavaLangReflectField>& a0) const {
    static jnipp::Method<jint,JavaLangReflectField> method(clazz(), "fieldOffset", "(Ljava/lang/reflect/Field;)I");
    return method.call(*this, a0);
}

// public native long sun.misc.Unsafe.objectFieldOffset(java.lang.reflect.Field)
jlong SunMiscUnsafe::objectFieldOffset(const jnipp::Ref<JavaLangReflectField>& a0) const {
    static jnipp::Method<jlong,JavaLangReflectField> method(clazz(), "objectFieldOffset", "(Ljava/lang/reflect/Field;)J");
    return method.call(*this, a0);
}

// public native long sun.misc.Unsafe.staticFieldOffset(java.lang.reflect.Field)
jlong SunMiscUnsafe::staticFieldOffset(const jnipp::Ref<JavaLangReflectField>& a0) const {
    static jnipp::Method<jlong,JavaLangReflectField> method(clazz(), "staticFieldOffset", "(Ljava/lang/reflect/Field;)J");
    return method.call(*this, a0);
}

// public native long sun.misc.Unsafe.allocateMemory(long)
jlong SunMiscUnsafe::allocateMemory(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "allocateMemory", "(J)J");
    return method.call(*this, a0);
}

// public native long sun.misc.Unsafe.reallocateMemory(long,long)
jlong SunMiscUnsafe::reallocateMemory(jlong a0, jlong a1) const {
    static jnipp::Method<jlong,jlong,jlong> method(clazz(), "reallocateMemory", "(JJ)J");
    return method.call(*this, a0, a1);
}

// public void sun.misc.Unsafe.setMemory(long,long,byte)
void SunMiscUnsafe::setMemory(jlong a0, jlong a1, jbyte a2) const {
    static jnipp::Method<void,jlong,jlong,jbyte> method(clazz(), "setMemory", "(JJB)V");
    method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.setMemory(java.lang.Object,long,long,byte)
void SunMiscUnsafe::setMemory(const jnipp::Ref<JavaLangObject>& a0, jlong a1, jlong a2, jbyte a3) const {
    static jnipp::Method<void,JavaLangObject,jlong,jlong,jbyte> method(clazz(), "setMemory", "(Ljava/lang/Object;JJB)V");
    method.call(*this, a0, a1, a2, a3);
}

// public native void sun.misc.Unsafe.freeMemory(long)
void SunMiscUnsafe::freeMemory(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "freeMemory", "(J)V");
    method.call(*this, a0);
}

// public native boolean sun.misc.Unsafe.shouldBeInitialized(java.lang.Class)
jboolean SunMiscUnsafe::shouldBeInitialized(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<jboolean,JavaLangClass> method(clazz(), "shouldBeInitialized", "(Ljava/lang/Class;)Z");
    return method.call(*this, a0);
}

// public native void sun.misc.Unsafe.ensureClassInitialized(java.lang.Class)
void SunMiscUnsafe::ensureClassInitialized(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<void,JavaLangClass> method(clazz(), "ensureClassInitialized", "(Ljava/lang/Class;)V");
    method.call(*this, a0);
}

// public native int sun.misc.Unsafe.arrayBaseOffset(java.lang.Class)
jint SunMiscUnsafe::arrayBaseOffset(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<jint,JavaLangClass> method(clazz(), "arrayBaseOffset", "(Ljava/lang/Class;)I");
    return method.call(*this, a0);
}

// public native int sun.misc.Unsafe.arrayIndexScale(java.lang.Class)
jint SunMiscUnsafe::arrayIndexScale(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<jint,JavaLangClass> method(clazz(), "arrayIndexScale", "(Ljava/lang/Class;)I");
    return method.call(*this, a0);
}

// public native int sun.misc.Unsafe.addressSize()
jint SunMiscUnsafe::addressSize() const {
    static jnipp::Method<jint> method(clazz(), "addressSize", "()I");
    return method.call(*this);
}

// public native int sun.misc.Unsafe.pageSize()
jint SunMiscUnsafe::pageSize() const {
    static jnipp::Method<jint> method(clazz(), "pageSize", "()I");
    return method.call(*this);
}

// public native java.lang.Class sun.misc.Unsafe.defineAnonymousClass(java.lang.Class,byte[],java.lang.Object[])
jnipp::LocalRef<JavaLangClass> SunMiscUnsafe::defineAnonymousClass(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a2) const {
    static jnipp::Method<JavaLangClass,JavaLangClass,jnipp::Array<jbyte>,jnipp::Array<JavaLangObject>> method(clazz(), "defineAnonymousClass", "(Ljava/lang/Class;[B[Ljava/lang/Object;)Ljava/lang/Class;");
    return method.call(*this, a0, a1, a2);
}

// public native void sun.misc.Unsafe.monitorEnter(java.lang.Object)
void SunMiscUnsafe::monitorEnter(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "monitorEnter", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public native void sun.misc.Unsafe.monitorExit(java.lang.Object)
void SunMiscUnsafe::monitorExit(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "monitorExit", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public native boolean sun.misc.Unsafe.tryMonitorEnter(java.lang.Object)
jboolean SunMiscUnsafe::tryMonitorEnter(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "tryMonitorEnter", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public native int sun.misc.Unsafe.getLoadAverage(double[],int)
jint SunMiscUnsafe::getLoadAverage(const jnipp::Ref<jnipp::Array<jdouble>>& a0, jint a1) const {
    static jnipp::Method<jint,jnipp::Array<jdouble>,jint> method(clazz(), "getLoadAverage", "([DI)I");
    return method.call(*this, a0, a1);
}
#undef theUnsafe
const jnipp::StaticField<SunMiscUnsafe> SunMiscUnsafe::theUnsafe ("sun/misc/Unsafe", "theUnsafe", "Lsun/misc/Unsafe;");
#undef INVALID_FIELD_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::INVALID_FIELD_OFFSET ("sun/misc/Unsafe", "INVALID_FIELD_OFFSET", "I");
#undef ARRAY_BOOLEAN_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_BOOLEAN_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_BOOLEAN_BASE_OFFSET", "I");
#undef ARRAY_BYTE_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_BYTE_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_BYTE_BASE_OFFSET", "I");
#undef ARRAY_SHORT_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_SHORT_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_SHORT_BASE_OFFSET", "I");
#undef ARRAY_CHAR_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_CHAR_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_CHAR_BASE_OFFSET", "I");
#undef ARRAY_INT_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_INT_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_INT_BASE_OFFSET", "I");
#undef ARRAY_LONG_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_LONG_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_LONG_BASE_OFFSET", "I");
#undef ARRAY_FLOAT_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_FLOAT_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_FLOAT_BASE_OFFSET", "I");
#undef ARRAY_DOUBLE_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_DOUBLE_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_DOUBLE_BASE_OFFSET", "I");
#undef ARRAY_OBJECT_BASE_OFFSET
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_OBJECT_BASE_OFFSET ("sun/misc/Unsafe", "ARRAY_OBJECT_BASE_OFFSET", "I");
#undef ARRAY_BOOLEAN_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_BOOLEAN_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_BOOLEAN_INDEX_SCALE", "I");
#undef ARRAY_BYTE_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_BYTE_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_BYTE_INDEX_SCALE", "I");
#undef ARRAY_SHORT_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_SHORT_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_SHORT_INDEX_SCALE", "I");
#undef ARRAY_CHAR_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_CHAR_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_CHAR_INDEX_SCALE", "I");
#undef ARRAY_INT_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_INT_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_INT_INDEX_SCALE", "I");
#undef ARRAY_LONG_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_LONG_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_LONG_INDEX_SCALE", "I");
#undef ARRAY_FLOAT_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_FLOAT_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_FLOAT_INDEX_SCALE", "I");
#undef ARRAY_DOUBLE_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_DOUBLE_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_DOUBLE_INDEX_SCALE", "I");
#undef ARRAY_OBJECT_INDEX_SCALE
const jnipp::StaticField<jint> SunMiscUnsafe::ARRAY_OBJECT_INDEX_SCALE ("sun/misc/Unsafe", "ARRAY_OBJECT_INDEX_SCALE", "I");
#undef ADDRESS_SIZE
const jnipp::StaticField<jint> SunMiscUnsafe::ADDRESS_SIZE ("sun/misc/Unsafe", "ADDRESS_SIZE", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoFilterOutputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/FilterOutputStream"));
    return cls;
}

// public java.io.FilterOutputStream(java.io.OutputStream)
jnipp::LocalRef<JavaIoFilterOutputStream> JavaIoFilterOutputStream::construct(const jnipp::Ref<JavaIoOutputStream>& a0) {
    static jnipp::Constructor<JavaIoFilterOutputStream,JavaIoOutputStream> constructor(clazz(), "(Ljava/io/OutputStream;)V");
    return constructor.construct(a0);
}

// public void java.io.FilterOutputStream.write(byte[],int,int) throws java.io.IOException
void JavaIoFilterOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "write", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.FilterOutputStream.write(byte[]) throws java.io.IOException
void JavaIoFilterOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "write", "([B)V");
    method.call(*this, a0);
}

// public void java.io.FilterOutputStream.write(int) throws java.io.IOException
void JavaIoFilterOutputStream::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void java.io.FilterOutputStream.flush() throws java.io.IOException
void JavaIoFilterOutputStream::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.io.FilterOutputStream.close() throws java.io.IOException
void JavaIoFilterOutputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoDataOutputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/DataOutputStream"));
    return cls;
}

// public java.io.DataOutputStream(java.io.OutputStream)
jnipp::LocalRef<JavaIoDataOutputStream> JavaIoDataOutputStream::construct(const jnipp::Ref<JavaIoOutputStream>& a0) {
    static jnipp::Constructor<JavaIoDataOutputStream,JavaIoOutputStream> constructor(clazz(), "(Ljava/io/OutputStream;)V");
    return constructor.construct(a0);
}

// public final int java.io.DataOutputStream.size()
jint JavaIoDataOutputStream::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public synchronized void java.io.DataOutputStream.write(int) throws java.io.IOException
void JavaIoDataOutputStream::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.io.DataOutputStream.write(byte[],int,int) throws java.io.IOException
void JavaIoDataOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "write", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.DataOutputStream.flush() throws java.io.IOException
void JavaIoDataOutputStream::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public final void java.io.DataOutputStream.writeInt(int) throws java.io.IOException
void JavaIoDataOutputStream::writeInt(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeInt", "(I)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeBytes(java.lang.String) throws java.io.IOException
void JavaIoDataOutputStream::writeBytes(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeBytes", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeChar(int) throws java.io.IOException
void JavaIoDataOutputStream::writeChar(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeChar", "(I)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeUTF(java.lang.String) throws java.io.IOException
void JavaIoDataOutputStream::writeUTF(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeUTF", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// static int java.io.DataOutputStream.writeUTF(java.lang.String,java.io.DataOutput) throws java.io.IOException
jint JavaIoDataOutputStream::writeUTF(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaIoDataOutput>& a1) {
    static jnipp::StaticMethod<jint,JavaLangString,JavaIoDataOutput> method(clazz(), "writeUTF", "(Ljava/lang/String;Ljava/io/DataOutput;)I");
    return method.call(a0, a1);
}

// public final void java.io.DataOutputStream.writeFloat(float) throws java.io.IOException
void JavaIoDataOutputStream::writeFloat(jfloat a0) const {
    static jnipp::Method<void,jfloat> method(clazz(), "writeFloat", "(F)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeBoolean(boolean) throws java.io.IOException
void JavaIoDataOutputStream::writeBoolean(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "writeBoolean", "(Z)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeByte(int) throws java.io.IOException
void JavaIoDataOutputStream::writeByte(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeByte", "(I)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeShort(int) throws java.io.IOException
void JavaIoDataOutputStream::writeShort(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "writeShort", "(I)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeLong(long) throws java.io.IOException
void JavaIoDataOutputStream::writeLong(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "writeLong", "(J)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeDouble(double) throws java.io.IOException
void JavaIoDataOutputStream::writeDouble(jdouble a0) const {
    static jnipp::Method<void,jdouble> method(clazz(), "writeDouble", "(D)V");
    method.call(*this, a0);
}

// public final void java.io.DataOutputStream.writeChars(java.lang.String) throws java.io.IOException
void JavaIoDataOutputStream::writeChars(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "writeChars", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// private void java.io.DataOutputStream.incCount(int)
void JavaIoDataOutputStream::incCount(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "incCount", "(I)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoWriter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/Writer"));
    return cls;
}

// protected java.io.Writer()
jnipp::LocalRef<JavaIoWriter> JavaIoWriter::construct() {
    static jnipp::Constructor<JavaIoWriter> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected java.io.Writer(java.lang.Object)
jnipp::LocalRef<JavaIoWriter> JavaIoWriter::construct(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::Constructor<JavaIoWriter,JavaLangObject> constructor(clazz(), "(Ljava/lang/Object;)V");
    return constructor.construct(a0);
}

// public java.io.Writer java.io.Writer.append(java.lang.CharSequence,int,int) throws java.io.IOException
jnipp::LocalRef<JavaIoWriter> JavaIoWriter::append(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaIoWriter,JavaLangCharSequence,jint,jint> method(clazz(), "append", "(Ljava/lang/CharSequence;II)Ljava/io/Writer;");
    return method.call(*this, a0, a1, a2);
}

// public java.io.Writer java.io.Writer.append(char) throws java.io.IOException
jnipp::LocalRef<JavaIoWriter> JavaIoWriter::append(jchar a0) const {
    static jnipp::Method<JavaIoWriter,jchar> method(clazz(), "append", "(C)Ljava/io/Writer;");
    return method.call(*this, a0);
}

// public java.io.Writer java.io.Writer.append(java.lang.CharSequence) throws java.io.IOException
jnipp::LocalRef<JavaIoWriter> JavaIoWriter::append(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaIoWriter,JavaLangCharSequence> method(clazz(), "append", "(Ljava/lang/CharSequence;)Ljava/io/Writer;");
    return method.call(*this, a0);
}

// public void java.io.Writer.write(char[]) throws java.io.IOException
void JavaIoWriter::write(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jchar>> method(clazz(), "write", "([C)V");
    method.call(*this, a0);
}

// public void java.io.Writer.write(int) throws java.io.IOException
void JavaIoWriter::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void java.io.Writer.write(java.lang.String,int,int) throws java.io.IOException
void JavaIoWriter::write(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,JavaLangString,jint,jint> method(clazz(), "write", "(Ljava/lang/String;II)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.Writer.write(java.lang.String) throws java.io.IOException
void JavaIoWriter::write(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "write", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoPrintWriter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/PrintWriter"));
    return cls;
}

// public java.io.PrintWriter(java.io.OutputStream,boolean)
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaIoOutputStream>& a0, jboolean a1) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaIoOutputStream,jboolean> constructor(clazz(), "(Ljava/io/OutputStream;Z)V");
    return constructor.construct(a0, a1);
}

// public java.io.PrintWriter(java.lang.String) throws java.io.FileNotFoundException
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// private java.io.PrintWriter(java.nio.charset.Charset,java.io.File) throws java.io.FileNotFoundException
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaNioCharsetCharset>& a0, const jnipp::Ref<JavaIoFile>& a1) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaNioCharsetCharset,JavaIoFile> constructor(clazz(), "(Ljava/nio/charset/Charset;Ljava/io/File;)V");
    return constructor.construct(a0, a1);
}

// public java.io.PrintWriter(java.io.File) throws java.io.FileNotFoundException
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaIoFile>& a0) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaIoFile> constructor(clazz(), "(Ljava/io/File;)V");
    return constructor.construct(a0);
}

// public java.io.PrintWriter(java.io.File,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaIoFile>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaIoFile,JavaLangString> constructor(clazz(), "(Ljava/io/File;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.io.PrintWriter(java.lang.String,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.io.PrintWriter(java.io.Writer)
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaIoWriter>& a0) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaIoWriter> constructor(clazz(), "(Ljava/io/Writer;)V");
    return constructor.construct(a0);
}

// public java.io.PrintWriter(java.io.OutputStream)
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaIoOutputStream>& a0) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaIoOutputStream> constructor(clazz(), "(Ljava/io/OutputStream;)V");
    return constructor.construct(a0);
}

// public java.io.PrintWriter(java.io.Writer,boolean)
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::construct(const jnipp::Ref<JavaIoWriter>& a0, jboolean a1) {
    static jnipp::Constructor<JavaIoPrintWriter,JavaIoWriter,jboolean> constructor(clazz(), "(Ljava/io/Writer;Z)V");
    return constructor.construct(a0, a1);
}

// public void java.io.PrintWriter.println(double)
void JavaIoPrintWriter::println(jdouble a0) const {
    static jnipp::Method<void,jdouble> method(clazz(), "println", "(D)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.println(char[])
void JavaIoPrintWriter::println(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jchar>> method(clazz(), "println", "([C)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.println(float)
void JavaIoPrintWriter::println(jfloat a0) const {
    static jnipp::Method<void,jfloat> method(clazz(), "println", "(F)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.println(java.lang.String)
void JavaIoPrintWriter::println(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "println", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.println(java.lang.Object)
void JavaIoPrintWriter::println(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "println", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.println(int)
void JavaIoPrintWriter::println(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "println", "(I)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.println(char)
void JavaIoPrintWriter::println(jchar a0) const {
    static jnipp::Method<void,jchar> method(clazz(), "println", "(C)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.println(boolean)
void JavaIoPrintWriter::println(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "println", "(Z)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.println()
void JavaIoPrintWriter::println() const {
    static jnipp::Method<void> method(clazz(), "println", "()V");
    method.call(*this);
}

// public void java.io.PrintWriter.println(long)
void JavaIoPrintWriter::println(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "println", "(J)V");
    method.call(*this, a0);
}

// public java.io.PrintWriter java.io.PrintWriter.append(java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::append(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaIoPrintWriter,JavaLangCharSequence,jint,jint> method(clazz(), "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;");
    return method.call(*this, a0, a1, a2);
}

// public java.io.PrintWriter java.io.PrintWriter.append(java.lang.CharSequence)
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::append(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaIoPrintWriter,JavaLangCharSequence> method(clazz(), "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;");
    return method.call(*this, a0);
}

// public java.io.PrintWriter java.io.PrintWriter.append(char)
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::append(jchar a0) const {
    static jnipp::Method<JavaIoPrintWriter,jchar> method(clazz(), "append", "(C)Ljava/io/PrintWriter;");
    return method.call(*this, a0);
}

// public java.io.PrintWriter java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::format(const jnipp::Ref<JavaUtilLocale>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a2) const {
    static jnipp::Method<JavaIoPrintWriter,JavaUtilLocale,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
    return method.call(*this, a0, a1, a2);
}

// public java.io.PrintWriter java.io.PrintWriter.format(java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::format(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<JavaIoPrintWriter,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
    return method.call(*this, a0, a1);
}

// public void java.io.PrintWriter.write(char[],int,int)
void JavaIoPrintWriter::write(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jchar>,jint,jint> method(clazz(), "write", "([CII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.PrintWriter.write(java.lang.String,int,int)
void JavaIoPrintWriter::write(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,JavaLangString,jint,jint> method(clazz(), "write", "(Ljava/lang/String;II)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.PrintWriter.write(char[])
void JavaIoPrintWriter::write(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jchar>> method(clazz(), "write", "([C)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.write(int)
void JavaIoPrintWriter::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.write(java.lang.String)
void JavaIoPrintWriter::write(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "write", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(float)
void JavaIoPrintWriter::print(jfloat a0) const {
    static jnipp::Method<void,jfloat> method(clazz(), "print", "(F)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(long)
void JavaIoPrintWriter::print(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "print", "(J)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(int)
void JavaIoPrintWriter::print(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "print", "(I)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(char)
void JavaIoPrintWriter::print(jchar a0) const {
    static jnipp::Method<void,jchar> method(clazz(), "print", "(C)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(boolean)
void JavaIoPrintWriter::print(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "print", "(Z)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(java.lang.Object)
void JavaIoPrintWriter::print(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "print", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(java.lang.String)
void JavaIoPrintWriter::print(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "print", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(char[])
void JavaIoPrintWriter::print(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jchar>> method(clazz(), "print", "([C)V");
    method.call(*this, a0);
}

// public void java.io.PrintWriter.print(double)
void JavaIoPrintWriter::print(jdouble a0) const {
    static jnipp::Method<void,jdouble> method(clazz(), "print", "(D)V");
    method.call(*this, a0);
}

// private void java.io.PrintWriter.newLine()
void JavaIoPrintWriter::newLine() const {
    static jnipp::Method<void> method(clazz(), "newLine", "()V");
    method.call(*this);
}

// public void java.io.PrintWriter.flush()
void JavaIoPrintWriter::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.io.PrintWriter.close()
void JavaIoPrintWriter::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// private static java.nio.charset.Charset java.io.PrintWriter.toCharset(java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaNioCharsetCharset> JavaIoPrintWriter::toCharset(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNioCharsetCharset,JavaLangString> method(clazz(), "toCharset", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    return method.call(a0);
}

// private void java.io.PrintWriter.ensureOpen() throws java.io.IOException
void JavaIoPrintWriter::ensureOpen() const {
    static jnipp::Method<void> method(clazz(), "ensureOpen", "()V");
    method.call(*this);
}

// public boolean java.io.PrintWriter.checkError()
jboolean JavaIoPrintWriter::checkError() const {
    static jnipp::Method<jboolean> method(clazz(), "checkError", "()Z");
    return method.call(*this);
}

// protected void java.io.PrintWriter.setError()
void JavaIoPrintWriter::setError() const {
    static jnipp::Method<void> method(clazz(), "setError", "()V");
    method.call(*this);
}

// protected void java.io.PrintWriter.clearError()
void JavaIoPrintWriter::clearError() const {
    static jnipp::Method<void> method(clazz(), "clearError", "()V");
    method.call(*this);
}

// public java.io.PrintWriter java.io.PrintWriter.printf(java.util.Locale,java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::printf(const jnipp::Ref<JavaUtilLocale>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a2) const {
    static jnipp::Method<JavaIoPrintWriter,JavaUtilLocale,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
    return method.call(*this, a0, a1, a2);
}

// public java.io.PrintWriter java.io.PrintWriter.printf(java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaIoPrintWriter> JavaIoPrintWriter::printf(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<JavaIoPrintWriter,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThrowable_PrintStreamOrWriter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Throwable$PrintStreamOrWriter"));
    return cls;
}

// java.lang.Throwable$PrintStreamOrWriter(java.lang.Throwable$1)
jnipp::LocalRef<JavaLangThrowable_PrintStreamOrWriter> JavaLangThrowable_PrintStreamOrWriter::construct(const jnipp::Ref<JavaLangThrowable_1>& a0) {
    static jnipp::Constructor<JavaLangThrowable_PrintStreamOrWriter,JavaLangThrowable_1> constructor(clazz(), "(Ljava/lang/Throwable$1;)V");
    return constructor.construct(a0);
}

// private java.lang.Throwable$PrintStreamOrWriter()
jnipp::LocalRef<JavaLangThrowable_PrintStreamOrWriter> JavaLangThrowable_PrintStreamOrWriter::construct() {
    static jnipp::Constructor<JavaLangThrowable_PrintStreamOrWriter> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoPrintStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/PrintStream"));
    return cls;
}

// public java.io.PrintStream(java.io.OutputStream)
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(const jnipp::Ref<JavaIoOutputStream>& a0) {
    static jnipp::Constructor<JavaIoPrintStream,JavaIoOutputStream> constructor(clazz(), "(Ljava/io/OutputStream;)V");
    return constructor.construct(a0);
}

// public java.io.PrintStream(java.io.OutputStream,boolean)
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(const jnipp::Ref<JavaIoOutputStream>& a0, jboolean a1) {
    static jnipp::Constructor<JavaIoPrintStream,JavaIoOutputStream,jboolean> constructor(clazz(), "(Ljava/io/OutputStream;Z)V");
    return constructor.construct(a0, a1);
}

// public java.io.PrintStream(java.io.OutputStream,boolean,java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(const jnipp::Ref<JavaIoOutputStream>& a0, jboolean a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::Constructor<JavaIoPrintStream,JavaIoOutputStream,jboolean,JavaLangString> constructor(clazz(), "(Ljava/io/OutputStream;ZLjava/lang/String;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.io.PrintStream(java.lang.String) throws java.io.FileNotFoundException
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaIoPrintStream,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.io.PrintStream(java.lang.String,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoPrintStream,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.io.PrintStream(java.io.File,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(const jnipp::Ref<JavaIoFile>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoPrintStream,JavaIoFile,JavaLangString> constructor(clazz(), "(Ljava/io/File;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.io.PrintStream(java.io.File) throws java.io.FileNotFoundException
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(const jnipp::Ref<JavaIoFile>& a0) {
    static jnipp::Constructor<JavaIoPrintStream,JavaIoFile> constructor(clazz(), "(Ljava/io/File;)V");
    return constructor.construct(a0);
}

// private java.io.PrintStream(boolean,java.io.OutputStream)
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(jboolean a0, const jnipp::Ref<JavaIoOutputStream>& a1) {
    static jnipp::Constructor<JavaIoPrintStream,jboolean,JavaIoOutputStream> constructor(clazz(), "(ZLjava/io/OutputStream;)V");
    return constructor.construct(a0, a1);
}

// private java.io.PrintStream(boolean,java.io.OutputStream,java.nio.charset.Charset)
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(jboolean a0, const jnipp::Ref<JavaIoOutputStream>& a1, const jnipp::Ref<JavaNioCharsetCharset>& a2) {
    static jnipp::Constructor<JavaIoPrintStream,jboolean,JavaIoOutputStream,JavaNioCharsetCharset> constructor(clazz(), "(ZLjava/io/OutputStream;Ljava/nio/charset/Charset;)V");
    return constructor.construct(a0, a1, a2);
}

// private java.io.PrintStream(boolean,java.nio.charset.Charset,java.io.OutputStream) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::construct(jboolean a0, const jnipp::Ref<JavaNioCharsetCharset>& a1, const jnipp::Ref<JavaIoOutputStream>& a2) {
    static jnipp::Constructor<JavaIoPrintStream,jboolean,JavaNioCharsetCharset,JavaIoOutputStream> constructor(clazz(), "(ZLjava/nio/charset/Charset;Ljava/io/OutputStream;)V");
    return constructor.construct(a0, a1, a2);
}

// public void java.io.PrintStream.println(char[])
void JavaIoPrintStream::println(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jchar>> method(clazz(), "println", "([C)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.println(double)
void JavaIoPrintStream::println(jdouble a0) const {
    static jnipp::Method<void,jdouble> method(clazz(), "println", "(D)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.println(float)
void JavaIoPrintStream::println(jfloat a0) const {
    static jnipp::Method<void,jfloat> method(clazz(), "println", "(F)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.println(java.lang.String)
void JavaIoPrintStream::println(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "println", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.println(java.lang.Object)
void JavaIoPrintStream::println(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "println", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.println(boolean)
void JavaIoPrintStream::println(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "println", "(Z)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.println()
void JavaIoPrintStream::println() const {
    static jnipp::Method<void> method(clazz(), "println", "()V");
    method.call(*this);
}

// public void java.io.PrintStream.println(char)
void JavaIoPrintStream::println(jchar a0) const {
    static jnipp::Method<void,jchar> method(clazz(), "println", "(C)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.println(int)
void JavaIoPrintStream::println(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "println", "(I)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.println(long)
void JavaIoPrintStream::println(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "println", "(J)V");
    method.call(*this, a0);
}

// public java.io.PrintStream java.io.PrintStream.append(java.lang.CharSequence,int,int)
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::append(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) const {
    static jnipp::Method<JavaIoPrintStream,JavaLangCharSequence,jint,jint> method(clazz(), "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintStream;");
    return method.call(*this, a0, a1, a2);
}

// public java.io.PrintStream java.io.PrintStream.append(char)
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::append(jchar a0) const {
    static jnipp::Method<JavaIoPrintStream,jchar> method(clazz(), "append", "(C)Ljava/io/PrintStream;");
    return method.call(*this, a0);
}

// public java.io.PrintStream java.io.PrintStream.append(java.lang.CharSequence)
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::append(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaIoPrintStream,JavaLangCharSequence> method(clazz(), "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintStream;");
    return method.call(*this, a0);
}

// public java.io.PrintStream java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::format(const jnipp::Ref<JavaUtilLocale>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a2) const {
    static jnipp::Method<JavaIoPrintStream,JavaUtilLocale,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
    return method.call(*this, a0, a1, a2);
}

// public java.io.PrintStream java.io.PrintStream.format(java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::format(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<JavaIoPrintStream,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
    return method.call(*this, a0, a1);
}

// private void java.io.PrintStream.write(char[])
void JavaIoPrintStream::write(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jchar>> method(clazz(), "write", "([C)V");
    method.call(*this, a0);
}

// private void java.io.PrintStream.write(java.lang.String)
void JavaIoPrintStream::write(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "write", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.write(byte[],int,int)
void JavaIoPrintStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "write", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.PrintStream.write(int)
void JavaIoPrintStream::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(float)
void JavaIoPrintStream::print(jfloat a0) const {
    static jnipp::Method<void,jfloat> method(clazz(), "print", "(F)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(long)
void JavaIoPrintStream::print(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "print", "(J)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(int)
void JavaIoPrintStream::print(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "print", "(I)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(char)
void JavaIoPrintStream::print(jchar a0) const {
    static jnipp::Method<void,jchar> method(clazz(), "print", "(C)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(boolean)
void JavaIoPrintStream::print(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "print", "(Z)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(java.lang.Object)
void JavaIoPrintStream::print(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "print", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(java.lang.String)
void JavaIoPrintStream::print(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "print", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(char[])
void JavaIoPrintStream::print(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jchar>> method(clazz(), "print", "([C)V");
    method.call(*this, a0);
}

// public void java.io.PrintStream.print(double)
void JavaIoPrintStream::print(jdouble a0) const {
    static jnipp::Method<void,jdouble> method(clazz(), "print", "(D)V");
    method.call(*this, a0);
}

// private void java.io.PrintStream.newLine()
void JavaIoPrintStream::newLine() const {
    static jnipp::Method<void> method(clazz(), "newLine", "()V");
    method.call(*this);
}

// public void java.io.PrintStream.flush()
void JavaIoPrintStream::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.io.PrintStream.close()
void JavaIoPrintStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// private static java.lang.Object java.io.PrintStream.requireNonNull(java.lang.Object,java.lang.String)
jnipp::LocalRef<JavaLangObject> JavaIoPrintStream::requireNonNull(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaLangObject,JavaLangObject,JavaLangString> method(clazz(), "requireNonNull", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");
    return method.call(a0, a1);
}

// private static java.nio.charset.Charset java.io.PrintStream.toCharset(java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaNioCharsetCharset> JavaIoPrintStream::toCharset(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNioCharsetCharset,JavaLangString> method(clazz(), "toCharset", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    return method.call(a0);
}

// private void java.io.PrintStream.ensureOpen() throws java.io.IOException
void JavaIoPrintStream::ensureOpen() const {
    static jnipp::Method<void> method(clazz(), "ensureOpen", "()V");
    method.call(*this);
}

// public boolean java.io.PrintStream.checkError()
jboolean JavaIoPrintStream::checkError() const {
    static jnipp::Method<jboolean> method(clazz(), "checkError", "()Z");
    return method.call(*this);
}

// protected void java.io.PrintStream.setError()
void JavaIoPrintStream::setError() const {
    static jnipp::Method<void> method(clazz(), "setError", "()V");
    method.call(*this);
}

// protected void java.io.PrintStream.clearError()
void JavaIoPrintStream::clearError() const {
    static jnipp::Method<void> method(clazz(), "clearError", "()V");
    method.call(*this);
}

// public java.io.PrintStream java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::printf(const jnipp::Ref<JavaUtilLocale>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a2) const {
    static jnipp::Method<JavaIoPrintStream,JavaUtilLocale,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
    return method.call(*this, a0, a1, a2);
}

// public java.io.PrintStream java.io.PrintStream.printf(java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaIoPrintStream> JavaIoPrintStream::printf(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<JavaIoPrintStream,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectStreamClass_FieldReflector::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectStreamClass$FieldReflector"));
    return cls;
}

// java.io.ObjectStreamClass$FieldReflector(java.io.ObjectStreamField[])
jnipp::LocalRef<JavaIoObjectStreamClass_FieldReflector> JavaIoObjectStreamClass_FieldReflector::construct(const jnipp::Ref<jnipp::Array<JavaIoObjectStreamField>>& a0) {
    static jnipp::Constructor<JavaIoObjectStreamClass_FieldReflector,jnipp::Array<JavaIoObjectStreamField>> constructor(clazz(), "([Ljava/io/ObjectStreamField;)V");
    return constructor.construct(a0);
}

// java.io.ObjectStreamField[] java.io.ObjectStreamClass$FieldReflector.getFields()
jnipp::LocalRef<jnipp::Array<JavaIoObjectStreamField>> JavaIoObjectStreamClass_FieldReflector::getFields() const {
    static jnipp::Method<jnipp::Array<JavaIoObjectStreamField>> method(clazz(), "getFields", "()[Ljava/io/ObjectStreamField;");
    return method.call(*this);
}

// void java.io.ObjectStreamClass$FieldReflector.getPrimFieldValues(java.lang.Object,byte[])
void JavaIoObjectStreamClass_FieldReflector::getPrimFieldValues(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) const {
    static jnipp::Method<void,JavaLangObject,jnipp::Array<jbyte>> method(clazz(), "getPrimFieldValues", "(Ljava/lang/Object;[B)V");
    method.call(*this, a0, a1);
}

// void java.io.ObjectStreamClass$FieldReflector.getObjFieldValues(java.lang.Object,java.lang.Object[])
void JavaIoObjectStreamClass_FieldReflector::getObjFieldValues(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<void,JavaLangObject,jnipp::Array<JavaLangObject>> method(clazz(), "getObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// void java.io.ObjectStreamClass$FieldReflector.setPrimFieldValues(java.lang.Object,byte[])
void JavaIoObjectStreamClass_FieldReflector::setPrimFieldValues(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) const {
    static jnipp::Method<void,JavaLangObject,jnipp::Array<jbyte>> method(clazz(), "setPrimFieldValues", "(Ljava/lang/Object;[B)V");
    method.call(*this, a0, a1);
}

// void java.io.ObjectStreamClass$FieldReflector.setObjFieldValues(java.lang.Object,java.lang.Object[])
void JavaIoObjectStreamClass_FieldReflector::setObjFieldValues(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<void,JavaLangObject,jnipp::Array<JavaLangObject>> method(clazz(), "setObjFieldValues", "(Ljava/lang/Object;[Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}
#undef unsafe
const jnipp::StaticField<SunMiscUnsafe> JavaIoObjectStreamClass_FieldReflector::unsafe ("java/io/ObjectStreamClass$FieldReflector", "unsafe", "Lsun/misc/Unsafe;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangReflectiveOperationException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ReflectiveOperationException"));
    return cls;
}

// public java.lang.ReflectiveOperationException(java.lang.Throwable)
jnipp::LocalRef<JavaLangReflectiveOperationException> JavaLangReflectiveOperationException::construct(const jnipp::Ref<JavaLangThrowable>& a0) {
    static jnipp::Constructor<JavaLangReflectiveOperationException,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/Throwable;)V");
    return constructor.construct(a0);
}

// public java.lang.ReflectiveOperationException(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaLangReflectiveOperationException> JavaLangReflectiveOperationException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaLangReflectiveOperationException,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.ReflectiveOperationException(java.lang.String)
jnipp::LocalRef<JavaLangReflectiveOperationException> JavaLangReflectiveOperationException::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangReflectiveOperationException,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.ReflectiveOperationException()
jnipp::LocalRef<JavaLangReflectiveOperationException> JavaLangReflectiveOperationException::construct() {
    static jnipp::Constructor<JavaLangReflectiveOperationException> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangReflectiveOperationException::serialVersionUID ("java/lang/ReflectiveOperationException", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClassNotFoundException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ClassNotFoundException"));
    return cls;
}

// public java.lang.ClassNotFoundException(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaLangClassNotFoundException> JavaLangClassNotFoundException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaLangClassNotFoundException,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.ClassNotFoundException(java.lang.String)
jnipp::LocalRef<JavaLangClassNotFoundException> JavaLangClassNotFoundException::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangClassNotFoundException,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.ClassNotFoundException()
jnipp::LocalRef<JavaLangClassNotFoundException> JavaLangClassNotFoundException::construct() {
    static jnipp::Constructor<JavaLangClassNotFoundException> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Throwable java.lang.ClassNotFoundException.getCause()
jnipp::LocalRef<JavaLangThrowable> JavaLangClassNotFoundException::getCause() const {
    static jnipp::Method<JavaLangThrowable> method(clazz(), "getCause", "()Ljava/lang/Throwable;");
    return method.call(*this);
}

// public java.lang.Throwable java.lang.ClassNotFoundException.getException()
jnipp::LocalRef<JavaLangThrowable> JavaLangClassNotFoundException::getException() const {
    static jnipp::Method<JavaLangThrowable> method(clazz(), "getException", "()Ljava/lang/Throwable;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangClassNotFoundException::serialVersionUID ("java/lang/ClassNotFoundException", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectStreamClass_ExceptionInfo::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectStreamClass$ExceptionInfo"));
    return cls;
}

// java.io.ObjectStreamClass$ExceptionInfo(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaIoObjectStreamClass_ExceptionInfo> JavaIoObjectStreamClass_ExceptionInfo::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoObjectStreamClass_ExceptionInfo,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// java.io.InvalidClassException java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException()
jnipp::LocalRef<JavaIoInvalidClassException> JavaIoObjectStreamClass_ExceptionInfo::newInvalidClassException() const {
    static jnipp::Method<JavaIoInvalidClassException> method(clazz(), "newInvalidClassException", "()Ljava/io/InvalidClassException;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangLong::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Long"));
    return cls;
}

// public java.lang.Long(long)
jnipp::LocalRef<JavaLangLong> JavaLangLong::construct(jlong a0) {
    static jnipp::Constructor<JavaLangLong,jlong> constructor(clazz(), "(J)V");
    return constructor.construct(a0);
}

// public java.lang.Long(java.lang.String) throws java.lang.NumberFormatException
jnipp::LocalRef<JavaLangLong> JavaLangLong::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangLong,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public static int java.lang.Long.numberOfLeadingZeros(long)
jint JavaLangLong::numberOfLeadingZeros(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "numberOfLeadingZeros", "(J)I");
    return method.call(a0);
}

// public static int java.lang.Long.numberOfTrailingZeros(long)
jint JavaLangLong::numberOfTrailingZeros(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "numberOfTrailingZeros", "(J)I");
    return method.call(a0);
}

// public static int java.lang.Long.bitCount(long)
jint JavaLangLong::bitCount(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "bitCount", "(J)I");
    return method.call(a0);
}

// public boolean java.lang.Long.equals(java.lang.Object)
jboolean JavaLangLong::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.lang.Long.hashCode()
jint JavaLangLong::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public static long java.lang.Long.reverseBytes(long)
jlong JavaLangLong::reverseBytes(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "reverseBytes", "(J)J");
    return method.call(a0);
}

// public int java.lang.Long.compareTo(java.lang.Long)
jint JavaLangLong::compareTo(const jnipp::Ref<JavaLangLong>& a0) const {
    static jnipp::Method<jint,JavaLangLong> method(clazz(), "compareTo", "(Ljava/lang/Long;)I");
    return method.call(*this, a0);
}

// public static java.lang.Long java.lang.Long.getLong(java.lang.String)
jnipp::LocalRef<JavaLangLong> JavaLangLong::getLong(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangLong,JavaLangString> method(clazz(), "getLong", "(Ljava/lang/String;)Ljava/lang/Long;");
    return method.call(a0);
}

// public static java.lang.Long java.lang.Long.getLong(java.lang.String,java.lang.Long)
jnipp::LocalRef<JavaLangLong> JavaLangLong::getLong(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangLong>& a1) {
    static jnipp::StaticMethod<JavaLangLong,JavaLangString,JavaLangLong> method(clazz(), "getLong", "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;");
    return method.call(a0, a1);
}

// public static java.lang.Long java.lang.Long.getLong(java.lang.String,long)
jnipp::LocalRef<JavaLangLong> JavaLangLong::getLong(const jnipp::Ref<JavaLangString>& a0, jlong a1) {
    static jnipp::StaticMethod<JavaLangLong,JavaLangString,jlong> method(clazz(), "getLong", "(Ljava/lang/String;J)Ljava/lang/Long;");
    return method.call(a0, a1);
}

// public byte java.lang.Long.byteValue()
jbyte JavaLangLong::byteValue() const {
    static jnipp::Method<jbyte> method(clazz(), "byteValue", "()B");
    return method.call(*this);
}

// public short java.lang.Long.shortValue()
jshort JavaLangLong::shortValue() const {
    static jnipp::Method<jshort> method(clazz(), "shortValue", "()S");
    return method.call(*this);
}

// public int java.lang.Long.intValue()
jint JavaLangLong::intValue() const {
    static jnipp::Method<jint> method(clazz(), "intValue", "()I");
    return method.call(*this);
}

// public long java.lang.Long.longValue()
jlong JavaLangLong::longValue() const {
    static jnipp::Method<jlong> method(clazz(), "longValue", "()J");
    return method.call(*this);
}

// public float java.lang.Long.floatValue()
jfloat JavaLangLong::floatValue() const {
    static jnipp::Method<jfloat> method(clazz(), "floatValue", "()F");
    return method.call(*this);
}

// public double java.lang.Long.doubleValue()
jdouble JavaLangLong::doubleValue() const {
    static jnipp::Method<jdouble> method(clazz(), "doubleValue", "()D");
    return method.call(*this);
}

// public static java.lang.Long java.lang.Long.valueOf(long)
jnipp::LocalRef<JavaLangLong> JavaLangLong::valueOf(jlong a0) {
    static jnipp::StaticMethod<JavaLangLong,jlong> method(clazz(), "valueOf", "(J)Ljava/lang/Long;");
    return method.call(a0);
}

// public static java.lang.Long java.lang.Long.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
jnipp::LocalRef<JavaLangLong> JavaLangLong::valueOf(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<JavaLangLong,JavaLangString,jint> method(clazz(), "valueOf", "(Ljava/lang/String;I)Ljava/lang/Long;");
    return method.call(a0, a1);
}

// public static java.lang.Long java.lang.Long.valueOf(java.lang.String) throws java.lang.NumberFormatException
jnipp::LocalRef<JavaLangLong> JavaLangLong::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangLong,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;");
    return method.call(a0);
}

// public static java.lang.String java.lang.Long.toHexString(long)
jnipp::LocalRef<JavaLangString> JavaLangLong::toHexString(jlong a0) {
    static jnipp::StaticMethod<JavaLangString,jlong> method(clazz(), "toHexString", "(J)Ljava/lang/String;");
    return method.call(a0);
}

// static void java.lang.Long.getChars(long,int,char[])
void JavaLangLong::getChars(jlong a0, jint a1, const jnipp::Ref<jnipp::Array<jchar>>& a2) {
    static jnipp::StaticMethod<void,jlong,jint,jnipp::Array<jchar>> method(clazz(), "getChars", "(JI[C)V");
    method.call(a0, a1, a2);
}

// public static java.lang.Long java.lang.Long.decode(java.lang.String) throws java.lang.NumberFormatException
jnipp::LocalRef<JavaLangLong> JavaLangLong::decode(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangLong,JavaLangString> method(clazz(), "decode", "(Ljava/lang/String;)Ljava/lang/Long;");
    return method.call(a0);
}

// public static int java.lang.Long.compare(long,long)
jint JavaLangLong::compare(jlong a0, jlong a1) {
    static jnipp::StaticMethod<jint,jlong,jlong> method(clazz(), "compare", "(JJ)I");
    return method.call(a0, a1);
}

// public static long java.lang.Long.reverse(long)
jlong JavaLangLong::reverse(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "reverse", "(J)J");
    return method.call(a0);
}

// static int java.lang.Long.stringSize(long)
jint JavaLangLong::stringSize(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "stringSize", "(J)I");
    return method.call(a0);
}

// public static java.lang.String java.lang.Long.toOctalString(long)
jnipp::LocalRef<JavaLangString> JavaLangLong::toOctalString(jlong a0) {
    static jnipp::StaticMethod<JavaLangString,jlong> method(clazz(), "toOctalString", "(J)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.lang.Long.toBinaryString(long)
jnipp::LocalRef<JavaLangString> JavaLangLong::toBinaryString(jlong a0) {
    static jnipp::StaticMethod<JavaLangString,jlong> method(clazz(), "toBinaryString", "(J)Ljava/lang/String;");
    return method.call(a0);
}

// private static java.lang.String java.lang.Long.toUnsignedString(long,int)
jnipp::LocalRef<JavaLangString> JavaLangLong::toUnsignedString(jlong a0, jint a1) {
    static jnipp::StaticMethod<JavaLangString,jlong,jint> method(clazz(), "toUnsignedString", "(JI)Ljava/lang/String;");
    return method.call(a0, a1);
}

// public static long java.lang.Long.highestOneBit(long)
jlong JavaLangLong::highestOneBit(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "highestOneBit", "(J)J");
    return method.call(a0);
}

// public static long java.lang.Long.lowestOneBit(long)
jlong JavaLangLong::lowestOneBit(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "lowestOneBit", "(J)J");
    return method.call(a0);
}

// public static long java.lang.Long.rotateLeft(long,int)
jlong JavaLangLong::rotateLeft(jlong a0, jint a1) {
    static jnipp::StaticMethod<jlong,jlong,jint> method(clazz(), "rotateLeft", "(JI)J");
    return method.call(a0, a1);
}

// public static long java.lang.Long.rotateRight(long,int)
jlong JavaLangLong::rotateRight(jlong a0, jint a1) {
    static jnipp::StaticMethod<jlong,jlong,jint> method(clazz(), "rotateRight", "(JI)J");
    return method.call(a0, a1);
}

// public static int java.lang.Long.signum(long)
jint JavaLangLong::signum(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "signum", "(J)I");
    return method.call(a0);
}

// public static long java.lang.Long.parseLong(java.lang.String) throws java.lang.NumberFormatException
jlong JavaLangLong::parseLong(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jlong,JavaLangString> method(clazz(), "parseLong", "(Ljava/lang/String;)J");
    return method.call(a0);
}

// public static long java.lang.Long.parseLong(java.lang.String,int) throws java.lang.NumberFormatException
jlong JavaLangLong::parseLong(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<jlong,JavaLangString,jint> method(clazz(), "parseLong", "(Ljava/lang/String;I)J");
    return method.call(a0, a1);
}
#undef MIN_VALUE
const jnipp::StaticField<jlong> JavaLangLong::MIN_VALUE ("java/lang/Long", "MIN_VALUE", "J");
#undef MAX_VALUE
const jnipp::StaticField<jlong> JavaLangLong::MAX_VALUE ("java/lang/Long", "MAX_VALUE", "J");
#undef TYPE
const jnipp::StaticField<JavaLangClass> JavaLangLong::TYPE ("java/lang/Long", "TYPE", "Ljava/lang/Class;");
#undef SIZE
const jnipp::StaticField<jint> JavaLangLong::SIZE ("java/lang/Long", "SIZE", "I");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangLong::serialVersionUID ("java/lang/Long", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectStreamClass_ClassDataSlot::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectStreamClass$ClassDataSlot"));
    return cls;
}

// java.io.ObjectStreamClass$ClassDataSlot(java.io.ObjectStreamClass,boolean)
jnipp::LocalRef<JavaIoObjectStreamClass_ClassDataSlot> JavaIoObjectStreamClass_ClassDataSlot::construct(const jnipp::Ref<JavaIoObjectStreamClass>& a0, jboolean a1) {
    static jnipp::Constructor<JavaIoObjectStreamClass_ClassDataSlot,JavaIoObjectStreamClass,jboolean> constructor(clazz(), "(Ljava/io/ObjectStreamClass;Z)V");
    return constructor.construct(a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectOutput::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectOutput"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputStream_HandleTable_HandleList::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputStream$HandleTable$HandleList"));
    return cls;
}

// public java.io.ObjectInputStream$HandleTable$HandleList()
jnipp::LocalRef<JavaIoObjectInputStream_HandleTable_HandleList> JavaIoObjectInputStream_HandleTable_HandleList::construct() {
    static jnipp::Constructor<JavaIoObjectInputStream_HandleTable_HandleList> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.io.ObjectInputStream$HandleTable$HandleList.add(int)
void JavaIoObjectInputStream_HandleTable_HandleList::add(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "add", "(I)V");
    method.call(*this, a0);
}

// public int java.io.ObjectInputStream$HandleTable$HandleList.get(int)
jint JavaIoObjectInputStream_HandleTable_HandleList::get(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "get", "(I)I");
    return method.call(*this, a0);
}

// public int java.io.ObjectInputStream$HandleTable$HandleList.size()
jint JavaIoObjectInputStream_HandleTable_HandleList::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputStream_PeekInputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputStream$PeekInputStream"));
    return cls;
}

// java.io.ObjectInputStream$PeekInputStream(java.io.InputStream)
jnipp::LocalRef<JavaIoObjectInputStream_PeekInputStream> JavaIoObjectInputStream_PeekInputStream::construct(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::Constructor<JavaIoObjectInputStream_PeekInputStream,JavaIoInputStream> constructor(clazz(), "(Ljava/io/InputStream;)V");
    return constructor.construct(a0);
}

// public void java.io.ObjectInputStream$PeekInputStream.close() throws java.io.IOException
void JavaIoObjectInputStream_PeekInputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// int java.io.ObjectInputStream$PeekInputStream.peek() throws java.io.IOException
jint JavaIoObjectInputStream_PeekInputStream::peek() const {
    static jnipp::Method<jint> method(clazz(), "peek", "()I");
    return method.call(*this);
}

// public int java.io.ObjectInputStream$PeekInputStream.read() throws java.io.IOException
jint JavaIoObjectInputStream_PeekInputStream::read() const {
    static jnipp::Method<jint> method(clazz(), "read", "()I");
    return method.call(*this);
}

// public int java.io.ObjectInputStream$PeekInputStream.read(byte[],int,int) throws java.io.IOException
jint JavaIoObjectInputStream_PeekInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public long java.io.ObjectInputStream$PeekInputStream.skip(long) throws java.io.IOException
jlong JavaIoObjectInputStream_PeekInputStream::skip(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "skip", "(J)J");
    return method.call(*this, a0);
}

// public int java.io.ObjectInputStream$PeekInputStream.available() throws java.io.IOException
jint JavaIoObjectInputStream_PeekInputStream::available() const {
    static jnipp::Method<jint> method(clazz(), "available", "()I");
    return method.call(*this);
}

// void java.io.ObjectInputStream$PeekInputStream.readFully(byte[],int,int) throws java.io.IOException
void JavaIoObjectInputStream_PeekInputStream::readFully(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "readFully", "([BII)V");
    method.call(*this, a0, a1, a2);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoFilterInputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/FilterInputStream"));
    return cls;
}

// protected java.io.FilterInputStream(java.io.InputStream)
jnipp::LocalRef<JavaIoFilterInputStream> JavaIoFilterInputStream::construct(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::Constructor<JavaIoFilterInputStream,JavaIoInputStream> constructor(clazz(), "(Ljava/io/InputStream;)V");
    return constructor.construct(a0);
}

// public void java.io.FilterInputStream.close() throws java.io.IOException
void JavaIoFilterInputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// public synchronized void java.io.FilterInputStream.mark(int)
void JavaIoFilterInputStream::mark(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "mark", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.io.FilterInputStream.reset() throws java.io.IOException
void JavaIoFilterInputStream::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// public int java.io.FilterInputStream.read() throws java.io.IOException
jint JavaIoFilterInputStream::read() const {
    static jnipp::Method<jint> method(clazz(), "read", "()I");
    return method.call(*this);
}

// public int java.io.FilterInputStream.read(byte[],int,int) throws java.io.IOException
jint JavaIoFilterInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public int java.io.FilterInputStream.read(byte[]) throws java.io.IOException
jint JavaIoFilterInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>> method(clazz(), "read", "([B)I");
    return method.call(*this, a0);
}

// public long java.io.FilterInputStream.skip(long) throws java.io.IOException
jlong JavaIoFilterInputStream::skip(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "skip", "(J)J");
    return method.call(*this, a0);
}

// public int java.io.FilterInputStream.available() throws java.io.IOException
jint JavaIoFilterInputStream::available() const {
    static jnipp::Method<jint> method(clazz(), "available", "()I");
    return method.call(*this);
}

// public boolean java.io.FilterInputStream.markSupported()
jboolean JavaIoFilterInputStream::markSupported() const {
    static jnipp::Method<jboolean> method(clazz(), "markSupported", "()Z");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoDataInputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/DataInputStream"));
    return cls;
}

// public java.io.DataInputStream(java.io.InputStream)
jnipp::LocalRef<JavaIoDataInputStream> JavaIoDataInputStream::construct(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::Constructor<JavaIoDataInputStream,JavaIoInputStream> constructor(clazz(), "(Ljava/io/InputStream;)V");
    return constructor.construct(a0);
}

// public final java.lang.String java.io.DataInputStream.readLine() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoDataInputStream::readLine() const {
    static jnipp::Method<JavaLangString> method(clazz(), "readLine", "()Ljava/lang/String;");
    return method.call(*this);
}

// public final int java.io.DataInputStream.readInt() throws java.io.IOException
jint JavaIoDataInputStream::readInt() const {
    static jnipp::Method<jint> method(clazz(), "readInt", "()I");
    return method.call(*this);
}

// public final int java.io.DataInputStream.read(byte[],int,int) throws java.io.IOException
jint JavaIoDataInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public final int java.io.DataInputStream.read(byte[]) throws java.io.IOException
jint JavaIoDataInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>> method(clazz(), "read", "([B)I");
    return method.call(*this, a0);
}

// public final char java.io.DataInputStream.readChar() throws java.io.IOException
jchar JavaIoDataInputStream::readChar() const {
    static jnipp::Method<jchar> method(clazz(), "readChar", "()C");
    return method.call(*this);
}

// public final java.lang.String java.io.DataInputStream.readUTF() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoDataInputStream::readUTF() const {
    static jnipp::Method<JavaLangString> method(clazz(), "readUTF", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static final java.lang.String java.io.DataInputStream.readUTF(java.io.DataInput) throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoDataInputStream::readUTF(const jnipp::Ref<JavaIoDataInput>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaIoDataInput> method(clazz(), "readUTF", "(Ljava/io/DataInput;)Ljava/lang/String;");
    return method.call(a0);
}

// public final void java.io.DataInputStream.readFully(byte[]) throws java.io.IOException
void JavaIoDataInputStream::readFully(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "readFully", "([B)V");
    method.call(*this, a0);
}

// public final void java.io.DataInputStream.readFully(byte[],int,int) throws java.io.IOException
void JavaIoDataInputStream::readFully(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "readFully", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public final float java.io.DataInputStream.readFloat() throws java.io.IOException
jfloat JavaIoDataInputStream::readFloat() const {
    static jnipp::Method<jfloat> method(clazz(), "readFloat", "()F");
    return method.call(*this);
}

// public final boolean java.io.DataInputStream.readBoolean() throws java.io.IOException
jboolean JavaIoDataInputStream::readBoolean() const {
    static jnipp::Method<jboolean> method(clazz(), "readBoolean", "()Z");
    return method.call(*this);
}

// public final byte java.io.DataInputStream.readByte() throws java.io.IOException
jbyte JavaIoDataInputStream::readByte() const {
    static jnipp::Method<jbyte> method(clazz(), "readByte", "()B");
    return method.call(*this);
}

// public final int java.io.DataInputStream.readUnsignedByte() throws java.io.IOException
jint JavaIoDataInputStream::readUnsignedByte() const {
    static jnipp::Method<jint> method(clazz(), "readUnsignedByte", "()I");
    return method.call(*this);
}

// public final short java.io.DataInputStream.readShort() throws java.io.IOException
jshort JavaIoDataInputStream::readShort() const {
    static jnipp::Method<jshort> method(clazz(), "readShort", "()S");
    return method.call(*this);
}

// public final int java.io.DataInputStream.readUnsignedShort() throws java.io.IOException
jint JavaIoDataInputStream::readUnsignedShort() const {
    static jnipp::Method<jint> method(clazz(), "readUnsignedShort", "()I");
    return method.call(*this);
}

// public final long java.io.DataInputStream.readLong() throws java.io.IOException
jlong JavaIoDataInputStream::readLong() const {
    static jnipp::Method<jlong> method(clazz(), "readLong", "()J");
    return method.call(*this);
}

// public final double java.io.DataInputStream.readDouble() throws java.io.IOException
jdouble JavaIoDataInputStream::readDouble() const {
    static jnipp::Method<jdouble> method(clazz(), "readDouble", "()D");
    return method.call(*this);
}

// public final int java.io.DataInputStream.skipBytes(int) throws java.io.IOException
jint JavaIoDataInputStream::skipBytes(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "skipBytes", "(I)I");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunMiscURLClassPath::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/misc/URLClassPath"));
    return cls;
}

// public sun.misc.URLClassPath(java.net.URL[],java.net.URLStreamHandlerFactory)
jnipp::LocalRef<SunMiscURLClassPath> SunMiscURLClassPath::construct(const jnipp::Ref<jnipp::Array<JavaNetURL>>& a0, const jnipp::Ref<JavaNetURLStreamHandlerFactory>& a1) {
    static jnipp::Constructor<SunMiscURLClassPath,jnipp::Array<JavaNetURL>,JavaNetURLStreamHandlerFactory> constructor(clazz(), "([Ljava/net/URL;Ljava/net/URLStreamHandlerFactory;)V");
    return constructor.construct(a0, a1);
}

// public sun.misc.URLClassPath(java.net.URL[])
jnipp::LocalRef<SunMiscURLClassPath> SunMiscURLClassPath::construct(const jnipp::Ref<jnipp::Array<JavaNetURL>>& a0) {
    static jnipp::Constructor<SunMiscURLClassPath,jnipp::Array<JavaNetURL>> constructor(clazz(), "([Ljava/net/URL;)V");
    return constructor.construct(a0);
}

// public sun.misc.Resource sun.misc.URLClassPath.getResource(java.lang.String,boolean)
jnipp::LocalRef<SunMiscResource> SunMiscURLClassPath::getResource(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<SunMiscResource,JavaLangString,jboolean> method(clazz(), "getResource", "(Ljava/lang/String;Z)Lsun/misc/Resource;");
    return method.call(*this, a0, a1);
}

// public sun.misc.Resource sun.misc.URLClassPath.getResource(java.lang.String)
jnipp::LocalRef<SunMiscResource> SunMiscURLClassPath::getResource(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<SunMiscResource,JavaLangString> method(clazz(), "getResource", "(Ljava/lang/String;)Lsun/misc/Resource;");
    return method.call(*this, a0);
}

// public java.util.Enumeration sun.misc.URLClassPath.getResources(java.lang.String)
jnipp::LocalRef<JavaUtilEnumeration> SunMiscURLClassPath::getResources(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilEnumeration,JavaLangString> method(clazz(), "getResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
    return method.call(*this, a0);
}

// public java.util.Enumeration sun.misc.URLClassPath.getResources(java.lang.String,boolean)
jnipp::LocalRef<JavaUtilEnumeration> SunMiscURLClassPath::getResources(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<JavaUtilEnumeration,JavaLangString,jboolean> method(clazz(), "getResources", "(Ljava/lang/String;Z)Ljava/util/Enumeration;");
    return method.call(*this, a0, a1);
}

// public java.net.URL sun.misc.URLClassPath.findResource(java.lang.String,boolean)
jnipp::LocalRef<JavaNetURL> SunMiscURLClassPath::findResource(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<JavaNetURL,JavaLangString,jboolean> method(clazz(), "findResource", "(Ljava/lang/String;Z)Ljava/net/URL;");
    return method.call(*this, a0, a1);
}

// public java.util.Enumeration sun.misc.URLClassPath.findResources(java.lang.String,boolean)
jnipp::LocalRef<JavaUtilEnumeration> SunMiscURLClassPath::findResources(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<JavaUtilEnumeration,JavaLangString,jboolean> method(clazz(), "findResources", "(Ljava/lang/String;Z)Ljava/util/Enumeration;");
    return method.call(*this, a0, a1);
}

// private void sun.misc.URLClassPath.push(java.net.URL[])
void SunMiscURLClassPath::push(const jnipp::Ref<jnipp::Array<JavaNetURL>>& a0) const {
    static jnipp::Method<void,jnipp::Array<JavaNetURL>> method(clazz(), "push", "([Ljava/net/URL;)V");
    method.call(*this, a0);
}

// public static java.net.URL[] sun.misc.URLClassPath.pathToURLs(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaNetURL>> SunMiscURLClassPath::pathToURLs(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetURL>,JavaLangString> method(clazz(), "pathToURLs", "(Ljava/lang/String;)[Ljava/net/URL;");
    return method.call(a0);
}

// public synchronized void sun.misc.URLClassPath.addURL(java.net.URL)
void SunMiscURLClassPath::addURL(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<void,JavaNetURL> method(clazz(), "addURL", "(Ljava/net/URL;)V");
    method.call(*this, a0);
}

// public java.net.URL[] sun.misc.URLClassPath.getURLs()
jnipp::LocalRef<jnipp::Array<JavaNetURL>> SunMiscURLClassPath::getURLs() const {
    static jnipp::Method<jnipp::Array<JavaNetURL>> method(clazz(), "getURLs", "()[Ljava/net/URL;");
    return method.call(*this);
}

// public synchronized java.util.List sun.misc.URLClassPath.closeLoaders()
jnipp::LocalRef<JavaUtilList> SunMiscURLClassPath::closeLoaders() const {
    static jnipp::Method<JavaUtilList> method(clazz(), "closeLoaders", "()Ljava/util/List;");
    return method.call(*this);
}

// public java.net.URL sun.misc.URLClassPath.checkURL(java.net.URL)
jnipp::LocalRef<JavaNetURL> SunMiscURLClassPath::checkURL(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<JavaNetURL,JavaNetURL> method(clazz(), "checkURL", "(Ljava/net/URL;)Ljava/net/URL;");
    return method.call(*this, a0);
}

// static void sun.misc.URLClassPath.check(java.net.URL) throws java.io.IOException
void SunMiscURLClassPath::check(const jnipp::Ref<JavaNetURL>& a0) {
    static jnipp::StaticMethod<void,JavaNetURL> method(clazz(), "check", "(Ljava/net/URL;)V");
    method.call(a0);
}

// private synchronized sun.misc.URLClassPath$Loader sun.misc.URLClassPath.getLoader(int)
jnipp::LocalRef<SunMiscURLClassPath_Loader> SunMiscURLClassPath::getLoader(jint a0) const {
    static jnipp::Method<SunMiscURLClassPath_Loader,jint> method(clazz(), "getLoader", "(I)Lsun/misc/URLClassPath$Loader;");
    return method.call(*this, a0);
}

// private sun.misc.URLClassPath$Loader sun.misc.URLClassPath.getLoader(java.net.URL) throws java.io.IOException
jnipp::LocalRef<SunMiscURLClassPath_Loader> SunMiscURLClassPath::getLoader(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<SunMiscURLClassPath_Loader,JavaNetURL> method(clazz(), "getLoader", "(Ljava/net/URL;)Lsun/misc/URLClassPath$Loader;");
    return method.call(*this, a0);
}
#undef USER_AGENT_JAVA_VERSION
const jnipp::StaticField<JavaLangString> SunMiscURLClassPath::USER_AGENT_JAVA_VERSION ("sun/misc/URLClassPath", "USER_AGENT_JAVA_VERSION", "Ljava/lang/String;");
#undef JAVA_VERSION
const jnipp::StaticField<JavaLangString> SunMiscURLClassPath::JAVA_VERSION ("sun/misc/URLClassPath", "JAVA_VERSION", "Ljava/lang/String;");
#undef DEBUG
const jnipp::StaticField<jboolean> SunMiscURLClassPath::DEBUG ("sun/misc/URLClassPath", "DEBUG", "Z");
#undef DISABLE_JAR_CHECKING
const jnipp::StaticField<jboolean> SunMiscURLClassPath::DISABLE_JAR_CHECKING ("sun/misc/URLClassPath", "DISABLE_JAR_CHECKING", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilAbstractCollection::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/AbstractCollection"));
    return cls;
}

// protected java.util.AbstractCollection()
jnipp::LocalRef<JavaUtilAbstractCollection> JavaUtilAbstractCollection::construct() {
    static jnipp::Constructor<JavaUtilAbstractCollection> constructor(clazz(), "()V");
    return constructor.construct();
}

// public boolean java.util.AbstractCollection.add(java.lang.Object)
jboolean JavaUtilAbstractCollection::add(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "add", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.AbstractCollection.remove(java.lang.Object)
jboolean JavaUtilAbstractCollection::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public void java.util.AbstractCollection.clear()
void JavaUtilAbstractCollection::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public boolean java.util.AbstractCollection.isEmpty()
jboolean JavaUtilAbstractCollection::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public boolean java.util.AbstractCollection.contains(java.lang.Object)
jboolean JavaUtilAbstractCollection::contains(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "contains", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public java.lang.Object[] java.util.AbstractCollection.toArray(java.lang.Object[])
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaUtilAbstractCollection::toArray(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangObject>,jnipp::Array<JavaLangObject>> method(clazz(), "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object[] java.util.AbstractCollection.toArray()
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaUtilAbstractCollection::toArray() const {
    static jnipp::Method<jnipp::Array<JavaLangObject>> method(clazz(), "toArray", "()[Ljava/lang/Object;");
    return method.call(*this);
}

// public boolean java.util.AbstractCollection.addAll(java.util.Collection)
jboolean JavaUtilAbstractCollection::addAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "addAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// private static int java.util.AbstractCollection.hugeCapacity(int)
jint JavaUtilAbstractCollection::hugeCapacity(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "hugeCapacity", "(I)I");
    return method.call(a0);
}

// public boolean java.util.AbstractCollection.containsAll(java.util.Collection)
jboolean JavaUtilAbstractCollection::containsAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "containsAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.AbstractCollection.removeAll(java.util.Collection)
jboolean JavaUtilAbstractCollection::removeAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "removeAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.AbstractCollection.retainAll(java.util.Collection)
jboolean JavaUtilAbstractCollection::retainAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "retainAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// private static java.lang.Object[] java.util.AbstractCollection.finishToArray(java.lang.Object[],java.util.Iterator)
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaUtilAbstractCollection::finishToArray(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0, const jnipp::Ref<JavaUtilIterator>& a1) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangObject>,jnipp::Array<JavaLangObject>,JavaUtilIterator> method(clazz(), "finishToArray", "([Ljava/lang/Object;Ljava/util/Iterator;)[Ljava/lang/Object;");
    return method.call(a0, a1);
}
#undef MAX_ARRAY_SIZE
const jnipp::StaticField<jint> JavaUtilAbstractCollection::MAX_ARRAY_SIZE ("java/util/AbstractCollection", "MAX_ARRAY_SIZE", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilAbstractList::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/AbstractList"));
    return cls;
}

// protected java.util.AbstractList()
jnipp::LocalRef<JavaUtilAbstractList> JavaUtilAbstractList::construct() {
    static jnipp::Constructor<JavaUtilAbstractList> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.util.AbstractList.add(int,java.lang.Object)
void JavaUtilAbstractList::add(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,jint,JavaLangObject> method(clazz(), "add", "(ILjava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// public boolean java.util.AbstractList.add(java.lang.Object)
jboolean JavaUtilAbstractList::add(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "add", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.AbstractList.remove(int)
jnipp::LocalRef<JavaLangObject> JavaUtilAbstractList::remove(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "remove", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public boolean java.util.AbstractList.equals(java.lang.Object)
jboolean JavaUtilAbstractList::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.AbstractList.hashCode()
jint JavaUtilAbstractList::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.util.AbstractList.indexOf(java.lang.Object)
jint JavaUtilAbstractList::indexOf(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "indexOf", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public void java.util.AbstractList.clear()
void JavaUtilAbstractList::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public int java.util.AbstractList.lastIndexOf(java.lang.Object)
jint JavaUtilAbstractList::lastIndexOf(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "lastIndexOf", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public java.util.List java.util.AbstractList.subList(int,int)
jnipp::LocalRef<JavaUtilList> JavaUtilAbstractList::subList(jint a0, jint a1) const {
    static jnipp::Method<JavaUtilList,jint,jint> method(clazz(), "subList", "(II)Ljava/util/List;");
    return method.call(*this, a0, a1);
}

// public boolean java.util.AbstractList.addAll(int,java.util.Collection)
jboolean JavaUtilAbstractList::addAll(jint a0, const jnipp::Ref<JavaUtilCollection>& a1) const {
    static jnipp::Method<jboolean,jint,JavaUtilCollection> method(clazz(), "addAll", "(ILjava/util/Collection;)Z");
    return method.call(*this, a0, a1);
}

// public java.util.Iterator java.util.AbstractList.iterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilAbstractList::iterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "iterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// public java.lang.Object java.util.AbstractList.set(int,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilAbstractList::set(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,jint,JavaLangObject> method(clazz(), "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// protected void java.util.AbstractList.removeRange(int,int)
void JavaUtilAbstractList::removeRange(jint a0, jint a1) const {
    static jnipp::Method<void,jint,jint> method(clazz(), "removeRange", "(II)V");
    method.call(*this, a0, a1);
}

// public java.util.ListIterator java.util.AbstractList.listIterator()
jnipp::LocalRef<JavaUtilListIterator> JavaUtilAbstractList::listIterator() const {
    static jnipp::Method<JavaUtilListIterator> method(clazz(), "listIterator", "()Ljava/util/ListIterator;");
    return method.call(*this);
}

// public java.util.ListIterator java.util.AbstractList.listIterator(int)
jnipp::LocalRef<JavaUtilListIterator> JavaUtilAbstractList::listIterator(jint a0) const {
    static jnipp::Method<JavaUtilListIterator,jint> method(clazz(), "listIterator", "(I)Ljava/util/ListIterator;");
    return method.call(*this, a0);
}

// private void java.util.AbstractList.rangeCheckForAdd(int)
void JavaUtilAbstractList::rangeCheckForAdd(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "rangeCheckForAdd", "(I)V");
    method.call(*this, a0);
}

// private java.lang.String java.util.AbstractList.outOfBoundsMsg(int)
jnipp::LocalRef<JavaLangString> JavaUtilAbstractList::outOfBoundsMsg(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "outOfBoundsMsg", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilVector::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Vector"));
    return cls;
}

// public java.util.Vector(java.util.Collection)
jnipp::LocalRef<JavaUtilVector> JavaUtilVector::construct(const jnipp::Ref<JavaUtilCollection>& a0) {
    static jnipp::Constructor<JavaUtilVector,JavaUtilCollection> constructor(clazz(), "(Ljava/util/Collection;)V");
    return constructor.construct(a0);
}

// public java.util.Vector()
jnipp::LocalRef<JavaUtilVector> JavaUtilVector::construct() {
    static jnipp::Constructor<JavaUtilVector> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.Vector(int)
jnipp::LocalRef<JavaUtilVector> JavaUtilVector::construct(jint a0) {
    static jnipp::Constructor<JavaUtilVector,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.util.Vector(int,int)
jnipp::LocalRef<JavaUtilVector> JavaUtilVector::construct(jint a0, jint a1) {
    static jnipp::Constructor<JavaUtilVector,jint,jint> constructor(clazz(), "(II)V");
    return constructor.construct(a0, a1);
}

// public synchronized boolean java.util.Vector.add(java.lang.Object)
jboolean JavaUtilVector::add(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "add", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public void java.util.Vector.add(int,java.lang.Object)
void JavaUtilVector::add(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,jint,JavaLangObject> method(clazz(), "add", "(ILjava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// public boolean java.util.Vector.remove(java.lang.Object)
jboolean JavaUtilVector::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public synchronized java.lang.Object java.util.Vector.remove(int)
jnipp::LocalRef<JavaLangObject> JavaUtilVector::remove(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "remove", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public synchronized java.lang.Object java.util.Vector.get(int)
jnipp::LocalRef<JavaLangObject> JavaUtilVector::get(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "get", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public synchronized boolean java.util.Vector.equals(java.lang.Object)
jboolean JavaUtilVector::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public synchronized int java.util.Vector.hashCode()
jint JavaUtilVector::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public synchronized java.lang.Object java.util.Vector.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilVector::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public int java.util.Vector.indexOf(java.lang.Object)
jint JavaUtilVector::indexOf(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "indexOf", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public synchronized int java.util.Vector.indexOf(java.lang.Object,int)
jint JavaUtilVector::indexOf(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangObject,jint> method(clazz(), "indexOf", "(Ljava/lang/Object;I)I");
    return method.call(*this, a0, a1);
}

// public void java.util.Vector.clear()
void JavaUtilVector::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public synchronized boolean java.util.Vector.isEmpty()
jboolean JavaUtilVector::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public synchronized int java.util.Vector.lastIndexOf(java.lang.Object)
jint JavaUtilVector::lastIndexOf(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "lastIndexOf", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public synchronized int java.util.Vector.lastIndexOf(java.lang.Object,int)
jint JavaUtilVector::lastIndexOf(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangObject,jint> method(clazz(), "lastIndexOf", "(Ljava/lang/Object;I)I");
    return method.call(*this, a0, a1);
}

// public boolean java.util.Vector.contains(java.lang.Object)
jboolean JavaUtilVector::contains(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "contains", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public synchronized int java.util.Vector.size()
jint JavaUtilVector::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public synchronized java.util.List java.util.Vector.subList(int,int)
jnipp::LocalRef<JavaUtilList> JavaUtilVector::subList(jint a0, jint a1) const {
    static jnipp::Method<JavaUtilList,jint,jint> method(clazz(), "subList", "(II)Ljava/util/List;");
    return method.call(*this, a0, a1);
}

// public synchronized java.lang.Object[] java.util.Vector.toArray()
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaUtilVector::toArray() const {
    static jnipp::Method<jnipp::Array<JavaLangObject>> method(clazz(), "toArray", "()[Ljava/lang/Object;");
    return method.call(*this);
}

// public synchronized java.lang.Object[] java.util.Vector.toArray(java.lang.Object[])
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaUtilVector::toArray(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangObject>,jnipp::Array<JavaLangObject>> method(clazz(), "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public synchronized boolean java.util.Vector.addAll(int,java.util.Collection)
jboolean JavaUtilVector::addAll(jint a0, const jnipp::Ref<JavaUtilCollection>& a1) const {
    static jnipp::Method<jboolean,jint,JavaUtilCollection> method(clazz(), "addAll", "(ILjava/util/Collection;)Z");
    return method.call(*this, a0, a1);
}

// public synchronized boolean java.util.Vector.addAll(java.util.Collection)
jboolean JavaUtilVector::addAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "addAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// public synchronized java.util.Iterator java.util.Vector.iterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilVector::iterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "iterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// public synchronized void java.util.Vector.addElement(java.lang.Object)
void JavaUtilVector::addElement(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<void,JavaLangObject> method(clazz(), "addElement", "(Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// public synchronized java.lang.Object java.util.Vector.elementAt(int)
jnipp::LocalRef<JavaLangObject> JavaUtilVector::elementAt(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "elementAt", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private void java.util.Vector.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaUtilVector::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public java.util.Enumeration java.util.Vector.elements()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilVector::elements() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "elements", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public synchronized java.lang.Object java.util.Vector.set(int,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilVector::set(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,jint,JavaLangObject> method(clazz(), "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public synchronized int java.util.Vector.capacity()
jint JavaUtilVector::capacity() const {
    static jnipp::Method<jint> method(clazz(), "capacity", "()I");
    return method.call(*this);
}

// public synchronized void java.util.Vector.ensureCapacity(int)
void JavaUtilVector::ensureCapacity(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureCapacity", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.util.Vector.trimToSize()
void JavaUtilVector::trimToSize() const {
    static jnipp::Method<void> method(clazz(), "trimToSize", "()V");
    method.call(*this);
}

// java.lang.Object java.util.Vector.elementData(int)
jnipp::LocalRef<JavaLangObject> JavaUtilVector::elementData(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "elementData", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public synchronized void java.util.Vector.copyInto(java.lang.Object[])
void JavaUtilVector::copyInto(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0) const {
    static jnipp::Method<void,jnipp::Array<JavaLangObject>> method(clazz(), "copyInto", "([Ljava/lang/Object;)V");
    method.call(*this, a0);
}

// private void java.util.Vector.ensureCapacityHelper(int)
void JavaUtilVector::ensureCapacityHelper(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureCapacityHelper", "(I)V");
    method.call(*this, a0);
}

// private void java.util.Vector.grow(int)
void JavaUtilVector::grow(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "grow", "(I)V");
    method.call(*this, a0);
}

// private static int java.util.Vector.hugeCapacity(int)
jint JavaUtilVector::hugeCapacity(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "hugeCapacity", "(I)I");
    return method.call(a0);
}

// public synchronized void java.util.Vector.setSize(int)
void JavaUtilVector::setSize(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setSize", "(I)V");
    method.call(*this, a0);
}

// public synchronized java.lang.Object java.util.Vector.firstElement()
jnipp::LocalRef<JavaLangObject> JavaUtilVector::firstElement() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "firstElement", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public synchronized java.lang.Object java.util.Vector.lastElement()
jnipp::LocalRef<JavaLangObject> JavaUtilVector::lastElement() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "lastElement", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public synchronized void java.util.Vector.setElementAt(java.lang.Object,int)
void JavaUtilVector::setElementAt(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangObject,jint> method(clazz(), "setElementAt", "(Ljava/lang/Object;I)V");
    method.call(*this, a0, a1);
}

// public synchronized void java.util.Vector.removeElementAt(int)
void JavaUtilVector::removeElementAt(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "removeElementAt", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.util.Vector.insertElementAt(java.lang.Object,int)
void JavaUtilVector::insertElementAt(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangObject,jint> method(clazz(), "insertElementAt", "(Ljava/lang/Object;I)V");
    method.call(*this, a0, a1);
}

// public synchronized boolean java.util.Vector.removeElement(java.lang.Object)
jboolean JavaUtilVector::removeElement(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "removeElement", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public synchronized void java.util.Vector.removeAllElements()
void JavaUtilVector::removeAllElements() const {
    static jnipp::Method<void> method(clazz(), "removeAllElements", "()V");
    method.call(*this);
}

// public synchronized boolean java.util.Vector.containsAll(java.util.Collection)
jboolean JavaUtilVector::containsAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "containsAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// public synchronized boolean java.util.Vector.removeAll(java.util.Collection)
jboolean JavaUtilVector::removeAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "removeAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// public synchronized boolean java.util.Vector.retainAll(java.util.Collection)
jboolean JavaUtilVector::retainAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "retainAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// protected synchronized void java.util.Vector.removeRange(int,int)
void JavaUtilVector::removeRange(jint a0, jint a1) const {
    static jnipp::Method<void,jint,jint> method(clazz(), "removeRange", "(II)V");
    method.call(*this, a0, a1);
}

// public synchronized java.util.ListIterator java.util.Vector.listIterator()
jnipp::LocalRef<JavaUtilListIterator> JavaUtilVector::listIterator() const {
    static jnipp::Method<JavaUtilListIterator> method(clazz(), "listIterator", "()Ljava/util/ListIterator;");
    return method.call(*this);
}

// public synchronized java.util.ListIterator java.util.Vector.listIterator(int)
jnipp::LocalRef<JavaUtilListIterator> JavaUtilVector::listIterator(jint a0) const {
    static jnipp::Method<JavaUtilListIterator,jint> method(clazz(), "listIterator", "(I)Ljava/util/ListIterator;");
    return method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilVector::serialVersionUID ("java/util/Vector", "serialVersionUID", "J");
#undef MAX_ARRAY_SIZE
const jnipp::StaticField<jint> JavaUtilVector::MAX_ARRAY_SIZE ("java/util/Vector", "MAX_ARRAY_SIZE", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilStack::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Stack"));
    return cls;
}

// public java.util.Stack()
jnipp::LocalRef<JavaUtilStack> JavaUtilStack::construct() {
    static jnipp::Constructor<JavaUtilStack> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Object java.util.Stack.push(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilStack::push(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "push", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public synchronized java.lang.Object java.util.Stack.pop()
jnipp::LocalRef<JavaLangObject> JavaUtilStack::pop() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "pop", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public synchronized java.lang.Object java.util.Stack.peek()
jnipp::LocalRef<JavaLangObject> JavaUtilStack::peek() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "peek", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public boolean java.util.Stack.empty()
jboolean JavaUtilStack::empty() const {
    static jnipp::Method<jboolean> method(clazz(), "empty", "()Z");
    return method.call(*this);
}

// public synchronized int java.util.Stack.search(java.lang.Object)
jint JavaUtilStack::search(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "search", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilStack::serialVersionUID ("java/util/Stack", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangAssertionStatusDirectives::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/AssertionStatusDirectives"));
    return cls;
}

// java.lang.AssertionStatusDirectives()
jnipp::LocalRef<JavaLangAssertionStatusDirectives> JavaLangAssertionStatusDirectives::construct() {
    static jnipp::Constructor<JavaLangAssertionStatusDirectives> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangVoid::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Void"));
    return cls;
}

// private java.lang.Void()
jnipp::LocalRef<JavaLangVoid> JavaLangVoid::construct() {
    static jnipp::Constructor<JavaLangVoid> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef TYPE
const jnipp::StaticField<JavaLangClass> JavaLangVoid::TYPE ("java/lang/Void", "TYPE", "Ljava/lang/Class;");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityCodeSource::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/CodeSource"));
    return cls;
}

// public java.security.CodeSource(java.net.URL,java.security.cert.Certificate[])
jnipp::LocalRef<JavaSecurityCodeSource> JavaSecurityCodeSource::construct(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<jnipp::Array<JavaSecurityCertCertificate>>& a1) {
    static jnipp::Constructor<JavaSecurityCodeSource,JavaNetURL,jnipp::Array<JavaSecurityCertCertificate>> constructor(clazz(), "(Ljava/net/URL;[Ljava/security/cert/Certificate;)V");
    return constructor.construct(a0, a1);
}

// public java.security.CodeSource(java.net.URL,java.security.CodeSigner[])
jnipp::LocalRef<JavaSecurityCodeSource> JavaSecurityCodeSource::construct(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<jnipp::Array<JavaSecurityCodeSigner>>& a1) {
    static jnipp::Constructor<JavaSecurityCodeSource,JavaNetURL,jnipp::Array<JavaSecurityCodeSigner>> constructor(clazz(), "(Ljava/net/URL;[Ljava/security/CodeSigner;)V");
    return constructor.construct(a0, a1);
}

// public boolean java.security.CodeSource.equals(java.lang.Object)
jboolean JavaSecurityCodeSource::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.security.CodeSource.hashCode()
jint JavaSecurityCodeSource::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public final java.net.URL java.security.CodeSource.getLocation()
jnipp::LocalRef<JavaNetURL> JavaSecurityCodeSource::getLocation() const {
    static jnipp::Method<JavaNetURL> method(clazz(), "getLocation", "()Ljava/net/URL;");
    return method.call(*this);
}

// public final java.security.cert.Certificate[] java.security.CodeSource.getCertificates()
jnipp::LocalRef<jnipp::Array<JavaSecurityCertCertificate>> JavaSecurityCodeSource::getCertificates() const {
    static jnipp::Method<jnipp::Array<JavaSecurityCertCertificate>> method(clazz(), "getCertificates", "()[Ljava/security/cert/Certificate;");
    return method.call(*this);
}

// private void java.security.CodeSource.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaSecurityCodeSource::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.security.CodeSource.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaSecurityCodeSource::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public boolean java.security.CodeSource.implies(java.security.CodeSource)
jboolean JavaSecurityCodeSource::implies(const jnipp::Ref<JavaSecurityCodeSource>& a0) const {
    static jnipp::Method<jboolean,JavaSecurityCodeSource> method(clazz(), "implies", "(Ljava/security/CodeSource;)Z");
    return method.call(*this, a0);
}

// public final java.security.CodeSigner[] java.security.CodeSource.getCodeSigners()
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSigner>> JavaSecurityCodeSource::getCodeSigners() const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSigner>> method(clazz(), "getCodeSigners", "()[Ljava/security/CodeSigner;");
    return method.call(*this);
}

// private boolean java.security.CodeSource.matchCerts(java.security.CodeSource,boolean)
jboolean JavaSecurityCodeSource::matchCerts(const jnipp::Ref<JavaSecurityCodeSource>& a0, jboolean a1) const {
    static jnipp::Method<jboolean,JavaSecurityCodeSource,jboolean> method(clazz(), "matchCerts", "(Ljava/security/CodeSource;Z)Z");
    return method.call(*this, a0, a1);
}

// private boolean java.security.CodeSource.matchLocation(java.security.CodeSource)
jboolean JavaSecurityCodeSource::matchLocation(const jnipp::Ref<JavaSecurityCodeSource>& a0) const {
    static jnipp::Method<jboolean,JavaSecurityCodeSource> method(clazz(), "matchLocation", "(Ljava/security/CodeSource;)Z");
    return method.call(*this, a0);
}

// private java.security.CodeSigner[] java.security.CodeSource.convertCertArrayToSignerArray(java.security.cert.Certificate[])
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSigner>> JavaSecurityCodeSource::convertCertArrayToSignerArray(const jnipp::Ref<jnipp::Array<JavaSecurityCertCertificate>>& a0) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSigner>,jnipp::Array<JavaSecurityCertCertificate>> method(clazz(), "convertCertArrayToSignerArray", "([Ljava/security/cert/Certificate;)[Ljava/security/CodeSigner;");
    return method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityCodeSource::serialVersionUID ("java/security/CodeSource", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoFile::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/File"));
    return cls;
}

// public java.io.File(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaIoFile> JavaIoFile::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoFile,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.io.File(java.lang.String)
jnipp::LocalRef<JavaIoFile> JavaIoFile::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaIoFile,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// private java.io.File(java.lang.String,java.io.File)
jnipp::LocalRef<JavaIoFile> JavaIoFile::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaIoFile>& a1) {
    static jnipp::Constructor<JavaIoFile,JavaLangString,JavaIoFile> constructor(clazz(), "(Ljava/lang/String;Ljava/io/File;)V");
    return constructor.construct(a0, a1);
}

// public java.io.File(java.io.File,java.lang.String)
jnipp::LocalRef<JavaIoFile> JavaIoFile::construct(const jnipp::Ref<JavaIoFile>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoFile,JavaIoFile,JavaLangString> constructor(clazz(), "(Ljava/io/File;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.io.File(java.net.URI)
jnipp::LocalRef<JavaIoFile> JavaIoFile::construct(const jnipp::Ref<JavaNetURI>& a0) {
    static jnipp::Constructor<JavaIoFile,JavaNetURI> constructor(clazz(), "(Ljava/net/URI;)V");
    return constructor.construct(a0);
}

// private java.io.File(java.lang.String,int)
jnipp::LocalRef<JavaIoFile> JavaIoFile::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaIoFile,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public boolean java.io.File.equals(java.lang.Object)
jboolean JavaIoFile::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.io.File.hashCode()
jint JavaIoFile::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.io.File.compareTo(java.io.File)
jint JavaIoFile::compareTo(const jnipp::Ref<JavaIoFile>& a0) const {
    static jnipp::Method<jint,JavaIoFile> method(clazz(), "compareTo", "(Ljava/io/File;)I");
    return method.call(*this, a0);
}

// public java.lang.String java.io.File.getName()
jnipp::LocalRef<JavaLangString> JavaIoFile::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public long java.io.File.length()
jlong JavaIoFile::length() const {
    static jnipp::Method<jlong> method(clazz(), "length", "()J");
    return method.call(*this);
}

// public java.lang.String java.io.File.getParent()
jnipp::LocalRef<JavaLangString> JavaIoFile::getParent() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getParent", "()Ljava/lang/String;");
    return method.call(*this);
}

// public boolean java.io.File.isAbsolute()
jboolean JavaIoFile::isAbsolute() const {
    static jnipp::Method<jboolean> method(clazz(), "isAbsolute", "()Z");
    return method.call(*this);
}

// public java.lang.String java.io.File.getCanonicalPath() throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaIoFile::getCanonicalPath() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getCanonicalPath", "()Ljava/lang/String;");
    return method.call(*this);
}

// private synchronized void java.io.File.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaIoFile::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private synchronized void java.io.File.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaIoFile::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public boolean java.io.File.setReadOnly()
jboolean JavaIoFile::setReadOnly() const {
    static jnipp::Method<jboolean> method(clazz(), "setReadOnly", "()Z");
    return method.call(*this);
}

// public java.lang.String[] java.io.File.list()
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaIoFile::list() const {
    static jnipp::Method<jnipp::Array<JavaLangString>> method(clazz(), "list", "()[Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String[] java.io.File.list(java.io.FilenameFilter)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaIoFile::list(const jnipp::Ref<JavaIoFilenameFilter>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaIoFilenameFilter> method(clazz(), "list", "(Ljava/io/FilenameFilter;)[Ljava/lang/String;");
    return method.call(*this, a0);
}

// public boolean java.io.File.delete()
jboolean JavaIoFile::delete_() const {
    static jnipp::Method<jboolean> method(clazz(), "delete", "()Z");
    return method.call(*this);
}

// public boolean java.io.File.exists()
jboolean JavaIoFile::exists() const {
    static jnipp::Method<jboolean> method(clazz(), "exists", "()Z");
    return method.call(*this);
}

// public java.lang.String java.io.File.getPath()
jnipp::LocalRef<JavaLangString> JavaIoFile::getPath() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getPath", "()Ljava/lang/String;");
    return method.call(*this);
}

// final boolean java.io.File.isInvalid()
jboolean JavaIoFile::isInvalid() const {
    static jnipp::Method<jboolean> method(clazz(), "isInvalid", "()Z");
    return method.call(*this);
}

// int java.io.File.getPrefixLength()
jint JavaIoFile::getPrefixLength() const {
    static jnipp::Method<jint> method(clazz(), "getPrefixLength", "()I");
    return method.call(*this);
}

// public java.io.File java.io.File.getParentFile()
jnipp::LocalRef<JavaIoFile> JavaIoFile::getParentFile() const {
    static jnipp::Method<JavaIoFile> method(clazz(), "getParentFile", "()Ljava/io/File;");
    return method.call(*this);
}

// public java.lang.String java.io.File.getAbsolutePath()
jnipp::LocalRef<JavaLangString> JavaIoFile::getAbsolutePath() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getAbsolutePath", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.io.File java.io.File.getAbsoluteFile()
jnipp::LocalRef<JavaIoFile> JavaIoFile::getAbsoluteFile() const {
    static jnipp::Method<JavaIoFile> method(clazz(), "getAbsoluteFile", "()Ljava/io/File;");
    return method.call(*this);
}

// public java.io.File java.io.File.getCanonicalFile() throws java.io.IOException
jnipp::LocalRef<JavaIoFile> JavaIoFile::getCanonicalFile() const {
    static jnipp::Method<JavaIoFile> method(clazz(), "getCanonicalFile", "()Ljava/io/File;");
    return method.call(*this);
}

// private static java.lang.String java.io.File.slashify(java.lang.String,boolean)
jnipp::LocalRef<JavaLangString> JavaIoFile::slashify(const jnipp::Ref<JavaLangString>& a0, jboolean a1) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString,jboolean> method(clazz(), "slashify", "(Ljava/lang/String;Z)Ljava/lang/String;");
    return method.call(a0, a1);
}

// public java.net.URL java.io.File.toURL() throws java.net.MalformedURLException
jnipp::LocalRef<JavaNetURL> JavaIoFile::toURL() const {
    static jnipp::Method<JavaNetURL> method(clazz(), "toURL", "()Ljava/net/URL;");
    return method.call(*this);
}

// public java.net.URI java.io.File.toURI()
jnipp::LocalRef<JavaNetURI> JavaIoFile::toURI() const {
    static jnipp::Method<JavaNetURI> method(clazz(), "toURI", "()Ljava/net/URI;");
    return method.call(*this);
}

// public boolean java.io.File.canRead()
jboolean JavaIoFile::canRead() const {
    static jnipp::Method<jboolean> method(clazz(), "canRead", "()Z");
    return method.call(*this);
}

// public boolean java.io.File.canWrite()
jboolean JavaIoFile::canWrite() const {
    static jnipp::Method<jboolean> method(clazz(), "canWrite", "()Z");
    return method.call(*this);
}

// public boolean java.io.File.isDirectory()
jboolean JavaIoFile::isDirectory() const {
    static jnipp::Method<jboolean> method(clazz(), "isDirectory", "()Z");
    return method.call(*this);
}

// public boolean java.io.File.isFile()
jboolean JavaIoFile::isFile() const {
    static jnipp::Method<jboolean> method(clazz(), "isFile", "()Z");
    return method.call(*this);
}

// public boolean java.io.File.isHidden()
jboolean JavaIoFile::isHidden() const {
    static jnipp::Method<jboolean> method(clazz(), "isHidden", "()Z");
    return method.call(*this);
}

// public long java.io.File.lastModified()
jlong JavaIoFile::lastModified() const {
    static jnipp::Method<jlong> method(clazz(), "lastModified", "()J");
    return method.call(*this);
}

// public boolean java.io.File.createNewFile() throws java.io.IOException
jboolean JavaIoFile::createNewFile() const {
    static jnipp::Method<jboolean> method(clazz(), "createNewFile", "()Z");
    return method.call(*this);
}

// public void java.io.File.deleteOnExit()
void JavaIoFile::deleteOnExit() const {
    static jnipp::Method<void> method(clazz(), "deleteOnExit", "()V");
    method.call(*this);
}

// public java.io.File[] java.io.File.listFiles(java.io.FileFilter)
jnipp::LocalRef<jnipp::Array<JavaIoFile>> JavaIoFile::listFiles(const jnipp::Ref<JavaIoFileFilter>& a0) const {
    static jnipp::Method<jnipp::Array<JavaIoFile>,JavaIoFileFilter> method(clazz(), "listFiles", "(Ljava/io/FileFilter;)[Ljava/io/File;");
    return method.call(*this, a0);
}

// public java.io.File[] java.io.File.listFiles()
jnipp::LocalRef<jnipp::Array<JavaIoFile>> JavaIoFile::listFiles() const {
    static jnipp::Method<jnipp::Array<JavaIoFile>> method(clazz(), "listFiles", "()[Ljava/io/File;");
    return method.call(*this);
}

// public java.io.File[] java.io.File.listFiles(java.io.FilenameFilter)
jnipp::LocalRef<jnipp::Array<JavaIoFile>> JavaIoFile::listFiles(const jnipp::Ref<JavaIoFilenameFilter>& a0) const {
    static jnipp::Method<jnipp::Array<JavaIoFile>,JavaIoFilenameFilter> method(clazz(), "listFiles", "(Ljava/io/FilenameFilter;)[Ljava/io/File;");
    return method.call(*this, a0);
}

// public boolean java.io.File.mkdir()
jboolean JavaIoFile::mkdir() const {
    static jnipp::Method<jboolean> method(clazz(), "mkdir", "()Z");
    return method.call(*this);
}

// public boolean java.io.File.mkdirs()
jboolean JavaIoFile::mkdirs() const {
    static jnipp::Method<jboolean> method(clazz(), "mkdirs", "()Z");
    return method.call(*this);
}

// public boolean java.io.File.renameTo(java.io.File)
jboolean JavaIoFile::renameTo(const jnipp::Ref<JavaIoFile>& a0) const {
    static jnipp::Method<jboolean,JavaIoFile> method(clazz(), "renameTo", "(Ljava/io/File;)Z");
    return method.call(*this, a0);
}

// public boolean java.io.File.setLastModified(long)
jboolean JavaIoFile::setLastModified(jlong a0) const {
    static jnipp::Method<jboolean,jlong> method(clazz(), "setLastModified", "(J)Z");
    return method.call(*this, a0);
}

// public boolean java.io.File.setWritable(boolean)
jboolean JavaIoFile::setWritable(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "setWritable", "(Z)Z");
    return method.call(*this, a0);
}

// public boolean java.io.File.setWritable(boolean,boolean)
jboolean JavaIoFile::setWritable(jboolean a0, jboolean a1) const {
    static jnipp::Method<jboolean,jboolean,jboolean> method(clazz(), "setWritable", "(ZZ)Z");
    return method.call(*this, a0, a1);
}

// public boolean java.io.File.setReadable(boolean)
jboolean JavaIoFile::setReadable(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "setReadable", "(Z)Z");
    return method.call(*this, a0);
}

// public boolean java.io.File.setReadable(boolean,boolean)
jboolean JavaIoFile::setReadable(jboolean a0, jboolean a1) const {
    static jnipp::Method<jboolean,jboolean,jboolean> method(clazz(), "setReadable", "(ZZ)Z");
    return method.call(*this, a0, a1);
}

// public boolean java.io.File.setExecutable(boolean,boolean)
jboolean JavaIoFile::setExecutable(jboolean a0, jboolean a1) const {
    static jnipp::Method<jboolean,jboolean,jboolean> method(clazz(), "setExecutable", "(ZZ)Z");
    return method.call(*this, a0, a1);
}

// public boolean java.io.File.setExecutable(boolean)
jboolean JavaIoFile::setExecutable(jboolean a0) const {
    static jnipp::Method<jboolean,jboolean> method(clazz(), "setExecutable", "(Z)Z");
    return method.call(*this, a0);
}

// public boolean java.io.File.canExecute()
jboolean JavaIoFile::canExecute() const {
    static jnipp::Method<jboolean> method(clazz(), "canExecute", "()Z");
    return method.call(*this);
}

// public static java.io.File[] java.io.File.listRoots()
jnipp::LocalRef<jnipp::Array<JavaIoFile>> JavaIoFile::listRoots() {
    static jnipp::StaticMethod<jnipp::Array<JavaIoFile>> method(clazz(), "listRoots", "()[Ljava/io/File;");
    return method.call();
}

// public long java.io.File.getTotalSpace()
jlong JavaIoFile::getTotalSpace() const {
    static jnipp::Method<jlong> method(clazz(), "getTotalSpace", "()J");
    return method.call(*this);
}

// public long java.io.File.getFreeSpace()
jlong JavaIoFile::getFreeSpace() const {
    static jnipp::Method<jlong> method(clazz(), "getFreeSpace", "()J");
    return method.call(*this);
}

// public long java.io.File.getUsableSpace()
jlong JavaIoFile::getUsableSpace() const {
    static jnipp::Method<jlong> method(clazz(), "getUsableSpace", "()J");
    return method.call(*this);
}

// public static java.io.File java.io.File.createTempFile(java.lang.String,java.lang.String,java.io.File) throws java.io.IOException
jnipp::LocalRef<JavaIoFile> JavaIoFile::createTempFile(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaIoFile>& a2) {
    static jnipp::StaticMethod<JavaIoFile,JavaLangString,JavaLangString,JavaIoFile> method(clazz(), "createTempFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;");
    return method.call(a0, a1, a2);
}

// public static java.io.File java.io.File.createTempFile(java.lang.String,java.lang.String) throws java.io.IOException
jnipp::LocalRef<JavaIoFile> JavaIoFile::createTempFile(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaIoFile,JavaLangString,JavaLangString> method(clazz(), "createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;");
    return method.call(a0, a1);
}

// public java.nio.file.Path java.io.File.toPath()
jnipp::LocalRef<JavaNioFilePath> JavaIoFile::toPath() const {
    static jnipp::Method<JavaNioFilePath> method(clazz(), "toPath", "()Ljava/nio/file/Path;");
    return method.call(*this);
}
#undef fs
jnipp::StaticField<JavaIoFileSystem> JavaIoFile::fs ("java/io/File", "fs", "Ljava/io/FileSystem;");
#undef separatorChar
const jnipp::StaticField<jchar> JavaIoFile::separatorChar ("java/io/File", "separatorChar", "C");
#undef separator
const jnipp::StaticField<JavaLangString> JavaIoFile::separator ("java/io/File", "separator", "Ljava/lang/String;");
#undef pathSeparatorChar
const jnipp::StaticField<jchar> JavaIoFile::pathSeparatorChar ("java/io/File", "pathSeparatorChar", "C");
#undef pathSeparator
const jnipp::StaticField<JavaLangString> JavaIoFile::pathSeparator ("java/io/File", "pathSeparator", "Ljava/lang/String;");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaIoFile::serialVersionUID ("java/io/File", "serialVersionUID", "J");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaIoFile::$assertionsDisabled ("java/io/File", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityCertCertificate::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/cert/Certificate"));
    return cls;
}

// protected java.security.cert.Certificate(java.lang.String)
jnipp::LocalRef<JavaSecurityCertCertificate> JavaSecurityCertCertificate::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaSecurityCertCertificate,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public boolean java.security.cert.Certificate.equals(java.lang.Object)
jboolean JavaSecurityCertCertificate::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.security.cert.Certificate.hashCode()
jint JavaSecurityCertCertificate::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public final java.lang.String java.security.cert.Certificate.getType()
jnipp::LocalRef<JavaLangString> JavaSecurityCertCertificate::getType() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getType", "()Ljava/lang/String;");
    return method.call(*this);
}

// protected java.lang.Object java.security.cert.Certificate.writeReplace() throws java.io.ObjectStreamException
jnipp::LocalRef<JavaLangObject> JavaSecurityCertCertificate::writeReplace() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "writeReplace", "()Ljava/lang/Object;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityCertCertificate::serialVersionUID ("java/security/cert/Certificate", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentConcurrentHashMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/ConcurrentHashMap"));
    return cls;
}

// public java.util.concurrent.ConcurrentHashMap(int)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap> JavaUtilConcurrentConcurrentHashMap::construct(jint a0) {
    static jnipp::Constructor<JavaUtilConcurrentConcurrentHashMap,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.util.concurrent.ConcurrentHashMap()
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap> JavaUtilConcurrentConcurrentHashMap::construct() {
    static jnipp::Constructor<JavaUtilConcurrentConcurrentHashMap> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.concurrent.ConcurrentHashMap(int,float,int)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap> JavaUtilConcurrentConcurrentHashMap::construct(jint a0, jfloat a1, jint a2) {
    static jnipp::Constructor<JavaUtilConcurrentConcurrentHashMap,jint,jfloat,jint> constructor(clazz(), "(IFI)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.concurrent.ConcurrentHashMap(int,float)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap> JavaUtilConcurrentConcurrentHashMap::construct(jint a0, jfloat a1) {
    static jnipp::Constructor<JavaUtilConcurrentConcurrentHashMap,jint,jfloat> constructor(clazz(), "(IF)V");
    return constructor.construct(a0, a1);
}

// public java.util.concurrent.ConcurrentHashMap(java.util.Map)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap> JavaUtilConcurrentConcurrentHashMap::construct(const jnipp::Ref<JavaUtilMap>& a0) {
    static jnipp::Constructor<JavaUtilConcurrentConcurrentHashMap,JavaUtilMap> constructor(clazz(), "(Ljava/util/Map;)V");
    return constructor.construct(a0);
}

// public java.lang.Object java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilConcurrentConcurrentHashMap::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public boolean java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object,java.lang.Object)
jboolean JavaUtilConcurrentConcurrentHashMap::remove(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<jboolean,JavaLangObject,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
    return method.call(*this, a0, a1);
}

// public java.lang.Object java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilConcurrentConcurrentHashMap::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilConcurrentConcurrentHashMap::put(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// private int java.util.concurrent.ConcurrentHashMap.hash(java.lang.Object)
jint JavaUtilConcurrentConcurrentHashMap::hash(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "hash", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public java.util.Collection java.util.concurrent.ConcurrentHashMap.values()
jnipp::LocalRef<JavaUtilCollection> JavaUtilConcurrentConcurrentHashMap::values() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "values", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public void java.util.concurrent.ConcurrentHashMap.clear()
void JavaUtilConcurrentConcurrentHashMap::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public boolean java.util.concurrent.ConcurrentHashMap.isEmpty()
jboolean JavaUtilConcurrentConcurrentHashMap::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public java.lang.Object java.util.concurrent.ConcurrentHashMap.replace(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilConcurrentConcurrentHashMap::replace(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public boolean java.util.concurrent.ConcurrentHashMap.replace(java.lang.Object,java.lang.Object,java.lang.Object)
jboolean JavaUtilConcurrentConcurrentHashMap::replace(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<jboolean,JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z");
    return method.call(*this, a0, a1, a2);
}

// public boolean java.util.concurrent.ConcurrentHashMap.contains(java.lang.Object)
jboolean JavaUtilConcurrentConcurrentHashMap::contains(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "contains", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.concurrent.ConcurrentHashMap.size()
jint JavaUtilConcurrentConcurrentHashMap::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public java.util.Set java.util.concurrent.ConcurrentHashMap.entrySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilConcurrentConcurrentHashMap::entrySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "entrySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public void java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map)
void JavaUtilConcurrentConcurrentHashMap::putAll(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "putAll", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// public java.lang.Object java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilConcurrentConcurrentHashMap::putIfAbsent(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// private void java.util.concurrent.ConcurrentHashMap.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilConcurrentConcurrentHashMap::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.util.concurrent.ConcurrentHashMap.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaUtilConcurrentConcurrentHashMap::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public java.util.Enumeration java.util.concurrent.ConcurrentHashMap.elements()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilConcurrentConcurrentHashMap::elements() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "elements", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.util.Enumeration java.util.concurrent.ConcurrentHashMap.keys()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilConcurrentConcurrentHashMap::keys() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "keys", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.util.Set java.util.concurrent.ConcurrentHashMap.keySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilConcurrentConcurrentHashMap::keySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "keySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public boolean java.util.concurrent.ConcurrentHashMap.containsValue(java.lang.Object)
jboolean JavaUtilConcurrentConcurrentHashMap::containsValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsValue", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object)
jboolean JavaUtilConcurrentConcurrentHashMap::containsKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsKey", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// private static int java.util.concurrent.ConcurrentHashMap.randomHashSeed(java.util.concurrent.ConcurrentHashMap)
jint JavaUtilConcurrentConcurrentHashMap::randomHashSeed(const jnipp::Ref<JavaUtilConcurrentConcurrentHashMap>& a0) {
    static jnipp::StaticMethod<jint,JavaUtilConcurrentConcurrentHashMap> method(clazz(), "randomHashSeed", "(Ljava/util/concurrent/ConcurrentHashMap;)I");
    return method.call(a0);
}

// static final java.util.concurrent.ConcurrentHashMap$HashEntry java.util.concurrent.ConcurrentHashMap.entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap_HashEntry> JavaUtilConcurrentConcurrentHashMap::entryAt(const jnipp::Ref<jnipp::Array<JavaUtilConcurrentConcurrentHashMap_HashEntry>>& a0, jint a1) {
    static jnipp::StaticMethod<JavaUtilConcurrentConcurrentHashMap_HashEntry,jnipp::Array<JavaUtilConcurrentConcurrentHashMap_HashEntry>,jint> method(clazz(), "entryAt", "([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;I)Ljava/util/concurrent/ConcurrentHashMap$HashEntry;");
    return method.call(a0, a1);
}

// static final void java.util.concurrent.ConcurrentHashMap.setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)
void JavaUtilConcurrentConcurrentHashMap::setEntryAt(const jnipp::Ref<jnipp::Array<JavaUtilConcurrentConcurrentHashMap_HashEntry>>& a0, jint a1, const jnipp::Ref<JavaUtilConcurrentConcurrentHashMap_HashEntry>& a2) {
    static jnipp::StaticMethod<void,jnipp::Array<JavaUtilConcurrentConcurrentHashMap_HashEntry>,jint,JavaUtilConcurrentConcurrentHashMap_HashEntry> method(clazz(), "setEntryAt", "([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;ILjava/util/concurrent/ConcurrentHashMap$HashEntry;)V");
    method.call(a0, a1, a2);
}

// static final java.util.concurrent.ConcurrentHashMap$Segment java.util.concurrent.ConcurrentHashMap.segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap_Segment> JavaUtilConcurrentConcurrentHashMap::segmentAt(const jnipp::Ref<jnipp::Array<JavaUtilConcurrentConcurrentHashMap_Segment>>& a0, jint a1) {
    static jnipp::StaticMethod<JavaUtilConcurrentConcurrentHashMap_Segment,jnipp::Array<JavaUtilConcurrentConcurrentHashMap_Segment>,jint> method(clazz(), "segmentAt", "([Ljava/util/concurrent/ConcurrentHashMap$Segment;I)Ljava/util/concurrent/ConcurrentHashMap$Segment;");
    return method.call(a0, a1);
}

// private java.util.concurrent.ConcurrentHashMap$Segment java.util.concurrent.ConcurrentHashMap.ensureSegment(int)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap_Segment> JavaUtilConcurrentConcurrentHashMap::ensureSegment(jint a0) const {
    static jnipp::Method<JavaUtilConcurrentConcurrentHashMap_Segment,jint> method(clazz(), "ensureSegment", "(I)Ljava/util/concurrent/ConcurrentHashMap$Segment;");
    return method.call(*this, a0);
}

// private java.util.concurrent.ConcurrentHashMap$Segment java.util.concurrent.ConcurrentHashMap.segmentForHash(int)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap_Segment> JavaUtilConcurrentConcurrentHashMap::segmentForHash(jint a0) const {
    static jnipp::Method<JavaUtilConcurrentConcurrentHashMap_Segment,jint> method(clazz(), "segmentForHash", "(I)Ljava/util/concurrent/ConcurrentHashMap$Segment;");
    return method.call(*this, a0);
}

// static final java.util.concurrent.ConcurrentHashMap$HashEntry java.util.concurrent.ConcurrentHashMap.entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap_HashEntry> JavaUtilConcurrentConcurrentHashMap::entryForHash(const jnipp::Ref<JavaUtilConcurrentConcurrentHashMap_Segment>& a0, jint a1) {
    static jnipp::StaticMethod<JavaUtilConcurrentConcurrentHashMap_HashEntry,JavaUtilConcurrentConcurrentHashMap_Segment,jint> method(clazz(), "entryForHash", "(Ljava/util/concurrent/ConcurrentHashMap$Segment;I)Ljava/util/concurrent/ConcurrentHashMap$HashEntry;");
    return method.call(a0, a1);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap::serialVersionUID ("java/util/concurrent/ConcurrentHashMap", "serialVersionUID", "J");
#undef DEFAULT_INITIAL_CAPACITY
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap::DEFAULT_INITIAL_CAPACITY ("java/util/concurrent/ConcurrentHashMap", "DEFAULT_INITIAL_CAPACITY", "I");
#undef DEFAULT_LOAD_FACTOR
const jnipp::StaticField<jfloat> JavaUtilConcurrentConcurrentHashMap::DEFAULT_LOAD_FACTOR ("java/util/concurrent/ConcurrentHashMap", "DEFAULT_LOAD_FACTOR", "F");
#undef DEFAULT_CONCURRENCY_LEVEL
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap::DEFAULT_CONCURRENCY_LEVEL ("java/util/concurrent/ConcurrentHashMap", "DEFAULT_CONCURRENCY_LEVEL", "I");
#undef MAXIMUM_CAPACITY
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap::MAXIMUM_CAPACITY ("java/util/concurrent/ConcurrentHashMap", "MAXIMUM_CAPACITY", "I");
#undef MIN_SEGMENT_TABLE_CAPACITY
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap::MIN_SEGMENT_TABLE_CAPACITY ("java/util/concurrent/ConcurrentHashMap", "MIN_SEGMENT_TABLE_CAPACITY", "I");
#undef MAX_SEGMENTS
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap::MAX_SEGMENTS ("java/util/concurrent/ConcurrentHashMap", "MAX_SEGMENTS", "I");
#undef RETRIES_BEFORE_LOCK
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap::RETRIES_BEFORE_LOCK ("java/util/concurrent/ConcurrentHashMap", "RETRIES_BEFORE_LOCK", "I");
#undef UNSAFE
const jnipp::StaticField<SunMiscUnsafe> JavaUtilConcurrentConcurrentHashMap::UNSAFE ("java/util/concurrent/ConcurrentHashMap", "UNSAFE", "Lsun/misc/Unsafe;");
#undef SBASE
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap::SBASE ("java/util/concurrent/ConcurrentHashMap", "SBASE", "J");
#undef SSHIFT
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap::SSHIFT ("java/util/concurrent/ConcurrentHashMap", "SSHIFT", "I");
#undef TBASE
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap::TBASE ("java/util/concurrent/ConcurrentHashMap", "TBASE", "J");
#undef TSHIFT
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap::TSHIFT ("java/util/concurrent/ConcurrentHashMap", "TSHIFT", "I");
#undef HASHSEED_OFFSET
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap::HASHSEED_OFFSET ("java/util/concurrent/ConcurrentHashMap", "HASHSEED_OFFSET", "J");
#undef SEGSHIFT_OFFSET
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap::SEGSHIFT_OFFSET ("java/util/concurrent/ConcurrentHashMap", "SEGSHIFT_OFFSET", "J");
#undef SEGMASK_OFFSET
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap::SEGMASK_OFFSET ("java/util/concurrent/ConcurrentHashMap", "SEGMASK_OFFSET", "J");
#undef SEGMENTS_OFFSET
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap::SEGMENTS_OFFSET ("java/util/concurrent/ConcurrentHashMap", "SEGMENTS_OFFSET", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangError::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Error"));
    return cls;
}

// protected java.lang.Error(java.lang.String,java.lang.Throwable,boolean,boolean)
jnipp::LocalRef<JavaLangError> JavaLangError::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1, jboolean a2, jboolean a3) {
    static jnipp::Constructor<JavaLangError,JavaLangString,JavaLangThrowable,jboolean,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.lang.Error(java.lang.Throwable)
jnipp::LocalRef<JavaLangError> JavaLangError::construct(const jnipp::Ref<JavaLangThrowable>& a0) {
    static jnipp::Constructor<JavaLangError,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/Throwable;)V");
    return constructor.construct(a0);
}

// public java.lang.Error(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaLangError> JavaLangError::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaLangError,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Error(java.lang.String)
jnipp::LocalRef<JavaLangError> JavaLangError::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangError,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.Error()
jnipp::LocalRef<JavaLangError> JavaLangError::construct() {
    static jnipp::Constructor<JavaLangError> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangError::serialVersionUID ("java/lang/Error", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangLinkageError::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/LinkageError"));
    return cls;
}

// public java.lang.LinkageError()
jnipp::LocalRef<JavaLangLinkageError> JavaLangLinkageError::construct() {
    static jnipp::Constructor<JavaLangLinkageError> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.LinkageError(java.lang.String)
jnipp::LocalRef<JavaLangLinkageError> JavaLangLinkageError::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangLinkageError,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.LinkageError(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaLangLinkageError> JavaLangLinkageError::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaLangLinkageError,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangLinkageError::serialVersionUID ("java/lang/LinkageError", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClassFormatError::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ClassFormatError"));
    return cls;
}

// public java.lang.ClassFormatError()
jnipp::LocalRef<JavaLangClassFormatError> JavaLangClassFormatError::construct() {
    static jnipp::Constructor<JavaLangClassFormatError> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.ClassFormatError(java.lang.String)
jnipp::LocalRef<JavaLangClassFormatError> JavaLangClassFormatError::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangClassFormatError,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangClassFormatError::serialVersionUID ("java/lang/ClassFormatError", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectInputStream_ValidationList_Callback::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectInputStream$ValidationList$Callback"));
    return cls;
}

// java.io.ObjectInputStream$ValidationList$Callback(java.io.ObjectInputValidation,int,java.io.ObjectInputStream$ValidationList$Callback,java.security.AccessControlContext)
jnipp::LocalRef<JavaIoObjectInputStream_ValidationList_Callback> JavaIoObjectInputStream_ValidationList_Callback::construct(const jnipp::Ref<JavaIoObjectInputValidation>& a0, jint a1, const jnipp::Ref<JavaIoObjectInputStream_ValidationList_Callback>& a2, const jnipp::Ref<JavaSecurityAccessControlContext>& a3) {
    static jnipp::Constructor<JavaIoObjectInputStream_ValidationList_Callback,JavaIoObjectInputValidation,jint,JavaIoObjectInputStream_ValidationList_Callback,JavaSecurityAccessControlContext> constructor(clazz(), "(Ljava/io/ObjectInputValidation;ILjava/io/ObjectInputStream$ValidationList$Callback;Ljava/security/AccessControlContext;)V");
    return constructor.construct(a0, a1, a2, a3);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilHashMap_Entry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/HashMap$Entry"));
    return cls;
}

// java.util.HashMap$Entry(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)
jnipp::LocalRef<JavaUtilHashMap_Entry> JavaUtilHashMap_Entry::construct(jint a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2, const jnipp::Ref<JavaUtilHashMap_Entry>& a3) {
    static jnipp::Constructor<JavaUtilHashMap_Entry,jint,JavaLangObject,JavaLangObject,JavaUtilHashMap_Entry> constructor(clazz(), "(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Entry;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public final boolean java.util.HashMap$Entry.equals(java.lang.Object)
jboolean JavaUtilHashMap_Entry::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public final int java.util.HashMap$Entry.hashCode()
jint JavaUtilHashMap_Entry::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public final java.lang.Object java.util.HashMap$Entry.getValue()
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap_Entry::getValue() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getValue", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public final java.lang.Object java.util.HashMap$Entry.getKey()
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap_Entry::getKey() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getKey", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public final java.lang.Object java.util.HashMap$Entry.setValue(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashMap_Entry::setValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// void java.util.HashMap$Entry.recordAccess(java.util.HashMap)
void JavaUtilHashMap_Entry::recordAccess(const jnipp::Ref<JavaUtilHashMap>& a0) const {
    static jnipp::Method<void,JavaUtilHashMap> method(clazz(), "recordAccess", "(Ljava/util/HashMap;)V");
    method.call(*this, a0);
}

// void java.util.HashMap$Entry.recordRemoval(java.util.HashMap)
void JavaUtilHashMap_Entry::recordRemoval(const jnipp::Ref<JavaUtilHashMap>& a0) const {
    static jnipp::Method<void,JavaUtilHashMap> method(clazz(), "recordRemoval", "(Ljava/util/HashMap;)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunUtilLocaleBaseLocale_Key::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/locale/BaseLocale$Key"));
    return cls;
}

// sun.util.locale.BaseLocale$Key(java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)
jnipp::LocalRef<SunUtilLocaleBaseLocale_Key> SunUtilLocaleBaseLocale_Key::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<SunUtilLocaleBaseLocale_1>& a2) {
    static jnipp::Constructor<SunUtilLocaleBaseLocale_Key,JavaLangString,JavaLangString,SunUtilLocaleBaseLocale_1> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Lsun/util/locale/BaseLocale$1;)V");
    return constructor.construct(a0, a1, a2);
}

// private sun.util.locale.BaseLocale$Key(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
jnipp::LocalRef<SunUtilLocaleBaseLocale_Key> SunUtilLocaleBaseLocale_Key::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, jboolean a4) {
    static jnipp::Constructor<SunUtilLocaleBaseLocale_Key,JavaLangString,JavaLangString,JavaLangString,JavaLangString,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V");
    return constructor.construct(a0, a1, a2, a3, a4);
}

// public sun.util.locale.BaseLocale$Key(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
jnipp::LocalRef<SunUtilLocaleBaseLocale_Key> SunUtilLocaleBaseLocale_Key::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::Constructor<SunUtilLocaleBaseLocale_Key,JavaLangString,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// private sun.util.locale.BaseLocale$Key(java.lang.String,java.lang.String)
jnipp::LocalRef<SunUtilLocaleBaseLocale_Key> SunUtilLocaleBaseLocale_Key::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<SunUtilLocaleBaseLocale_Key,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public boolean sun.util.locale.BaseLocale$Key.equals(java.lang.Object)
jboolean SunUtilLocaleBaseLocale_Key::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int sun.util.locale.BaseLocale$Key.hashCode()
jint SunUtilLocaleBaseLocale_Key::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int sun.util.locale.BaseLocale$Key.compareTo(sun.util.locale.BaseLocale$Key)
jint SunUtilLocaleBaseLocale_Key::compareTo(const jnipp::Ref<SunUtilLocaleBaseLocale_Key>& a0) const {
    static jnipp::Method<jint,SunUtilLocaleBaseLocale_Key> method(clazz(), "compareTo", "(Lsun/util/locale/BaseLocale$Key;)I");
    return method.call(*this, a0);
}

// public static sun.util.locale.BaseLocale$Key sun.util.locale.BaseLocale$Key.normalize(sun.util.locale.BaseLocale$Key)
jnipp::LocalRef<SunUtilLocaleBaseLocale_Key> SunUtilLocaleBaseLocale_Key::normalize(const jnipp::Ref<SunUtilLocaleBaseLocale_Key>& a0) {
    static jnipp::StaticMethod<SunUtilLocaleBaseLocale_Key,SunUtilLocaleBaseLocale_Key> method(clazz(), "normalize", "(Lsun/util/locale/BaseLocale$Key;)Lsun/util/locale/BaseLocale$Key;");
    return method.call(a0);
}
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> SunUtilLocaleBaseLocale_Key::$assertionsDisabled ("sun/util/locale/BaseLocale$Key", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilResourceBundle_LoaderReference::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/ResourceBundle$LoaderReference"));
    return cls;
}

// java.util.ResourceBundle$LoaderReference(java.lang.ClassLoader,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)
jnipp::LocalRef<JavaUtilResourceBundle_LoaderReference> JavaUtilResourceBundle_LoaderReference::construct(const jnipp::Ref<JavaLangClassLoader>& a0, const jnipp::Ref<JavaLangRefReferenceQueue>& a1, const jnipp::Ref<JavaUtilResourceBundle_CacheKey>& a2) {
    static jnipp::Constructor<JavaUtilResourceBundle_LoaderReference,JavaLangClassLoader,JavaLangRefReferenceQueue,JavaUtilResourceBundle_CacheKey> constructor(clazz(), "(Ljava/lang/ClassLoader;Ljava/lang/ref/ReferenceQueue;Ljava/util/ResourceBundle$CacheKey;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.ResourceBundle$CacheKey java.util.ResourceBundle$LoaderReference.getCacheKey()
jnipp::LocalRef<JavaUtilResourceBundle_CacheKey> JavaUtilResourceBundle_LoaderReference::getCacheKey() const {
    static jnipp::Method<JavaUtilResourceBundle_CacheKey> method(clazz(), "getCacheKey", "()Ljava/util/ResourceBundle$CacheKey;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilResourceBundle_Control_CandidateListCache::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/ResourceBundle$Control$CandidateListCache"));
    return cls;
}

// java.util.ResourceBundle$Control$CandidateListCache(java.util.ResourceBundle$1)
jnipp::LocalRef<JavaUtilResourceBundle_Control_CandidateListCache> JavaUtilResourceBundle_Control_CandidateListCache::construct(const jnipp::Ref<JavaUtilResourceBundle_1>& a0) {
    static jnipp::Constructor<JavaUtilResourceBundle_Control_CandidateListCache,JavaUtilResourceBundle_1> constructor(clazz(), "(Ljava/util/ResourceBundle$1;)V");
    return constructor.construct(a0);
}

// private java.util.ResourceBundle$Control$CandidateListCache()
jnipp::LocalRef<JavaUtilResourceBundle_Control_CandidateListCache> JavaUtilResourceBundle_Control_CandidateListCache::construct() {
    static jnipp::Constructor<JavaUtilResourceBundle_Control_CandidateListCache> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected java.util.List java.util.ResourceBundle$Control$CandidateListCache.createObject(sun.util.locale.BaseLocale)
jnipp::LocalRef<JavaUtilList> JavaUtilResourceBundle_Control_CandidateListCache::createObject(const jnipp::Ref<SunUtilLocaleBaseLocale>& a0) const {
    static jnipp::Method<JavaUtilList,SunUtilLocaleBaseLocale> method(clazz(), "createObject", "(Lsun/util/locale/BaseLocale;)Ljava/util/List;");
    return method.call(*this, a0);
}

// private static java.util.List java.util.ResourceBundle$Control$CandidateListCache.getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
jnipp::LocalRef<JavaUtilList> JavaUtilResourceBundle_Control_CandidateListCache::getDefaultList(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::StaticMethod<JavaUtilList,JavaLangString,JavaLangString,JavaLangString,JavaLangString> method(clazz(), "getDefaultList", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;");
    return method.call(a0, a1, a2, a3);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRefReferenceQueue_Lock::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ref/ReferenceQueue$Lock"));
    return cls;
}

// private java.lang.ref.ReferenceQueue$Lock()
jnipp::LocalRef<JavaLangRefReferenceQueue_Lock> JavaLangRefReferenceQueue_Lock::construct() {
    static jnipp::Constructor<JavaLangRefReferenceQueue_Lock> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.lang.ref.ReferenceQueue$Lock(java.lang.ref.ReferenceQueue$1)
jnipp::LocalRef<JavaLangRefReferenceQueue_Lock> JavaLangRefReferenceQueue_Lock::construct(const jnipp::Ref<JavaLangRefReferenceQueue_1>& a0) {
    static jnipp::Constructor<JavaLangRefReferenceQueue_Lock,JavaLangRefReferenceQueue_1> constructor(clazz(), "(Ljava/lang/ref/ReferenceQueue$1;)V");
    return constructor.construct(a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaTextFormat_Field::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/Format$Field"));
    return cls;
}

// protected java.text.Format$Field(java.lang.String)
jnipp::LocalRef<JavaTextFormat_Field> JavaTextFormat_Field::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaTextFormat_Field,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaTextFormat_Field::serialVersionUID ("java/text/Format$Field", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaTextFormat_FieldDelegate::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/text/Format$FieldDelegate"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilDictionary::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Dictionary"));
    return cls;
}

// public java.util.Dictionary()
jnipp::LocalRef<JavaUtilDictionary> JavaUtilDictionary::construct() {
    static jnipp::Constructor<JavaUtilDictionary> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilHashtable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Hashtable"));
    return cls;
}

// public java.util.Hashtable(java.util.Map)
jnipp::LocalRef<JavaUtilHashtable> JavaUtilHashtable::construct(const jnipp::Ref<JavaUtilMap>& a0) {
    static jnipp::Constructor<JavaUtilHashtable,JavaUtilMap> constructor(clazz(), "(Ljava/util/Map;)V");
    return constructor.construct(a0);
}

// public java.util.Hashtable(int)
jnipp::LocalRef<JavaUtilHashtable> JavaUtilHashtable::construct(jint a0) {
    static jnipp::Constructor<JavaUtilHashtable,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.util.Hashtable(int,float)
jnipp::LocalRef<JavaUtilHashtable> JavaUtilHashtable::construct(jint a0, jfloat a1) {
    static jnipp::Constructor<JavaUtilHashtable,jint,jfloat> constructor(clazz(), "(IF)V");
    return constructor.construct(a0, a1);
}

// public java.util.Hashtable()
jnipp::LocalRef<JavaUtilHashtable> JavaUtilHashtable::construct() {
    static jnipp::Constructor<JavaUtilHashtable> constructor(clazz(), "()V");
    return constructor.construct();
}

// public synchronized java.lang.Object java.util.Hashtable.remove(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashtable::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public synchronized java.lang.Object java.util.Hashtable.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashtable::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public synchronized java.lang.Object java.util.Hashtable.put(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashtable::put(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// private int java.util.Hashtable.hash(java.lang.Object)
jint JavaUtilHashtable::hash(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "hash", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public synchronized boolean java.util.Hashtable.equals(java.lang.Object)
jboolean JavaUtilHashtable::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public java.util.Collection java.util.Hashtable.values()
jnipp::LocalRef<JavaUtilCollection> JavaUtilHashtable::values() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "values", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public synchronized int java.util.Hashtable.hashCode()
jint JavaUtilHashtable::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public synchronized java.lang.Object java.util.Hashtable.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilHashtable::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public synchronized void java.util.Hashtable.clear()
void JavaUtilHashtable::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public synchronized boolean java.util.Hashtable.isEmpty()
jboolean JavaUtilHashtable::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public synchronized boolean java.util.Hashtable.contains(java.lang.Object)
jboolean JavaUtilHashtable::contains(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "contains", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public synchronized int java.util.Hashtable.size()
jint JavaUtilHashtable::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public java.util.Set java.util.Hashtable.entrySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilHashtable::entrySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "entrySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public synchronized void java.util.Hashtable.putAll(java.util.Map)
void JavaUtilHashtable::putAll(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "putAll", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// private void java.util.Hashtable.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilHashtable::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.util.Hashtable.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaUtilHashtable::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public synchronized java.util.Enumeration java.util.Hashtable.elements()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilHashtable::elements() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "elements", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public synchronized java.util.Enumeration java.util.Hashtable.keys()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilHashtable::keys() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "keys", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.util.Set java.util.Hashtable.keySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilHashtable::keySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "keySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// final boolean java.util.Hashtable.initHashSeedAsNeeded(int)
jboolean JavaUtilHashtable::initHashSeedAsNeeded(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "initHashSeedAsNeeded", "(I)Z");
    return method.call(*this, a0);
}

// public boolean java.util.Hashtable.containsValue(java.lang.Object)
jboolean JavaUtilHashtable::containsValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsValue", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public synchronized boolean java.util.Hashtable.containsKey(java.lang.Object)
jboolean JavaUtilHashtable::containsKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsKey", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// protected void java.util.Hashtable.rehash()
void JavaUtilHashtable::rehash() const {
    static jnipp::Method<void> method(clazz(), "rehash", "()V");
    method.call(*this);
}

// private java.util.Enumeration java.util.Hashtable.getEnumeration(int)
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilHashtable::getEnumeration(jint a0) const {
    static jnipp::Method<JavaUtilEnumeration,jint> method(clazz(), "getEnumeration", "(I)Ljava/util/Enumeration;");
    return method.call(*this, a0);
}

// private java.util.Iterator java.util.Hashtable.getIterator(int)
jnipp::LocalRef<JavaUtilIterator> JavaUtilHashtable::getIterator(jint a0) const {
    static jnipp::Method<JavaUtilIterator,jint> method(clazz(), "getIterator", "(I)Ljava/util/Iterator;");
    return method.call(*this, a0);
}

// private void java.util.Hashtable.reconstitutionPut(java.util.Hashtable$Entry[],java.lang.Object,java.lang.Object) throws java.io.StreamCorruptedException
void JavaUtilHashtable::reconstitutionPut(const jnipp::Ref<jnipp::Array<JavaUtilHashtable_Entry>>& a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<void,jnipp::Array<JavaUtilHashtable_Entry>,JavaLangObject,JavaLangObject> method(clazz(), "reconstitutionPut", "([Ljava/util/Hashtable$Entry;Ljava/lang/Object;Ljava/lang/Object;)V");
    method.call(*this, a0, a1, a2);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilHashtable::serialVersionUID ("java/util/Hashtable", "serialVersionUID", "J");
#undef ALTERNATIVE_HASHING_THRESHOLD_DEFAULT
const jnipp::StaticField<jint> JavaUtilHashtable::ALTERNATIVE_HASHING_THRESHOLD_DEFAULT ("java/util/Hashtable", "ALTERNATIVE_HASHING_THRESHOLD_DEFAULT", "I");
#undef MAX_ARRAY_SIZE
const jnipp::StaticField<jint> JavaUtilHashtable::MAX_ARRAY_SIZE ("java/util/Hashtable", "MAX_ARRAY_SIZE", "I");
#undef KEYS
const jnipp::StaticField<jint> JavaUtilHashtable::KEYS ("java/util/Hashtable", "KEYS", "I");
#undef VALUES
const jnipp::StaticField<jint> JavaUtilHashtable::VALUES ("java/util/Hashtable", "VALUES", "I");
#undef ENTRIES
const jnipp::StaticField<jint> JavaUtilHashtable::ENTRIES ("java/util/Hashtable", "ENTRIES", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaNetProxy::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/Proxy"));
    return cls;
}

// private java.net.Proxy()
jnipp::LocalRef<JavaNetProxy> JavaNetProxy::construct() {
    static jnipp::Constructor<JavaNetProxy> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.net.Proxy(java.net.Proxy$Type,java.net.SocketAddress)
jnipp::LocalRef<JavaNetProxy> JavaNetProxy::construct(const jnipp::Ref<JavaNetProxy_Type>& a0, const jnipp::Ref<JavaNetSocketAddress>& a1) {
    static jnipp::Constructor<JavaNetProxy,JavaNetProxy_Type,JavaNetSocketAddress> constructor(clazz(), "(Ljava/net/Proxy$Type;Ljava/net/SocketAddress;)V");
    return constructor.construct(a0, a1);
}

// public java.net.Proxy$Type java.net.Proxy.type()
jnipp::LocalRef<JavaNetProxy_Type> JavaNetProxy::type() const {
    static jnipp::Method<JavaNetProxy_Type> method(clazz(), "type", "()Ljava/net/Proxy$Type;");
    return method.call(*this);
}

// public final boolean java.net.Proxy.equals(java.lang.Object)
jboolean JavaNetProxy::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public final int java.net.Proxy.hashCode()
jint JavaNetProxy::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.net.SocketAddress java.net.Proxy.address()
jnipp::LocalRef<JavaNetSocketAddress> JavaNetProxy::address() const {
    static jnipp::Method<JavaNetSocketAddress> method(clazz(), "address", "()Ljava/net/SocketAddress;");
    return method.call(*this);
}
#undef NO_PROXY
const jnipp::StaticField<JavaNetProxy> JavaNetProxy::NO_PROXY ("java/net/Proxy", "NO_PROXY", "Ljava/net/Proxy;");
inline jnipp::GlobalRef<jnipp::Class>& JavaNetURLStreamHandler::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/URLStreamHandler"));
    return cls;
}

// public java.net.URLStreamHandler()
jnipp::LocalRef<JavaNetURLStreamHandler> JavaNetURLStreamHandler::construct() {
    static jnipp::Constructor<JavaNetURLStreamHandler> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected boolean java.net.URLStreamHandler.equals(java.net.URL,java.net.URL)
jboolean JavaNetURLStreamHandler::equals(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaNetURL>& a1) const {
    static jnipp::Method<jboolean,JavaNetURL,JavaNetURL> method(clazz(), "equals", "(Ljava/net/URL;Ljava/net/URL;)Z");
    return method.call(*this, a0, a1);
}

// protected int java.net.URLStreamHandler.hashCode(java.net.URL)
jint JavaNetURLStreamHandler::hashCode(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<jint,JavaNetURL> method(clazz(), "hashCode", "(Ljava/net/URL;)I");
    return method.call(*this, a0);
}

// protected java.net.URLConnection java.net.URLStreamHandler.openConnection(java.net.URL,java.net.Proxy) throws java.io.IOException
jnipp::LocalRef<JavaNetURLConnection> JavaNetURLStreamHandler::openConnection(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaNetProxy>& a1) const {
    static jnipp::Method<JavaNetURLConnection,JavaNetURL,JavaNetProxy> method(clazz(), "openConnection", "(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/URLConnection;");
    return method.call(*this, a0, a1);
}

// protected int java.net.URLStreamHandler.getDefaultPort()
jint JavaNetURLStreamHandler::getDefaultPort() const {
    static jnipp::Method<jint> method(clazz(), "getDefaultPort", "()I");
    return method.call(*this);
}

// protected boolean java.net.URLStreamHandler.sameFile(java.net.URL,java.net.URL)
jboolean JavaNetURLStreamHandler::sameFile(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaNetURL>& a1) const {
    static jnipp::Method<jboolean,JavaNetURL,JavaNetURL> method(clazz(), "sameFile", "(Ljava/net/URL;Ljava/net/URL;)Z");
    return method.call(*this, a0, a1);
}

// protected java.lang.String java.net.URLStreamHandler.toExternalForm(java.net.URL)
jnipp::LocalRef<JavaLangString> JavaNetURLStreamHandler::toExternalForm(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<JavaLangString,JavaNetURL> method(clazz(), "toExternalForm", "(Ljava/net/URL;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// protected void java.net.URLStreamHandler.parseURL(java.net.URL,java.lang.String,int,int)
void JavaNetURLStreamHandler::parseURL(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaLangString>& a1, jint a2, jint a3) const {
    static jnipp::Method<void,JavaNetURL,JavaLangString,jint,jint> method(clazz(), "parseURL", "(Ljava/net/URL;Ljava/lang/String;II)V");
    method.call(*this, a0, a1, a2, a3);
}

// protected synchronized java.net.InetAddress java.net.URLStreamHandler.getHostAddress(java.net.URL)
jnipp::LocalRef<JavaNetInetAddress> JavaNetURLStreamHandler::getHostAddress(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<JavaNetInetAddress,JavaNetURL> method(clazz(), "getHostAddress", "(Ljava/net/URL;)Ljava/net/InetAddress;");
    return method.call(*this, a0);
}

// protected boolean java.net.URLStreamHandler.hostsEqual(java.net.URL,java.net.URL)
jboolean JavaNetURLStreamHandler::hostsEqual(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaNetURL>& a1) const {
    static jnipp::Method<jboolean,JavaNetURL,JavaNetURL> method(clazz(), "hostsEqual", "(Ljava/net/URL;Ljava/net/URL;)Z");
    return method.call(*this, a0, a1);
}

// protected void java.net.URLStreamHandler.setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)
void JavaNetURLStreamHandler::setURL(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, jint a3, const jnipp::Ref<JavaLangString>& a4, const jnipp::Ref<JavaLangString>& a5) const {
    static jnipp::Method<void,JavaNetURL,JavaLangString,JavaLangString,jint,JavaLangString,JavaLangString> method(clazz(), "setURL", "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1, a2, a3, a4, a5);
}

// protected void java.net.URLStreamHandler.setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void JavaNetURLStreamHandler::setURL(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, jint a3, const jnipp::Ref<JavaLangString>& a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<JavaLangString>& a6, const jnipp::Ref<JavaLangString>& a7, const jnipp::Ref<JavaLangString>& a8) const {
    static jnipp::Method<void,JavaNetURL,JavaLangString,JavaLangString,jint,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString> method(clazz(), "setURL", "(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetInetAddress::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/InetAddress"));
    return cls;
}

// java.net.InetAddress()
jnipp::LocalRef<JavaNetInetAddress> JavaNetInetAddress::construct() {
    static jnipp::Constructor<JavaNetInetAddress> constructor(clazz(), "()V");
    return constructor.construct();
}

// public boolean java.net.InetAddress.equals(java.lang.Object)
jboolean JavaNetInetAddress::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.net.InetAddress.hashCode()
jint JavaNetInetAddress::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public byte[] java.net.InetAddress.getAddress()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaNetInetAddress::getAddress() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getAddress", "()[B");
    return method.call(*this);
}

// private static native void java.net.InetAddress.init()
void JavaNetInetAddress::init() {
    static jnipp::StaticMethod<void> method(clazz(), "init", "()V");
    method.call();
}

// private void java.net.InetAddress.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaNetInetAddress::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.net.InetAddress.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaNetInetAddress::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// private java.lang.Object java.net.InetAddress.readResolve() throws java.io.ObjectStreamException
jnipp::LocalRef<JavaLangObject> JavaNetInetAddress::readResolve() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "readResolve", "()Ljava/lang/Object;");
    return method.call(*this);
}

// private void java.net.InetAddress.readObjectNoData(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaNetInetAddress::readObjectNoData(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObjectNoData", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// public java.lang.String java.net.InetAddress.getHostName()
jnipp::LocalRef<JavaLangString> JavaNetInetAddress::getHostName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getHostName", "()Ljava/lang/String;");
    return method.call(*this);
}

// java.lang.String java.net.InetAddress.getHostName(boolean)
jnipp::LocalRef<JavaLangString> JavaNetInetAddress::getHostName(jboolean a0) const {
    static jnipp::Method<JavaLangString,jboolean> method(clazz(), "getHostName", "(Z)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.net.InetAddress.getHostAddress()
jnipp::LocalRef<JavaLangString> JavaNetInetAddress::getHostAddress() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getHostAddress", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static java.net.InetAddress java.net.InetAddress.getByName(java.lang.String,java.net.InetAddress) throws java.net.UnknownHostException
jnipp::LocalRef<JavaNetInetAddress> JavaNetInetAddress::getByName(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaNetInetAddress>& a1) {
    static jnipp::StaticMethod<JavaNetInetAddress,JavaLangString,JavaNetInetAddress> method(clazz(), "getByName", "(Ljava/lang/String;Ljava/net/InetAddress;)Ljava/net/InetAddress;");
    return method.call(a0, a1);
}

// public static java.net.InetAddress java.net.InetAddress.getByName(java.lang.String) throws java.net.UnknownHostException
jnipp::LocalRef<JavaNetInetAddress> JavaNetInetAddress::getByName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetInetAddress,JavaLangString> method(clazz(), "getByName", "(Ljava/lang/String;)Ljava/net/InetAddress;");
    return method.call(a0);
}

// java.net.InetAddress$InetAddressHolder java.net.InetAddress.holder()
jnipp::LocalRef<JavaNetInetAddress_InetAddressHolder> JavaNetInetAddress::holder() const {
    static jnipp::Method<JavaNetInetAddress_InetAddressHolder> method(clazz(), "holder", "()Ljava/net/InetAddress$InetAddressHolder;");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isMulticastAddress()
jboolean JavaNetInetAddress::isMulticastAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isMulticastAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isAnyLocalAddress()
jboolean JavaNetInetAddress::isAnyLocalAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isAnyLocalAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isLoopbackAddress()
jboolean JavaNetInetAddress::isLoopbackAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isLoopbackAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isLinkLocalAddress()
jboolean JavaNetInetAddress::isLinkLocalAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isLinkLocalAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isSiteLocalAddress()
jboolean JavaNetInetAddress::isSiteLocalAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isSiteLocalAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isMCGlobal()
jboolean JavaNetInetAddress::isMCGlobal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCGlobal", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isMCNodeLocal()
jboolean JavaNetInetAddress::isMCNodeLocal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCNodeLocal", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isMCLinkLocal()
jboolean JavaNetInetAddress::isMCLinkLocal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCLinkLocal", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isMCSiteLocal()
jboolean JavaNetInetAddress::isMCSiteLocal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCSiteLocal", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isMCOrgLocal()
jboolean JavaNetInetAddress::isMCOrgLocal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCOrgLocal", "()Z");
    return method.call(*this);
}

// public boolean java.net.InetAddress.isReachable(java.net.NetworkInterface,int,int) throws java.io.IOException
jboolean JavaNetInetAddress::isReachable(const jnipp::Ref<JavaNetNetworkInterface>& a0, jint a1, jint a2) const {
    static jnipp::Method<jboolean,JavaNetNetworkInterface,jint,jint> method(clazz(), "isReachable", "(Ljava/net/NetworkInterface;II)Z");
    return method.call(*this, a0, a1, a2);
}

// public boolean java.net.InetAddress.isReachable(int) throws java.io.IOException
jboolean JavaNetInetAddress::isReachable(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "isReachable", "(I)Z");
    return method.call(*this, a0);
}

// public java.lang.String java.net.InetAddress.getCanonicalHostName()
jnipp::LocalRef<JavaLangString> JavaNetInetAddress::getCanonicalHostName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getCanonicalHostName", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static java.lang.String java.net.InetAddress.getHostFromNameService(java.net.InetAddress,boolean)
jnipp::LocalRef<JavaLangString> JavaNetInetAddress::getHostFromNameService(const jnipp::Ref<JavaNetInetAddress>& a0, jboolean a1) {
    static jnipp::StaticMethod<JavaLangString,JavaNetInetAddress,jboolean> method(clazz(), "getHostFromNameService", "(Ljava/net/InetAddress;Z)Ljava/lang/String;");
    return method.call(a0, a1);
}

// private static void java.net.InetAddress.cacheInitIfNeeded()
void JavaNetInetAddress::cacheInitIfNeeded() {
    static jnipp::StaticMethod<void> method(clazz(), "cacheInitIfNeeded", "()V");
    method.call();
}

// private static void java.net.InetAddress.cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)
void JavaNetInetAddress::cacheAddresses(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaNetInetAddress>>& a1, jboolean a2) {
    static jnipp::StaticMethod<void,JavaLangString,jnipp::Array<JavaNetInetAddress>,jboolean> method(clazz(), "cacheAddresses", "(Ljava/lang/String;[Ljava/net/InetAddress;Z)V");
    method.call(a0, a1, a2);
}

// private static java.net.InetAddress[] java.net.InetAddress.getCachedAddresses(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::getCachedAddresses(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress>,JavaLangString> method(clazz(), "getCachedAddresses", "(Ljava/lang/String;)[Ljava/net/InetAddress;");
    return method.call(a0);
}

// private static sun.net.spi.nameservice.NameService java.net.InetAddress.createNSProvider(java.lang.String)
jnipp::LocalRef<SunNetSpiNameserviceNameService> JavaNetInetAddress::createNSProvider(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<SunNetSpiNameserviceNameService,JavaLangString> method(clazz(), "createNSProvider", "(Ljava/lang/String;)Lsun/net/spi/nameservice/NameService;");
    return method.call(a0);
}

// public static java.net.InetAddress java.net.InetAddress.getByAddress(java.lang.String,byte[]) throws java.net.UnknownHostException
jnipp::LocalRef<JavaNetInetAddress> JavaNetInetAddress::getByAddress(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) {
    static jnipp::StaticMethod<JavaNetInetAddress,JavaLangString,jnipp::Array<jbyte>> method(clazz(), "getByAddress", "(Ljava/lang/String;[B)Ljava/net/InetAddress;");
    return method.call(a0, a1);
}

// public static java.net.InetAddress java.net.InetAddress.getByAddress(byte[]) throws java.net.UnknownHostException
jnipp::LocalRef<JavaNetInetAddress> JavaNetInetAddress::getByAddress(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::StaticMethod<JavaNetInetAddress,jnipp::Array<jbyte>> method(clazz(), "getByAddress", "([B)Ljava/net/InetAddress;");
    return method.call(a0);
}

// public static java.net.InetAddress[] java.net.InetAddress.getAllByName(java.lang.String) throws java.net.UnknownHostException
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::getAllByName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress>,JavaLangString> method(clazz(), "getAllByName", "(Ljava/lang/String;)[Ljava/net/InetAddress;");
    return method.call(a0);
}

// private static java.net.InetAddress[] java.net.InetAddress.getAllByName(java.lang.String,java.net.InetAddress) throws java.net.UnknownHostException
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::getAllByName(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaNetInetAddress>& a1) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress>,JavaLangString,JavaNetInetAddress> method(clazz(), "getAllByName", "(Ljava/lang/String;Ljava/net/InetAddress;)[Ljava/net/InetAddress;");
    return method.call(a0, a1);
}

// public static java.net.InetAddress java.net.InetAddress.getLoopbackAddress()
jnipp::LocalRef<JavaNetInetAddress> JavaNetInetAddress::getLoopbackAddress() {
    static jnipp::StaticMethod<JavaNetInetAddress> method(clazz(), "getLoopbackAddress", "()Ljava/net/InetAddress;");
    return method.call();
}

// private static int java.net.InetAddress.checkNumericZone(java.lang.String) throws java.net.UnknownHostException
jint JavaNetInetAddress::checkNumericZone(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jint,JavaLangString> method(clazz(), "checkNumericZone", "(Ljava/lang/String;)I");
    return method.call(a0);
}

// private static java.net.InetAddress[] java.net.InetAddress.getAllByName0(java.lang.String,java.net.InetAddress,boolean) throws java.net.UnknownHostException
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::getAllByName0(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaNetInetAddress>& a1, jboolean a2) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress>,JavaLangString,JavaNetInetAddress,jboolean> method(clazz(), "getAllByName0", "(Ljava/lang/String;Ljava/net/InetAddress;Z)[Ljava/net/InetAddress;");
    return method.call(a0, a1, a2);
}

// static java.net.InetAddress[] java.net.InetAddress.getAllByName0(java.lang.String,boolean) throws java.net.UnknownHostException
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::getAllByName0(const jnipp::Ref<JavaLangString>& a0, jboolean a1) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress>,JavaLangString,jboolean> method(clazz(), "getAllByName0", "(Ljava/lang/String;Z)[Ljava/net/InetAddress;");
    return method.call(a0, a1);
}

// private static java.net.InetAddress[] java.net.InetAddress.getAllByName0(java.lang.String) throws java.net.UnknownHostException
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::getAllByName0(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress>,JavaLangString> method(clazz(), "getAllByName0", "(Ljava/lang/String;)[Ljava/net/InetAddress;");
    return method.call(a0);
}

// private static java.net.InetAddress[] java.net.InetAddress.getAddressesFromNameService(java.lang.String,java.net.InetAddress) throws java.net.UnknownHostException
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::getAddressesFromNameService(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaNetInetAddress>& a1) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress>,JavaLangString,JavaNetInetAddress> method(clazz(), "getAddressesFromNameService", "(Ljava/lang/String;Ljava/net/InetAddress;)[Ljava/net/InetAddress;");
    return method.call(a0, a1);
}

// private static java.net.InetAddress[] java.net.InetAddress.checkLookupTable(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::checkLookupTable(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress>,JavaLangString> method(clazz(), "checkLookupTable", "(Ljava/lang/String;)[Ljava/net/InetAddress;");
    return method.call(a0);
}

// private static void java.net.InetAddress.updateLookupTable(java.lang.String)
void JavaNetInetAddress::updateLookupTable(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<void,JavaLangString> method(clazz(), "updateLookupTable", "(Ljava/lang/String;)V");
    method.call(a0);
}

// public static java.net.InetAddress java.net.InetAddress.getLocalHost() throws java.net.UnknownHostException
jnipp::LocalRef<JavaNetInetAddress> JavaNetInetAddress::getLocalHost() {
    static jnipp::StaticMethod<JavaNetInetAddress> method(clazz(), "getLocalHost", "()Ljava/net/InetAddress;");
    return method.call();
}

// static java.net.InetAddress java.net.InetAddress.anyLocalAddress()
jnipp::LocalRef<JavaNetInetAddress> JavaNetInetAddress::anyLocalAddress() {
    static jnipp::StaticMethod<JavaNetInetAddress> method(clazz(), "anyLocalAddress", "()Ljava/net/InetAddress;");
    return method.call();
}

// static java.net.InetAddressImpl java.net.InetAddress.loadImpl(java.lang.String)
jnipp::LocalRef<JavaNetInetAddressImpl> JavaNetInetAddress::loadImpl(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetInetAddressImpl,JavaLangString> method(clazz(), "loadImpl", "(Ljava/lang/String;)Ljava/net/InetAddressImpl;");
    return method.call(a0);
}
#undef IPv4
const jnipp::StaticField<jint> JavaNetInetAddress::IPv4 ("java/net/InetAddress", "IPv4", "I");
#undef IPv6
const jnipp::StaticField<jint> JavaNetInetAddress::IPv6 ("java/net/InetAddress", "IPv6", "I");
#undef preferIPv6Address
jnipp::StaticField<jboolean> JavaNetInetAddress::preferIPv6Address ("java/net/InetAddress", "preferIPv6Address", "Z");
#undef nameServices
jnipp::StaticField<JavaUtilList> JavaNetInetAddress::nameServices ("java/net/InetAddress", "nameServices", "Ljava/util/List;");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaNetInetAddress::serialVersionUID ("java/net/InetAddress", "serialVersionUID", "J");
#undef addressCache
jnipp::StaticField<JavaNetInetAddress_Cache> JavaNetInetAddress::addressCache ("java/net/InetAddress", "addressCache", "Ljava/net/InetAddress$Cache;");
#undef negativeCache
jnipp::StaticField<JavaNetInetAddress_Cache> JavaNetInetAddress::negativeCache ("java/net/InetAddress", "negativeCache", "Ljava/net/InetAddress$Cache;");
#undef addressCacheInit
jnipp::StaticField<jboolean> JavaNetInetAddress::addressCacheInit ("java/net/InetAddress", "addressCacheInit", "Z");
#undef unknown_array
jnipp::StaticField<jnipp::Array<JavaNetInetAddress>> JavaNetInetAddress::unknown_array ("java/net/InetAddress", "unknown_array", "[Ljava/net/InetAddress;");
#undef impl
jnipp::StaticField<JavaNetInetAddressImpl> JavaNetInetAddress::impl ("java/net/InetAddress", "impl", "Ljava/net/InetAddressImpl;");
#undef lookupTable
const jnipp::StaticField<JavaUtilHashMap> JavaNetInetAddress::lookupTable ("java/net/InetAddress", "lookupTable", "Ljava/util/HashMap;");
#undef cachedLocalHost
jnipp::StaticField<JavaNetInetAddress> JavaNetInetAddress::cachedLocalHost ("java/net/InetAddress", "cachedLocalHost", "Ljava/net/InetAddress;");
#undef cacheTime
jnipp::StaticField<jlong> JavaNetInetAddress::cacheTime ("java/net/InetAddress", "cacheTime", "J");
#undef maxCacheTime
const jnipp::StaticField<jlong> JavaNetInetAddress::maxCacheTime ("java/net/InetAddress", "maxCacheTime", "J");
#undef cacheLock
const jnipp::StaticField<JavaLangObject> JavaNetInetAddress::cacheLock ("java/net/InetAddress", "cacheLock", "Ljava/lang/Object;");
#undef FIELDS_OFFSET
const jnipp::StaticField<jlong> JavaNetInetAddress::FIELDS_OFFSET ("java/net/InetAddress", "FIELDS_OFFSET", "J");
#undef UNSAFE
const jnipp::StaticField<SunMiscUnsafe> JavaNetInetAddress::UNSAFE ("java/net/InetAddress", "UNSAFE", "Lsun/misc/Unsafe;");
#undef serialPersistentFields
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaNetInetAddress::serialPersistentFields ("java/net/InetAddress", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaNetInetAddress::$assertionsDisabled ("java/net/InetAddress", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaNetURLStreamHandlerFactory::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/URLStreamHandlerFactory"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetURLConnection::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/URLConnection"));
    return cls;
}

// protected java.net.URLConnection(java.net.URL)
jnipp::LocalRef<JavaNetURLConnection> JavaNetURLConnection::construct(const jnipp::Ref<JavaNetURL>& a0) {
    static jnipp::Constructor<JavaNetURLConnection,JavaNetURL> constructor(clazz(), "(Ljava/net/URL;)V");
    return constructor.construct(a0);
}

// public java.net.URL java.net.URLConnection.getURL()
jnipp::LocalRef<JavaNetURL> JavaNetURLConnection::getURL() const {
    static jnipp::Method<JavaNetURL> method(clazz(), "getURL", "()Ljava/net/URL;");
    return method.call(*this);
}

// private static int java.net.URLConnection.readBytes(int[],int,java.io.InputStream) throws java.io.IOException
jint JavaNetURLConnection::readBytes(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, const jnipp::Ref<JavaIoInputStream>& a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jint>,jint,JavaIoInputStream> method(clazz(), "readBytes", "([IILjava/io/InputStream;)I");
    return method.call(a0, a1, a2);
}

// public java.io.InputStream java.net.URLConnection.getInputStream() throws java.io.IOException
jnipp::LocalRef<JavaIoInputStream> JavaNetURLConnection::getInputStream() const {
    static jnipp::Method<JavaIoInputStream> method(clazz(), "getInputStream", "()Ljava/io/InputStream;");
    return method.call(*this);
}

// public java.security.Permission java.net.URLConnection.getPermission() throws java.io.IOException
jnipp::LocalRef<JavaSecurityPermission> JavaNetURLConnection::getPermission() const {
    static jnipp::Method<JavaSecurityPermission> method(clazz(), "getPermission", "()Ljava/security/Permission;");
    return method.call(*this);
}

// public java.lang.Object java.net.URLConnection.getContent(java.lang.Class[]) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaNetURLConnection::getContent(const jnipp::Ref<jnipp::Array<JavaLangClass>>& a0) const {
    static jnipp::Method<JavaLangObject,jnipp::Array<JavaLangClass>> method(clazz(), "getContent", "([Ljava/lang/Class;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.net.URLConnection.getContent() throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaNetURLConnection::getContent() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getContent", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public void java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)
void JavaNetURLConnection::setRequestProperty(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangString> method(clazz(), "setRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public long java.net.URLConnection.getDate()
jlong JavaNetURLConnection::getDate() const {
    static jnipp::Method<jlong> method(clazz(), "getDate", "()J");
    return method.call(*this);
}

// public int java.net.URLConnection.getContentLength()
jint JavaNetURLConnection::getContentLength() const {
    static jnipp::Method<jint> method(clazz(), "getContentLength", "()I");
    return method.call(*this);
}

// public java.lang.String java.net.URLConnection.getHeaderField(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::getHeaderField(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getHeaderField", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.net.URLConnection.getHeaderField(int)
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::getHeaderField(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "getHeaderField", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public long java.net.URLConnection.getContentLengthLong()
jlong JavaNetURLConnection::getContentLengthLong() const {
    static jnipp::Method<jlong> method(clazz(), "getContentLengthLong", "()J");
    return method.call(*this);
}

// public java.lang.String java.net.URLConnection.getHeaderFieldKey(int)
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::getHeaderFieldKey(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "getHeaderFieldKey", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public long java.net.URLConnection.getLastModified()
jlong JavaNetURLConnection::getLastModified() const {
    static jnipp::Method<jlong> method(clazz(), "getLastModified", "()J");
    return method.call(*this);
}

// public static synchronized java.net.FileNameMap java.net.URLConnection.getFileNameMap()
jnipp::LocalRef<JavaNetFileNameMap> JavaNetURLConnection::getFileNameMap() {
    static jnipp::StaticMethod<JavaNetFileNameMap> method(clazz(), "getFileNameMap", "()Ljava/net/FileNameMap;");
    return method.call();
}

// public void java.net.URLConnection.addRequestProperty(java.lang.String,java.lang.String)
void JavaNetURLConnection::addRequestProperty(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangString> method(clazz(), "addRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public java.lang.String java.net.URLConnection.getRequestProperty(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::getRequestProperty(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getRequestProperty", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.util.Map java.net.URLConnection.getRequestProperties()
jnipp::LocalRef<JavaUtilMap> JavaNetURLConnection::getRequestProperties() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "getRequestProperties", "()Ljava/util/Map;");
    return method.call(*this);
}

// public java.lang.String java.net.URLConnection.getContentType()
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::getContentType() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getContentType", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static java.lang.String java.net.URLConnection.guessContentTypeFromStream(java.io.InputStream) throws java.io.IOException
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::guessContentTypeFromStream(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaIoInputStream> method(clazz(), "guessContentTypeFromStream", "(Ljava/io/InputStream;)Ljava/lang/String;");
    return method.call(a0);
}

// public static java.lang.String java.net.URLConnection.guessContentTypeFromName(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::guessContentTypeFromName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "guessContentTypeFromName", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// public static void java.net.URLConnection.setFileNameMap(java.net.FileNameMap)
void JavaNetURLConnection::setFileNameMap(const jnipp::Ref<JavaNetFileNameMap>& a0) {
    static jnipp::StaticMethod<void,JavaNetFileNameMap> method(clazz(), "setFileNameMap", "(Ljava/net/FileNameMap;)V");
    method.call(a0);
}

// public void java.net.URLConnection.setConnectTimeout(int)
void JavaNetURLConnection::setConnectTimeout(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setConnectTimeout", "(I)V");
    method.call(*this, a0);
}

// public int java.net.URLConnection.getConnectTimeout()
jint JavaNetURLConnection::getConnectTimeout() const {
    static jnipp::Method<jint> method(clazz(), "getConnectTimeout", "()I");
    return method.call(*this);
}

// public void java.net.URLConnection.setReadTimeout(int)
void JavaNetURLConnection::setReadTimeout(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setReadTimeout", "(I)V");
    method.call(*this, a0);
}

// public int java.net.URLConnection.getReadTimeout()
jint JavaNetURLConnection::getReadTimeout() const {
    static jnipp::Method<jint> method(clazz(), "getReadTimeout", "()I");
    return method.call(*this);
}

// public java.lang.String java.net.URLConnection.getContentEncoding()
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::getContentEncoding() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getContentEncoding", "()Ljava/lang/String;");
    return method.call(*this);
}

// public long java.net.URLConnection.getExpiration()
jlong JavaNetURLConnection::getExpiration() const {
    static jnipp::Method<jlong> method(clazz(), "getExpiration", "()J");
    return method.call(*this);
}

// public java.util.Map java.net.URLConnection.getHeaderFields()
jnipp::LocalRef<JavaUtilMap> JavaNetURLConnection::getHeaderFields() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "getHeaderFields", "()Ljava/util/Map;");
    return method.call(*this);
}

// public int java.net.URLConnection.getHeaderFieldInt(java.lang.String,int)
jint JavaNetURLConnection::getHeaderFieldInt(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangString,jint> method(clazz(), "getHeaderFieldInt", "(Ljava/lang/String;I)I");
    return method.call(*this, a0, a1);
}

// public long java.net.URLConnection.getHeaderFieldLong(java.lang.String,long)
jlong JavaNetURLConnection::getHeaderFieldLong(const jnipp::Ref<JavaLangString>& a0, jlong a1) const {
    static jnipp::Method<jlong,JavaLangString,jlong> method(clazz(), "getHeaderFieldLong", "(Ljava/lang/String;J)J");
    return method.call(*this, a0, a1);
}

// public long java.net.URLConnection.getHeaderFieldDate(java.lang.String,long)
jlong JavaNetURLConnection::getHeaderFieldDate(const jnipp::Ref<JavaLangString>& a0, jlong a1) const {
    static jnipp::Method<jlong,JavaLangString,jlong> method(clazz(), "getHeaderFieldDate", "(Ljava/lang/String;J)J");
    return method.call(*this, a0, a1);
}

// public java.io.OutputStream java.net.URLConnection.getOutputStream() throws java.io.IOException
jnipp::LocalRef<JavaIoOutputStream> JavaNetURLConnection::getOutputStream() const {
    static jnipp::Method<JavaIoOutputStream> method(clazz(), "getOutputStream", "()Ljava/io/OutputStream;");
    return method.call(*this);
}

// public void java.net.URLConnection.setDoInput(boolean)
void JavaNetURLConnection::setDoInput(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setDoInput", "(Z)V");
    method.call(*this, a0);
}

// public boolean java.net.URLConnection.getDoInput()
jboolean JavaNetURLConnection::getDoInput() const {
    static jnipp::Method<jboolean> method(clazz(), "getDoInput", "()Z");
    return method.call(*this);
}

// public void java.net.URLConnection.setDoOutput(boolean)
void JavaNetURLConnection::setDoOutput(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setDoOutput", "(Z)V");
    method.call(*this, a0);
}

// public boolean java.net.URLConnection.getDoOutput()
jboolean JavaNetURLConnection::getDoOutput() const {
    static jnipp::Method<jboolean> method(clazz(), "getDoOutput", "()Z");
    return method.call(*this);
}

// public void java.net.URLConnection.setAllowUserInteraction(boolean)
void JavaNetURLConnection::setAllowUserInteraction(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setAllowUserInteraction", "(Z)V");
    method.call(*this, a0);
}

// public boolean java.net.URLConnection.getAllowUserInteraction()
jboolean JavaNetURLConnection::getAllowUserInteraction() const {
    static jnipp::Method<jboolean> method(clazz(), "getAllowUserInteraction", "()Z");
    return method.call(*this);
}

// public static void java.net.URLConnection.setDefaultAllowUserInteraction(boolean)
void JavaNetURLConnection::setDefaultAllowUserInteraction(jboolean a0) {
    static jnipp::StaticMethod<void,jboolean> method(clazz(), "setDefaultAllowUserInteraction", "(Z)V");
    method.call(a0);
}

// public static boolean java.net.URLConnection.getDefaultAllowUserInteraction()
jboolean JavaNetURLConnection::getDefaultAllowUserInteraction() {
    static jnipp::StaticMethod<jboolean> method(clazz(), "getDefaultAllowUserInteraction", "()Z");
    return method.call();
}

// public void java.net.URLConnection.setUseCaches(boolean)
void JavaNetURLConnection::setUseCaches(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setUseCaches", "(Z)V");
    method.call(*this, a0);
}

// public boolean java.net.URLConnection.getUseCaches()
jboolean JavaNetURLConnection::getUseCaches() const {
    static jnipp::Method<jboolean> method(clazz(), "getUseCaches", "()Z");
    return method.call(*this);
}

// public void java.net.URLConnection.setIfModifiedSince(long)
void JavaNetURLConnection::setIfModifiedSince(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "setIfModifiedSince", "(J)V");
    method.call(*this, a0);
}

// public long java.net.URLConnection.getIfModifiedSince()
jlong JavaNetURLConnection::getIfModifiedSince() const {
    static jnipp::Method<jlong> method(clazz(), "getIfModifiedSince", "()J");
    return method.call(*this);
}

// public boolean java.net.URLConnection.getDefaultUseCaches()
jboolean JavaNetURLConnection::getDefaultUseCaches() const {
    static jnipp::Method<jboolean> method(clazz(), "getDefaultUseCaches", "()Z");
    return method.call(*this);
}

// public void java.net.URLConnection.setDefaultUseCaches(boolean)
void JavaNetURLConnection::setDefaultUseCaches(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setDefaultUseCaches", "(Z)V");
    method.call(*this, a0);
}

// public static void java.net.URLConnection.setDefaultRequestProperty(java.lang.String,java.lang.String)
void JavaNetURLConnection::setDefaultRequestProperty(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<void,JavaLangString,JavaLangString> method(clazz(), "setDefaultRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(a0, a1);
}

// public static java.lang.String java.net.URLConnection.getDefaultRequestProperty(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::getDefaultRequestProperty(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "getDefaultRequestProperty", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// public static synchronized void java.net.URLConnection.setContentHandlerFactory(java.net.ContentHandlerFactory)
void JavaNetURLConnection::setContentHandlerFactory(const jnipp::Ref<JavaNetContentHandlerFactory>& a0) {
    static jnipp::StaticMethod<void,JavaNetContentHandlerFactory> method(clazz(), "setContentHandlerFactory", "(Ljava/net/ContentHandlerFactory;)V");
    method.call(a0);
}

// synchronized java.net.ContentHandler java.net.URLConnection.getContentHandler() throws java.net.UnknownServiceException
jnipp::LocalRef<JavaNetContentHandler> JavaNetURLConnection::getContentHandler() const {
    static jnipp::Method<JavaNetContentHandler> method(clazz(), "getContentHandler", "()Ljava/net/ContentHandler;");
    return method.call(*this);
}

// private java.lang.String java.net.URLConnection.stripOffParameters(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::stripOffParameters(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "stripOffParameters", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private java.net.ContentHandler java.net.URLConnection.lookupContentHandlerClassFor(java.lang.String) throws java.lang.InstantiationException,java.lang.IllegalAccessException,java.lang.ClassNotFoundException
jnipp::LocalRef<JavaNetContentHandler> JavaNetURLConnection::lookupContentHandlerClassFor(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNetContentHandler,JavaLangString> method(clazz(), "lookupContentHandlerClassFor", "(Ljava/lang/String;)Ljava/net/ContentHandler;");
    return method.call(*this, a0);
}

// private java.lang.String java.net.URLConnection.typeToPackageName(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::typeToPackageName(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "typeToPackageName", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private java.lang.String java.net.URLConnection.getContentHandlerPkgPrefixes()
jnipp::LocalRef<JavaLangString> JavaNetURLConnection::getContentHandlerPkgPrefixes() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getContentHandlerPkgPrefixes", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static boolean java.net.URLConnection.checkfpx(java.io.InputStream) throws java.io.IOException
jboolean JavaNetURLConnection::checkfpx(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::StaticMethod<jboolean,JavaIoInputStream> method(clazz(), "checkfpx", "(Ljava/io/InputStream;)Z");
    return method.call(a0);
}

// private static long java.net.URLConnection.skipForward(java.io.InputStream,long) throws java.io.IOException
jlong JavaNetURLConnection::skipForward(const jnipp::Ref<JavaIoInputStream>& a0, jlong a1) {
    static jnipp::StaticMethod<jlong,JavaIoInputStream,jlong> method(clazz(), "skipForward", "(Ljava/io/InputStream;J)J");
    return method.call(a0, a1);
}
#undef defaultAllowUserInteraction
jnipp::StaticField<jboolean> JavaNetURLConnection::defaultAllowUserInteraction ("java/net/URLConnection", "defaultAllowUserInteraction", "Z");
#undef defaultUseCaches
jnipp::StaticField<jboolean> JavaNetURLConnection::defaultUseCaches ("java/net/URLConnection", "defaultUseCaches", "Z");
#undef fileNameMap
jnipp::StaticField<JavaNetFileNameMap> JavaNetURLConnection::fileNameMap ("java/net/URLConnection", "fileNameMap", "Ljava/net/FileNameMap;");
#undef fileNameMapLoaded
jnipp::StaticField<jboolean> JavaNetURLConnection::fileNameMapLoaded ("java/net/URLConnection", "fileNameMapLoaded", "Z");
#undef factory
jnipp::StaticField<JavaNetContentHandlerFactory> JavaNetURLConnection::factory ("java/net/URLConnection", "factory", "Ljava/net/ContentHandlerFactory;");
#undef handlers
jnipp::StaticField<JavaUtilHashtable> JavaNetURLConnection::handlers ("java/net/URLConnection", "handlers", "Ljava/util/Hashtable;");
#undef contentClassPrefix
const jnipp::StaticField<JavaLangString> JavaNetURLConnection::contentClassPrefix ("java/net/URLConnection", "contentClassPrefix", "Ljava/lang/String;");
#undef contentPathProp
const jnipp::StaticField<JavaLangString> JavaNetURLConnection::contentPathProp ("java/net/URLConnection", "contentPathProp", "Ljava/lang/String;");
inline jnipp::GlobalRef<jnipp::Class>& JavaNetURI::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/URI"));
    return cls;
}

// public java.net.URI(java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException
jnipp::LocalRef<JavaNetURI> JavaNetURI::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::Constructor<JavaNetURI,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.net.URI(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException
jnipp::LocalRef<JavaNetURI> JavaNetURI::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::Constructor<JavaNetURI,JavaLangString,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.net.URI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException
jnipp::LocalRef<JavaNetURI> JavaNetURI::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaLangString>& a4) {
    static jnipp::Constructor<JavaNetURI,JavaLangString,JavaLangString,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3, a4);
}

// private java.net.URI()
jnipp::LocalRef<JavaNetURI> JavaNetURI::construct() {
    static jnipp::Constructor<JavaNetURI> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.net.URI(java.lang.String) throws java.net.URISyntaxException
jnipp::LocalRef<JavaNetURI> JavaNetURI::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaNetURI,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.net.URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException
jnipp::LocalRef<JavaNetURI> JavaNetURI::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, jint a3, const jnipp::Ref<JavaLangString>& a4, const jnipp::Ref<JavaLangString>& a5, const jnipp::Ref<JavaLangString>& a6) {
    static jnipp::Constructor<JavaNetURI,JavaLangString,JavaLangString,JavaLangString,jint,JavaLangString,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5, a6);
}

// private static int java.net.URI.hash(int,java.lang.String)
jint JavaNetURI::hash(jint a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<jint,jint,JavaLangString> method(clazz(), "hash", "(ILjava/lang/String;)I");
    return method.call(a0, a1);
}

// public boolean java.net.URI.equals(java.lang.Object)
jboolean JavaNetURI::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.net.URI.hashCode()
jint JavaNetURI::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.net.URI.compareTo(java.net.URI)
jint JavaNetURI::compareTo(const jnipp::Ref<JavaNetURI>& a0) const {
    static jnipp::Method<jint,JavaNetURI> method(clazz(), "compareTo", "(Ljava/net/URI;)I");
    return method.call(*this, a0);
}

// private static void java.net.URI.split(char[],int[])
void JavaNetURI::split(const jnipp::Ref<jnipp::Array<jchar>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1) {
    static jnipp::StaticMethod<void,jnipp::Array<jchar>,jnipp::Array<jint>> method(clazz(), "split", "([C[I)V");
    method.call(a0, a1);
}

// private static int java.net.URI.decode(char)
jint JavaNetURI::decode(jchar a0) {
    static jnipp::StaticMethod<jint,jchar> method(clazz(), "decode", "(C)I");
    return method.call(a0);
}

// private static java.lang.String java.net.URI.decode(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURI::decode(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "decode", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// private static byte java.net.URI.decode(char,char)
jbyte JavaNetURI::decode(jchar a0, jchar a1) {
    static jnipp::StaticMethod<jbyte,jchar,jchar> method(clazz(), "decode", "(CC)B");
    return method.call(a0, a1);
}

// private static java.lang.String java.net.URI.encode(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURI::encode(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "encode", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// private static int java.net.URI.compare(java.lang.String,java.lang.String)
jint JavaNetURI::compare(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<jint,JavaLangString,JavaLangString> method(clazz(), "compare", "(Ljava/lang/String;Ljava/lang/String;)I");
    return method.call(a0, a1);
}

// public boolean java.net.URI.isAbsolute()
jboolean JavaNetURI::isAbsolute() const {
    static jnipp::Method<jboolean> method(clazz(), "isAbsolute", "()Z");
    return method.call(*this);
}

// private void java.net.URI.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException
void JavaNetURI::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.net.URI.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaNetURI::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// private static int java.net.URI.join(char[],int[])
jint JavaNetURI::join(const jnipp::Ref<jnipp::Array<jchar>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1) {
    static jnipp::StaticMethod<jint,jnipp::Array<jchar>,jnipp::Array<jint>> method(clazz(), "join", "([C[I)I");
    return method.call(a0, a1);
}

// private static java.net.URI java.net.URI.resolve(java.net.URI,java.net.URI)
jnipp::LocalRef<JavaNetURI> JavaNetURI::resolve(const jnipp::Ref<JavaNetURI>& a0, const jnipp::Ref<JavaNetURI>& a1) {
    static jnipp::StaticMethod<JavaNetURI,JavaNetURI,JavaNetURI> method(clazz(), "resolve", "(Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;");
    return method.call(a0, a1);
}

// public java.net.URI java.net.URI.resolve(java.net.URI)
jnipp::LocalRef<JavaNetURI> JavaNetURI::resolve(const jnipp::Ref<JavaNetURI>& a0) const {
    static jnipp::Method<JavaNetURI,JavaNetURI> method(clazz(), "resolve", "(Ljava/net/URI;)Ljava/net/URI;");
    return method.call(*this, a0);
}

// public java.net.URI java.net.URI.resolve(java.lang.String)
jnipp::LocalRef<JavaNetURI> JavaNetURI::resolve(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNetURI,JavaLangString> method(clazz(), "resolve", "(Ljava/lang/String;)Ljava/net/URI;");
    return method.call(*this, a0);
}

// public java.net.URI java.net.URI.normalize()
jnipp::LocalRef<JavaNetURI> JavaNetURI::normalize() const {
    static jnipp::Method<JavaNetURI> method(clazz(), "normalize", "()Ljava/net/URI;");
    return method.call(*this);
}

// private static java.net.URI java.net.URI.normalize(java.net.URI)
jnipp::LocalRef<JavaNetURI> JavaNetURI::normalize(const jnipp::Ref<JavaNetURI>& a0) {
    static jnipp::StaticMethod<JavaNetURI,JavaNetURI> method(clazz(), "normalize", "(Ljava/net/URI;)Ljava/net/URI;");
    return method.call(a0);
}

// private static java.lang.String java.net.URI.normalize(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetURI::normalize(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "normalize", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// private static int java.net.URI.toLower(char)
jint JavaNetURI::toLower(jchar a0) {
    static jnipp::StaticMethod<jint,jchar> method(clazz(), "toLower", "(C)I");
    return method.call(a0);
}

// public java.lang.String java.net.URI.getPath()
jnipp::LocalRef<JavaLangString> JavaNetURI::getPath() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getPath", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.net.URL java.net.URI.toURL() throws java.net.MalformedURLException
jnipp::LocalRef<JavaNetURL> JavaNetURI::toURL() const {
    static jnipp::Method<JavaNetURL> method(clazz(), "toURL", "()Ljava/net/URL;");
    return method.call(*this);
}

// public boolean java.net.URI.isOpaque()
jboolean JavaNetURI::isOpaque() const {
    static jnipp::Method<jboolean> method(clazz(), "isOpaque", "()Z");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getScheme()
jnipp::LocalRef<JavaLangString> JavaNetURI::getScheme() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getScheme", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getAuthority()
jnipp::LocalRef<JavaLangString> JavaNetURI::getAuthority() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getAuthority", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getFragment()
jnipp::LocalRef<JavaLangString> JavaNetURI::getFragment() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getFragment", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getQuery()
jnipp::LocalRef<JavaLangString> JavaNetURI::getQuery() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getQuery", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getHost()
jnipp::LocalRef<JavaLangString> JavaNetURI::getHost() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getHost", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static java.net.URI java.net.URI.create(java.lang.String)
jnipp::LocalRef<JavaNetURI> JavaNetURI::create(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetURI,JavaLangString> method(clazz(), "create", "(Ljava/lang/String;)Ljava/net/URI;");
    return method.call(a0);
}

// private void java.net.URI.appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)
void JavaNetURI::appendSchemeSpecificPart(const jnipp::Ref<JavaLangStringBuffer>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaLangString>& a4, jint a5, const jnipp::Ref<JavaLangString>& a6, const jnipp::Ref<JavaLangString>& a7) const {
    static jnipp::Method<void,JavaLangStringBuffer,JavaLangString,JavaLangString,JavaLangString,JavaLangString,jint,JavaLangString,JavaLangString> method(clazz(), "appendSchemeSpecificPart", "(Ljava/lang/StringBuffer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1, a2, a3, a4, a5, a6, a7);
}

// private void java.net.URI.appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)
void JavaNetURI::appendAuthority(const jnipp::Ref<JavaLangStringBuffer>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, jint a4) const {
    static jnipp::Method<void,JavaLangStringBuffer,JavaLangString,JavaLangString,JavaLangString,jint> method(clazz(), "appendAuthority", "(Ljava/lang/StringBuffer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V");
    method.call(*this, a0, a1, a2, a3, a4);
}

// private void java.net.URI.appendFragment(java.lang.StringBuffer,java.lang.String)
void JavaNetURI::appendFragment(const jnipp::Ref<JavaLangStringBuffer>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangStringBuffer,JavaLangString> method(clazz(), "appendFragment", "(Ljava/lang/StringBuffer;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// private static java.lang.String java.net.URI.quote(java.lang.String,long,long)
jnipp::LocalRef<JavaLangString> JavaNetURI::quote(const jnipp::Ref<JavaLangString>& a0, jlong a1, jlong a2) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString,jlong,jlong> method(clazz(), "quote", "(Ljava/lang/String;JJ)Ljava/lang/String;");
    return method.call(a0, a1, a2);
}

// private static void java.net.URI.appendEncoded(java.lang.StringBuffer,char)
void JavaNetURI::appendEncoded(const jnipp::Ref<JavaLangStringBuffer>& a0, jchar a1) {
    static jnipp::StaticMethod<void,JavaLangStringBuffer,jchar> method(clazz(), "appendEncoded", "(Ljava/lang/StringBuffer;C)V");
    method.call(a0, a1);
}

// private static void java.net.URI.appendEscape(java.lang.StringBuffer,byte)
void JavaNetURI::appendEscape(const jnipp::Ref<JavaLangStringBuffer>& a0, jbyte a1) {
    static jnipp::StaticMethod<void,JavaLangStringBuffer,jbyte> method(clazz(), "appendEscape", "(Ljava/lang/StringBuffer;B)V");
    method.call(a0, a1);
}

// private static boolean java.net.URI.match(char,long,long)
jboolean JavaNetURI::match(jchar a0, jlong a1, jlong a2) {
    static jnipp::StaticMethod<jboolean,jchar,jlong,jlong> method(clazz(), "match", "(CJJ)Z");
    return method.call(a0, a1, a2);
}

// private static void java.net.URI.checkPath(java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException
void JavaNetURI::checkPath(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::StaticMethod<void,JavaLangString,JavaLangString,JavaLangString> method(clazz(), "checkPath", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    method.call(a0, a1, a2);
}

// private static long java.net.URI.lowMask(java.lang.String)
jlong JavaNetURI::lowMask(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jlong,JavaLangString> method(clazz(), "lowMask", "(Ljava/lang/String;)J");
    return method.call(a0);
}

// private static long java.net.URI.lowMask(char,char)
jlong JavaNetURI::lowMask(jchar a0, jchar a1) {
    static jnipp::StaticMethod<jlong,jchar,jchar> method(clazz(), "lowMask", "(CC)J");
    return method.call(a0, a1);
}

// private static long java.net.URI.highMask(java.lang.String)
jlong JavaNetURI::highMask(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jlong,JavaLangString> method(clazz(), "highMask", "(Ljava/lang/String;)J");
    return method.call(a0);
}

// private static long java.net.URI.highMask(char,char)
jlong JavaNetURI::highMask(jchar a0, jchar a1) {
    static jnipp::StaticMethod<jlong,jchar,jchar> method(clazz(), "highMask", "(CC)J");
    return method.call(a0, a1);
}

// public java.lang.String java.net.URI.getUserInfo()
jnipp::LocalRef<JavaLangString> JavaNetURI::getUserInfo() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getUserInfo", "()Ljava/lang/String;");
    return method.call(*this);
}

// public int java.net.URI.getPort()
jint JavaNetURI::getPort() const {
    static jnipp::Method<jint> method(clazz(), "getPort", "()I");
    return method.call(*this);
}

// public java.net.URI java.net.URI.parseServerAuthority() throws java.net.URISyntaxException
jnipp::LocalRef<JavaNetURI> JavaNetURI::parseServerAuthority() const {
    static jnipp::Method<JavaNetURI> method(clazz(), "parseServerAuthority", "()Ljava/net/URI;");
    return method.call(*this);
}

// private static java.net.URI java.net.URI.relativize(java.net.URI,java.net.URI)
jnipp::LocalRef<JavaNetURI> JavaNetURI::relativize(const jnipp::Ref<JavaNetURI>& a0, const jnipp::Ref<JavaNetURI>& a1) {
    static jnipp::StaticMethod<JavaNetURI,JavaNetURI,JavaNetURI> method(clazz(), "relativize", "(Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;");
    return method.call(a0, a1);
}

// public java.net.URI java.net.URI.relativize(java.net.URI)
jnipp::LocalRef<JavaNetURI> JavaNetURI::relativize(const jnipp::Ref<JavaNetURI>& a0) const {
    static jnipp::Method<JavaNetURI,JavaNetURI> method(clazz(), "relativize", "(Ljava/net/URI;)Ljava/net/URI;");
    return method.call(*this, a0);
}

// public java.lang.String java.net.URI.getRawSchemeSpecificPart()
jnipp::LocalRef<JavaLangString> JavaNetURI::getRawSchemeSpecificPart() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getRawSchemeSpecificPart", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getSchemeSpecificPart()
jnipp::LocalRef<JavaLangString> JavaNetURI::getSchemeSpecificPart() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getSchemeSpecificPart", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getRawAuthority()
jnipp::LocalRef<JavaLangString> JavaNetURI::getRawAuthority() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getRawAuthority", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getRawUserInfo()
jnipp::LocalRef<JavaLangString> JavaNetURI::getRawUserInfo() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getRawUserInfo", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getRawPath()
jnipp::LocalRef<JavaLangString> JavaNetURI::getRawPath() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getRawPath", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getRawQuery()
jnipp::LocalRef<JavaLangString> JavaNetURI::getRawQuery() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getRawQuery", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.getRawFragment()
jnipp::LocalRef<JavaLangString> JavaNetURI::getRawFragment() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getRawFragment", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.net.URI.toASCIIString()
jnipp::LocalRef<JavaLangString> JavaNetURI::toASCIIString() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toASCIIString", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static boolean java.net.URI.equal(java.lang.String,java.lang.String)
jboolean JavaNetURI::equal(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,JavaLangString> method(clazz(), "equal", "(Ljava/lang/String;Ljava/lang/String;)Z");
    return method.call(a0, a1);
}

// private static boolean java.net.URI.equalIgnoringCase(java.lang.String,java.lang.String)
jboolean JavaNetURI::equalIgnoringCase(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,JavaLangString> method(clazz(), "equalIgnoringCase", "(Ljava/lang/String;Ljava/lang/String;)Z");
    return method.call(a0, a1);
}

// private static int java.net.URI.hashIgnoringCase(int,java.lang.String)
jint JavaNetURI::hashIgnoringCase(jint a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<jint,jint,JavaLangString> method(clazz(), "hashIgnoringCase", "(ILjava/lang/String;)I");
    return method.call(a0, a1);
}

// private static int java.net.URI.compareIgnoringCase(java.lang.String,java.lang.String)
jint JavaNetURI::compareIgnoringCase(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<jint,JavaLangString,JavaLangString> method(clazz(), "compareIgnoringCase", "(Ljava/lang/String;Ljava/lang/String;)I");
    return method.call(a0, a1);
}

// private void java.net.URI.defineSchemeSpecificPart()
void JavaNetURI::defineSchemeSpecificPart() const {
    static jnipp::Method<void> method(clazz(), "defineSchemeSpecificPart", "()V");
    method.call(*this);
}

// private void java.net.URI.defineString()
void JavaNetURI::defineString() const {
    static jnipp::Method<void> method(clazz(), "defineString", "()V");
    method.call(*this);
}

// private static java.lang.String java.net.URI.resolvePath(java.lang.String,java.lang.String,boolean)
jnipp::LocalRef<JavaLangString> JavaNetURI::resolvePath(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jboolean a2) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString,JavaLangString,jboolean> method(clazz(), "resolvePath", "(Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;");
    return method.call(a0, a1, a2);
}

// private static int java.net.URI.needsNormalization(java.lang.String)
jint JavaNetURI::needsNormalization(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jint,JavaLangString> method(clazz(), "needsNormalization", "(Ljava/lang/String;)I");
    return method.call(a0);
}

// private static void java.net.URI.removeDots(char[],int[])
void JavaNetURI::removeDots(const jnipp::Ref<jnipp::Array<jchar>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1) {
    static jnipp::StaticMethod<void,jnipp::Array<jchar>,jnipp::Array<jint>> method(clazz(), "removeDots", "([C[I)V");
    method.call(a0, a1);
}

// private static void java.net.URI.maybeAddLeadingDot(char[],int[])
void JavaNetURI::maybeAddLeadingDot(const jnipp::Ref<jnipp::Array<jchar>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1) {
    static jnipp::StaticMethod<void,jnipp::Array<jchar>,jnipp::Array<jint>> method(clazz(), "maybeAddLeadingDot", "([C[I)V");
    method.call(a0, a1);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaNetURI::serialVersionUID ("java/net/URI", "serialVersionUID", "J");
#undef L_DIGIT
const jnipp::StaticField<jlong> JavaNetURI::L_DIGIT ("java/net/URI", "L_DIGIT", "J");
#undef H_DIGIT
const jnipp::StaticField<jlong> JavaNetURI::H_DIGIT ("java/net/URI", "H_DIGIT", "J");
#undef L_UPALPHA
const jnipp::StaticField<jlong> JavaNetURI::L_UPALPHA ("java/net/URI", "L_UPALPHA", "J");
#undef H_UPALPHA
const jnipp::StaticField<jlong> JavaNetURI::H_UPALPHA ("java/net/URI", "H_UPALPHA", "J");
#undef L_LOWALPHA
const jnipp::StaticField<jlong> JavaNetURI::L_LOWALPHA ("java/net/URI", "L_LOWALPHA", "J");
#undef H_LOWALPHA
const jnipp::StaticField<jlong> JavaNetURI::H_LOWALPHA ("java/net/URI", "H_LOWALPHA", "J");
#undef L_ALPHA
const jnipp::StaticField<jlong> JavaNetURI::L_ALPHA ("java/net/URI", "L_ALPHA", "J");
#undef H_ALPHA
const jnipp::StaticField<jlong> JavaNetURI::H_ALPHA ("java/net/URI", "H_ALPHA", "J");
#undef L_ALPHANUM
const jnipp::StaticField<jlong> JavaNetURI::L_ALPHANUM ("java/net/URI", "L_ALPHANUM", "J");
#undef H_ALPHANUM
const jnipp::StaticField<jlong> JavaNetURI::H_ALPHANUM ("java/net/URI", "H_ALPHANUM", "J");
#undef L_HEX
const jnipp::StaticField<jlong> JavaNetURI::L_HEX ("java/net/URI", "L_HEX", "J");
#undef H_HEX
const jnipp::StaticField<jlong> JavaNetURI::H_HEX ("java/net/URI", "H_HEX", "J");
#undef L_MARK
const jnipp::StaticField<jlong> JavaNetURI::L_MARK ("java/net/URI", "L_MARK", "J");
#undef H_MARK
const jnipp::StaticField<jlong> JavaNetURI::H_MARK ("java/net/URI", "H_MARK", "J");
#undef L_UNRESERVED
const jnipp::StaticField<jlong> JavaNetURI::L_UNRESERVED ("java/net/URI", "L_UNRESERVED", "J");
#undef H_UNRESERVED
const jnipp::StaticField<jlong> JavaNetURI::H_UNRESERVED ("java/net/URI", "H_UNRESERVED", "J");
#undef L_RESERVED
const jnipp::StaticField<jlong> JavaNetURI::L_RESERVED ("java/net/URI", "L_RESERVED", "J");
#undef H_RESERVED
const jnipp::StaticField<jlong> JavaNetURI::H_RESERVED ("java/net/URI", "H_RESERVED", "J");
#undef L_ESCAPED
const jnipp::StaticField<jlong> JavaNetURI::L_ESCAPED ("java/net/URI", "L_ESCAPED", "J");
#undef H_ESCAPED
const jnipp::StaticField<jlong> JavaNetURI::H_ESCAPED ("java/net/URI", "H_ESCAPED", "J");
#undef L_URIC
const jnipp::StaticField<jlong> JavaNetURI::L_URIC ("java/net/URI", "L_URIC", "J");
#undef H_URIC
const jnipp::StaticField<jlong> JavaNetURI::H_URIC ("java/net/URI", "H_URIC", "J");
#undef L_PCHAR
const jnipp::StaticField<jlong> JavaNetURI::L_PCHAR ("java/net/URI", "L_PCHAR", "J");
#undef H_PCHAR
const jnipp::StaticField<jlong> JavaNetURI::H_PCHAR ("java/net/URI", "H_PCHAR", "J");
#undef L_PATH
const jnipp::StaticField<jlong> JavaNetURI::L_PATH ("java/net/URI", "L_PATH", "J");
#undef H_PATH
const jnipp::StaticField<jlong> JavaNetURI::H_PATH ("java/net/URI", "H_PATH", "J");
#undef L_DASH
const jnipp::StaticField<jlong> JavaNetURI::L_DASH ("java/net/URI", "L_DASH", "J");
#undef H_DASH
const jnipp::StaticField<jlong> JavaNetURI::H_DASH ("java/net/URI", "H_DASH", "J");
#undef L_DOT
const jnipp::StaticField<jlong> JavaNetURI::L_DOT ("java/net/URI", "L_DOT", "J");
#undef H_DOT
const jnipp::StaticField<jlong> JavaNetURI::H_DOT ("java/net/URI", "H_DOT", "J");
#undef L_USERINFO
const jnipp::StaticField<jlong> JavaNetURI::L_USERINFO ("java/net/URI", "L_USERINFO", "J");
#undef H_USERINFO
const jnipp::StaticField<jlong> JavaNetURI::H_USERINFO ("java/net/URI", "H_USERINFO", "J");
#undef L_REG_NAME
const jnipp::StaticField<jlong> JavaNetURI::L_REG_NAME ("java/net/URI", "L_REG_NAME", "J");
#undef H_REG_NAME
const jnipp::StaticField<jlong> JavaNetURI::H_REG_NAME ("java/net/URI", "H_REG_NAME", "J");
#undef L_SERVER
const jnipp::StaticField<jlong> JavaNetURI::L_SERVER ("java/net/URI", "L_SERVER", "J");
#undef H_SERVER
const jnipp::StaticField<jlong> JavaNetURI::H_SERVER ("java/net/URI", "H_SERVER", "J");
#undef L_SERVER_PERCENT
const jnipp::StaticField<jlong> JavaNetURI::L_SERVER_PERCENT ("java/net/URI", "L_SERVER_PERCENT", "J");
#undef H_SERVER_PERCENT
const jnipp::StaticField<jlong> JavaNetURI::H_SERVER_PERCENT ("java/net/URI", "H_SERVER_PERCENT", "J");
#undef L_LEFT_BRACKET
const jnipp::StaticField<jlong> JavaNetURI::L_LEFT_BRACKET ("java/net/URI", "L_LEFT_BRACKET", "J");
#undef H_LEFT_BRACKET
const jnipp::StaticField<jlong> JavaNetURI::H_LEFT_BRACKET ("java/net/URI", "H_LEFT_BRACKET", "J");
#undef L_SCHEME
const jnipp::StaticField<jlong> JavaNetURI::L_SCHEME ("java/net/URI", "L_SCHEME", "J");
#undef H_SCHEME
const jnipp::StaticField<jlong> JavaNetURI::H_SCHEME ("java/net/URI", "H_SCHEME", "J");
#undef L_URIC_NO_SLASH
const jnipp::StaticField<jlong> JavaNetURI::L_URIC_NO_SLASH ("java/net/URI", "L_URIC_NO_SLASH", "J");
#undef H_URIC_NO_SLASH
const jnipp::StaticField<jlong> JavaNetURI::H_URIC_NO_SLASH ("java/net/URI", "H_URIC_NO_SLASH", "J");
#undef hexDigits
const jnipp::StaticField<jnipp::Array<jchar>> JavaNetURI::hexDigits ("java/net/URI", "hexDigits", "[C");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaNetURI::$assertionsDisabled ("java/net/URI", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangReflectMember::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/reflect/Member"));
    return cls;
}
#undef PUBLIC
const jnipp::StaticField<jint> JavaLangReflectMember::PUBLIC ("java/lang/reflect/Member", "PUBLIC", "I");
#undef DECLARED
const jnipp::StaticField<jint> JavaLangReflectMember::DECLARED ("java/lang/reflect/Member", "DECLARED", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangAnnotationRetentionPolicy::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/annotation/RetentionPolicy"));
    return cls;
}

// private java.lang.annotation.RetentionPolicy(java.lang.String,int)
jnipp::LocalRef<JavaLangAnnotationRetentionPolicy> JavaLangAnnotationRetentionPolicy::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaLangAnnotationRetentionPolicy,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public static java.lang.annotation.RetentionPolicy[] java.lang.annotation.RetentionPolicy.values()
jnipp::LocalRef<jnipp::Array<JavaLangAnnotationRetentionPolicy>> JavaLangAnnotationRetentionPolicy::values() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangAnnotationRetentionPolicy>> method(clazz(), "values", "()[Ljava/lang/annotation/RetentionPolicy;");
    return method.call();
}

// public static java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.valueOf(java.lang.String)
jnipp::LocalRef<JavaLangAnnotationRetentionPolicy> JavaLangAnnotationRetentionPolicy::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangAnnotationRetentionPolicy,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/lang/annotation/RetentionPolicy;");
    return method.call(a0);
}
#undef SOURCE
const jnipp::StaticField<JavaLangAnnotationRetentionPolicy> JavaLangAnnotationRetentionPolicy::SOURCE ("java/lang/annotation/RetentionPolicy", "SOURCE", "Ljava/lang/annotation/RetentionPolicy;");
#undef CLASS
const jnipp::StaticField<JavaLangAnnotationRetentionPolicy> JavaLangAnnotationRetentionPolicy::CLASS ("java/lang/annotation/RetentionPolicy", "CLASS", "Ljava/lang/annotation/RetentionPolicy;");
#undef RUNTIME
const jnipp::StaticField<JavaLangAnnotationRetentionPolicy> JavaLangAnnotationRetentionPolicy::RUNTIME ("java/lang/annotation/RetentionPolicy", "RUNTIME", "Ljava/lang/annotation/RetentionPolicy;");
#undef $VALUES
const jnipp::StaticField<jnipp::Array<JavaLangAnnotationRetentionPolicy>> JavaLangAnnotationRetentionPolicy::$VALUES ("java/lang/annotation/RetentionPolicy", "$VALUES", "[Ljava/lang/annotation/RetentionPolicy;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeTree::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/Tree"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsVisitorReifier::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/visitor/Reifier"));
    return cls;
}

// private sun.reflect.generics.visitor.Reifier(sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsVisitorReifier> SunReflectGenericsVisitorReifier::construct(const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a0) {
    static jnipp::Constructor<SunReflectGenericsVisitorReifier,SunReflectGenericsFactoryGenericsFactory> constructor(clazz(), "(Lsun/reflect/generics/factory/GenericsFactory;)V");
    return constructor.construct(a0);
}

// private sun.reflect.generics.factory.GenericsFactory sun.reflect.generics.visitor.Reifier.getFactory()
jnipp::LocalRef<SunReflectGenericsFactoryGenericsFactory> SunReflectGenericsVisitorReifier::getFactory() const {
    static jnipp::Method<SunReflectGenericsFactoryGenericsFactory> method(clazz(), "getFactory", "()Lsun/reflect/generics/factory/GenericsFactory;");
    return method.call(*this);
}

// public static sun.reflect.generics.visitor.Reifier sun.reflect.generics.visitor.Reifier.make(sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsVisitorReifier> SunReflectGenericsVisitorReifier::make(const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a0) {
    static jnipp::StaticMethod<SunReflectGenericsVisitorReifier,SunReflectGenericsFactoryGenericsFactory> method(clazz(), "make", "(Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/visitor/Reifier;");
    return method.call(a0);
}

// public java.lang.reflect.Type sun.reflect.generics.visitor.Reifier.getResult()
jnipp::LocalRef<JavaLangReflectType> SunReflectGenericsVisitorReifier::getResult() const {
    static jnipp::Method<JavaLangReflectType> method(clazz(), "getResult", "()Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// private java.lang.reflect.Type[] sun.reflect.generics.visitor.Reifier.reifyTypeArguments(sun.reflect.generics.tree.TypeArgument[])
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> SunReflectGenericsVisitorReifier::reifyTypeArguments(const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeTypeArgument>>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>,jnipp::Array<SunReflectGenericsTreeTypeArgument>> method(clazz(), "reifyTypeArguments", "([Lsun/reflect/generics/tree/TypeArgument;)[Ljava/lang/reflect/Type;");
    return method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitFormalTypeParameter(sun.reflect.generics.tree.FormalTypeParameter)
void SunReflectGenericsVisitorReifier::visitFormalTypeParameter(const jnipp::Ref<SunReflectGenericsTreeFormalTypeParameter>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeFormalTypeParameter> method(clazz(), "visitFormalTypeParameter", "(Lsun/reflect/generics/tree/FormalTypeParameter;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(sun.reflect.generics.tree.ClassTypeSignature)
void SunReflectGenericsVisitorReifier::visitClassTypeSignature(const jnipp::Ref<SunReflectGenericsTreeClassTypeSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeClassTypeSignature> method(clazz(), "visitClassTypeSignature", "(Lsun/reflect/generics/tree/ClassTypeSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitArrayTypeSignature(sun.reflect.generics.tree.ArrayTypeSignature)
void SunReflectGenericsVisitorReifier::visitArrayTypeSignature(const jnipp::Ref<SunReflectGenericsTreeArrayTypeSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeArrayTypeSignature> method(clazz(), "visitArrayTypeSignature", "(Lsun/reflect/generics/tree/ArrayTypeSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitTypeVariableSignature(sun.reflect.generics.tree.TypeVariableSignature)
void SunReflectGenericsVisitorReifier::visitTypeVariableSignature(const jnipp::Ref<SunReflectGenericsTreeTypeVariableSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeTypeVariableSignature> method(clazz(), "visitTypeVariableSignature", "(Lsun/reflect/generics/tree/TypeVariableSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitWildcard(sun.reflect.generics.tree.Wildcard)
void SunReflectGenericsVisitorReifier::visitWildcard(const jnipp::Ref<SunReflectGenericsTreeWildcard>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeWildcard> method(clazz(), "visitWildcard", "(Lsun/reflect/generics/tree/Wildcard;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitSimpleClassTypeSignature(sun.reflect.generics.tree.SimpleClassTypeSignature)
void SunReflectGenericsVisitorReifier::visitSimpleClassTypeSignature(const jnipp::Ref<SunReflectGenericsTreeSimpleClassTypeSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeSimpleClassTypeSignature> method(clazz(), "visitSimpleClassTypeSignature", "(Lsun/reflect/generics/tree/SimpleClassTypeSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitBottomSignature(sun.reflect.generics.tree.BottomSignature)
void SunReflectGenericsVisitorReifier::visitBottomSignature(const jnipp::Ref<SunReflectGenericsTreeBottomSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeBottomSignature> method(clazz(), "visitBottomSignature", "(Lsun/reflect/generics/tree/BottomSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitByteSignature(sun.reflect.generics.tree.ByteSignature)
void SunReflectGenericsVisitorReifier::visitByteSignature(const jnipp::Ref<SunReflectGenericsTreeByteSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeByteSignature> method(clazz(), "visitByteSignature", "(Lsun/reflect/generics/tree/ByteSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitBooleanSignature(sun.reflect.generics.tree.BooleanSignature)
void SunReflectGenericsVisitorReifier::visitBooleanSignature(const jnipp::Ref<SunReflectGenericsTreeBooleanSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeBooleanSignature> method(clazz(), "visitBooleanSignature", "(Lsun/reflect/generics/tree/BooleanSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitShortSignature(sun.reflect.generics.tree.ShortSignature)
void SunReflectGenericsVisitorReifier::visitShortSignature(const jnipp::Ref<SunReflectGenericsTreeShortSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeShortSignature> method(clazz(), "visitShortSignature", "(Lsun/reflect/generics/tree/ShortSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitCharSignature(sun.reflect.generics.tree.CharSignature)
void SunReflectGenericsVisitorReifier::visitCharSignature(const jnipp::Ref<SunReflectGenericsTreeCharSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeCharSignature> method(clazz(), "visitCharSignature", "(Lsun/reflect/generics/tree/CharSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitIntSignature(sun.reflect.generics.tree.IntSignature)
void SunReflectGenericsVisitorReifier::visitIntSignature(const jnipp::Ref<SunReflectGenericsTreeIntSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeIntSignature> method(clazz(), "visitIntSignature", "(Lsun/reflect/generics/tree/IntSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitLongSignature(sun.reflect.generics.tree.LongSignature)
void SunReflectGenericsVisitorReifier::visitLongSignature(const jnipp::Ref<SunReflectGenericsTreeLongSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeLongSignature> method(clazz(), "visitLongSignature", "(Lsun/reflect/generics/tree/LongSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitFloatSignature(sun.reflect.generics.tree.FloatSignature)
void SunReflectGenericsVisitorReifier::visitFloatSignature(const jnipp::Ref<SunReflectGenericsTreeFloatSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeFloatSignature> method(clazz(), "visitFloatSignature", "(Lsun/reflect/generics/tree/FloatSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitDoubleSignature(sun.reflect.generics.tree.DoubleSignature)
void SunReflectGenericsVisitorReifier::visitDoubleSignature(const jnipp::Ref<SunReflectGenericsTreeDoubleSignature>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeDoubleSignature> method(clazz(), "visitDoubleSignature", "(Lsun/reflect/generics/tree/DoubleSignature;)V");
    method.call(*this, a0);
}

// public void sun.reflect.generics.visitor.Reifier.visitVoidDescriptor(sun.reflect.generics.tree.VoidDescriptor)
void SunReflectGenericsVisitorReifier::visitVoidDescriptor(const jnipp::Ref<SunReflectGenericsTreeVoidDescriptor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsTreeVoidDescriptor> method(clazz(), "visitVoidDescriptor", "(Lsun/reflect/generics/tree/VoidDescriptor;)V");
    method.call(*this, a0);
}
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> SunReflectGenericsVisitorReifier::$assertionsDisabled ("sun/reflect/generics/visitor/Reifier", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeClassSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/ClassSignature"));
    return cls;
}

// private sun.reflect.generics.tree.ClassSignature(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.ClassTypeSignature,sun.reflect.generics.tree.ClassTypeSignature[])
jnipp::LocalRef<SunReflectGenericsTreeClassSignature> SunReflectGenericsTreeClassSignature::construct(const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>>& a0, const jnipp::Ref<SunReflectGenericsTreeClassTypeSignature>& a1, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeClassTypeSignature>>& a2) {
    static jnipp::Constructor<SunReflectGenericsTreeClassSignature,jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>,SunReflectGenericsTreeClassTypeSignature,jnipp::Array<SunReflectGenericsTreeClassTypeSignature>> constructor(clazz(), "([Lsun/reflect/generics/tree/FormalTypeParameter;Lsun/reflect/generics/tree/ClassTypeSignature;[Lsun/reflect/generics/tree/ClassTypeSignature;)V");
    return constructor.construct(a0, a1, a2);
}

// public sun.reflect.generics.tree.ClassTypeSignature sun.reflect.generics.tree.ClassSignature.getSuperclass()
jnipp::LocalRef<SunReflectGenericsTreeClassTypeSignature> SunReflectGenericsTreeClassSignature::getSuperclass() const {
    static jnipp::Method<SunReflectGenericsTreeClassTypeSignature> method(clazz(), "getSuperclass", "()Lsun/reflect/generics/tree/ClassTypeSignature;");
    return method.call(*this);
}

// public sun.reflect.generics.tree.ClassTypeSignature[] sun.reflect.generics.tree.ClassSignature.getSuperInterfaces()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeClassTypeSignature>> SunReflectGenericsTreeClassSignature::getSuperInterfaces() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeClassTypeSignature>> method(clazz(), "getSuperInterfaces", "()[Lsun/reflect/generics/tree/ClassTypeSignature;");
    return method.call(*this);
}

// public static sun.reflect.generics.tree.ClassSignature sun.reflect.generics.tree.ClassSignature.make(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.ClassTypeSignature,sun.reflect.generics.tree.ClassTypeSignature[])
jnipp::LocalRef<SunReflectGenericsTreeClassSignature> SunReflectGenericsTreeClassSignature::make(const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>>& a0, const jnipp::Ref<SunReflectGenericsTreeClassTypeSignature>& a1, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeClassTypeSignature>>& a2) {
    static jnipp::StaticMethod<SunReflectGenericsTreeClassSignature,jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>,SunReflectGenericsTreeClassTypeSignature,jnipp::Array<SunReflectGenericsTreeClassTypeSignature>> method(clazz(), "make", "([Lsun/reflect/generics/tree/FormalTypeParameter;Lsun/reflect/generics/tree/ClassTypeSignature;[Lsun/reflect/generics/tree/ClassTypeSignature;)Lsun/reflect/generics/tree/ClassSignature;");
    return method.call(a0, a1, a2);
}

// public void sun.reflect.generics.tree.ClassSignature.accept(sun.reflect.generics.visitor.Visitor)
void SunReflectGenericsTreeClassSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/Visitor;)V");
    method.call(*this, a0);
}

// public sun.reflect.generics.tree.FormalTypeParameter[] sun.reflect.generics.tree.ClassSignature.getFormalTypeParameters()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>> SunReflectGenericsTreeClassSignature::getFormalTypeParameters() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>> method(clazz(), "getFormalTypeParameters", "()[Lsun/reflect/generics/tree/FormalTypeParameter;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilWeakHashMap_Entry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/WeakHashMap$Entry"));
    return cls;
}

// java.util.WeakHashMap$Entry(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap$Entry)
jnipp::LocalRef<JavaUtilWeakHashMap_Entry> JavaUtilWeakHashMap_Entry::construct(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangRefReferenceQueue>& a2, jint a3, const jnipp::Ref<JavaUtilWeakHashMap_Entry>& a4) {
    static jnipp::Constructor<JavaUtilWeakHashMap_Entry,JavaLangObject,JavaLangObject,JavaLangRefReferenceQueue,jint,JavaUtilWeakHashMap_Entry> constructor(clazz(), "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;ILjava/util/WeakHashMap$Entry;)V");
    return constructor.construct(a0, a1, a2, a3, a4);
}

// public boolean java.util.WeakHashMap$Entry.equals(java.lang.Object)
jboolean JavaUtilWeakHashMap_Entry::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.WeakHashMap$Entry.hashCode()
jint JavaUtilWeakHashMap_Entry::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object java.util.WeakHashMap$Entry.getValue()
jnipp::LocalRef<JavaLangObject> JavaUtilWeakHashMap_Entry::getValue() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getValue", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.Object java.util.WeakHashMap$Entry.getKey()
jnipp::LocalRef<JavaLangObject> JavaUtilWeakHashMap_Entry::getKey() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getKey", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.Object java.util.WeakHashMap$Entry.setValue(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilWeakHashMap_Entry::setValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClassValue::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ClassValue"));
    return cls;
}

// protected java.lang.ClassValue()
jnipp::LocalRef<JavaLangClassValue> JavaLangClassValue::construct() {
    static jnipp::Constructor<JavaLangClassValue> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.lang.ClassValue.remove(java.lang.Class)
void JavaLangClassValue::remove(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<void,JavaLangClass> method(clazz(), "remove", "(Ljava/lang/Class;)V");
    method.call(*this, a0);
}

// public java.lang.Object java.lang.ClassValue.get(java.lang.Class)
jnipp::LocalRef<JavaLangObject> JavaLangClassValue::get(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangClass> method(clazz(), "get", "(Ljava/lang/Class;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// void java.lang.ClassValue.put(java.lang.Class,java.lang.Object)
void JavaLangClassValue::put(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,JavaLangClass,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Class;Ljava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// private static java.lang.ClassValue$ClassValueMap java.lang.ClassValue.getMap(java.lang.Class)
jnipp::LocalRef<JavaLangClassValue_ClassValueMap> JavaLangClassValue::getMap(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangClassValue_ClassValueMap,JavaLangClass> method(clazz(), "getMap", "(Ljava/lang/Class;)Ljava/lang/ClassValue$ClassValueMap;");
    return method.call(a0);
}

// boolean java.lang.ClassValue.match(java.lang.ClassValue$Entry)
jboolean JavaLangClassValue::match(const jnipp::Ref<JavaLangClassValue_Entry>& a0) const {
    static jnipp::Method<jboolean,JavaLangClassValue_Entry> method(clazz(), "match", "(Ljava/lang/ClassValue$Entry;)Z");
    return method.call(*this, a0);
}

// private static java.lang.ClassValue$Entry[] java.lang.ClassValue.getCacheCarefully(java.lang.Class)
jnipp::LocalRef<jnipp::Array<JavaLangClassValue_Entry>> JavaLangClassValue::getCacheCarefully(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangClassValue_Entry>,JavaLangClass> method(clazz(), "getCacheCarefully", "(Ljava/lang/Class;)[Ljava/lang/ClassValue$Entry;");
    return method.call(a0);
}

// private java.lang.Object java.lang.ClassValue.getFromBackup(java.lang.ClassValue$Entry[],java.lang.Class)
jnipp::LocalRef<JavaLangObject> JavaLangClassValue::getFromBackup(const jnipp::Ref<jnipp::Array<JavaLangClassValue_Entry>>& a0, const jnipp::Ref<JavaLangClass>& a1) const {
    static jnipp::Method<JavaLangObject,jnipp::Array<JavaLangClassValue_Entry>,JavaLangClass> method(clazz(), "getFromBackup", "([Ljava/lang/ClassValue$Entry;Ljava/lang/Class;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// private java.lang.Object java.lang.ClassValue.getFromHashMap(java.lang.Class)
jnipp::LocalRef<JavaLangObject> JavaLangClassValue::getFromHashMap(const jnipp::Ref<JavaLangClass>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangClass> method(clazz(), "getFromHashMap", "(Ljava/lang/Class;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private static java.lang.ClassValue$ClassValueMap java.lang.ClassValue.initializeMap(java.lang.Class)
jnipp::LocalRef<JavaLangClassValue_ClassValueMap> JavaLangClassValue::initializeMap(const jnipp::Ref<JavaLangClass>& a0) {
    static jnipp::StaticMethod<JavaLangClassValue_ClassValueMap,JavaLangClass> method(clazz(), "initializeMap", "(Ljava/lang/Class;)Ljava/lang/ClassValue$ClassValueMap;");
    return method.call(a0);
}

// java.lang.ClassValue$Version java.lang.ClassValue.version()
jnipp::LocalRef<JavaLangClassValue_Version> JavaLangClassValue::version() const {
    static jnipp::Method<JavaLangClassValue_Version> method(clazz(), "version", "()Ljava/lang/ClassValue$Version;");
    return method.call(*this);
}

// void java.lang.ClassValue.bumpVersion()
void JavaLangClassValue::bumpVersion() const {
    static jnipp::Method<void> method(clazz(), "bumpVersion", "()V");
    method.call(*this);
}

// static java.lang.ClassValue$Entry java.lang.ClassValue.makeEntry(java.lang.ClassValue$Version,java.lang.Object)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue::makeEntry(const jnipp::Ref<JavaLangClassValue_Version>& a0, const jnipp::Ref<JavaLangObject>& a1) {
    static jnipp::StaticMethod<JavaLangClassValue_Entry,JavaLangClassValue_Version,JavaLangObject> method(clazz(), "makeEntry", "(Ljava/lang/ClassValue$Version;Ljava/lang/Object;)Ljava/lang/ClassValue$Entry;");
    return method.call(a0, a1);
}

// java.lang.ClassValue$Entry java.lang.ClassValue.castEntry(java.lang.ClassValue$Entry)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue::castEntry(const jnipp::Ref<JavaLangClassValue_Entry>& a0) const {
    static jnipp::Method<JavaLangClassValue_Entry,JavaLangClassValue_Entry> method(clazz(), "castEntry", "(Ljava/lang/ClassValue$Entry;)Ljava/lang/ClassValue$Entry;");
    return method.call(*this, a0);
}
#undef EMPTY_CACHE
const jnipp::StaticField<jnipp::Array<JavaLangClassValue_Entry>> JavaLangClassValue::EMPTY_CACHE ("java/lang/ClassValue", "EMPTY_CACHE", "[Ljava/lang/ClassValue$Entry;");
#undef nextHashCode
const jnipp::StaticField<JavaUtilConcurrentAtomicAtomicInteger> JavaLangClassValue::nextHashCode ("java/lang/ClassValue", "nextHashCode", "Ljava/util/concurrent/atomic/AtomicInteger;");
#undef HASH_INCREMENT
const jnipp::StaticField<jint> JavaLangClassValue::HASH_INCREMENT ("java/lang/ClassValue", "HASH_INCREMENT", "I");
#undef HASH_MASK
const jnipp::StaticField<jint> JavaLangClassValue::HASH_MASK ("java/lang/ClassValue", "HASH_MASK", "I");
#undef CRITICAL_SECTION
const jnipp::StaticField<JavaLangObject> JavaLangClassValue::CRITICAL_SECTION ("java/lang/ClassValue", "CRITICAL_SECTION", "Ljava/lang/Object;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClassValue_Entry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ClassValue$Entry"));
    return cls;
}

// java.lang.ClassValue$Entry(java.lang.ClassValue$Version,java.lang.Object)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_Entry::construct(const jnipp::Ref<JavaLangClassValue_Version>& a0, const jnipp::Ref<JavaLangObject>& a1) {
    static jnipp::Constructor<JavaLangClassValue_Entry,JavaLangClassValue_Version,JavaLangObject> constructor(clazz(), "(Ljava/lang/ClassValue$Version;Ljava/lang/Object;)V");
    return constructor.construct(a0, a1);
}

// java.lang.ClassValue$Entry(java.lang.ClassValue$Version)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_Entry::construct(const jnipp::Ref<JavaLangClassValue_Version>& a0) {
    static jnipp::Constructor<JavaLangClassValue_Entry,JavaLangClassValue_Version> constructor(clazz(), "(Ljava/lang/ClassValue$Version;)V");
    return constructor.construct(a0);
}

// java.lang.Object java.lang.ClassValue$Entry.value()
jnipp::LocalRef<JavaLangObject> JavaLangClassValue_Entry::value() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "value", "()Ljava/lang/Object;");
    return method.call(*this);
}

// private void java.lang.ClassValue$Entry.assertNotPromise()
void JavaLangClassValue_Entry::assertNotPromise() const {
    static jnipp::Method<void> method(clazz(), "assertNotPromise", "()V");
    method.call(*this);
}

// java.lang.ClassValue$Version java.lang.ClassValue$Entry.version()
jnipp::LocalRef<JavaLangClassValue_Version> JavaLangClassValue_Entry::version() const {
    static jnipp::Method<JavaLangClassValue_Version> method(clazz(), "version", "()Ljava/lang/ClassValue$Version;");
    return method.call(*this);
}

// boolean java.lang.ClassValue$Entry.isPromise()
jboolean JavaLangClassValue_Entry::isPromise() const {
    static jnipp::Method<jboolean> method(clazz(), "isPromise", "()Z");
    return method.call(*this);
}

// java.lang.ClassValue$Entry java.lang.ClassValue$Entry.refreshVersion(java.lang.ClassValue$Version)
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_Entry::refreshVersion(const jnipp::Ref<JavaLangClassValue_Version>& a0) const {
    static jnipp::Method<JavaLangClassValue_Entry,JavaLangClassValue_Version> method(clazz(), "refreshVersion", "(Ljava/lang/ClassValue$Version;)Ljava/lang/ClassValue$Entry;");
    return method.call(*this, a0);
}

// boolean java.lang.ClassValue$Entry.isLive()
jboolean JavaLangClassValue_Entry::isLive() const {
    static jnipp::Method<jboolean> method(clazz(), "isLive", "()Z");
    return method.call(*this);
}

// java.lang.ClassValue java.lang.ClassValue$Entry.classValueOrNull()
jnipp::LocalRef<JavaLangClassValue> JavaLangClassValue_Entry::classValueOrNull() const {
    static jnipp::Method<JavaLangClassValue> method(clazz(), "classValueOrNull", "()Ljava/lang/ClassValue;");
    return method.call(*this);
}
#undef DEAD_ENTRY
const jnipp::StaticField<JavaLangClassValue_Entry> JavaLangClassValue_Entry::DEAD_ENTRY ("java/lang/ClassValue$Entry", "DEAD_ENTRY", "Ljava/lang/ClassValue$Entry;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaLangClassValue_Entry::$assertionsDisabled ("java/lang/ClassValue$Entry", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangPackage_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Package$1"));
    return cls;
}

// java.lang.Package$1(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangPackage_1> JavaLangPackage_1::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaLangPackage_1,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Package java.lang.Package$1.run()
jnipp::LocalRef<JavaLangPackage> JavaLangPackage_1::run() const {
    static jnipp::Method<JavaLangPackage> method(clazz(), "run", "()Ljava/lang/Package;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilJarManifest::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/jar/Manifest"));
    return cls;
}

// public java.util.jar.Manifest(java.util.jar.Manifest)
jnipp::LocalRef<JavaUtilJarManifest> JavaUtilJarManifest::construct(const jnipp::Ref<JavaUtilJarManifest>& a0) {
    static jnipp::Constructor<JavaUtilJarManifest,JavaUtilJarManifest> constructor(clazz(), "(Ljava/util/jar/Manifest;)V");
    return constructor.construct(a0);
}

// public java.util.jar.Manifest(java.io.InputStream) throws java.io.IOException
jnipp::LocalRef<JavaUtilJarManifest> JavaUtilJarManifest::construct(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::Constructor<JavaUtilJarManifest,JavaIoInputStream> constructor(clazz(), "(Ljava/io/InputStream;)V");
    return constructor.construct(a0);
}

// public java.util.jar.Manifest()
jnipp::LocalRef<JavaUtilJarManifest> JavaUtilJarManifest::construct() {
    static jnipp::Constructor<JavaUtilJarManifest> constructor(clazz(), "()V");
    return constructor.construct();
}

// public boolean java.util.jar.Manifest.equals(java.lang.Object)
jboolean JavaUtilJarManifest::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.jar.Manifest.hashCode()
jint JavaUtilJarManifest::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object java.util.jar.Manifest.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilJarManifest::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public void java.util.jar.Manifest.clear()
void JavaUtilJarManifest::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public void java.util.jar.Manifest.write(java.io.OutputStream) throws java.io.IOException
void JavaUtilJarManifest::write(const jnipp::Ref<JavaIoOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoOutputStream> method(clazz(), "write", "(Ljava/io/OutputStream;)V");
    method.call(*this, a0);
}

// private int java.util.jar.Manifest.toLower(int)
jint JavaUtilJarManifest::toLower(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "toLower", "(I)I");
    return method.call(*this, a0);
}

// public void java.util.jar.Manifest.read(java.io.InputStream) throws java.io.IOException
void JavaUtilJarManifest::read(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<void,JavaIoInputStream> method(clazz(), "read", "(Ljava/io/InputStream;)V");
    method.call(*this, a0);
}

// public java.util.jar.Attributes java.util.jar.Manifest.getAttributes(java.lang.String)
jnipp::LocalRef<JavaUtilJarAttributes> JavaUtilJarManifest::getAttributes(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilJarAttributes,JavaLangString> method(clazz(), "getAttributes", "(Ljava/lang/String;)Ljava/util/jar/Attributes;");
    return method.call(*this, a0);
}

// public java.util.jar.Attributes java.util.jar.Manifest.getMainAttributes()
jnipp::LocalRef<JavaUtilJarAttributes> JavaUtilJarManifest::getMainAttributes() const {
    static jnipp::Method<JavaUtilJarAttributes> method(clazz(), "getMainAttributes", "()Ljava/util/jar/Attributes;");
    return method.call(*this);
}

// public java.util.Map java.util.jar.Manifest.getEntries()
jnipp::LocalRef<JavaUtilMap> JavaUtilJarManifest::getEntries() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "getEntries", "()Ljava/util/Map;");
    return method.call(*this);
}

// static void java.util.jar.Manifest.make72Safe(java.lang.StringBuffer)
void JavaUtilJarManifest::make72Safe(const jnipp::Ref<JavaLangStringBuffer>& a0) {
    static jnipp::StaticMethod<void,JavaLangStringBuffer> method(clazz(), "make72Safe", "(Ljava/lang/StringBuffer;)V");
    method.call(a0);
}

// private java.lang.String java.util.jar.Manifest.parseName(byte[],int)
jnipp::LocalRef<JavaLangString> JavaUtilJarManifest::parseName(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1) const {
    static jnipp::Method<JavaLangString,jnipp::Array<jbyte>,jint> method(clazz(), "parseName", "([BI)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoFileDescriptor::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/FileDescriptor"));
    return cls;
}

// public java.io.FileDescriptor()
jnipp::LocalRef<JavaIoFileDescriptor> JavaIoFileDescriptor::construct() {
    static jnipp::Constructor<JavaIoFileDescriptor> constructor(clazz(), "()V");
    return constructor.construct();
}

// private java.io.FileDescriptor(int)
jnipp::LocalRef<JavaIoFileDescriptor> JavaIoFileDescriptor::construct(jint a0) {
    static jnipp::Constructor<JavaIoFileDescriptor,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// private static native void java.io.FileDescriptor.initIDs()
void JavaIoFileDescriptor::initIDs() {
    static jnipp::StaticMethod<void> method(clazz(), "initIDs", "()V");
    method.call();
}

// int java.io.FileDescriptor.incrementAndGetUseCount()
jint JavaIoFileDescriptor::incrementAndGetUseCount() const {
    static jnipp::Method<jint> method(clazz(), "incrementAndGetUseCount", "()I");
    return method.call(*this);
}

// int java.io.FileDescriptor.decrementAndGetUseCount()
jint JavaIoFileDescriptor::decrementAndGetUseCount() const {
    static jnipp::Method<jint> method(clazz(), "decrementAndGetUseCount", "()I");
    return method.call(*this);
}

// public boolean java.io.FileDescriptor.valid()
jboolean JavaIoFileDescriptor::valid() const {
    static jnipp::Method<jboolean> method(clazz(), "valid", "()Z");
    return method.call(*this);
}

// public native void java.io.FileDescriptor.sync() throws java.io.SyncFailedException
void JavaIoFileDescriptor::sync() const {
    static jnipp::Method<void> method(clazz(), "sync", "()V");
    method.call(*this);
}
#undef in
const jnipp::StaticField<JavaIoFileDescriptor> JavaIoFileDescriptor::in ("java/io/FileDescriptor", "in", "Ljava/io/FileDescriptor;");
#undef out
const jnipp::StaticField<JavaIoFileDescriptor> JavaIoFileDescriptor::out ("java/io/FileDescriptor", "out", "Ljava/io/FileDescriptor;");
#undef err
const jnipp::StaticField<JavaIoFileDescriptor> JavaIoFileDescriptor::err ("java/io/FileDescriptor", "err", "Ljava/io/FileDescriptor;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectConstructorAccessor::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/ConstructorAccessor"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsRepositoryConstructorRepository::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/repository/ConstructorRepository"));
    return cls;
}

// protected sun.reflect.generics.repository.ConstructorRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryConstructorRepository> SunReflectGenericsRepositoryConstructorRepository::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::Constructor<SunReflectGenericsRepositoryConstructorRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> constructor(clazz(), "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)V");
    return constructor.construct(a0, a1);
}

// public static sun.reflect.generics.repository.ConstructorRepository sun.reflect.generics.repository.ConstructorRepository.make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryConstructorRepository> SunReflectGenericsRepositoryConstructorRepository::make(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::StaticMethod<SunReflectGenericsRepositoryConstructorRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> method(clazz(), "make", "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/repository/ConstructorRepository;");
    return method.call(a0, a1);
}

// public java.lang.reflect.Type[] sun.reflect.generics.repository.ConstructorRepository.getParameterTypes()
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> SunReflectGenericsRepositoryConstructorRepository::getParameterTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>> method(clazz(), "getParameterTypes", "()[Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// public java.lang.reflect.Type[] sun.reflect.generics.repository.ConstructorRepository.getExceptionTypes()
jnipp::LocalRef<jnipp::Array<JavaLangReflectType>> SunReflectGenericsRepositoryConstructorRepository::getExceptionTypes() const {
    static jnipp::Method<jnipp::Array<JavaLangReflectType>> method(clazz(), "getExceptionTypes", "()[Ljava/lang/reflect/Type;");
    return method.call(*this);
}

// protected sun.reflect.generics.tree.MethodTypeSignature sun.reflect.generics.repository.ConstructorRepository.parse(java.lang.String)
jnipp::LocalRef<SunReflectGenericsTreeMethodTypeSignature> SunReflectGenericsRepositoryConstructorRepository::parse(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<SunReflectGenericsTreeMethodTypeSignature,JavaLangString> method(clazz(), "parse", "(Ljava/lang/String;)Lsun/reflect/generics/tree/MethodTypeSignature;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClass_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Class$1"));
    return cls;
}

// java.lang.Class$1(java.lang.Class,java.lang.reflect.Constructor)
jnipp::LocalRef<JavaLangClass_1> JavaLangClass_1::construct(const jnipp::Ref<JavaLangClass>& a0, const jnipp::Ref<JavaLangReflectConstructor>& a1) {
    static jnipp::Constructor<JavaLangClass_1,JavaLangClass,JavaLangReflectConstructor> constructor(clazz(), "(Ljava/lang/Class;Ljava/lang/reflect/Constructor;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Void java.lang.Class$1.run()
jnipp::LocalRef<JavaLangVoid> JavaLangClass_1::run() const {
    static jnipp::Method<JavaLangVoid> method(clazz(), "run", "()Ljava/lang/Void;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectLangReflectAccess::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/LangReflectAccess"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectMethodAccessor::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/MethodAccessor"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityPrincipal::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/Principal"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityPermissionCollection::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/PermissionCollection"));
    return cls;
}

// public java.security.PermissionCollection()
jnipp::LocalRef<JavaSecurityPermissionCollection> JavaSecurityPermissionCollection::construct() {
    static jnipp::Constructor<JavaSecurityPermissionCollection> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void java.security.PermissionCollection.setReadOnly()
void JavaSecurityPermissionCollection::setReadOnly() const {
    static jnipp::Method<void> method(clazz(), "setReadOnly", "()V");
    method.call(*this);
}

// public boolean java.security.PermissionCollection.isReadOnly()
jboolean JavaSecurityPermissionCollection::isReadOnly() const {
    static jnipp::Method<jboolean> method(clazz(), "isReadOnly", "()Z");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityPermissionCollection::serialVersionUID ("java/security/PermissionCollection", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityProtectionDomain_Key::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/ProtectionDomain$Key"));
    return cls;
}

// java.security.ProtectionDomain$Key(java.security.ProtectionDomain)
jnipp::LocalRef<JavaSecurityProtectionDomain_Key> JavaSecurityProtectionDomain_Key::construct(const jnipp::Ref<JavaSecurityProtectionDomain>& a0) {
    static jnipp::Constructor<JavaSecurityProtectionDomain_Key,JavaSecurityProtectionDomain> constructor(clazz(), "(Ljava/security/ProtectionDomain;)V");
    return constructor.construct(a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunSecurityUtilDebug::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/security/util/Debug"));
    return cls;
}

// public sun.security.util.Debug()
jnipp::LocalRef<SunSecurityUtilDebug> SunSecurityUtilDebug::construct() {
    static jnipp::Constructor<SunSecurityUtilDebug> constructor(clazz(), "()V");
    return constructor.construct();
}

// public void sun.security.util.Debug.println()
void SunSecurityUtilDebug::println() const {
    static jnipp::Method<void> method(clazz(), "println", "()V");
    method.call(*this);
}

// public void sun.security.util.Debug.println(java.lang.String)
void SunSecurityUtilDebug::println(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "println", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public static void sun.security.util.Debug.println(java.lang.String,java.lang.String)
void SunSecurityUtilDebug::println(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<void,JavaLangString,JavaLangString> method(clazz(), "println", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(a0, a1);
}

// public static java.lang.String sun.security.util.Debug.toHexString(java.math.BigInteger)
jnipp::LocalRef<JavaLangString> SunSecurityUtilDebug::toHexString(const jnipp::Ref<JavaMathBigInteger>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaMathBigInteger> method(clazz(), "toHexString", "(Ljava/math/BigInteger;)Ljava/lang/String;");
    return method.call(a0);
}

// public static sun.security.util.Debug sun.security.util.Debug.getInstance(java.lang.String)
jnipp::LocalRef<SunSecurityUtilDebug> SunSecurityUtilDebug::getInstance(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<SunSecurityUtilDebug,JavaLangString> method(clazz(), "getInstance", "(Ljava/lang/String;)Lsun/security/util/Debug;");
    return method.call(a0);
}

// public static sun.security.util.Debug sun.security.util.Debug.getInstance(java.lang.String,java.lang.String)
jnipp::LocalRef<SunSecurityUtilDebug> SunSecurityUtilDebug::getInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<SunSecurityUtilDebug,JavaLangString,JavaLangString> method(clazz(), "getInstance", "(Ljava/lang/String;Ljava/lang/String;)Lsun/security/util/Debug;");
    return method.call(a0, a1);
}

// public static boolean sun.security.util.Debug.isOn(java.lang.String)
jboolean SunSecurityUtilDebug::isOn(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "isOn", "(Ljava/lang/String;)Z");
    return method.call(a0);
}

// public static void sun.security.util.Debug.Help()
void SunSecurityUtilDebug::Help() {
    static jnipp::StaticMethod<void> method(clazz(), "Help", "()V");
    method.call();
}

// private static java.lang.String sun.security.util.Debug.marshal(java.lang.String)
jnipp::LocalRef<JavaLangString> SunSecurityUtilDebug::marshal(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "marshal", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}
#undef args
jnipp::StaticField<JavaLangString> SunSecurityUtilDebug::args ("sun/security/util/Debug", "args", "Ljava/lang/String;");
#undef hexDigits
const jnipp::StaticField<jnipp::Array<jchar>> SunSecurityUtilDebug::hexDigits ("sun/security/util/Debug", "hexDigits", "[C");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsRepositoryMethodRepository::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/repository/MethodRepository"));
    return cls;
}

// private sun.reflect.generics.repository.MethodRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryMethodRepository> SunReflectGenericsRepositoryMethodRepository::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::Constructor<SunReflectGenericsRepositoryMethodRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> constructor(clazz(), "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)V");
    return constructor.construct(a0, a1);
}

// public static sun.reflect.generics.repository.MethodRepository sun.reflect.generics.repository.MethodRepository.make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)
jnipp::LocalRef<SunReflectGenericsRepositoryMethodRepository> SunReflectGenericsRepositoryMethodRepository::make(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<SunReflectGenericsFactoryGenericsFactory>& a1) {
    static jnipp::StaticMethod<SunReflectGenericsRepositoryMethodRepository,JavaLangString,SunReflectGenericsFactoryGenericsFactory> method(clazz(), "make", "(Ljava/lang/String;Lsun/reflect/generics/factory/GenericsFactory;)Lsun/reflect/generics/repository/MethodRepository;");
    return method.call(a0, a1);
}

// public java.lang.reflect.Type sun.reflect.generics.repository.MethodRepository.getReturnType()
jnipp::LocalRef<JavaLangReflectType> SunReflectGenericsRepositoryMethodRepository::getReturnType() const {
    static jnipp::Method<JavaLangReflectType> method(clazz(), "getReturnType", "()Ljava/lang/reflect/Type;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRefReference_Lock::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ref/Reference$Lock"));
    return cls;
}

// private java.lang.ref.Reference$Lock()
jnipp::LocalRef<JavaLangRefReference_Lock> JavaLangRefReference_Lock::construct() {
    static jnipp::Constructor<JavaLangRefReference_Lock> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.lang.ref.Reference$Lock(java.lang.ref.Reference$1)
jnipp::LocalRef<JavaLangRefReference_Lock> JavaLangRefReference_Lock::construct(const jnipp::Ref<JavaLangRefReference_1>& a0) {
    static jnipp::Constructor<JavaLangRefReference_Lock,JavaLangRefReference_1> constructor(clazz(), "(Ljava/lang/ref/Reference$1;)V");
    return constructor.construct(a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeTypeSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/TypeSignature"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityDomainCombiner::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/DomainCombiner"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoDataOutput::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/DataOutput"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilFormatter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Formatter"));
    return cls;
}

// public java.util.Formatter(java.io.File,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaIoFile>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaUtilFormatter,JavaIoFile,JavaLangString> constructor(clazz(), "(Ljava/io/File;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.util.Formatter(java.io.File) throws java.io.FileNotFoundException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaIoFile>& a0) {
    static jnipp::Constructor<JavaUtilFormatter,JavaIoFile> constructor(clazz(), "(Ljava/io/File;)V");
    return constructor.construct(a0);
}

// public java.util.Formatter(java.lang.String,java.lang.String,java.util.Locale) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaUtilLocale>& a2) {
    static jnipp::Constructor<JavaUtilFormatter,JavaLangString,JavaLangString,JavaUtilLocale> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Locale;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.Formatter(java.lang.String,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaUtilFormatter,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.util.Formatter(java.lang.String) throws java.io.FileNotFoundException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaUtilFormatter,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.util.Formatter(java.io.OutputStream,java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaUtilFormatter,JavaIoOutputStream,JavaLangString> constructor(clazz(), "(Ljava/io/OutputStream;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.util.Formatter(java.io.OutputStream)
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaIoOutputStream>& a0) {
    static jnipp::Constructor<JavaUtilFormatter,JavaIoOutputStream> constructor(clazz(), "(Ljava/io/OutputStream;)V");
    return constructor.construct(a0);
}

// public java.util.Formatter(java.io.PrintStream)
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaIoPrintStream>& a0) {
    static jnipp::Constructor<JavaUtilFormatter,JavaIoPrintStream> constructor(clazz(), "(Ljava/io/PrintStream;)V");
    return constructor.construct(a0);
}

// public java.util.Formatter(java.io.File,java.lang.String,java.util.Locale) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaIoFile>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaUtilLocale>& a2) {
    static jnipp::Constructor<JavaUtilFormatter,JavaIoFile,JavaLangString,JavaUtilLocale> constructor(clazz(), "(Ljava/io/File;Ljava/lang/String;Ljava/util/Locale;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.Formatter()
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct() {
    static jnipp::Constructor<JavaUtilFormatter> constructor(clazz(), "()V");
    return constructor.construct();
}

// private java.util.Formatter(java.nio.charset.Charset,java.util.Locale,java.io.File) throws java.io.FileNotFoundException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaNioCharsetCharset>& a0, const jnipp::Ref<JavaUtilLocale>& a1, const jnipp::Ref<JavaIoFile>& a2) {
    static jnipp::Constructor<JavaUtilFormatter,JavaNioCharsetCharset,JavaUtilLocale,JavaIoFile> constructor(clazz(), "(Ljava/nio/charset/Charset;Ljava/util/Locale;Ljava/io/File;)V");
    return constructor.construct(a0, a1, a2);
}

// private java.util.Formatter(java.util.Locale,java.lang.Appendable)
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaUtilLocale>& a0, const jnipp::Ref<JavaLangAppendable>& a1) {
    static jnipp::Constructor<JavaUtilFormatter,JavaUtilLocale,JavaLangAppendable> constructor(clazz(), "(Ljava/util/Locale;Ljava/lang/Appendable;)V");
    return constructor.construct(a0, a1);
}

// public java.util.Formatter(java.io.OutputStream,java.lang.String,java.util.Locale) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaUtilLocale>& a2) {
    static jnipp::Constructor<JavaUtilFormatter,JavaIoOutputStream,JavaLangString,JavaUtilLocale> constructor(clazz(), "(Ljava/io/OutputStream;Ljava/lang/String;Ljava/util/Locale;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.Formatter(java.lang.Appendable,java.util.Locale)
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaLangAppendable>& a0, const jnipp::Ref<JavaUtilLocale>& a1) {
    static jnipp::Constructor<JavaUtilFormatter,JavaLangAppendable,JavaUtilLocale> constructor(clazz(), "(Ljava/lang/Appendable;Ljava/util/Locale;)V");
    return constructor.construct(a0, a1);
}

// public java.util.Formatter(java.util.Locale)
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaUtilLocale>& a0) {
    static jnipp::Constructor<JavaUtilFormatter,JavaUtilLocale> constructor(clazz(), "(Ljava/util/Locale;)V");
    return constructor.construct(a0);
}

// public java.util.Formatter(java.lang.Appendable)
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::construct(const jnipp::Ref<JavaLangAppendable>& a0) {
    static jnipp::Constructor<JavaUtilFormatter,JavaLangAppendable> constructor(clazz(), "(Ljava/lang/Appendable;)V");
    return constructor.construct(a0);
}

// public java.util.Formatter java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::format(const jnipp::Ref<JavaUtilLocale>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a2) const {
    static jnipp::Method<JavaUtilFormatter,JavaUtilLocale,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;");
    return method.call(*this, a0, a1, a2);
}

// public java.util.Formatter java.util.Formatter.format(java.lang.String,java.lang.Object[])
jnipp::LocalRef<JavaUtilFormatter> JavaUtilFormatter::format(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaLangObject>>& a1) const {
    static jnipp::Method<JavaUtilFormatter,JavaLangString,jnipp::Array<JavaLangObject>> method(clazz(), "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;");
    return method.call(*this, a0, a1);
}

// public java.lang.Appendable java.util.Formatter.out()
jnipp::LocalRef<JavaLangAppendable> JavaUtilFormatter::out() const {
    static jnipp::Method<JavaLangAppendable> method(clazz(), "out", "()Ljava/lang/Appendable;");
    return method.call(*this);
}

// public void java.util.Formatter.flush()
void JavaUtilFormatter::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.util.Formatter.close()
void JavaUtilFormatter::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// private static java.nio.charset.Charset java.util.Formatter.toCharset(java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaNioCharsetCharset> JavaUtilFormatter::toCharset(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNioCharsetCharset,JavaLangString> method(clazz(), "toCharset", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    return method.call(a0);
}

// private void java.util.Formatter.ensureOpen()
void JavaUtilFormatter::ensureOpen() const {
    static jnipp::Method<void> method(clazz(), "ensureOpen", "()V");
    method.call(*this);
}

// public java.util.Locale java.util.Formatter.locale()
jnipp::LocalRef<JavaUtilLocale> JavaUtilFormatter::locale() const {
    static jnipp::Method<JavaUtilLocale> method(clazz(), "locale", "()Ljava/util/Locale;");
    return method.call(*this);
}

// private java.util.Formatter$FormatString[] java.util.Formatter.parse(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaUtilFormatter_FormatString>> JavaUtilFormatter::parse(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<JavaUtilFormatter_FormatString>,JavaLangString> method(clazz(), "parse", "(Ljava/lang/String;)[Ljava/util/Formatter$FormatString;");
    return method.call(*this, a0);
}

// private static final java.lang.Appendable java.util.Formatter.nonNullAppendable(java.lang.Appendable)
jnipp::LocalRef<JavaLangAppendable> JavaUtilFormatter::nonNullAppendable(const jnipp::Ref<JavaLangAppendable>& a0) {
    static jnipp::StaticMethod<JavaLangAppendable,JavaLangAppendable> method(clazz(), "nonNullAppendable", "(Ljava/lang/Appendable;)Ljava/lang/Appendable;");
    return method.call(a0);
}

// private static char java.util.Formatter.getZero(java.util.Locale)
jchar JavaUtilFormatter::getZero(const jnipp::Ref<JavaUtilLocale>& a0) {
    static jnipp::StaticMethod<jchar,JavaUtilLocale> method(clazz(), "getZero", "(Ljava/util/Locale;)C");
    return method.call(a0);
}

// public java.io.IOException java.util.Formatter.ioException()
jnipp::LocalRef<JavaIoIOException> JavaUtilFormatter::ioException() const {
    static jnipp::Method<JavaIoIOException> method(clazz(), "ioException", "()Ljava/io/IOException;");
    return method.call(*this);
}

// private static void java.util.Formatter.checkText(java.lang.String,int,int)
void JavaUtilFormatter::checkText(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<void,JavaLangString,jint,jint> method(clazz(), "checkText", "(Ljava/lang/String;II)V");
    method.call(a0, a1, a2);
}
#undef scaleUp
jnipp::StaticField<jdouble> JavaUtilFormatter::scaleUp ("java/util/Formatter", "scaleUp", "D");
#undef MAX_FD_CHARS
const jnipp::StaticField<jint> JavaUtilFormatter::MAX_FD_CHARS ("java/util/Formatter", "MAX_FD_CHARS", "I");
#undef formatSpecifier
const jnipp::StaticField<JavaLangString> JavaUtilFormatter::formatSpecifier ("java/util/Formatter", "formatSpecifier", "Ljava/lang/String;");
#undef fsPattern
jnipp::StaticField<JavaUtilRegexPattern> JavaUtilFormatter::fsPattern ("java/util/Formatter", "fsPattern", "Ljava/util/regex/Pattern;");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangThrowable_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Throwable$1"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoBufferedWriter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/BufferedWriter"));
    return cls;
}

// public java.io.BufferedWriter(java.io.Writer)
jnipp::LocalRef<JavaIoBufferedWriter> JavaIoBufferedWriter::construct(const jnipp::Ref<JavaIoWriter>& a0) {
    static jnipp::Constructor<JavaIoBufferedWriter,JavaIoWriter> constructor(clazz(), "(Ljava/io/Writer;)V");
    return constructor.construct(a0);
}

// public java.io.BufferedWriter(java.io.Writer,int)
jnipp::LocalRef<JavaIoBufferedWriter> JavaIoBufferedWriter::construct(const jnipp::Ref<JavaIoWriter>& a0, jint a1) {
    static jnipp::Constructor<JavaIoBufferedWriter,JavaIoWriter,jint> constructor(clazz(), "(Ljava/io/Writer;I)V");
    return constructor.construct(a0, a1);
}

// private int java.io.BufferedWriter.min(int,int)
jint JavaIoBufferedWriter::min(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "min", "(II)I");
    return method.call(*this, a0, a1);
}

// public void java.io.BufferedWriter.write(char[],int,int) throws java.io.IOException
void JavaIoBufferedWriter::write(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jchar>,jint,jint> method(clazz(), "write", "([CII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.BufferedWriter.write(int) throws java.io.IOException
void JavaIoBufferedWriter::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void java.io.BufferedWriter.write(java.lang.String,int,int) throws java.io.IOException
void JavaIoBufferedWriter::write(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,JavaLangString,jint,jint> method(clazz(), "write", "(Ljava/lang/String;II)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.BufferedWriter.newLine() throws java.io.IOException
void JavaIoBufferedWriter::newLine() const {
    static jnipp::Method<void> method(clazz(), "newLine", "()V");
    method.call(*this);
}

// public void java.io.BufferedWriter.flush() throws java.io.IOException
void JavaIoBufferedWriter::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.io.BufferedWriter.close() throws java.io.IOException
void JavaIoBufferedWriter::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// private void java.io.BufferedWriter.ensureOpen() throws java.io.IOException
void JavaIoBufferedWriter::ensureOpen() const {
    static jnipp::Method<void> method(clazz(), "ensureOpen", "()V");
    method.call(*this);
}

// void java.io.BufferedWriter.flushBuffer() throws java.io.IOException
void JavaIoBufferedWriter::flushBuffer() const {
    static jnipp::Method<void> method(clazz(), "flushBuffer", "()V");
    method.call(*this);
}
#undef defaultCharBufferSize
jnipp::StaticField<jint> JavaIoBufferedWriter::defaultCharBufferSize ("java/io/BufferedWriter", "defaultCharBufferSize", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoOutputStreamWriter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/OutputStreamWriter"));
    return cls;
}

// public java.io.OutputStreamWriter(java.io.OutputStream,java.nio.charset.CharsetEncoder)
jnipp::LocalRef<JavaIoOutputStreamWriter> JavaIoOutputStreamWriter::construct(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaNioCharsetCharsetEncoder>& a1) {
    static jnipp::Constructor<JavaIoOutputStreamWriter,JavaIoOutputStream,JavaNioCharsetCharsetEncoder> constructor(clazz(), "(Ljava/io/OutputStream;Ljava/nio/charset/CharsetEncoder;)V");
    return constructor.construct(a0, a1);
}

// public java.io.OutputStreamWriter(java.io.OutputStream,java.nio.charset.Charset)
jnipp::LocalRef<JavaIoOutputStreamWriter> JavaIoOutputStreamWriter::construct(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaNioCharsetCharset>& a1) {
    static jnipp::Constructor<JavaIoOutputStreamWriter,JavaIoOutputStream,JavaNioCharsetCharset> constructor(clazz(), "(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V");
    return constructor.construct(a0, a1);
}

// public java.io.OutputStreamWriter(java.io.OutputStream)
jnipp::LocalRef<JavaIoOutputStreamWriter> JavaIoOutputStreamWriter::construct(const jnipp::Ref<JavaIoOutputStream>& a0) {
    static jnipp::Constructor<JavaIoOutputStreamWriter,JavaIoOutputStream> constructor(clazz(), "(Ljava/io/OutputStream;)V");
    return constructor.construct(a0);
}

// public java.io.OutputStreamWriter(java.io.OutputStream,java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<JavaIoOutputStreamWriter> JavaIoOutputStreamWriter::construct(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoOutputStreamWriter,JavaIoOutputStream,JavaLangString> constructor(clazz(), "(Ljava/io/OutputStream;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public void java.io.OutputStreamWriter.write(java.lang.String,int,int) throws java.io.IOException
void JavaIoOutputStreamWriter::write(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,JavaLangString,jint,jint> method(clazz(), "write", "(Ljava/lang/String;II)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.OutputStreamWriter.write(int) throws java.io.IOException
void JavaIoOutputStreamWriter::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void java.io.OutputStreamWriter.write(char[],int,int) throws java.io.IOException
void JavaIoOutputStreamWriter::write(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jchar>,jint,jint> method(clazz(), "write", "([CII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.io.OutputStreamWriter.flush() throws java.io.IOException
void JavaIoOutputStreamWriter::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void java.io.OutputStreamWriter.close() throws java.io.IOException
void JavaIoOutputStreamWriter::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// void java.io.OutputStreamWriter.flushBuffer() throws java.io.IOException
void JavaIoOutputStreamWriter::flushBuffer() const {
    static jnipp::Method<void> method(clazz(), "flushBuffer", "()V");
    method.call(*this);
}

// public java.lang.String java.io.OutputStreamWriter.getEncoding()
jnipp::LocalRef<JavaLangString> JavaIoOutputStreamWriter::getEncoding() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getEncoding", "()Ljava/lang/String;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoObjectStreamException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ObjectStreamException"));
    return cls;
}

// protected java.io.ObjectStreamException(java.lang.String)
jnipp::LocalRef<JavaIoObjectStreamException> JavaIoObjectStreamException::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaIoObjectStreamException,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// protected java.io.ObjectStreamException()
jnipp::LocalRef<JavaIoObjectStreamException> JavaIoObjectStreamException::construct() {
    static jnipp::Constructor<JavaIoObjectStreamException> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaIoObjectStreamException::serialVersionUID ("java/io/ObjectStreamException", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoInvalidClassException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/InvalidClassException"));
    return cls;
}

// public java.io.InvalidClassException(java.lang.String)
jnipp::LocalRef<JavaIoInvalidClassException> JavaIoInvalidClassException::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaIoInvalidClassException,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.io.InvalidClassException(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaIoInvalidClassException> JavaIoInvalidClassException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaIoInvalidClassException,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String java.io.InvalidClassException.getMessage()
jnipp::LocalRef<JavaLangString> JavaIoInvalidClassException::getMessage() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getMessage", "()Ljava/lang/String;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaIoInvalidClassException::serialVersionUID ("java/io/InvalidClassException", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoDataInput::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/DataInput"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunMiscResource::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/misc/Resource"));
    return cls;
}

// public sun.misc.Resource()
jnipp::LocalRef<SunMiscResource> SunMiscResource::construct() {
    static jnipp::Constructor<SunMiscResource> constructor(clazz(), "()V");
    return constructor.construct();
}

// public byte[] sun.misc.Resource.getBytes() throws java.io.IOException
jnipp::LocalRef<jnipp::Array<jbyte>> SunMiscResource::getBytes() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getBytes", "()[B");
    return method.call(*this);
}

// public java.security.cert.Certificate[] sun.misc.Resource.getCertificates()
jnipp::LocalRef<jnipp::Array<JavaSecurityCertCertificate>> SunMiscResource::getCertificates() const {
    static jnipp::Method<jnipp::Array<JavaSecurityCertCertificate>> method(clazz(), "getCertificates", "()[Ljava/security/cert/Certificate;");
    return method.call(*this);
}

// public java.nio.ByteBuffer sun.misc.Resource.getByteBuffer() throws java.io.IOException
jnipp::LocalRef<JavaNioByteBuffer> SunMiscResource::getByteBuffer() const {
    static jnipp::Method<JavaNioByteBuffer> method(clazz(), "getByteBuffer", "()Ljava/nio/ByteBuffer;");
    return method.call(*this);
}

// public java.util.jar.Manifest sun.misc.Resource.getManifest() throws java.io.IOException
jnipp::LocalRef<JavaUtilJarManifest> SunMiscResource::getManifest() const {
    static jnipp::Method<JavaUtilJarManifest> method(clazz(), "getManifest", "()Ljava/util/jar/Manifest;");
    return method.call(*this);
}

// public java.security.CodeSigner[] sun.misc.Resource.getCodeSigners()
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSigner>> SunMiscResource::getCodeSigners() const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSigner>> method(clazz(), "getCodeSigners", "()[Ljava/security/CodeSigner;");
    return method.call(*this);
}

// private synchronized java.io.InputStream sun.misc.Resource.cachedInputStream() throws java.io.IOException
jnipp::LocalRef<JavaIoInputStream> SunMiscResource::cachedInputStream() const {
    static jnipp::Method<JavaIoInputStream> method(clazz(), "cachedInputStream", "()Ljava/io/InputStream;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilArrayList::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/ArrayList"));
    return cls;
}

// public java.util.ArrayList(java.util.Collection)
jnipp::LocalRef<JavaUtilArrayList> JavaUtilArrayList::construct(const jnipp::Ref<JavaUtilCollection>& a0) {
    static jnipp::Constructor<JavaUtilArrayList,JavaUtilCollection> constructor(clazz(), "(Ljava/util/Collection;)V");
    return constructor.construct(a0);
}

// public java.util.ArrayList()
jnipp::LocalRef<JavaUtilArrayList> JavaUtilArrayList::construct() {
    static jnipp::Constructor<JavaUtilArrayList> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.ArrayList(int)
jnipp::LocalRef<JavaUtilArrayList> JavaUtilArrayList::construct(jint a0) {
    static jnipp::Constructor<JavaUtilArrayList,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public void java.util.ArrayList.add(int,java.lang.Object)
void JavaUtilArrayList::add(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<void,jint,JavaLangObject> method(clazz(), "add", "(ILjava/lang/Object;)V");
    method.call(*this, a0, a1);
}

// public boolean java.util.ArrayList.add(java.lang.Object)
jboolean JavaUtilArrayList::add(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "add", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.ArrayList.remove(int)
jnipp::LocalRef<JavaLangObject> JavaUtilArrayList::remove(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "remove", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public boolean java.util.ArrayList.remove(java.lang.Object)
jboolean JavaUtilArrayList::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.ArrayList.get(int)
jnipp::LocalRef<JavaLangObject> JavaUtilArrayList::get(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "get", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.ArrayList.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilArrayList::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public int java.util.ArrayList.indexOf(java.lang.Object)
jint JavaUtilArrayList::indexOf(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "indexOf", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public void java.util.ArrayList.clear()
void JavaUtilArrayList::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public boolean java.util.ArrayList.isEmpty()
jboolean JavaUtilArrayList::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public int java.util.ArrayList.lastIndexOf(java.lang.Object)
jint JavaUtilArrayList::lastIndexOf(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jint,JavaLangObject> method(clazz(), "lastIndexOf", "(Ljava/lang/Object;)I");
    return method.call(*this, a0);
}

// public boolean java.util.ArrayList.contains(java.lang.Object)
jboolean JavaUtilArrayList::contains(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "contains", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.ArrayList.size()
jint JavaUtilArrayList::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public java.util.List java.util.ArrayList.subList(int,int)
jnipp::LocalRef<JavaUtilList> JavaUtilArrayList::subList(jint a0, jint a1) const {
    static jnipp::Method<JavaUtilList,jint,jint> method(clazz(), "subList", "(II)Ljava/util/List;");
    return method.call(*this, a0, a1);
}

// public java.lang.Object[] java.util.ArrayList.toArray()
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaUtilArrayList::toArray() const {
    static jnipp::Method<jnipp::Array<JavaLangObject>> method(clazz(), "toArray", "()[Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.Object[] java.util.ArrayList.toArray(java.lang.Object[])
jnipp::LocalRef<jnipp::Array<JavaLangObject>> JavaUtilArrayList::toArray(const jnipp::Ref<jnipp::Array<JavaLangObject>>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangObject>,jnipp::Array<JavaLangObject>> method(clazz(), "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public boolean java.util.ArrayList.addAll(java.util.Collection)
jboolean JavaUtilArrayList::addAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "addAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.ArrayList.addAll(int,java.util.Collection)
jboolean JavaUtilArrayList::addAll(jint a0, const jnipp::Ref<JavaUtilCollection>& a1) const {
    static jnipp::Method<jboolean,jint,JavaUtilCollection> method(clazz(), "addAll", "(ILjava/util/Collection;)Z");
    return method.call(*this, a0, a1);
}

// public java.util.Iterator java.util.ArrayList.iterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilArrayList::iterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "iterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// private void java.util.ArrayList.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilArrayList::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.util.ArrayList.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaUtilArrayList::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public java.lang.Object java.util.ArrayList.set(int,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilArrayList::set(jint a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,jint,JavaLangObject> method(clazz(), "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public void java.util.ArrayList.ensureCapacity(int)
void JavaUtilArrayList::ensureCapacity(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureCapacity", "(I)V");
    method.call(*this, a0);
}

// public void java.util.ArrayList.trimToSize()
void JavaUtilArrayList::trimToSize() const {
    static jnipp::Method<void> method(clazz(), "trimToSize", "()V");
    method.call(*this);
}

// private void java.util.ArrayList.ensureCapacityInternal(int)
void JavaUtilArrayList::ensureCapacityInternal(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureCapacityInternal", "(I)V");
    method.call(*this, a0);
}

// java.lang.Object java.util.ArrayList.elementData(int)
jnipp::LocalRef<JavaLangObject> JavaUtilArrayList::elementData(jint a0) const {
    static jnipp::Method<JavaLangObject,jint> method(clazz(), "elementData", "(I)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private void java.util.ArrayList.grow(int)
void JavaUtilArrayList::grow(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "grow", "(I)V");
    method.call(*this, a0);
}

// private static int java.util.ArrayList.hugeCapacity(int)
jint JavaUtilArrayList::hugeCapacity(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "hugeCapacity", "(I)I");
    return method.call(a0);
}

// public boolean java.util.ArrayList.removeAll(java.util.Collection)
jboolean JavaUtilArrayList::removeAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "removeAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.ArrayList.retainAll(java.util.Collection)
jboolean JavaUtilArrayList::retainAll(const jnipp::Ref<JavaUtilCollection>& a0) const {
    static jnipp::Method<jboolean,JavaUtilCollection> method(clazz(), "retainAll", "(Ljava/util/Collection;)Z");
    return method.call(*this, a0);
}

// protected void java.util.ArrayList.removeRange(int,int)
void JavaUtilArrayList::removeRange(jint a0, jint a1) const {
    static jnipp::Method<void,jint,jint> method(clazz(), "removeRange", "(II)V");
    method.call(*this, a0, a1);
}

// public java.util.ListIterator java.util.ArrayList.listIterator(int)
jnipp::LocalRef<JavaUtilListIterator> JavaUtilArrayList::listIterator(jint a0) const {
    static jnipp::Method<JavaUtilListIterator,jint> method(clazz(), "listIterator", "(I)Ljava/util/ListIterator;");
    return method.call(*this, a0);
}

// public java.util.ListIterator java.util.ArrayList.listIterator()
jnipp::LocalRef<JavaUtilListIterator> JavaUtilArrayList::listIterator() const {
    static jnipp::Method<JavaUtilListIterator> method(clazz(), "listIterator", "()Ljava/util/ListIterator;");
    return method.call(*this);
}

// private void java.util.ArrayList.rangeCheckForAdd(int)
void JavaUtilArrayList::rangeCheckForAdd(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "rangeCheckForAdd", "(I)V");
    method.call(*this, a0);
}

// private java.lang.String java.util.ArrayList.outOfBoundsMsg(int)
jnipp::LocalRef<JavaLangString> JavaUtilArrayList::outOfBoundsMsg(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "outOfBoundsMsg", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private void java.util.ArrayList.ensureExplicitCapacity(int)
void JavaUtilArrayList::ensureExplicitCapacity(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureExplicitCapacity", "(I)V");
    method.call(*this, a0);
}

// private void java.util.ArrayList.fastRemove(int)
void JavaUtilArrayList::fastRemove(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "fastRemove", "(I)V");
    method.call(*this, a0);
}

// private void java.util.ArrayList.rangeCheck(int)
void JavaUtilArrayList::rangeCheck(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "rangeCheck", "(I)V");
    method.call(*this, a0);
}

// private boolean java.util.ArrayList.batchRemove(java.util.Collection,boolean)
jboolean JavaUtilArrayList::batchRemove(const jnipp::Ref<JavaUtilCollection>& a0, jboolean a1) const {
    static jnipp::Method<jboolean,JavaUtilCollection,jboolean> method(clazz(), "batchRemove", "(Ljava/util/Collection;Z)Z");
    return method.call(*this, a0, a1);
}

// static void java.util.ArrayList.subListRangeCheck(int,int,int)
void JavaUtilArrayList::subListRangeCheck(jint a0, jint a1, jint a2) {
    static jnipp::StaticMethod<void,jint,jint,jint> method(clazz(), "subListRangeCheck", "(III)V");
    method.call(a0, a1, a2);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilArrayList::serialVersionUID ("java/util/ArrayList", "serialVersionUID", "J");
#undef DEFAULT_CAPACITY
const jnipp::StaticField<jint> JavaUtilArrayList::DEFAULT_CAPACITY ("java/util/ArrayList", "DEFAULT_CAPACITY", "I");
#undef EMPTY_ELEMENTDATA
const jnipp::StaticField<jnipp::Array<JavaLangObject>> JavaUtilArrayList::EMPTY_ELEMENTDATA ("java/util/ArrayList", "EMPTY_ELEMENTDATA", "[Ljava/lang/Object;");
#undef MAX_ARRAY_SIZE
const jnipp::StaticField<jint> JavaUtilArrayList::MAX_ARRAY_SIZE ("java/util/ArrayList", "MAX_ARRAY_SIZE", "I");
inline jnipp::GlobalRef<jnipp::Class>& SunMiscURLClassPath_Loader::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/misc/URLClassPath$Loader"));
    return cls;
}

// sun.misc.URLClassPath$Loader(java.net.URL)
jnipp::LocalRef<SunMiscURLClassPath_Loader> SunMiscURLClassPath_Loader::construct(const jnipp::Ref<JavaNetURL>& a0) {
    static jnipp::Constructor<SunMiscURLClassPath_Loader,JavaNetURL> constructor(clazz(), "(Ljava/net/URL;)V");
    return constructor.construct(a0);
}

// sun.misc.Resource sun.misc.URLClassPath$Loader.getResource(java.lang.String)
jnipp::LocalRef<SunMiscResource> SunMiscURLClassPath_Loader::getResource(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<SunMiscResource,JavaLangString> method(clazz(), "getResource", "(Ljava/lang/String;)Lsun/misc/Resource;");
    return method.call(*this, a0);
}

// sun.misc.Resource sun.misc.URLClassPath$Loader.getResource(java.lang.String,boolean)
jnipp::LocalRef<SunMiscResource> SunMiscURLClassPath_Loader::getResource(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<SunMiscResource,JavaLangString,jboolean> method(clazz(), "getResource", "(Ljava/lang/String;Z)Lsun/misc/Resource;");
    return method.call(*this, a0, a1);
}

// java.net.URL sun.misc.URLClassPath$Loader.findResource(java.lang.String,boolean)
jnipp::LocalRef<JavaNetURL> SunMiscURLClassPath_Loader::findResource(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<JavaNetURL,JavaLangString,jboolean> method(clazz(), "findResource", "(Ljava/lang/String;Z)Ljava/net/URL;");
    return method.call(*this, a0, a1);
}

// public void sun.misc.URLClassPath$Loader.close() throws java.io.IOException
void SunMiscURLClassPath_Loader::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// java.net.URL[] sun.misc.URLClassPath$Loader.getClassPath() throws java.io.IOException
jnipp::LocalRef<jnipp::Array<JavaNetURL>> SunMiscURLClassPath_Loader::getClassPath() const {
    static jnipp::Method<jnipp::Array<JavaNetURL>> method(clazz(), "getClassPath", "()[Ljava/net/URL;");
    return method.call(*this);
}

// java.net.URL sun.misc.URLClassPath$Loader.getBaseURL()
jnipp::LocalRef<JavaNetURL> SunMiscURLClassPath_Loader::getBaseURL() const {
    static jnipp::Method<JavaNetURL> method(clazz(), "getBaseURL", "()Ljava/net/URL;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilListIterator::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/ListIterator"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetSocketPermission::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/SocketPermission"));
    return cls;
}

// java.net.SocketPermission(java.lang.String,int)
jnipp::LocalRef<JavaNetSocketPermission> JavaNetSocketPermission::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaNetSocketPermission,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public java.net.SocketPermission(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaNetSocketPermission> JavaNetSocketPermission::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::Constructor<JavaNetSocketPermission,JavaLangString,JavaLangString> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;)V");
    return constructor.construct(a0, a1);
}

// public boolean java.net.SocketPermission.equals(java.lang.Object)
jboolean JavaNetSocketPermission::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.net.SocketPermission.hashCode()
jint JavaNetSocketPermission::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// private void java.net.SocketPermission.init(java.lang.String,int)
void JavaNetSocketPermission::init(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangString,jint> method(clazz(), "init", "(Ljava/lang/String;I)V");
    method.call(*this, a0, a1);
}

// private synchronized void java.net.SocketPermission.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaNetSocketPermission::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private synchronized void java.net.SocketPermission.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaNetSocketPermission::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public boolean java.net.SocketPermission.implies(java.security.Permission)
jboolean JavaNetSocketPermission::implies(const jnipp::Ref<JavaSecurityPermission>& a0) const {
    static jnipp::Method<jboolean,JavaSecurityPermission> method(clazz(), "implies", "(Ljava/security/Permission;)Z");
    return method.call(*this, a0);
}

// private static java.lang.String java.net.SocketPermission.getActions(int)
jnipp::LocalRef<JavaLangString> JavaNetSocketPermission::getActions(jint a0) {
    static jnipp::StaticMethod<JavaLangString,jint> method(clazz(), "getActions", "(I)Ljava/lang/String;");
    return method.call(a0);
}

// public java.lang.String java.net.SocketPermission.getActions()
jnipp::LocalRef<JavaLangString> JavaNetSocketPermission::getActions() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getActions", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static synchronized sun.security.util.Debug java.net.SocketPermission.getDebug()
jnipp::LocalRef<SunSecurityUtilDebug> JavaNetSocketPermission::getDebug() {
    static jnipp::StaticMethod<SunSecurityUtilDebug> method(clazz(), "getDebug", "()Lsun/security/util/Debug;");
    return method.call();
}

// public java.security.PermissionCollection java.net.SocketPermission.newPermissionCollection()
jnipp::LocalRef<JavaSecurityPermissionCollection> JavaNetSocketPermission::newPermissionCollection() const {
    static jnipp::Method<JavaSecurityPermissionCollection> method(clazz(), "newPermissionCollection", "()Ljava/security/PermissionCollection;");
    return method.call(*this);
}

// private static java.lang.String java.net.SocketPermission.getHost(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaNetSocketPermission::getHost(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "getHost", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// private boolean java.net.SocketPermission.match(java.lang.String,java.lang.String)
jboolean JavaNetSocketPermission::match(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<jboolean,JavaLangString,JavaLangString> method(clazz(), "match", "(Ljava/lang/String;Ljava/lang/String;)Z");
    return method.call(*this, a0, a1);
}

// private void java.net.SocketPermission.setDeny()
void JavaNetSocketPermission::setDeny() const {
    static jnipp::Method<void> method(clazz(), "setDeny", "()V");
    method.call(*this);
}

// private int[] java.net.SocketPermission.parsePort(java.lang.String) throws java.lang.Exception
jnipp::LocalRef<jnipp::Array<jint>> JavaNetSocketPermission::parsePort(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<jint>,JavaLangString> method(clazz(), "parsePort", "(Ljava/lang/String;)[I");
    return method.call(*this, a0);
}

// private boolean java.net.SocketPermission.includesEphemerals()
jboolean JavaNetSocketPermission::includesEphemerals() const {
    static jnipp::Method<jboolean> method(clazz(), "includesEphemerals", "()Z");
    return method.call(*this);
}

// private boolean java.net.SocketPermission.isUntrusted() throws java.net.UnknownHostException
jboolean JavaNetSocketPermission::isUntrusted() const {
    static jnipp::Method<jboolean> method(clazz(), "isUntrusted", "()Z");
    return method.call(*this);
}

// void java.net.SocketPermission.getCanonName() throws java.net.UnknownHostException
void JavaNetSocketPermission::getCanonName() const {
    static jnipp::Method<void> method(clazz(), "getCanonName", "()V");
    method.call(*this);
}

// private boolean java.net.SocketPermission.authorized(java.lang.String,byte[])
jboolean JavaNetSocketPermission::authorized(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) const {
    static jnipp::Method<jboolean,JavaLangString,jnipp::Array<jbyte>> method(clazz(), "authorized", "(Ljava/lang/String;[B)Z");
    return method.call(*this, a0, a1);
}

// private boolean java.net.SocketPermission.authorizedIPv4(java.lang.String,byte[])
jboolean JavaNetSocketPermission::authorizedIPv4(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) const {
    static jnipp::Method<jboolean,JavaLangString,jnipp::Array<jbyte>> method(clazz(), "authorizedIPv4", "(Ljava/lang/String;[B)Z");
    return method.call(*this, a0, a1);
}

// private boolean java.net.SocketPermission.authorizedIPv6(java.lang.String,byte[])
jboolean JavaNetSocketPermission::authorizedIPv6(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) const {
    static jnipp::Method<jboolean,JavaLangString,jnipp::Array<jbyte>> method(clazz(), "authorizedIPv6", "(Ljava/lang/String;[B)Z");
    return method.call(*this, a0, a1);
}

// void java.net.SocketPermission.getIP() throws java.net.UnknownHostException
void JavaNetSocketPermission::getIP() const {
    static jnipp::Method<void> method(clazz(), "getIP", "()V");
    method.call(*this);
}

// private boolean java.net.SocketPermission.compareHostnames(java.net.SocketPermission)
jboolean JavaNetSocketPermission::compareHostnames(const jnipp::Ref<JavaNetSocketPermission>& a0) const {
    static jnipp::Method<jboolean,JavaNetSocketPermission> method(clazz(), "compareHostnames", "(Ljava/net/SocketPermission;)Z");
    return method.call(*this, a0);
}

// private static int java.net.SocketPermission.initEphemeralPorts(java.lang.String,int)
jint JavaNetSocketPermission::initEphemeralPorts(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<jint,JavaLangString,jint> method(clazz(), "initEphemeralPorts", "(Ljava/lang/String;I)I");
    return method.call(a0, a1);
}

// boolean java.net.SocketPermission.impliesIgnoreMask(java.net.SocketPermission)
jboolean JavaNetSocketPermission::impliesIgnoreMask(const jnipp::Ref<JavaNetSocketPermission>& a0) const {
    static jnipp::Method<jboolean,JavaNetSocketPermission> method(clazz(), "impliesIgnoreMask", "(Ljava/net/SocketPermission;)Z");
    return method.call(*this, a0);
}

// private static int java.net.SocketPermission.getMask(java.lang.String)
jint JavaNetSocketPermission::getMask(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jint,JavaLangString> method(clazz(), "getMask", "(Ljava/lang/String;)I");
    return method.call(a0);
}

// int java.net.SocketPermission.getMask()
jint JavaNetSocketPermission::getMask() const {
    static jnipp::Method<jint> method(clazz(), "getMask", "()I");
    return method.call(*this);
}

// private static boolean java.net.SocketPermission.inRange(int,int,int,int)
jboolean JavaNetSocketPermission::inRange(jint a0, jint a1, jint a2, jint a3) {
    static jnipp::StaticMethod<jboolean,jint,jint,jint,jint> method(clazz(), "inRange", "(IIII)Z");
    return method.call(a0, a1, a2, a3);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaNetSocketPermission::serialVersionUID ("java/net/SocketPermission", "serialVersionUID", "J");
#undef CONNECT
const jnipp::StaticField<jint> JavaNetSocketPermission::CONNECT ("java/net/SocketPermission", "CONNECT", "I");
#undef LISTEN
const jnipp::StaticField<jint> JavaNetSocketPermission::LISTEN ("java/net/SocketPermission", "LISTEN", "I");
#undef ACCEPT
const jnipp::StaticField<jint> JavaNetSocketPermission::ACCEPT ("java/net/SocketPermission", "ACCEPT", "I");
#undef RESOLVE
const jnipp::StaticField<jint> JavaNetSocketPermission::RESOLVE ("java/net/SocketPermission", "RESOLVE", "I");
#undef NONE
const jnipp::StaticField<jint> JavaNetSocketPermission::NONE ("java/net/SocketPermission", "NONE", "I");
#undef ALL
const jnipp::StaticField<jint> JavaNetSocketPermission::ALL ("java/net/SocketPermission", "ALL", "I");
#undef PORT_MIN
const jnipp::StaticField<jint> JavaNetSocketPermission::PORT_MIN ("java/net/SocketPermission", "PORT_MIN", "I");
#undef PORT_MAX
const jnipp::StaticField<jint> JavaNetSocketPermission::PORT_MAX ("java/net/SocketPermission", "PORT_MAX", "I");
#undef PRIV_PORT_MAX
const jnipp::StaticField<jint> JavaNetSocketPermission::PRIV_PORT_MAX ("java/net/SocketPermission", "PRIV_PORT_MAX", "I");
#undef DEF_EPH_LOW
const jnipp::StaticField<jint> JavaNetSocketPermission::DEF_EPH_LOW ("java/net/SocketPermission", "DEF_EPH_LOW", "I");
#undef trustNameService
jnipp::StaticField<jboolean> JavaNetSocketPermission::trustNameService ("java/net/SocketPermission", "trustNameService", "Z");
#undef debug
jnipp::StaticField<SunSecurityUtilDebug> JavaNetSocketPermission::debug ("java/net/SocketPermission", "debug", "Lsun/security/util/Debug;");
#undef debugInit
jnipp::StaticField<jboolean> JavaNetSocketPermission::debugInit ("java/net/SocketPermission", "debugInit", "Z");
#undef ephemeralLow
const jnipp::StaticField<jint> JavaNetSocketPermission::ephemeralLow ("java/net/SocketPermission", "ephemeralLow", "I");
#undef ephemeralHigh
const jnipp::StaticField<jint> JavaNetSocketPermission::ephemeralHigh ("java/net/SocketPermission", "ephemeralHigh", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityCertCertificateFactory::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/cert/CertificateFactory"));
    return cls;
}

// protected java.security.cert.CertificateFactory(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)
jnipp::LocalRef<JavaSecurityCertCertificateFactory> JavaSecurityCertCertificateFactory::construct(const jnipp::Ref<JavaSecurityCertCertificateFactorySpi>& a0, const jnipp::Ref<JavaSecurityProvider>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::Constructor<JavaSecurityCertCertificateFactory,JavaSecurityCertCertificateFactorySpi,JavaSecurityProvider,JavaLangString> constructor(clazz(), "(Ljava/security/cert/CertificateFactorySpi;Ljava/security/Provider;Ljava/lang/String;)V");
    return constructor.construct(a0, a1, a2);
}

// public static final java.security.cert.CertificateFactory java.security.cert.CertificateFactory.getInstance(java.lang.String,java.security.Provider) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertificateFactory> JavaSecurityCertCertificateFactory::getInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaSecurityProvider>& a1) {
    static jnipp::StaticMethod<JavaSecurityCertCertificateFactory,JavaLangString,JavaSecurityProvider> method(clazz(), "getInstance", "(Ljava/lang/String;Ljava/security/Provider;)Ljava/security/cert/CertificateFactory;");
    return method.call(a0, a1);
}

// public static final java.security.cert.CertificateFactory java.security.cert.CertificateFactory.getInstance(java.lang.String,java.lang.String) throws java.security.cert.CertificateException,java.security.NoSuchProviderException
jnipp::LocalRef<JavaSecurityCertCertificateFactory> JavaSecurityCertCertificateFactory::getInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaSecurityCertCertificateFactory,JavaLangString,JavaLangString> method(clazz(), "getInstance", "(Ljava/lang/String;Ljava/lang/String;)Ljava/security/cert/CertificateFactory;");
    return method.call(a0, a1);
}

// public static final java.security.cert.CertificateFactory java.security.cert.CertificateFactory.getInstance(java.lang.String) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertificateFactory> JavaSecurityCertCertificateFactory::getInstance(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaSecurityCertCertificateFactory,JavaLangString> method(clazz(), "getInstance", "(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;");
    return method.call(a0);
}

// public final java.lang.String java.security.cert.CertificateFactory.getType()
jnipp::LocalRef<JavaLangString> JavaSecurityCertCertificateFactory::getType() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getType", "()Ljava/lang/String;");
    return method.call(*this);
}

// public final java.security.cert.Certificate java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertificate> JavaSecurityCertCertificateFactory::generateCertificate(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<JavaSecurityCertCertificate,JavaIoInputStream> method(clazz(), "generateCertificate", "(Ljava/io/InputStream;)Ljava/security/cert/Certificate;");
    return method.call(*this, a0);
}

// public final java.security.cert.CertPath java.security.cert.CertificateFactory.generateCertPath(java.io.InputStream) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityCertCertificateFactory::generateCertPath(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<JavaSecurityCertCertPath,JavaIoInputStream> method(clazz(), "generateCertPath", "(Ljava/io/InputStream;)Ljava/security/cert/CertPath;");
    return method.call(*this, a0);
}

// public final java.security.cert.CertPath java.security.cert.CertificateFactory.generateCertPath(java.io.InputStream,java.lang.String) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityCertCertificateFactory::generateCertPath(const jnipp::Ref<JavaIoInputStream>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaSecurityCertCertPath,JavaIoInputStream,JavaLangString> method(clazz(), "generateCertPath", "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/security/cert/CertPath;");
    return method.call(*this, a0, a1);
}

// public final java.security.cert.CertPath java.security.cert.CertificateFactory.generateCertPath(java.util.List) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityCertCertificateFactory::generateCertPath(const jnipp::Ref<JavaUtilList>& a0) const {
    static jnipp::Method<JavaSecurityCertCertPath,JavaUtilList> method(clazz(), "generateCertPath", "(Ljava/util/List;)Ljava/security/cert/CertPath;");
    return method.call(*this, a0);
}

// public final java.security.Provider java.security.cert.CertificateFactory.getProvider()
jnipp::LocalRef<JavaSecurityProvider> JavaSecurityCertCertificateFactory::getProvider() const {
    static jnipp::Method<JavaSecurityProvider> method(clazz(), "getProvider", "()Ljava/security/Provider;");
    return method.call(*this);
}

// public final java.util.Iterator java.security.cert.CertificateFactory.getCertPathEncodings()
jnipp::LocalRef<JavaUtilIterator> JavaSecurityCertCertificateFactory::getCertPathEncodings() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "getCertPathEncodings", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// public final java.util.Collection java.security.cert.CertificateFactory.generateCertificates(java.io.InputStream) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaUtilCollection> JavaSecurityCertCertificateFactory::generateCertificates(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<JavaUtilCollection,JavaIoInputStream> method(clazz(), "generateCertificates", "(Ljava/io/InputStream;)Ljava/util/Collection;");
    return method.call(*this, a0);
}

// public final java.security.cert.CRL java.security.cert.CertificateFactory.generateCRL(java.io.InputStream) throws java.security.cert.CRLException
jnipp::LocalRef<JavaSecurityCertCRL> JavaSecurityCertCertificateFactory::generateCRL(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<JavaSecurityCertCRL,JavaIoInputStream> method(clazz(), "generateCRL", "(Ljava/io/InputStream;)Ljava/security/cert/CRL;");
    return method.call(*this, a0);
}

// public final java.util.Collection java.security.cert.CertificateFactory.generateCRLs(java.io.InputStream) throws java.security.cert.CRLException
jnipp::LocalRef<JavaUtilCollection> JavaSecurityCertCertificateFactory::generateCRLs(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<JavaUtilCollection,JavaIoInputStream> method(clazz(), "generateCRLs", "(Ljava/io/InputStream;)Ljava/util/Collection;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityCodeSigner::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/CodeSigner"));
    return cls;
}

// public java.security.CodeSigner(java.security.cert.CertPath,java.security.Timestamp)
jnipp::LocalRef<JavaSecurityCodeSigner> JavaSecurityCodeSigner::construct(const jnipp::Ref<JavaSecurityCertCertPath>& a0, const jnipp::Ref<JavaSecurityTimestamp>& a1) {
    static jnipp::Constructor<JavaSecurityCodeSigner,JavaSecurityCertCertPath,JavaSecurityTimestamp> constructor(clazz(), "(Ljava/security/cert/CertPath;Ljava/security/Timestamp;)V");
    return constructor.construct(a0, a1);
}

// public boolean java.security.CodeSigner.equals(java.lang.Object)
jboolean JavaSecurityCodeSigner::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.security.CodeSigner.hashCode()
jint JavaSecurityCodeSigner::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// private void java.security.CodeSigner.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaSecurityCodeSigner::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// public java.security.cert.CertPath java.security.CodeSigner.getSignerCertPath()
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityCodeSigner::getSignerCertPath() const {
    static jnipp::Method<JavaSecurityCertCertPath> method(clazz(), "getSignerCertPath", "()Ljava/security/cert/CertPath;");
    return method.call(*this);
}

// public java.security.Timestamp java.security.CodeSigner.getTimestamp()
jnipp::LocalRef<JavaSecurityTimestamp> JavaSecurityCodeSigner::getTimestamp() const {
    static jnipp::Method<JavaSecurityTimestamp> method(clazz(), "getTimestamp", "()Ljava/security/Timestamp;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityCodeSigner::serialVersionUID ("java/security/CodeSigner", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaNioFilePath::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/file/Path"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoFilenameFilter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/FilenameFilter"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoFile_PathStatus::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/File$PathStatus"));
    return cls;
}

// private java.io.File$PathStatus(java.lang.String,int)
jnipp::LocalRef<JavaIoFile_PathStatus> JavaIoFile_PathStatus::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaIoFile_PathStatus,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public static java.io.File$PathStatus[] java.io.File$PathStatus.values()
jnipp::LocalRef<jnipp::Array<JavaIoFile_PathStatus>> JavaIoFile_PathStatus::values() {
    static jnipp::StaticMethod<jnipp::Array<JavaIoFile_PathStatus>> method(clazz(), "values", "()[Ljava/io/File$PathStatus;");
    return method.call();
}

// public static java.io.File$PathStatus java.io.File$PathStatus.valueOf(java.lang.String)
jnipp::LocalRef<JavaIoFile_PathStatus> JavaIoFile_PathStatus::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaIoFile_PathStatus,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/io/File$PathStatus;");
    return method.call(a0);
}
#undef INVALID
const jnipp::StaticField<JavaIoFile_PathStatus> JavaIoFile_PathStatus::INVALID ("java/io/File$PathStatus", "INVALID", "Ljava/io/File$PathStatus;");
#undef CHECKED
const jnipp::StaticField<JavaIoFile_PathStatus> JavaIoFile_PathStatus::CHECKED ("java/io/File$PathStatus", "CHECKED", "Ljava/io/File$PathStatus;");
#undef $VALUES
const jnipp::StaticField<jnipp::Array<JavaIoFile_PathStatus>> JavaIoFile_PathStatus::$VALUES ("java/io/File$PathStatus", "$VALUES", "[Ljava/io/File$PathStatus;");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoFileFilter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/FileFilter"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoFileSystem::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/FileSystem"));
    return cls;
}

// java.io.FileSystem()
jnipp::LocalRef<JavaIoFileSystem> JavaIoFileSystem::construct() {
    static jnipp::Constructor<JavaIoFileSystem> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static native java.io.FileSystem java.io.FileSystem.getFileSystem()
jnipp::LocalRef<JavaIoFileSystem> JavaIoFileSystem::getFileSystem() {
    static jnipp::StaticMethod<JavaIoFileSystem> method(clazz(), "getFileSystem", "()Ljava/io/FileSystem;");
    return method.call();
}

// private static boolean java.io.FileSystem.getBooleanProperty(java.lang.String,boolean)
jboolean JavaIoFileSystem::getBooleanProperty(const jnipp::Ref<JavaLangString>& a0, jboolean a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,jboolean> method(clazz(), "getBooleanProperty", "(Ljava/lang/String;Z)Z");
    return method.call(a0, a1);
}
#undef BA_EXISTS
const jnipp::StaticField<jint> JavaIoFileSystem::BA_EXISTS ("java/io/FileSystem", "BA_EXISTS", "I");
#undef BA_REGULAR
const jnipp::StaticField<jint> JavaIoFileSystem::BA_REGULAR ("java/io/FileSystem", "BA_REGULAR", "I");
#undef BA_DIRECTORY
const jnipp::StaticField<jint> JavaIoFileSystem::BA_DIRECTORY ("java/io/FileSystem", "BA_DIRECTORY", "I");
#undef BA_HIDDEN
const jnipp::StaticField<jint> JavaIoFileSystem::BA_HIDDEN ("java/io/FileSystem", "BA_HIDDEN", "I");
#undef ACCESS_READ
const jnipp::StaticField<jint> JavaIoFileSystem::ACCESS_READ ("java/io/FileSystem", "ACCESS_READ", "I");
#undef ACCESS_WRITE
const jnipp::StaticField<jint> JavaIoFileSystem::ACCESS_WRITE ("java/io/FileSystem", "ACCESS_WRITE", "I");
#undef ACCESS_EXECUTE
const jnipp::StaticField<jint> JavaIoFileSystem::ACCESS_EXECUTE ("java/io/FileSystem", "ACCESS_EXECUTE", "I");
#undef SPACE_TOTAL
const jnipp::StaticField<jint> JavaIoFileSystem::SPACE_TOTAL ("java/io/FileSystem", "SPACE_TOTAL", "I");
#undef SPACE_FREE
const jnipp::StaticField<jint> JavaIoFileSystem::SPACE_FREE ("java/io/FileSystem", "SPACE_FREE", "I");
#undef SPACE_USABLE
const jnipp::StaticField<jint> JavaIoFileSystem::SPACE_USABLE ("java/io/FileSystem", "SPACE_USABLE", "I");
#undef useCanonCaches
jnipp::StaticField<jboolean> JavaIoFileSystem::useCanonCaches ("java/io/FileSystem", "useCanonCaches", "Z");
#undef useCanonPrefixCache
jnipp::StaticField<jboolean> JavaIoFileSystem::useCanonPrefixCache ("java/io/FileSystem", "useCanonPrefixCache", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentLocksReentrantLock::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/locks/ReentrantLock"));
    return cls;
}

// public java.util.concurrent.locks.ReentrantLock()
jnipp::LocalRef<JavaUtilConcurrentLocksReentrantLock> JavaUtilConcurrentLocksReentrantLock::construct() {
    static jnipp::Constructor<JavaUtilConcurrentLocksReentrantLock> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.concurrent.locks.ReentrantLock(boolean)
jnipp::LocalRef<JavaUtilConcurrentLocksReentrantLock> JavaUtilConcurrentLocksReentrantLock::construct(jboolean a0) {
    static jnipp::Constructor<JavaUtilConcurrentLocksReentrantLock,jboolean> constructor(clazz(), "(Z)V");
    return constructor.construct(a0);
}

// public void java.util.concurrent.locks.ReentrantLock.lock()
void JavaUtilConcurrentLocksReentrantLock::lock() const {
    static jnipp::Method<void> method(clazz(), "lock", "()V");
    method.call(*this);
}

// public void java.util.concurrent.locks.ReentrantLock.unlock()
void JavaUtilConcurrentLocksReentrantLock::unlock() const {
    static jnipp::Method<void> method(clazz(), "unlock", "()V");
    method.call(*this);
}

// public boolean java.util.concurrent.locks.ReentrantLock.tryLock()
jboolean JavaUtilConcurrentLocksReentrantLock::tryLock() const {
    static jnipp::Method<jboolean> method(clazz(), "tryLock", "()Z");
    return method.call(*this);
}

// public boolean java.util.concurrent.locks.ReentrantLock.tryLock(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
jboolean JavaUtilConcurrentLocksReentrantLock::tryLock(jlong a0, const jnipp::Ref<JavaUtilConcurrentTimeUnit>& a1) const {
    static jnipp::Method<jboolean,jlong,JavaUtilConcurrentTimeUnit> method(clazz(), "tryLock", "(JLjava/util/concurrent/TimeUnit;)Z");
    return method.call(*this, a0, a1);
}

// public void java.util.concurrent.locks.ReentrantLock.lockInterruptibly() throws java.lang.InterruptedException
void JavaUtilConcurrentLocksReentrantLock::lockInterruptibly() const {
    static jnipp::Method<void> method(clazz(), "lockInterruptibly", "()V");
    method.call(*this);
}

// public java.util.concurrent.locks.Condition java.util.concurrent.locks.ReentrantLock.newCondition()
jnipp::LocalRef<JavaUtilConcurrentLocksCondition> JavaUtilConcurrentLocksReentrantLock::newCondition() const {
    static jnipp::Method<JavaUtilConcurrentLocksCondition> method(clazz(), "newCondition", "()Ljava/util/concurrent/locks/Condition;");
    return method.call(*this);
}

// public int java.util.concurrent.locks.ReentrantLock.getHoldCount()
jint JavaUtilConcurrentLocksReentrantLock::getHoldCount() const {
    static jnipp::Method<jint> method(clazz(), "getHoldCount", "()I");
    return method.call(*this);
}

// public boolean java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread()
jboolean JavaUtilConcurrentLocksReentrantLock::isHeldByCurrentThread() const {
    static jnipp::Method<jboolean> method(clazz(), "isHeldByCurrentThread", "()Z");
    return method.call(*this);
}

// public boolean java.util.concurrent.locks.ReentrantLock.isLocked()
jboolean JavaUtilConcurrentLocksReentrantLock::isLocked() const {
    static jnipp::Method<jboolean> method(clazz(), "isLocked", "()Z");
    return method.call(*this);
}

// public final boolean java.util.concurrent.locks.ReentrantLock.isFair()
jboolean JavaUtilConcurrentLocksReentrantLock::isFair() const {
    static jnipp::Method<jboolean> method(clazz(), "isFair", "()Z");
    return method.call(*this);
}

// protected java.lang.Thread java.util.concurrent.locks.ReentrantLock.getOwner()
jnipp::LocalRef<JavaLangThread> JavaUtilConcurrentLocksReentrantLock::getOwner() const {
    static jnipp::Method<JavaLangThread> method(clazz(), "getOwner", "()Ljava/lang/Thread;");
    return method.call(*this);
}

// public final boolean java.util.concurrent.locks.ReentrantLock.hasQueuedThreads()
jboolean JavaUtilConcurrentLocksReentrantLock::hasQueuedThreads() const {
    static jnipp::Method<jboolean> method(clazz(), "hasQueuedThreads", "()Z");
    return method.call(*this);
}

// public final boolean java.util.concurrent.locks.ReentrantLock.hasQueuedThread(java.lang.Thread)
jboolean JavaUtilConcurrentLocksReentrantLock::hasQueuedThread(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<jboolean,JavaLangThread> method(clazz(), "hasQueuedThread", "(Ljava/lang/Thread;)Z");
    return method.call(*this, a0);
}

// public final int java.util.concurrent.locks.ReentrantLock.getQueueLength()
jint JavaUtilConcurrentLocksReentrantLock::getQueueLength() const {
    static jnipp::Method<jint> method(clazz(), "getQueueLength", "()I");
    return method.call(*this);
}

// protected java.util.Collection java.util.concurrent.locks.ReentrantLock.getQueuedThreads()
jnipp::LocalRef<JavaUtilCollection> JavaUtilConcurrentLocksReentrantLock::getQueuedThreads() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "getQueuedThreads", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public boolean java.util.concurrent.locks.ReentrantLock.hasWaiters(java.util.concurrent.locks.Condition)
jboolean JavaUtilConcurrentLocksReentrantLock::hasWaiters(const jnipp::Ref<JavaUtilConcurrentLocksCondition>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksCondition> method(clazz(), "hasWaiters", "(Ljava/util/concurrent/locks/Condition;)Z");
    return method.call(*this, a0);
}

// public int java.util.concurrent.locks.ReentrantLock.getWaitQueueLength(java.util.concurrent.locks.Condition)
jint JavaUtilConcurrentLocksReentrantLock::getWaitQueueLength(const jnipp::Ref<JavaUtilConcurrentLocksCondition>& a0) const {
    static jnipp::Method<jint,JavaUtilConcurrentLocksCondition> method(clazz(), "getWaitQueueLength", "(Ljava/util/concurrent/locks/Condition;)I");
    return method.call(*this, a0);
}

// protected java.util.Collection java.util.concurrent.locks.ReentrantLock.getWaitingThreads(java.util.concurrent.locks.Condition)
jnipp::LocalRef<JavaUtilCollection> JavaUtilConcurrentLocksReentrantLock::getWaitingThreads(const jnipp::Ref<JavaUtilConcurrentLocksCondition>& a0) const {
    static jnipp::Method<JavaUtilCollection,JavaUtilConcurrentLocksCondition> method(clazz(), "getWaitingThreads", "(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection;");
    return method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksReentrantLock::serialVersionUID ("java/util/concurrent/locks/ReentrantLock", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentConcurrentHashMap_Segment::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/ConcurrentHashMap$Segment"));
    return cls;
}

// java.util.concurrent.ConcurrentHashMap$Segment(float,int,java.util.concurrent.ConcurrentHashMap$HashEntry[])
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap_Segment> JavaUtilConcurrentConcurrentHashMap_Segment::construct(jfloat a0, jint a1, const jnipp::Ref<jnipp::Array<JavaUtilConcurrentConcurrentHashMap_HashEntry>>& a2) {
    static jnipp::Constructor<JavaUtilConcurrentConcurrentHashMap_Segment,jfloat,jint,jnipp::Array<JavaUtilConcurrentConcurrentHashMap_HashEntry>> constructor(clazz(), "(FI[Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)V");
    return constructor.construct(a0, a1, a2);
}

// final java.lang.Object java.util.concurrent.ConcurrentHashMap$Segment.remove(java.lang.Object,int,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilConcurrentConcurrentHashMap_Segment::remove(const jnipp::Ref<JavaLangObject>& a0, jint a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,jint,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1, a2);
}

// final java.lang.Object java.util.concurrent.ConcurrentHashMap$Segment.put(java.lang.Object,int,java.lang.Object,boolean)
jnipp::LocalRef<JavaLangObject> JavaUtilConcurrentConcurrentHashMap_Segment::put(const jnipp::Ref<JavaLangObject>& a0, jint a1, const jnipp::Ref<JavaLangObject>& a2, jboolean a3) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,jint,JavaLangObject,jboolean> method(clazz(), "put", "(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;");
    return method.call(*this, a0, a1, a2, a3);
}

// final void java.util.concurrent.ConcurrentHashMap$Segment.clear()
void JavaUtilConcurrentConcurrentHashMap_Segment::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// final boolean java.util.concurrent.ConcurrentHashMap$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object)
jboolean JavaUtilConcurrentConcurrentHashMap_Segment::replace(const jnipp::Ref<JavaLangObject>& a0, jint a1, const jnipp::Ref<JavaLangObject>& a2, const jnipp::Ref<JavaLangObject>& a3) const {
    static jnipp::Method<jboolean,JavaLangObject,jint,JavaLangObject,JavaLangObject> method(clazz(), "replace", "(Ljava/lang/Object;ILjava/lang/Object;Ljava/lang/Object;)Z");
    return method.call(*this, a0, a1, a2, a3);
}

// final java.lang.Object java.util.concurrent.ConcurrentHashMap$Segment.replace(java.lang.Object,int,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilConcurrentConcurrentHashMap_Segment::replace(const jnipp::Ref<JavaLangObject>& a0, jint a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,jint,JavaLangObject> method(clazz(), "replace", "(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1, a2);
}

// private void java.util.concurrent.ConcurrentHashMap$Segment.rehash(java.util.concurrent.ConcurrentHashMap$HashEntry)
void JavaUtilConcurrentConcurrentHashMap_Segment::rehash(const jnipp::Ref<JavaUtilConcurrentConcurrentHashMap_HashEntry>& a0) const {
    static jnipp::Method<void,JavaUtilConcurrentConcurrentHashMap_HashEntry> method(clazz(), "rehash", "(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)V");
    method.call(*this, a0);
}

// private java.util.concurrent.ConcurrentHashMap$HashEntry java.util.concurrent.ConcurrentHashMap$Segment.scanAndLockForPut(java.lang.Object,int,java.lang.Object)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap_HashEntry> JavaUtilConcurrentConcurrentHashMap_Segment::scanAndLockForPut(const jnipp::Ref<JavaLangObject>& a0, jint a1, const jnipp::Ref<JavaLangObject>& a2) const {
    static jnipp::Method<JavaUtilConcurrentConcurrentHashMap_HashEntry,JavaLangObject,jint,JavaLangObject> method(clazz(), "scanAndLockForPut", "(Ljava/lang/Object;ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$HashEntry;");
    return method.call(*this, a0, a1, a2);
}

// private void java.util.concurrent.ConcurrentHashMap$Segment.scanAndLock(java.lang.Object,int)
void JavaUtilConcurrentConcurrentHashMap_Segment::scanAndLock(const jnipp::Ref<JavaLangObject>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangObject,jint> method(clazz(), "scanAndLock", "(Ljava/lang/Object;I)V");
    method.call(*this, a0, a1);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap_Segment::serialVersionUID ("java/util/concurrent/ConcurrentHashMap$Segment", "serialVersionUID", "J");
#undef MAX_SCAN_RETRIES
const jnipp::StaticField<jint> JavaUtilConcurrentConcurrentHashMap_Segment::MAX_SCAN_RETRIES ("java/util/concurrent/ConcurrentHashMap$Segment", "MAX_SCAN_RETRIES", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentConcurrentHashMap_HashEntry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/ConcurrentHashMap$HashEntry"));
    return cls;
}

// java.util.concurrent.ConcurrentHashMap$HashEntry(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$HashEntry)
jnipp::LocalRef<JavaUtilConcurrentConcurrentHashMap_HashEntry> JavaUtilConcurrentConcurrentHashMap_HashEntry::construct(jint a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2, const jnipp::Ref<JavaUtilConcurrentConcurrentHashMap_HashEntry>& a3) {
    static jnipp::Constructor<JavaUtilConcurrentConcurrentHashMap_HashEntry,jint,JavaLangObject,JavaLangObject,JavaUtilConcurrentConcurrentHashMap_HashEntry> constructor(clazz(), "(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// final void java.util.concurrent.ConcurrentHashMap$HashEntry.setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)
void JavaUtilConcurrentConcurrentHashMap_HashEntry::setNext(const jnipp::Ref<JavaUtilConcurrentConcurrentHashMap_HashEntry>& a0) const {
    static jnipp::Method<void,JavaUtilConcurrentConcurrentHashMap_HashEntry> method(clazz(), "setNext", "(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)V");
    method.call(*this, a0);
}
#undef UNSAFE
const jnipp::StaticField<SunMiscUnsafe> JavaUtilConcurrentConcurrentHashMap_HashEntry::UNSAFE ("java/util/concurrent/ConcurrentHashMap$HashEntry", "UNSAFE", "Lsun/misc/Unsafe;");
#undef nextOffset
const jnipp::StaticField<jlong> JavaUtilConcurrentConcurrentHashMap_HashEntry::nextOffset ("java/util/concurrent/ConcurrentHashMap$HashEntry", "nextOffset", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilResourceBundle_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/ResourceBundle$1"));
    return cls;
}

// java.util.ResourceBundle$1()
jnipp::LocalRef<JavaUtilResourceBundle_1> JavaUtilResourceBundle_1::construct() {
    static jnipp::Constructor<JavaUtilResourceBundle_1> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.Enumeration java.util.ResourceBundle$1.getKeys()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilResourceBundle_1::getKeys() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "getKeys", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// protected java.lang.Object java.util.ResourceBundle$1.handleGetObject(java.lang.String)
jnipp::LocalRef<JavaLangObject> JavaUtilResourceBundle_1::handleGetObject(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangString> method(clazz(), "handleGetObject", "(Ljava/lang/String;)Ljava/lang/Object;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRefReferenceQueue_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ref/ReferenceQueue$1"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilHashtable_Entry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Hashtable$Entry"));
    return cls;
}

// protected java.util.Hashtable$Entry(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)
jnipp::LocalRef<JavaUtilHashtable_Entry> JavaUtilHashtable_Entry::construct(jint a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2, const jnipp::Ref<JavaUtilHashtable_Entry>& a3) {
    static jnipp::Constructor<JavaUtilHashtable_Entry,jint,JavaLangObject,JavaLangObject,JavaUtilHashtable_Entry> constructor(clazz(), "(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/Hashtable$Entry;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public boolean java.util.Hashtable$Entry.equals(java.lang.Object)
jboolean JavaUtilHashtable_Entry::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.Hashtable$Entry.hashCode()
jint JavaUtilHashtable_Entry::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// protected java.lang.Object java.util.Hashtable$Entry.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilHashtable_Entry::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.Object java.util.Hashtable$Entry.getValue()
jnipp::LocalRef<JavaLangObject> JavaUtilHashtable_Entry::getValue() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getValue", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.Object java.util.Hashtable$Entry.getKey()
jnipp::LocalRef<JavaLangObject> JavaUtilHashtable_Entry::getKey() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "getKey", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.Object java.util.Hashtable$Entry.setValue(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilHashtable_Entry::setValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetProxy_Type::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/Proxy$Type"));
    return cls;
}

// private java.net.Proxy$Type(java.lang.String,int)
jnipp::LocalRef<JavaNetProxy_Type> JavaNetProxy_Type::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaNetProxy_Type,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public static java.net.Proxy$Type[] java.net.Proxy$Type.values()
jnipp::LocalRef<jnipp::Array<JavaNetProxy_Type>> JavaNetProxy_Type::values() {
    static jnipp::StaticMethod<jnipp::Array<JavaNetProxy_Type>> method(clazz(), "values", "()[Ljava/net/Proxy$Type;");
    return method.call();
}

// public static java.net.Proxy$Type java.net.Proxy$Type.valueOf(java.lang.String)
jnipp::LocalRef<JavaNetProxy_Type> JavaNetProxy_Type::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetProxy_Type,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/net/Proxy$Type;");
    return method.call(a0);
}
#undef DIRECT
const jnipp::StaticField<JavaNetProxy_Type> JavaNetProxy_Type::DIRECT ("java/net/Proxy$Type", "DIRECT", "Ljava/net/Proxy$Type;");
#undef HTTP
const jnipp::StaticField<JavaNetProxy_Type> JavaNetProxy_Type::HTTP ("java/net/Proxy$Type", "HTTP", "Ljava/net/Proxy$Type;");
#undef SOCKS
const jnipp::StaticField<JavaNetProxy_Type> JavaNetProxy_Type::SOCKS ("java/net/Proxy$Type", "SOCKS", "Ljava/net/Proxy$Type;");
#undef $VALUES
const jnipp::StaticField<jnipp::Array<JavaNetProxy_Type>> JavaNetProxy_Type::$VALUES ("java/net/Proxy$Type", "$VALUES", "[Ljava/net/Proxy$Type;");
inline jnipp::GlobalRef<jnipp::Class>& JavaNetSocketAddress::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/SocketAddress"));
    return cls;
}

// public java.net.SocketAddress()
jnipp::LocalRef<JavaNetSocketAddress> JavaNetSocketAddress::construct() {
    static jnipp::Constructor<JavaNetSocketAddress> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetInetAddressImpl::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/InetAddressImpl"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetInetAddress_InetAddressHolder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/InetAddress$InetAddressHolder"));
    return cls;
}

// java.net.InetAddress$InetAddressHolder()
jnipp::LocalRef<JavaNetInetAddress_InetAddressHolder> JavaNetInetAddress_InetAddressHolder::construct() {
    static jnipp::Constructor<JavaNetInetAddress_InetAddressHolder> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.net.InetAddress$InetAddressHolder(java.lang.String,int,int)
jnipp::LocalRef<JavaNetInetAddress_InetAddressHolder> JavaNetInetAddress_InetAddressHolder::construct(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2) {
    static jnipp::Constructor<JavaNetInetAddress_InetAddressHolder,JavaLangString,jint,jint> constructor(clazz(), "(Ljava/lang/String;II)V");
    return constructor.construct(a0, a1, a2);
}

// int java.net.InetAddress$InetAddressHolder.getAddress()
jint JavaNetInetAddress_InetAddressHolder::getAddress() const {
    static jnipp::Method<jint> method(clazz(), "getAddress", "()I");
    return method.call(*this);
}

// void java.net.InetAddress$InetAddressHolder.init(java.lang.String,int)
void JavaNetInetAddress_InetAddressHolder::init(const jnipp::Ref<JavaLangString>& a0, jint a1) const {
    static jnipp::Method<void,JavaLangString,jint> method(clazz(), "init", "(Ljava/lang/String;I)V");
    method.call(*this, a0, a1);
}

// java.lang.String java.net.InetAddress$InetAddressHolder.getHostName()
jnipp::LocalRef<JavaLangString> JavaNetInetAddress_InetAddressHolder::getHostName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getHostName", "()Ljava/lang/String;");
    return method.call(*this);
}

// int java.net.InetAddress$InetAddressHolder.getFamily()
jint JavaNetInetAddress_InetAddressHolder::getFamily() const {
    static jnipp::Method<jint> method(clazz(), "getFamily", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunNetSpiNameserviceNameService::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/net/spi/nameservice/NameService"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetInetAddress_Cache::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/InetAddress$Cache"));
    return cls;
}

// public java.net.InetAddress$Cache(java.net.InetAddress$Cache$Type)
jnipp::LocalRef<JavaNetInetAddress_Cache> JavaNetInetAddress_Cache::construct(const jnipp::Ref<JavaNetInetAddress_Cache_Type>& a0) {
    static jnipp::Constructor<JavaNetInetAddress_Cache,JavaNetInetAddress_Cache_Type> constructor(clazz(), "(Ljava/net/InetAddress$Cache$Type;)V");
    return constructor.construct(a0);
}

// public java.net.InetAddress$CacheEntry java.net.InetAddress$Cache.get(java.lang.String)
jnipp::LocalRef<JavaNetInetAddress_CacheEntry> JavaNetInetAddress_Cache::get(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNetInetAddress_CacheEntry,JavaLangString> method(clazz(), "get", "(Ljava/lang/String;)Ljava/net/InetAddress$CacheEntry;");
    return method.call(*this, a0);
}

// public java.net.InetAddress$Cache java.net.InetAddress$Cache.put(java.lang.String,java.net.InetAddress[])
jnipp::LocalRef<JavaNetInetAddress_Cache> JavaNetInetAddress_Cache::put(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<JavaNetInetAddress>>& a1) const {
    static jnipp::Method<JavaNetInetAddress_Cache,JavaLangString,jnipp::Array<JavaNetInetAddress>> method(clazz(), "put", "(Ljava/lang/String;[Ljava/net/InetAddress;)Ljava/net/InetAddress$Cache;");
    return method.call(*this, a0, a1);
}

// private int java.net.InetAddress$Cache.getPolicy()
jint JavaNetInetAddress_Cache::getPolicy() const {
    static jnipp::Method<jint> method(clazz(), "getPolicy", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetNetworkInterface::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/NetworkInterface"));
    return cls;
}

// java.net.NetworkInterface()
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::construct() {
    static jnipp::Constructor<JavaNetNetworkInterface> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.net.NetworkInterface(java.lang.String,int,java.net.InetAddress[])
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::construct(const jnipp::Ref<JavaLangString>& a0, jint a1, const jnipp::Ref<jnipp::Array<JavaNetInetAddress>>& a2) {
    static jnipp::Constructor<JavaNetNetworkInterface,JavaLangString,jint,jnipp::Array<JavaNetInetAddress>> constructor(clazz(), "(Ljava/lang/String;I[Ljava/net/InetAddress;)V");
    return constructor.construct(a0, a1, a2);
}

// public boolean java.net.NetworkInterface.equals(java.lang.Object)
jboolean JavaNetNetworkInterface::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.net.NetworkInterface.hashCode()
jint JavaNetNetworkInterface::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.String java.net.NetworkInterface.getName()
jnipp::LocalRef<JavaLangString> JavaNetNetworkInterface::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// static java.net.NetworkInterface java.net.NetworkInterface.getDefault()
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::getDefault() {
    static jnipp::StaticMethod<JavaNetNetworkInterface> method(clazz(), "getDefault", "()Ljava/net/NetworkInterface;");
    return method.call();
}

// public java.net.NetworkInterface java.net.NetworkInterface.getParent()
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::getParent() const {
    static jnipp::Method<JavaNetNetworkInterface> method(clazz(), "getParent", "()Ljava/net/NetworkInterface;");
    return method.call(*this);
}

// private static native void java.net.NetworkInterface.init()
void JavaNetNetworkInterface::init() {
    static jnipp::StaticMethod<void> method(clazz(), "init", "()V");
    method.call();
}

// public java.lang.String java.net.NetworkInterface.getDisplayName()
jnipp::LocalRef<JavaLangString> JavaNetNetworkInterface::getDisplayName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDisplayName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static java.net.NetworkInterface java.net.NetworkInterface.getByName(java.lang.String) throws java.net.SocketException
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::getByName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetNetworkInterface,JavaLangString> method(clazz(), "getByName", "(Ljava/lang/String;)Ljava/net/NetworkInterface;");
    return method.call(a0);
}

// public int java.net.NetworkInterface.getIndex()
jint JavaNetNetworkInterface::getIndex() const {
    static jnipp::Method<jint> method(clazz(), "getIndex", "()I");
    return method.call(*this);
}

// public java.util.Enumeration java.net.NetworkInterface.getInetAddresses()
jnipp::LocalRef<JavaUtilEnumeration> JavaNetNetworkInterface::getInetAddresses() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "getInetAddresses", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.util.List java.net.NetworkInterface.getInterfaceAddresses()
jnipp::LocalRef<JavaUtilList> JavaNetNetworkInterface::getInterfaceAddresses() const {
    static jnipp::Method<JavaUtilList> method(clazz(), "getInterfaceAddresses", "()Ljava/util/List;");
    return method.call(*this);
}

// public java.util.Enumeration java.net.NetworkInterface.getSubInterfaces()
jnipp::LocalRef<JavaUtilEnumeration> JavaNetNetworkInterface::getSubInterfaces() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "getSubInterfaces", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public static java.net.NetworkInterface java.net.NetworkInterface.getByIndex(int) throws java.net.SocketException
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::getByIndex(jint a0) {
    static jnipp::StaticMethod<JavaNetNetworkInterface,jint> method(clazz(), "getByIndex", "(I)Ljava/net/NetworkInterface;");
    return method.call(a0);
}

// public static java.net.NetworkInterface java.net.NetworkInterface.getByInetAddress(java.net.InetAddress) throws java.net.SocketException
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::getByInetAddress(const jnipp::Ref<JavaNetInetAddress>& a0) {
    static jnipp::StaticMethod<JavaNetNetworkInterface,JavaNetInetAddress> method(clazz(), "getByInetAddress", "(Ljava/net/InetAddress;)Ljava/net/NetworkInterface;");
    return method.call(a0);
}

// public static java.util.Enumeration java.net.NetworkInterface.getNetworkInterfaces() throws java.net.SocketException
jnipp::LocalRef<JavaUtilEnumeration> JavaNetNetworkInterface::getNetworkInterfaces() {
    static jnipp::StaticMethod<JavaUtilEnumeration> method(clazz(), "getNetworkInterfaces", "()Ljava/util/Enumeration;");
    return method.call();
}

// private static native java.net.NetworkInterface[] java.net.NetworkInterface.getAll() throws java.net.SocketException
jnipp::LocalRef<jnipp::Array<JavaNetNetworkInterface>> JavaNetNetworkInterface::getAll() {
    static jnipp::StaticMethod<jnipp::Array<JavaNetNetworkInterface>> method(clazz(), "getAll", "()[Ljava/net/NetworkInterface;");
    return method.call();
}

// private static native java.net.NetworkInterface java.net.NetworkInterface.getByName0(java.lang.String) throws java.net.SocketException
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::getByName0(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetNetworkInterface,JavaLangString> method(clazz(), "getByName0", "(Ljava/lang/String;)Ljava/net/NetworkInterface;");
    return method.call(a0);
}

// private static native java.net.NetworkInterface java.net.NetworkInterface.getByIndex0(int) throws java.net.SocketException
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::getByIndex0(jint a0) {
    static jnipp::StaticMethod<JavaNetNetworkInterface,jint> method(clazz(), "getByIndex0", "(I)Ljava/net/NetworkInterface;");
    return method.call(a0);
}

// private static native java.net.NetworkInterface java.net.NetworkInterface.getByInetAddress0(java.net.InetAddress) throws java.net.SocketException
jnipp::LocalRef<JavaNetNetworkInterface> JavaNetNetworkInterface::getByInetAddress0(const jnipp::Ref<JavaNetInetAddress>& a0) {
    static jnipp::StaticMethod<JavaNetNetworkInterface,JavaNetInetAddress> method(clazz(), "getByInetAddress0", "(Ljava/net/InetAddress;)Ljava/net/NetworkInterface;");
    return method.call(a0);
}

// public boolean java.net.NetworkInterface.isUp() throws java.net.SocketException
jboolean JavaNetNetworkInterface::isUp() const {
    static jnipp::Method<jboolean> method(clazz(), "isUp", "()Z");
    return method.call(*this);
}

// public boolean java.net.NetworkInterface.isLoopback() throws java.net.SocketException
jboolean JavaNetNetworkInterface::isLoopback() const {
    static jnipp::Method<jboolean> method(clazz(), "isLoopback", "()Z");
    return method.call(*this);
}

// public boolean java.net.NetworkInterface.isPointToPoint() throws java.net.SocketException
jboolean JavaNetNetworkInterface::isPointToPoint() const {
    static jnipp::Method<jboolean> method(clazz(), "isPointToPoint", "()Z");
    return method.call(*this);
}

// public boolean java.net.NetworkInterface.supportsMulticast() throws java.net.SocketException
jboolean JavaNetNetworkInterface::supportsMulticast() const {
    static jnipp::Method<jboolean> method(clazz(), "supportsMulticast", "()Z");
    return method.call(*this);
}

// public byte[] java.net.NetworkInterface.getHardwareAddress() throws java.net.SocketException
jnipp::LocalRef<jnipp::Array<jbyte>> JavaNetNetworkInterface::getHardwareAddress() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getHardwareAddress", "()[B");
    return method.call(*this);
}

// public int java.net.NetworkInterface.getMTU() throws java.net.SocketException
jint JavaNetNetworkInterface::getMTU() const {
    static jnipp::Method<jint> method(clazz(), "getMTU", "()I");
    return method.call(*this);
}

// public boolean java.net.NetworkInterface.isVirtual()
jboolean JavaNetNetworkInterface::isVirtual() const {
    static jnipp::Method<jboolean> method(clazz(), "isVirtual", "()Z");
    return method.call(*this);
}

// private static native boolean java.net.NetworkInterface.isUp0(java.lang.String,int) throws java.net.SocketException
jboolean JavaNetNetworkInterface::isUp0(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,jint> method(clazz(), "isUp0", "(Ljava/lang/String;I)Z");
    return method.call(a0, a1);
}

// private static native boolean java.net.NetworkInterface.isLoopback0(java.lang.String,int) throws java.net.SocketException
jboolean JavaNetNetworkInterface::isLoopback0(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,jint> method(clazz(), "isLoopback0", "(Ljava/lang/String;I)Z");
    return method.call(a0, a1);
}

// private static native boolean java.net.NetworkInterface.supportsMulticast0(java.lang.String,int) throws java.net.SocketException
jboolean JavaNetNetworkInterface::supportsMulticast0(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,jint> method(clazz(), "supportsMulticast0", "(Ljava/lang/String;I)Z");
    return method.call(a0, a1);
}

// private static native boolean java.net.NetworkInterface.isP2P0(java.lang.String,int) throws java.net.SocketException
jboolean JavaNetNetworkInterface::isP2P0(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,jint> method(clazz(), "isP2P0", "(Ljava/lang/String;I)Z");
    return method.call(a0, a1);
}

// private static native byte[] java.net.NetworkInterface.getMacAddr0(byte[],java.lang.String,int) throws java.net.SocketException
jnipp::LocalRef<jnipp::Array<jbyte>> JavaNetNetworkInterface::getMacAddr0(const jnipp::Ref<jnipp::Array<jbyte>>& a0, const jnipp::Ref<JavaLangString>& a1, jint a2) {
    static jnipp::StaticMethod<jnipp::Array<jbyte>,jnipp::Array<jbyte>,JavaLangString,jint> method(clazz(), "getMacAddr0", "([BLjava/lang/String;I)[B");
    return method.call(a0, a1, a2);
}

// private static native int java.net.NetworkInterface.getMTU0(java.lang.String,int) throws java.net.SocketException
jint JavaNetNetworkInterface::getMTU0(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<jint,JavaLangString,jint> method(clazz(), "getMTU0", "(Ljava/lang/String;I)I");
    return method.call(a0, a1);
}
#undef defaultInterface
const jnipp::StaticField<JavaNetNetworkInterface> JavaNetNetworkInterface::defaultInterface ("java/net/NetworkInterface", "defaultInterface", "Ljava/net/NetworkInterface;");
#undef defaultIndex
const jnipp::StaticField<jint> JavaNetNetworkInterface::defaultIndex ("java/net/NetworkInterface", "defaultIndex", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaNetFileNameMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/FileNameMap"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunNetWwwMessageHeader::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/net/www/MessageHeader"));
    return cls;
}

// public sun.net.www.MessageHeader()
jnipp::LocalRef<SunNetWwwMessageHeader> SunNetWwwMessageHeader::construct() {
    static jnipp::Constructor<SunNetWwwMessageHeader> constructor(clazz(), "()V");
    return constructor.construct();
}

// public sun.net.www.MessageHeader(java.io.InputStream) throws java.io.IOException
jnipp::LocalRef<SunNetWwwMessageHeader> SunNetWwwMessageHeader::construct(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::Constructor<SunNetWwwMessageHeader,JavaIoInputStream> constructor(clazz(), "(Ljava/io/InputStream;)V");
    return constructor.construct(a0);
}

// public synchronized void sun.net.www.MessageHeader.add(java.lang.String,java.lang.String)
void SunNetWwwMessageHeader::add(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangString> method(clazz(), "add", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public synchronized void sun.net.www.MessageHeader.remove(java.lang.String)
void SunNetWwwMessageHeader::remove(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "remove", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public synchronized java.lang.String sun.net.www.MessageHeader.getValue(int)
jnipp::LocalRef<JavaLangString> SunNetWwwMessageHeader::getValue(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "getValue", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public synchronized int sun.net.www.MessageHeader.getKey(java.lang.String)
jint SunNetWwwMessageHeader::getKey(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jint,JavaLangString> method(clazz(), "getKey", "(Ljava/lang/String;)I");
    return method.call(*this, a0);
}

// public synchronized java.lang.String sun.net.www.MessageHeader.getKey(int)
jnipp::LocalRef<JavaLangString> SunNetWwwMessageHeader::getKey(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "getKey", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public synchronized void sun.net.www.MessageHeader.print(java.io.PrintStream)
void SunNetWwwMessageHeader::print(const jnipp::Ref<JavaIoPrintStream>& a0) const {
    static jnipp::Method<void,JavaIoPrintStream> method(clazz(), "print", "(Ljava/io/PrintStream;)V");
    method.call(*this, a0);
}

// public synchronized void sun.net.www.MessageHeader.set(java.lang.String,java.lang.String)
void SunNetWwwMessageHeader::set(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangString> method(clazz(), "set", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public synchronized void sun.net.www.MessageHeader.set(int,java.lang.String,java.lang.String)
void SunNetWwwMessageHeader::set(jint a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2) const {
    static jnipp::Method<void,jint,JavaLangString,JavaLangString> method(clazz(), "set", "(ILjava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1, a2);
}

// public synchronized void sun.net.www.MessageHeader.reset()
void SunNetWwwMessageHeader::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// private void sun.net.www.MessageHeader.grow()
void SunNetWwwMessageHeader::grow() const {
    static jnipp::Method<void> method(clazz(), "grow", "()V");
    method.call(*this);
}

// public synchronized java.lang.String sun.net.www.MessageHeader.findValue(java.lang.String)
jnipp::LocalRef<JavaLangString> SunNetWwwMessageHeader::findValue(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "findValue", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public synchronized java.util.Map sun.net.www.MessageHeader.getHeaders()
jnipp::LocalRef<JavaUtilMap> SunNetWwwMessageHeader::getHeaders() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "getHeaders", "()Ljava/util/Map;");
    return method.call(*this);
}

// public synchronized java.util.Map sun.net.www.MessageHeader.getHeaders(java.lang.String[])
jnipp::LocalRef<JavaUtilMap> SunNetWwwMessageHeader::getHeaders(const jnipp::Ref<jnipp::Array<JavaLangString>>& a0) const {
    static jnipp::Method<JavaUtilMap,jnipp::Array<JavaLangString>> method(clazz(), "getHeaders", "([Ljava/lang/String;)Ljava/util/Map;");
    return method.call(*this, a0);
}

// public synchronized java.lang.String sun.net.www.MessageHeader.findNextValue(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> SunNetWwwMessageHeader::findNextValue(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangString,JavaLangString,JavaLangString> method(clazz(), "findNextValue", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public boolean sun.net.www.MessageHeader.filterNTLMResponses(java.lang.String)
jboolean SunNetWwwMessageHeader::filterNTLMResponses(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jboolean,JavaLangString> method(clazz(), "filterNTLMResponses", "(Ljava/lang/String;)Z");
    return method.call(*this, a0);
}

// public java.util.Iterator sun.net.www.MessageHeader.multiValueIterator(java.lang.String)
jnipp::LocalRef<JavaUtilIterator> SunNetWwwMessageHeader::multiValueIterator(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilIterator,JavaLangString> method(clazz(), "multiValueIterator", "(Ljava/lang/String;)Ljava/util/Iterator;");
    return method.call(*this, a0);
}

// public synchronized java.util.Map sun.net.www.MessageHeader.filterAndAddHeaders(java.lang.String[],java.util.Map)
jnipp::LocalRef<JavaUtilMap> SunNetWwwMessageHeader::filterAndAddHeaders(const jnipp::Ref<jnipp::Array<JavaLangString>>& a0, const jnipp::Ref<JavaUtilMap>& a1) const {
    static jnipp::Method<JavaUtilMap,jnipp::Array<JavaLangString>,JavaUtilMap> method(clazz(), "filterAndAddHeaders", "([Ljava/lang/String;Ljava/util/Map;)Ljava/util/Map;");
    return method.call(*this, a0, a1);
}

// public synchronized void sun.net.www.MessageHeader.prepend(java.lang.String,java.lang.String)
void SunNetWwwMessageHeader::prepend(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangString> method(clazz(), "prepend", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public synchronized void sun.net.www.MessageHeader.setIfNotSet(java.lang.String,java.lang.String)
void SunNetWwwMessageHeader::setIfNotSet(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangString> method(clazz(), "setIfNotSet", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public static java.lang.String sun.net.www.MessageHeader.canonicalID(java.lang.String)
jnipp::LocalRef<JavaLangString> SunNetWwwMessageHeader::canonicalID(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "canonicalID", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// public void sun.net.www.MessageHeader.parseHeader(java.io.InputStream) throws java.io.IOException
void SunNetWwwMessageHeader::parseHeader(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<void,JavaIoInputStream> method(clazz(), "parseHeader", "(Ljava/io/InputStream;)V");
    method.call(*this, a0);
}

// public void sun.net.www.MessageHeader.mergeHeader(java.io.InputStream) throws java.io.IOException
void SunNetWwwMessageHeader::mergeHeader(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<void,JavaIoInputStream> method(clazz(), "mergeHeader", "(Ljava/io/InputStream;)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetContentHandlerFactory::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/ContentHandlerFactory"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetContentHandler::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/ContentHandler"));
    return cls;
}

// public java.net.ContentHandler()
jnipp::LocalRef<JavaNetContentHandler> JavaNetContentHandler::construct() {
    static jnipp::Constructor<JavaNetContentHandler> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Object java.net.ContentHandler.getContent(java.net.URLConnection,java.lang.Class[]) throws java.io.IOException
jnipp::LocalRef<JavaLangObject> JavaNetContentHandler::getContent(const jnipp::Ref<JavaNetURLConnection>& a0, const jnipp::Ref<jnipp::Array<JavaLangClass>>& a1) const {
    static jnipp::Method<JavaLangObject,JavaNetURLConnection,jnipp::Array<JavaLangClass>> method(clazz(), "getContent", "(Ljava/net/URLConnection;[Ljava/lang/Class;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeFloatSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/FloatSignature"));
    return cls;
}

// private sun.reflect.generics.tree.FloatSignature()
jnipp::LocalRef<SunReflectGenericsTreeFloatSignature> SunReflectGenericsTreeFloatSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeFloatSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.FloatSignature sun.reflect.generics.tree.FloatSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeFloatSignature> SunReflectGenericsTreeFloatSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeFloatSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/FloatSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.FloatSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeFloatSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeFloatSignature> SunReflectGenericsTreeFloatSignature::singleton ("sun/reflect/generics/tree/FloatSignature", "singleton", "Lsun/reflect/generics/tree/FloatSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeTypeVariableSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/TypeVariableSignature"));
    return cls;
}

// private sun.reflect.generics.tree.TypeVariableSignature(java.lang.String)
jnipp::LocalRef<SunReflectGenericsTreeTypeVariableSignature> SunReflectGenericsTreeTypeVariableSignature::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<SunReflectGenericsTreeTypeVariableSignature,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public static sun.reflect.generics.tree.TypeVariableSignature sun.reflect.generics.tree.TypeVariableSignature.make(java.lang.String)
jnipp::LocalRef<SunReflectGenericsTreeTypeVariableSignature> SunReflectGenericsTreeTypeVariableSignature::make(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<SunReflectGenericsTreeTypeVariableSignature,JavaLangString> method(clazz(), "make", "(Ljava/lang/String;)Lsun/reflect/generics/tree/TypeVariableSignature;");
    return method.call(a0);
}

// public void sun.reflect.generics.tree.TypeVariableSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeTypeVariableSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}

// public java.lang.String sun.reflect.generics.tree.TypeVariableSignature.getIdentifier()
jnipp::LocalRef<JavaLangString> SunReflectGenericsTreeTypeVariableSignature::getIdentifier() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getIdentifier", "()Ljava/lang/String;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeDoubleSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/DoubleSignature"));
    return cls;
}

// private sun.reflect.generics.tree.DoubleSignature()
jnipp::LocalRef<SunReflectGenericsTreeDoubleSignature> SunReflectGenericsTreeDoubleSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeDoubleSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.DoubleSignature sun.reflect.generics.tree.DoubleSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeDoubleSignature> SunReflectGenericsTreeDoubleSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeDoubleSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/DoubleSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.DoubleSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeDoubleSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeDoubleSignature> SunReflectGenericsTreeDoubleSignature::singleton ("sun/reflect/generics/tree/DoubleSignature", "singleton", "Lsun/reflect/generics/tree/DoubleSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeTypeArgument::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/TypeArgument"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeSimpleClassTypeSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/SimpleClassTypeSignature"));
    return cls;
}

// private sun.reflect.generics.tree.SimpleClassTypeSignature(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])
jnipp::LocalRef<SunReflectGenericsTreeSimpleClassTypeSignature> SunReflectGenericsTreeSimpleClassTypeSignature::construct(const jnipp::Ref<JavaLangString>& a0, jboolean a1, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeTypeArgument>>& a2) {
    static jnipp::Constructor<SunReflectGenericsTreeSimpleClassTypeSignature,JavaLangString,jboolean,jnipp::Array<SunReflectGenericsTreeTypeArgument>> constructor(clazz(), "(Ljava/lang/String;Z[Lsun/reflect/generics/tree/TypeArgument;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.lang.String sun.reflect.generics.tree.SimpleClassTypeSignature.getName()
jnipp::LocalRef<JavaLangString> SunReflectGenericsTreeSimpleClassTypeSignature::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static sun.reflect.generics.tree.SimpleClassTypeSignature sun.reflect.generics.tree.SimpleClassTypeSignature.make(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])
jnipp::LocalRef<SunReflectGenericsTreeSimpleClassTypeSignature> SunReflectGenericsTreeSimpleClassTypeSignature::make(const jnipp::Ref<JavaLangString>& a0, jboolean a1, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeTypeArgument>>& a2) {
    static jnipp::StaticMethod<SunReflectGenericsTreeSimpleClassTypeSignature,JavaLangString,jboolean,jnipp::Array<SunReflectGenericsTreeTypeArgument>> method(clazz(), "make", "(Ljava/lang/String;Z[Lsun/reflect/generics/tree/TypeArgument;)Lsun/reflect/generics/tree/SimpleClassTypeSignature;");
    return method.call(a0, a1, a2);
}

// public void sun.reflect.generics.tree.SimpleClassTypeSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeSimpleClassTypeSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}

// public boolean sun.reflect.generics.tree.SimpleClassTypeSignature.getDollar()
jboolean SunReflectGenericsTreeSimpleClassTypeSignature::getDollar() const {
    static jnipp::Method<jboolean> method(clazz(), "getDollar", "()Z");
    return method.call(*this);
}

// public sun.reflect.generics.tree.TypeArgument[] sun.reflect.generics.tree.SimpleClassTypeSignature.getTypeArguments()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeTypeArgument>> SunReflectGenericsTreeSimpleClassTypeSignature::getTypeArguments() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeTypeArgument>> method(clazz(), "getTypeArguments", "()[Lsun/reflect/generics/tree/TypeArgument;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeBottomSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/BottomSignature"));
    return cls;
}

// private sun.reflect.generics.tree.BottomSignature()
jnipp::LocalRef<SunReflectGenericsTreeBottomSignature> SunReflectGenericsTreeBottomSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeBottomSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.BottomSignature sun.reflect.generics.tree.BottomSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeBottomSignature> SunReflectGenericsTreeBottomSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeBottomSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/BottomSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.BottomSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeBottomSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeBottomSignature> SunReflectGenericsTreeBottomSignature::singleton ("sun/reflect/generics/tree/BottomSignature", "singleton", "Lsun/reflect/generics/tree/BottomSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeIntSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/IntSignature"));
    return cls;
}

// private sun.reflect.generics.tree.IntSignature()
jnipp::LocalRef<SunReflectGenericsTreeIntSignature> SunReflectGenericsTreeIntSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeIntSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.IntSignature sun.reflect.generics.tree.IntSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeIntSignature> SunReflectGenericsTreeIntSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeIntSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/IntSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.IntSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeIntSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeIntSignature> SunReflectGenericsTreeIntSignature::singleton ("sun/reflect/generics/tree/IntSignature", "singleton", "Lsun/reflect/generics/tree/IntSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeWildcard::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/Wildcard"));
    return cls;
}

// private sun.reflect.generics.tree.Wildcard(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])
jnipp::LocalRef<SunReflectGenericsTreeWildcard> SunReflectGenericsTreeWildcard::construct(const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>>& a0, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>>& a1) {
    static jnipp::Constructor<SunReflectGenericsTreeWildcard,jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>,jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> constructor(clazz(), "([Lsun/reflect/generics/tree/FieldTypeSignature;[Lsun/reflect/generics/tree/FieldTypeSignature;)V");
    return constructor.construct(a0, a1);
}

// public static sun.reflect.generics.tree.Wildcard sun.reflect.generics.tree.Wildcard.make(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])
jnipp::LocalRef<SunReflectGenericsTreeWildcard> SunReflectGenericsTreeWildcard::make(const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>>& a0, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>>& a1) {
    static jnipp::StaticMethod<SunReflectGenericsTreeWildcard,jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>,jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> method(clazz(), "make", "([Lsun/reflect/generics/tree/FieldTypeSignature;[Lsun/reflect/generics/tree/FieldTypeSignature;)Lsun/reflect/generics/tree/Wildcard;");
    return method.call(a0, a1);
}

// public void sun.reflect.generics.tree.Wildcard.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeWildcard::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}

// public sun.reflect.generics.tree.FieldTypeSignature[] sun.reflect.generics.tree.Wildcard.getUpperBounds()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> SunReflectGenericsTreeWildcard::getUpperBounds() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> method(clazz(), "getUpperBounds", "()[Lsun/reflect/generics/tree/FieldTypeSignature;");
    return method.call(*this);
}

// public sun.reflect.generics.tree.FieldTypeSignature[] sun.reflect.generics.tree.Wildcard.getLowerBounds()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> SunReflectGenericsTreeWildcard::getLowerBounds() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> method(clazz(), "getLowerBounds", "()[Lsun/reflect/generics/tree/FieldTypeSignature;");
    return method.call(*this);
}
#undef emptyBounds
const jnipp::StaticField<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> SunReflectGenericsTreeWildcard::emptyBounds ("sun/reflect/generics/tree/Wildcard", "emptyBounds", "[Lsun/reflect/generics/tree/FieldTypeSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeShortSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/ShortSignature"));
    return cls;
}

// private sun.reflect.generics.tree.ShortSignature()
jnipp::LocalRef<SunReflectGenericsTreeShortSignature> SunReflectGenericsTreeShortSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeShortSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.ShortSignature sun.reflect.generics.tree.ShortSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeShortSignature> SunReflectGenericsTreeShortSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeShortSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/ShortSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.ShortSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeShortSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeShortSignature> SunReflectGenericsTreeShortSignature::singleton ("sun/reflect/generics/tree/ShortSignature", "singleton", "Lsun/reflect/generics/tree/ShortSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeFormalTypeParameter::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/FormalTypeParameter"));
    return cls;
}

// private sun.reflect.generics.tree.FormalTypeParameter(java.lang.String,sun.reflect.generics.tree.FieldTypeSignature[])
jnipp::LocalRef<SunReflectGenericsTreeFormalTypeParameter> SunReflectGenericsTreeFormalTypeParameter::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>>& a1) {
    static jnipp::Constructor<SunReflectGenericsTreeFormalTypeParameter,JavaLangString,jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> constructor(clazz(), "(Ljava/lang/String;[Lsun/reflect/generics/tree/FieldTypeSignature;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String sun.reflect.generics.tree.FormalTypeParameter.getName()
jnipp::LocalRef<JavaLangString> SunReflectGenericsTreeFormalTypeParameter::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static sun.reflect.generics.tree.FormalTypeParameter sun.reflect.generics.tree.FormalTypeParameter.make(java.lang.String,sun.reflect.generics.tree.FieldTypeSignature[])
jnipp::LocalRef<SunReflectGenericsTreeFormalTypeParameter> SunReflectGenericsTreeFormalTypeParameter::make(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>>& a1) {
    static jnipp::StaticMethod<SunReflectGenericsTreeFormalTypeParameter,JavaLangString,jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> method(clazz(), "make", "(Ljava/lang/String;[Lsun/reflect/generics/tree/FieldTypeSignature;)Lsun/reflect/generics/tree/FormalTypeParameter;");
    return method.call(a0, a1);
}

// public void sun.reflect.generics.tree.FormalTypeParameter.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeFormalTypeParameter::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}

// public sun.reflect.generics.tree.FieldTypeSignature[] sun.reflect.generics.tree.FormalTypeParameter.getBounds()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> SunReflectGenericsTreeFormalTypeParameter::getBounds() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> method(clazz(), "getBounds", "()[Lsun/reflect/generics/tree/FieldTypeSignature;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeCharSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/CharSignature"));
    return cls;
}

// private sun.reflect.generics.tree.CharSignature()
jnipp::LocalRef<SunReflectGenericsTreeCharSignature> SunReflectGenericsTreeCharSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeCharSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.CharSignature sun.reflect.generics.tree.CharSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeCharSignature> SunReflectGenericsTreeCharSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeCharSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/CharSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.CharSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeCharSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeCharSignature> SunReflectGenericsTreeCharSignature::singleton ("sun/reflect/generics/tree/CharSignature", "singleton", "Lsun/reflect/generics/tree/CharSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeClassTypeSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/ClassTypeSignature"));
    return cls;
}

// private sun.reflect.generics.tree.ClassTypeSignature(java.util.List)
jnipp::LocalRef<SunReflectGenericsTreeClassTypeSignature> SunReflectGenericsTreeClassTypeSignature::construct(const jnipp::Ref<JavaUtilList>& a0) {
    static jnipp::Constructor<SunReflectGenericsTreeClassTypeSignature,JavaUtilList> constructor(clazz(), "(Ljava/util/List;)V");
    return constructor.construct(a0);
}

// public static sun.reflect.generics.tree.ClassTypeSignature sun.reflect.generics.tree.ClassTypeSignature.make(java.util.List)
jnipp::LocalRef<SunReflectGenericsTreeClassTypeSignature> SunReflectGenericsTreeClassTypeSignature::make(const jnipp::Ref<JavaUtilList>& a0) {
    static jnipp::StaticMethod<SunReflectGenericsTreeClassTypeSignature,JavaUtilList> method(clazz(), "make", "(Ljava/util/List;)Lsun/reflect/generics/tree/ClassTypeSignature;");
    return method.call(a0);
}

// public java.util.List sun.reflect.generics.tree.ClassTypeSignature.getPath()
jnipp::LocalRef<JavaUtilList> SunReflectGenericsTreeClassTypeSignature::getPath() const {
    static jnipp::Method<JavaUtilList> method(clazz(), "getPath", "()Ljava/util/List;");
    return method.call(*this);
}

// public void sun.reflect.generics.tree.ClassTypeSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeClassTypeSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeBooleanSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/BooleanSignature"));
    return cls;
}

// private sun.reflect.generics.tree.BooleanSignature()
jnipp::LocalRef<SunReflectGenericsTreeBooleanSignature> SunReflectGenericsTreeBooleanSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeBooleanSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.BooleanSignature sun.reflect.generics.tree.BooleanSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeBooleanSignature> SunReflectGenericsTreeBooleanSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeBooleanSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/BooleanSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.BooleanSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeBooleanSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeBooleanSignature> SunReflectGenericsTreeBooleanSignature::singleton ("sun/reflect/generics/tree/BooleanSignature", "singleton", "Lsun/reflect/generics/tree/BooleanSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeArrayTypeSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/ArrayTypeSignature"));
    return cls;
}

// private sun.reflect.generics.tree.ArrayTypeSignature(sun.reflect.generics.tree.TypeSignature)
jnipp::LocalRef<SunReflectGenericsTreeArrayTypeSignature> SunReflectGenericsTreeArrayTypeSignature::construct(const jnipp::Ref<SunReflectGenericsTreeTypeSignature>& a0) {
    static jnipp::Constructor<SunReflectGenericsTreeArrayTypeSignature,SunReflectGenericsTreeTypeSignature> constructor(clazz(), "(Lsun/reflect/generics/tree/TypeSignature;)V");
    return constructor.construct(a0);
}

// public sun.reflect.generics.tree.TypeSignature sun.reflect.generics.tree.ArrayTypeSignature.getComponentType()
jnipp::LocalRef<SunReflectGenericsTreeTypeSignature> SunReflectGenericsTreeArrayTypeSignature::getComponentType() const {
    static jnipp::Method<SunReflectGenericsTreeTypeSignature> method(clazz(), "getComponentType", "()Lsun/reflect/generics/tree/TypeSignature;");
    return method.call(*this);
}

// public static sun.reflect.generics.tree.ArrayTypeSignature sun.reflect.generics.tree.ArrayTypeSignature.make(sun.reflect.generics.tree.TypeSignature)
jnipp::LocalRef<SunReflectGenericsTreeArrayTypeSignature> SunReflectGenericsTreeArrayTypeSignature::make(const jnipp::Ref<SunReflectGenericsTreeTypeSignature>& a0) {
    static jnipp::StaticMethod<SunReflectGenericsTreeArrayTypeSignature,SunReflectGenericsTreeTypeSignature> method(clazz(), "make", "(Lsun/reflect/generics/tree/TypeSignature;)Lsun/reflect/generics/tree/ArrayTypeSignature;");
    return method.call(a0);
}

// public void sun.reflect.generics.tree.ArrayTypeSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeArrayTypeSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeByteSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/ByteSignature"));
    return cls;
}

// private sun.reflect.generics.tree.ByteSignature()
jnipp::LocalRef<SunReflectGenericsTreeByteSignature> SunReflectGenericsTreeByteSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeByteSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.ByteSignature sun.reflect.generics.tree.ByteSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeByteSignature> SunReflectGenericsTreeByteSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeByteSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/ByteSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.ByteSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeByteSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeByteSignature> SunReflectGenericsTreeByteSignature::singleton ("sun/reflect/generics/tree/ByteSignature", "singleton", "Lsun/reflect/generics/tree/ByteSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeLongSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/LongSignature"));
    return cls;
}

// private sun.reflect.generics.tree.LongSignature()
jnipp::LocalRef<SunReflectGenericsTreeLongSignature> SunReflectGenericsTreeLongSignature::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeLongSignature> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.LongSignature sun.reflect.generics.tree.LongSignature.make()
jnipp::LocalRef<SunReflectGenericsTreeLongSignature> SunReflectGenericsTreeLongSignature::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeLongSignature> method(clazz(), "make", "()Lsun/reflect/generics/tree/LongSignature;");
    return method.call();
}

// public void sun.reflect.generics.tree.LongSignature.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeLongSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeLongSignature> SunReflectGenericsTreeLongSignature::singleton ("sun/reflect/generics/tree/LongSignature", "singleton", "Lsun/reflect/generics/tree/LongSignature;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeVoidDescriptor::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/VoidDescriptor"));
    return cls;
}

// private sun.reflect.generics.tree.VoidDescriptor()
jnipp::LocalRef<SunReflectGenericsTreeVoidDescriptor> SunReflectGenericsTreeVoidDescriptor::construct() {
    static jnipp::Constructor<SunReflectGenericsTreeVoidDescriptor> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.reflect.generics.tree.VoidDescriptor sun.reflect.generics.tree.VoidDescriptor.make()
jnipp::LocalRef<SunReflectGenericsTreeVoidDescriptor> SunReflectGenericsTreeVoidDescriptor::make() {
    static jnipp::StaticMethod<SunReflectGenericsTreeVoidDescriptor> method(clazz(), "make", "()Lsun/reflect/generics/tree/VoidDescriptor;");
    return method.call();
}

// public void sun.reflect.generics.tree.VoidDescriptor.accept(sun.reflect.generics.visitor.TypeTreeVisitor)
void SunReflectGenericsTreeVoidDescriptor::accept(const jnipp::Ref<SunReflectGenericsVisitorTypeTreeVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorTypeTreeVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/TypeTreeVisitor;)V");
    method.call(*this, a0);
}
#undef singleton
jnipp::StaticField<SunReflectGenericsTreeVoidDescriptor> SunReflectGenericsTreeVoidDescriptor::singleton ("sun/reflect/generics/tree/VoidDescriptor", "singleton", "Lsun/reflect/generics/tree/VoidDescriptor;");
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsVisitorVisitor::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/visitor/Visitor"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClassValue_Version::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ClassValue$Version"));
    return cls;
}

// java.lang.ClassValue$Version(java.lang.ClassValue)
jnipp::LocalRef<JavaLangClassValue_Version> JavaLangClassValue_Version::construct(const jnipp::Ref<JavaLangClassValue>& a0) {
    static jnipp::Constructor<JavaLangClassValue_Version,JavaLangClassValue> constructor(clazz(), "(Ljava/lang/ClassValue;)V");
    return constructor.construct(a0);
}

// java.lang.ClassValue java.lang.ClassValue$Version.classValue()
jnipp::LocalRef<JavaLangClassValue> JavaLangClassValue_Version::classValue() const {
    static jnipp::Method<JavaLangClassValue> method(clazz(), "classValue", "()Ljava/lang/ClassValue;");
    return method.call(*this);
}

// java.lang.ClassValue$Entry java.lang.ClassValue$Version.promise()
jnipp::LocalRef<JavaLangClassValue_Entry> JavaLangClassValue_Version::promise() const {
    static jnipp::Method<JavaLangClassValue_Entry> method(clazz(), "promise", "()Ljava/lang/ClassValue$Entry;");
    return method.call(*this);
}

// boolean java.lang.ClassValue$Version.isLive()
jboolean JavaLangClassValue_Version::isLive() const {
    static jnipp::Method<jboolean> method(clazz(), "isLive", "()Z");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaLangClassValue_Identity::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ClassValue$Identity"));
    return cls;
}

// java.lang.ClassValue$Identity()
jnipp::LocalRef<JavaLangClassValue_Identity> JavaLangClassValue_Identity::construct() {
    static jnipp::Constructor<JavaLangClassValue_Identity> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilJarAttributes::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/jar/Attributes"));
    return cls;
}

// public java.util.jar.Attributes(java.util.jar.Attributes)
jnipp::LocalRef<JavaUtilJarAttributes> JavaUtilJarAttributes::construct(const jnipp::Ref<JavaUtilJarAttributes>& a0) {
    static jnipp::Constructor<JavaUtilJarAttributes,JavaUtilJarAttributes> constructor(clazz(), "(Ljava/util/jar/Attributes;)V");
    return constructor.construct(a0);
}

// public java.util.jar.Attributes(int)
jnipp::LocalRef<JavaUtilJarAttributes> JavaUtilJarAttributes::construct(jint a0) {
    static jnipp::Constructor<JavaUtilJarAttributes,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.util.jar.Attributes()
jnipp::LocalRef<JavaUtilJarAttributes> JavaUtilJarAttributes::construct() {
    static jnipp::Constructor<JavaUtilJarAttributes> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Object java.util.jar.Attributes.remove(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilJarAttributes::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.jar.Attributes.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilJarAttributes::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilJarAttributes::put(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public boolean java.util.jar.Attributes.equals(java.lang.Object)
jboolean JavaUtilJarAttributes::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public java.util.Collection java.util.jar.Attributes.values()
jnipp::LocalRef<JavaUtilCollection> JavaUtilJarAttributes::values() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "values", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public int java.util.jar.Attributes.hashCode()
jint JavaUtilJarAttributes::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object java.util.jar.Attributes.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilJarAttributes::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public void java.util.jar.Attributes.clear()
void JavaUtilJarAttributes::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public boolean java.util.jar.Attributes.isEmpty()
jboolean JavaUtilJarAttributes::isEmpty() const {
    static jnipp::Method<jboolean> method(clazz(), "isEmpty", "()Z");
    return method.call(*this);
}

// public java.lang.String java.util.jar.Attributes.getValue(java.util.jar.Attributes$Name)
jnipp::LocalRef<JavaLangString> JavaUtilJarAttributes::getValue(const jnipp::Ref<JavaUtilJarAttributes_Name>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilJarAttributes_Name> method(clazz(), "getValue", "(Ljava/util/jar/Attributes$Name;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.util.jar.Attributes.getValue(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilJarAttributes::getValue(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getValue", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public int java.util.jar.Attributes.size()
jint JavaUtilJarAttributes::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public java.util.Set java.util.jar.Attributes.entrySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilJarAttributes::entrySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "entrySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public void java.util.jar.Attributes.putAll(java.util.Map)
void JavaUtilJarAttributes::putAll(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "putAll", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// void java.util.jar.Attributes.write(java.io.DataOutputStream) throws java.io.IOException
void JavaUtilJarAttributes::write(const jnipp::Ref<JavaIoDataOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoDataOutputStream> method(clazz(), "write", "(Ljava/io/DataOutputStream;)V");
    method.call(*this, a0);
}

// public java.util.Set java.util.jar.Attributes.keySet()
jnipp::LocalRef<JavaUtilSet> JavaUtilJarAttributes::keySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "keySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public boolean java.util.jar.Attributes.containsValue(java.lang.Object)
jboolean JavaUtilJarAttributes::containsValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsValue", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.jar.Attributes.containsKey(java.lang.Object)
jboolean JavaUtilJarAttributes::containsKey(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsKey", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// void java.util.jar.Attributes.read(java.util.jar.Manifest$FastInputStream,byte[]) throws java.io.IOException
void JavaUtilJarAttributes::read(const jnipp::Ref<JavaUtilJarManifest_FastInputStream>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) const {
    static jnipp::Method<void,JavaUtilJarManifest_FastInputStream,jnipp::Array<jbyte>> method(clazz(), "read", "(Ljava/util/jar/Manifest$FastInputStream;[B)V");
    method.call(*this, a0, a1);
}

// void java.util.jar.Attributes.writeMain(java.io.DataOutputStream) throws java.io.IOException
void JavaUtilJarAttributes::writeMain(const jnipp::Ref<JavaIoDataOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoDataOutputStream> method(clazz(), "writeMain", "(Ljava/io/DataOutputStream;)V");
    method.call(*this, a0);
}

// public java.lang.String java.util.jar.Attributes.putValue(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilJarAttributes::putValue(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangString,JavaLangString,JavaLangString> method(clazz(), "putValue", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeMethodTypeSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/MethodTypeSignature"));
    return cls;
}

// private sun.reflect.generics.tree.MethodTypeSignature(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.TypeSignature[],sun.reflect.generics.tree.ReturnType,sun.reflect.generics.tree.FieldTypeSignature[])
jnipp::LocalRef<SunReflectGenericsTreeMethodTypeSignature> SunReflectGenericsTreeMethodTypeSignature::construct(const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>>& a0, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeTypeSignature>>& a1, const jnipp::Ref<SunReflectGenericsTreeReturnType>& a2, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>>& a3) {
    static jnipp::Constructor<SunReflectGenericsTreeMethodTypeSignature,jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>,jnipp::Array<SunReflectGenericsTreeTypeSignature>,SunReflectGenericsTreeReturnType,jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> constructor(clazz(), "([Lsun/reflect/generics/tree/FormalTypeParameter;[Lsun/reflect/generics/tree/TypeSignature;Lsun/reflect/generics/tree/ReturnType;[Lsun/reflect/generics/tree/FieldTypeSignature;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public static sun.reflect.generics.tree.MethodTypeSignature sun.reflect.generics.tree.MethodTypeSignature.make(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.TypeSignature[],sun.reflect.generics.tree.ReturnType,sun.reflect.generics.tree.FieldTypeSignature[])
jnipp::LocalRef<SunReflectGenericsTreeMethodTypeSignature> SunReflectGenericsTreeMethodTypeSignature::make(const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>>& a0, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeTypeSignature>>& a1, const jnipp::Ref<SunReflectGenericsTreeReturnType>& a2, const jnipp::Ref<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>>& a3) {
    static jnipp::StaticMethod<SunReflectGenericsTreeMethodTypeSignature,jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>,jnipp::Array<SunReflectGenericsTreeTypeSignature>,SunReflectGenericsTreeReturnType,jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> method(clazz(), "make", "([Lsun/reflect/generics/tree/FormalTypeParameter;[Lsun/reflect/generics/tree/TypeSignature;Lsun/reflect/generics/tree/ReturnType;[Lsun/reflect/generics/tree/FieldTypeSignature;)Lsun/reflect/generics/tree/MethodTypeSignature;");
    return method.call(a0, a1, a2, a3);
}

// public sun.reflect.generics.tree.ReturnType sun.reflect.generics.tree.MethodTypeSignature.getReturnType()
jnipp::LocalRef<SunReflectGenericsTreeReturnType> SunReflectGenericsTreeMethodTypeSignature::getReturnType() const {
    static jnipp::Method<SunReflectGenericsTreeReturnType> method(clazz(), "getReturnType", "()Lsun/reflect/generics/tree/ReturnType;");
    return method.call(*this);
}

// public sun.reflect.generics.tree.TypeSignature[] sun.reflect.generics.tree.MethodTypeSignature.getParameterTypes()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeTypeSignature>> SunReflectGenericsTreeMethodTypeSignature::getParameterTypes() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeTypeSignature>> method(clazz(), "getParameterTypes", "()[Lsun/reflect/generics/tree/TypeSignature;");
    return method.call(*this);
}

// public sun.reflect.generics.tree.FieldTypeSignature[] sun.reflect.generics.tree.MethodTypeSignature.getExceptionTypes()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> SunReflectGenericsTreeMethodTypeSignature::getExceptionTypes() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeFieldTypeSignature>> method(clazz(), "getExceptionTypes", "()[Lsun/reflect/generics/tree/FieldTypeSignature;");
    return method.call(*this);
}

// public void sun.reflect.generics.tree.MethodTypeSignature.accept(sun.reflect.generics.visitor.Visitor)
void SunReflectGenericsTreeMethodTypeSignature::accept(const jnipp::Ref<SunReflectGenericsVisitorVisitor>& a0) const {
    static jnipp::Method<void,SunReflectGenericsVisitorVisitor> method(clazz(), "accept", "(Lsun/reflect/generics/visitor/Visitor;)V");
    method.call(*this, a0);
}

// public sun.reflect.generics.tree.FormalTypeParameter[] sun.reflect.generics.tree.MethodTypeSignature.getFormalTypeParameters()
jnipp::LocalRef<jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>> SunReflectGenericsTreeMethodTypeSignature::getFormalTypeParameters() const {
    static jnipp::Method<jnipp::Array<SunReflectGenericsTreeFormalTypeParameter>> method(clazz(), "getFormalTypeParameters", "()[Lsun/reflect/generics/tree/FormalTypeParameter;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaMathBigInteger::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/math/BigInteger"));
    return cls;
}

// java.math.BigInteger(int[],int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1) {
    static jnipp::Constructor<JavaMathBigInteger,jnipp::Array<jint>,jint> constructor(clazz(), "([II)V");
    return constructor.construct(a0, a1);
}

// private java.math.BigInteger(long)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(jlong a0) {
    static jnipp::Constructor<JavaMathBigInteger,jlong> constructor(clazz(), "(J)V");
    return constructor.construct(a0);
}

// public java.math.BigInteger(java.lang.String)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaMathBigInteger,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.math.BigInteger(int,java.util.Random)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(jint a0, const jnipp::Ref<JavaUtilRandom>& a1) {
    static jnipp::Constructor<JavaMathBigInteger,jint,JavaUtilRandom> constructor(clazz(), "(ILjava/util/Random;)V");
    return constructor.construct(a0, a1);
}

// private java.math.BigInteger(byte[],int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1) {
    static jnipp::Constructor<JavaMathBigInteger,jnipp::Array<jbyte>,jint> constructor(clazz(), "([BI)V");
    return constructor.construct(a0, a1);
}

// public java.math.BigInteger(int,int,java.util.Random)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(jint a0, jint a1, const jnipp::Ref<JavaUtilRandom>& a2) {
    static jnipp::Constructor<JavaMathBigInteger,jint,jint,JavaUtilRandom> constructor(clazz(), "(IILjava/util/Random;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.math.BigInteger(byte[])
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::Constructor<JavaMathBigInteger,jnipp::Array<jbyte>> constructor(clazz(), "([B)V");
    return constructor.construct(a0);
}

// private java.math.BigInteger(int[])
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(const jnipp::Ref<jnipp::Array<jint>>& a0) {
    static jnipp::Constructor<JavaMathBigInteger,jnipp::Array<jint>> constructor(clazz(), "([I)V");
    return constructor.construct(a0);
}

// public java.math.BigInteger(int,byte[])
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(jint a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) {
    static jnipp::Constructor<JavaMathBigInteger,jint,jnipp::Array<jbyte>> constructor(clazz(), "(I[B)V");
    return constructor.construct(a0, a1);
}

// java.math.BigInteger(char[])
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(const jnipp::Ref<jnipp::Array<jchar>>& a0) {
    static jnipp::Constructor<JavaMathBigInteger,jnipp::Array<jchar>> constructor(clazz(), "([C)V");
    return constructor.construct(a0);
}

// public java.math.BigInteger(java.lang.String,int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaMathBigInteger,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// private java.math.BigInteger(int,int[])
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::construct(jint a0, const jnipp::Ref<jnipp::Array<jint>>& a1) {
    static jnipp::Constructor<JavaMathBigInteger,jint,jnipp::Array<jint>> constructor(clazz(), "(I[I)V");
    return constructor.construct(a0, a1);
}

// private static int[] java.math.BigInteger.add(int[],int[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::add(const jnipp::Ref<jnipp::Array<jint>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jint>,jnipp::Array<jint>> method(clazz(), "add", "([I[I)[I");
    return method.call(a0, a1);
}

// public java.math.BigInteger java.math.BigInteger.add(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::add(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "add", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public int java.math.BigInteger.bitCount()
jint JavaMathBigInteger::bitCount() const {
    static jnipp::Method<jint> method(clazz(), "bitCount", "()I");
    return method.call(*this);
}

// public boolean java.math.BigInteger.equals(java.lang.Object)
jboolean JavaMathBigInteger::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.math.BigInteger.hashCode()
jint JavaMathBigInteger::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.math.BigInteger java.math.BigInteger.abs()
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::abs() const {
    static jnipp::Method<JavaMathBigInteger> method(clazz(), "abs", "()Ljava/math/BigInteger;");
    return method.call(*this);
}

// public java.math.BigInteger java.math.BigInteger.pow(int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::pow(jint a0) const {
    static jnipp::Method<JavaMathBigInteger,jint> method(clazz(), "pow", "(I)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.min(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::min(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "min", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.max(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::max(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "max", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public int java.math.BigInteger.compareTo(java.math.BigInteger)
jint JavaMathBigInteger::compareTo(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<jint,JavaMathBigInteger> method(clazz(), "compareTo", "(Ljava/math/BigInteger;)I");
    return method.call(*this, a0);
}

// private int java.math.BigInteger.getInt(int)
jint JavaMathBigInteger::getInt(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "getInt", "(I)I");
    return method.call(*this, a0);
}

// public int java.math.BigInteger.intValue()
jint JavaMathBigInteger::intValue() const {
    static jnipp::Method<jint> method(clazz(), "intValue", "()I");
    return method.call(*this);
}

// public long java.math.BigInteger.longValue()
jlong JavaMathBigInteger::longValue() const {
    static jnipp::Method<jlong> method(clazz(), "longValue", "()J");
    return method.call(*this);
}

// public float java.math.BigInteger.floatValue()
jfloat JavaMathBigInteger::floatValue() const {
    static jnipp::Method<jfloat> method(clazz(), "floatValue", "()F");
    return method.call(*this);
}

// public double java.math.BigInteger.doubleValue()
jdouble JavaMathBigInteger::doubleValue() const {
    static jnipp::Method<jdouble> method(clazz(), "doubleValue", "()D");
    return method.call(*this);
}

// private static java.math.BigInteger java.math.BigInteger.valueOf(int[])
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::valueOf(const jnipp::Ref<jnipp::Array<jint>>& a0) {
    static jnipp::StaticMethod<JavaMathBigInteger,jnipp::Array<jint>> method(clazz(), "valueOf", "([I)Ljava/math/BigInteger;");
    return method.call(a0);
}

// public static java.math.BigInteger java.math.BigInteger.valueOf(long)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::valueOf(jlong a0) {
    static jnipp::StaticMethod<JavaMathBigInteger,jlong> method(clazz(), "valueOf", "(J)Ljava/math/BigInteger;");
    return method.call(a0);
}

// private void java.math.BigInteger.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaMathBigInteger::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.math.BigInteger.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaMathBigInteger::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// private int java.math.BigInteger.parseInt(char[],int,int)
jint JavaMathBigInteger::parseInt(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jchar>,jint,jint> method(clazz(), "parseInt", "([CII)I");
    return method.call(*this, a0, a1, a2);
}

// public int java.math.BigInteger.signum()
jint JavaMathBigInteger::signum() const {
    static jnipp::Method<jint> method(clazz(), "signum", "()I");
    return method.call(*this);
}

// public byte[] java.math.BigInteger.toByteArray()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaMathBigInteger::toByteArray() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "toByteArray", "()[B");
    return method.call(*this);
}

// public java.math.BigInteger java.math.BigInteger.and(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::and_(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "and", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.or(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::or_(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "or", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.xor(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::xor_(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "xor", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.andNot(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::andNot(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "andNot", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.not()
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::not_() const {
    static jnipp::Method<JavaMathBigInteger> method(clazz(), "not", "()Ljava/math/BigInteger;");
    return method.call(*this);
}

// public int java.math.BigInteger.bitLength()
jint JavaMathBigInteger::bitLength() const {
    static jnipp::Method<jint> method(clazz(), "bitLength", "()I");
    return method.call(*this);
}

// private static int java.math.BigInteger.bitLength(int[],int)
jint JavaMathBigInteger::bitLength(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1) {
    static jnipp::StaticMethod<jint,jnipp::Array<jint>,jint> method(clazz(), "bitLength", "([II)I");
    return method.call(a0, a1);
}

// private int java.math.BigInteger.firstNonzeroIntNum()
jint JavaMathBigInteger::firstNonzeroIntNum() const {
    static jnipp::Method<jint> method(clazz(), "firstNonzeroIntNum", "()I");
    return method.call(*this);
}

// private static void java.math.BigInteger.destructiveMulAdd(int[],int,int)
void JavaMathBigInteger::destructiveMulAdd(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<void,jnipp::Array<jint>,jint,jint> method(clazz(), "destructiveMulAdd", "([III)V");
    method.call(a0, a1, a2);
}

// private static byte[] java.math.BigInteger.randomBits(int,java.util.Random)
jnipp::LocalRef<jnipp::Array<jbyte>> JavaMathBigInteger::randomBits(jint a0, const jnipp::Ref<JavaUtilRandom>& a1) {
    static jnipp::StaticMethod<jnipp::Array<jbyte>,jint,JavaUtilRandom> method(clazz(), "randomBits", "(ILjava/util/Random;)[B");
    return method.call(a0, a1);
}

// public static java.math.BigInteger java.math.BigInteger.probablePrime(int,java.util.Random)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::probablePrime(jint a0, const jnipp::Ref<JavaUtilRandom>& a1) {
    static jnipp::StaticMethod<JavaMathBigInteger,jint,JavaUtilRandom> method(clazz(), "probablePrime", "(ILjava/util/Random;)Ljava/math/BigInteger;");
    return method.call(a0, a1);
}

// private static java.math.BigInteger java.math.BigInteger.smallPrime(int,int,java.util.Random)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::smallPrime(jint a0, jint a1, const jnipp::Ref<JavaUtilRandom>& a2) {
    static jnipp::StaticMethod<JavaMathBigInteger,jint,jint,JavaUtilRandom> method(clazz(), "smallPrime", "(IILjava/util/Random;)Ljava/math/BigInteger;");
    return method.call(a0, a1, a2);
}

// private static java.math.BigInteger java.math.BigInteger.largePrime(int,int,java.util.Random)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::largePrime(jint a0, jint a1, const jnipp::Ref<JavaUtilRandom>& a2) {
    static jnipp::StaticMethod<JavaMathBigInteger,jint,jint,JavaUtilRandom> method(clazz(), "largePrime", "(IILjava/util/Random;)Ljava/math/BigInteger;");
    return method.call(a0, a1, a2);
}

// public java.math.BigInteger java.math.BigInteger.nextProbablePrime()
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::nextProbablePrime() const {
    static jnipp::Method<JavaMathBigInteger> method(clazz(), "nextProbablePrime", "()Ljava/math/BigInteger;");
    return method.call(*this);
}

// boolean java.math.BigInteger.primeToCertainty(int,java.util.Random)
jboolean JavaMathBigInteger::primeToCertainty(jint a0, const jnipp::Ref<JavaUtilRandom>& a1) const {
    static jnipp::Method<jboolean,jint,JavaUtilRandom> method(clazz(), "primeToCertainty", "(ILjava/util/Random;)Z");
    return method.call(*this, a0, a1);
}

// private boolean java.math.BigInteger.passesLucasLehmer()
jboolean JavaMathBigInteger::passesLucasLehmer() const {
    static jnipp::Method<jboolean> method(clazz(), "passesLucasLehmer", "()Z");
    return method.call(*this);
}

// private static int java.math.BigInteger.jacobiSymbol(int,java.math.BigInteger)
jint JavaMathBigInteger::jacobiSymbol(jint a0, const jnipp::Ref<JavaMathBigInteger>& a1) {
    static jnipp::StaticMethod<jint,jint,JavaMathBigInteger> method(clazz(), "jacobiSymbol", "(ILjava/math/BigInteger;)I");
    return method.call(a0, a1);
}

// private static java.math.BigInteger java.math.BigInteger.lucasLehmerSequence(int,java.math.BigInteger,java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::lucasLehmerSequence(jint a0, const jnipp::Ref<JavaMathBigInteger>& a1, const jnipp::Ref<JavaMathBigInteger>& a2) {
    static jnipp::StaticMethod<JavaMathBigInteger,jint,JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "lucasLehmerSequence", "(ILjava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(a0, a1, a2);
}

// private static java.util.Random java.math.BigInteger.getSecureRandom()
jnipp::LocalRef<JavaUtilRandom> JavaMathBigInteger::getSecureRandom() {
    static jnipp::StaticMethod<JavaUtilRandom> method(clazz(), "getSecureRandom", "()Ljava/util/Random;");
    return method.call();
}

// private boolean java.math.BigInteger.passesMillerRabin(int,java.util.Random)
jboolean JavaMathBigInteger::passesMillerRabin(jint a0, const jnipp::Ref<JavaUtilRandom>& a1) const {
    static jnipp::Method<jboolean,jint,JavaUtilRandom> method(clazz(), "passesMillerRabin", "(ILjava/util/Random;)Z");
    return method.call(*this, a0, a1);
}

// private static int[] java.math.BigInteger.subtract(int[],int[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::subtract(const jnipp::Ref<jnipp::Array<jint>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jint>,jnipp::Array<jint>> method(clazz(), "subtract", "([I[I)[I");
    return method.call(a0, a1);
}

// public java.math.BigInteger java.math.BigInteger.subtract(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::subtract(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "subtract", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.multiply(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::multiply(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "multiply", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// java.math.BigInteger java.math.BigInteger.multiply(long)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::multiply(jlong a0) const {
    static jnipp::Method<JavaMathBigInteger,jlong> method(clazz(), "multiply", "(J)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// private int[] java.math.BigInteger.multiplyToLen(int[],int,int[],int,int[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::multiplyToLen(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, const jnipp::Ref<jnipp::Array<jint>>& a2, jint a3, const jnipp::Ref<jnipp::Array<jint>>& a4) const {
    static jnipp::Method<jnipp::Array<jint>,jnipp::Array<jint>,jint,jnipp::Array<jint>,jint,jnipp::Array<jint>> method(clazz(), "multiplyToLen", "([II[II[I)[I");
    return method.call(*this, a0, a1, a2, a3, a4);
}

// private java.math.BigInteger java.math.BigInteger.square()
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::square() const {
    static jnipp::Method<JavaMathBigInteger> method(clazz(), "square", "()Ljava/math/BigInteger;");
    return method.call(*this);
}

// private static final int[] java.math.BigInteger.squareToLen(int[],int,int[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::squareToLen(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, const jnipp::Ref<jnipp::Array<jint>>& a2) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jint>,jint,jnipp::Array<jint>> method(clazz(), "squareToLen", "([II[I)[I");
    return method.call(a0, a1, a2);
}

// public java.math.BigInteger java.math.BigInteger.divide(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::divide(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "divide", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger[] java.math.BigInteger.divideAndRemainder(java.math.BigInteger)
jnipp::LocalRef<jnipp::Array<JavaMathBigInteger>> JavaMathBigInteger::divideAndRemainder(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<jnipp::Array<JavaMathBigInteger>,JavaMathBigInteger> method(clazz(), "divideAndRemainder", "(Ljava/math/BigInteger;)[Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.remainder(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::remainder(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "remainder", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.gcd(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::gcd(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "gcd", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// static int java.math.BigInteger.bitLengthForInt(int)
jint JavaMathBigInteger::bitLengthForInt(jint a0) {
    static jnipp::StaticMethod<jint,jint> method(clazz(), "bitLengthForInt", "(I)I");
    return method.call(a0);
}

// private static int[] java.math.BigInteger.leftShift(int[],int,int)
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::leftShift(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jint>,jint,jint> method(clazz(), "leftShift", "([III)[I");
    return method.call(a0, a1, a2);
}

// static void java.math.BigInteger.primitiveRightShift(int[],int,int)
void JavaMathBigInteger::primitiveRightShift(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<void,jnipp::Array<jint>,jint,jint> method(clazz(), "primitiveRightShift", "([III)V");
    method.call(a0, a1, a2);
}

// static void java.math.BigInteger.primitiveLeftShift(int[],int,int)
void JavaMathBigInteger::primitiveLeftShift(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<void,jnipp::Array<jint>,jint,jint> method(clazz(), "primitiveLeftShift", "([III)V");
    method.call(a0, a1, a2);
}

// public java.math.BigInteger java.math.BigInteger.negate()
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::negate() const {
    static jnipp::Method<JavaMathBigInteger> method(clazz(), "negate", "()Ljava/math/BigInteger;");
    return method.call(*this);
}

// public java.math.BigInteger java.math.BigInteger.mod(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::mod(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "mod", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.modPow(java.math.BigInteger,java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::modPow(const jnipp::Ref<JavaMathBigInteger>& a0, const jnipp::Ref<JavaMathBigInteger>& a1) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "modPow", "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0, a1);
}

// private java.math.BigInteger java.math.BigInteger.oddModPow(java.math.BigInteger,java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::oddModPow(const jnipp::Ref<JavaMathBigInteger>& a0, const jnipp::Ref<JavaMathBigInteger>& a1) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "oddModPow", "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0, a1);
}

// private static int[] java.math.BigInteger.montReduce(int[],int[],int,int)
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::montReduce(const jnipp::Ref<jnipp::Array<jint>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1, jint a2, jint a3) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jint>,jnipp::Array<jint>,jint,jint> method(clazz(), "montReduce", "([I[III)[I");
    return method.call(a0, a1, a2, a3);
}

// private static int java.math.BigInteger.intArrayCmpToLen(int[],int[],int)
jint JavaMathBigInteger::intArrayCmpToLen(const jnipp::Ref<jnipp::Array<jint>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1, jint a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jint>,jnipp::Array<jint>,jint> method(clazz(), "intArrayCmpToLen", "([I[II)I");
    return method.call(a0, a1, a2);
}

// private static int java.math.BigInteger.subN(int[],int[],int)
jint JavaMathBigInteger::subN(const jnipp::Ref<jnipp::Array<jint>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1, jint a2) {
    static jnipp::StaticMethod<jint,jnipp::Array<jint>,jnipp::Array<jint>,jint> method(clazz(), "subN", "([I[II)I");
    return method.call(a0, a1, a2);
}

// static int java.math.BigInteger.mulAdd(int[],int[],int,int,int)
jint JavaMathBigInteger::mulAdd(const jnipp::Ref<jnipp::Array<jint>>& a0, const jnipp::Ref<jnipp::Array<jint>>& a1, jint a2, jint a3, jint a4) {
    static jnipp::StaticMethod<jint,jnipp::Array<jint>,jnipp::Array<jint>,jint,jint,jint> method(clazz(), "mulAdd", "([I[IIII)I");
    return method.call(a0, a1, a2, a3, a4);
}

// static int java.math.BigInteger.addOne(int[],int,int,int)
jint JavaMathBigInteger::addOne(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jint a2, jint a3) {
    static jnipp::StaticMethod<jint,jnipp::Array<jint>,jint,jint,jint> method(clazz(), "addOne", "([IIII)I");
    return method.call(a0, a1, a2, a3);
}

// private java.math.BigInteger java.math.BigInteger.modPow2(java.math.BigInteger,int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::modPow2(const jnipp::Ref<JavaMathBigInteger>& a0, jint a1) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger,jint> method(clazz(), "modPow2", "(Ljava/math/BigInteger;I)Ljava/math/BigInteger;");
    return method.call(*this, a0, a1);
}

// private java.math.BigInteger java.math.BigInteger.mod2(int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::mod2(jint a0) const {
    static jnipp::Method<JavaMathBigInteger,jint> method(clazz(), "mod2", "(I)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.modInverse(java.math.BigInteger)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::modInverse(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<JavaMathBigInteger,JavaMathBigInteger> method(clazz(), "modInverse", "(Ljava/math/BigInteger;)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.shiftLeft(int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::shiftLeft(jint a0) const {
    static jnipp::Method<JavaMathBigInteger,jint> method(clazz(), "shiftLeft", "(I)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.shiftRight(int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::shiftRight(jint a0) const {
    static jnipp::Method<JavaMathBigInteger,jint> method(clazz(), "shiftRight", "(I)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// int[] java.math.BigInteger.javaIncrement(int[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::javaIncrement(const jnipp::Ref<jnipp::Array<jint>>& a0) const {
    static jnipp::Method<jnipp::Array<jint>,jnipp::Array<jint>> method(clazz(), "javaIncrement", "([I)[I");
    return method.call(*this, a0);
}

// public boolean java.math.BigInteger.testBit(int)
jboolean JavaMathBigInteger::testBit(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "testBit", "(I)Z");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.setBit(int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::setBit(jint a0) const {
    static jnipp::Method<JavaMathBigInteger,jint> method(clazz(), "setBit", "(I)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.clearBit(int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::clearBit(jint a0) const {
    static jnipp::Method<JavaMathBigInteger,jint> method(clazz(), "clearBit", "(I)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public java.math.BigInteger java.math.BigInteger.flipBit(int)
jnipp::LocalRef<JavaMathBigInteger> JavaMathBigInteger::flipBit(jint a0) const {
    static jnipp::Method<JavaMathBigInteger,jint> method(clazz(), "flipBit", "(I)Ljava/math/BigInteger;");
    return method.call(*this, a0);
}

// public int java.math.BigInteger.getLowestSetBit()
jint JavaMathBigInteger::getLowestSetBit() const {
    static jnipp::Method<jint> method(clazz(), "getLowestSetBit", "()I");
    return method.call(*this);
}

// public boolean java.math.BigInteger.isProbablePrime(int)
jboolean JavaMathBigInteger::isProbablePrime(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "isProbablePrime", "(I)Z");
    return method.call(*this, a0);
}

// final int java.math.BigInteger.compareMagnitude(java.math.BigInteger)
jint JavaMathBigInteger::compareMagnitude(const jnipp::Ref<JavaMathBigInteger>& a0) const {
    static jnipp::Method<jint,JavaMathBigInteger> method(clazz(), "compareMagnitude", "(Ljava/math/BigInteger;)I");
    return method.call(*this, a0);
}

// private static int[] java.math.BigInteger.stripLeadingZeroInts(int[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::stripLeadingZeroInts(const jnipp::Ref<jnipp::Array<jint>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jint>> method(clazz(), "stripLeadingZeroInts", "([I)[I");
    return method.call(a0);
}

// private static int[] java.math.BigInteger.trustedStripLeadingZeroInts(int[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::trustedStripLeadingZeroInts(const jnipp::Ref<jnipp::Array<jint>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jint>> method(clazz(), "trustedStripLeadingZeroInts", "([I)[I");
    return method.call(a0);
}

// private static int[] java.math.BigInteger.stripLeadingZeroBytes(byte[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::stripLeadingZeroBytes(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jbyte>> method(clazz(), "stripLeadingZeroBytes", "([B)[I");
    return method.call(a0);
}

// private static int[] java.math.BigInteger.makePositive(byte[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::makePositive(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jbyte>> method(clazz(), "makePositive", "([B)[I");
    return method.call(a0);
}

// private static int[] java.math.BigInteger.makePositive(int[])
jnipp::LocalRef<jnipp::Array<jint>> JavaMathBigInteger::makePositive(const jnipp::Ref<jnipp::Array<jint>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<jint>,jnipp::Array<jint>> method(clazz(), "makePositive", "([I)[I");
    return method.call(a0);
}

// private int java.math.BigInteger.intLength()
jint JavaMathBigInteger::intLength() const {
    static jnipp::Method<jint> method(clazz(), "intLength", "()I");
    return method.call(*this);
}

// private int java.math.BigInteger.signBit()
jint JavaMathBigInteger::signBit() const {
    static jnipp::Method<jint> method(clazz(), "signBit", "()I");
    return method.call(*this);
}

// private int java.math.BigInteger.signInt()
jint JavaMathBigInteger::signInt() const {
    static jnipp::Method<jint> method(clazz(), "signInt", "()I");
    return method.call(*this);
}

// private byte[] java.math.BigInteger.magSerializedForm()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaMathBigInteger::magSerializedForm() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "magSerializedForm", "()[B");
    return method.call(*this);
}
#undef LONG_MASK
const jnipp::StaticField<jlong> JavaMathBigInteger::LONG_MASK ("java/math/BigInteger", "LONG_MASK", "J");
#undef bitsPerDigit
jnipp::StaticField<jnipp::Array<jlong>> JavaMathBigInteger::bitsPerDigit ("java/math/BigInteger", "bitsPerDigit", "[J");
#undef SMALL_PRIME_THRESHOLD
const jnipp::StaticField<jint> JavaMathBigInteger::SMALL_PRIME_THRESHOLD ("java/math/BigInteger", "SMALL_PRIME_THRESHOLD", "I");
#undef DEFAULT_PRIME_CERTAINTY
const jnipp::StaticField<jint> JavaMathBigInteger::DEFAULT_PRIME_CERTAINTY ("java/math/BigInteger", "DEFAULT_PRIME_CERTAINTY", "I");
#undef SMALL_PRIME_PRODUCT
const jnipp::StaticField<JavaMathBigInteger> JavaMathBigInteger::SMALL_PRIME_PRODUCT ("java/math/BigInteger", "SMALL_PRIME_PRODUCT", "Ljava/math/BigInteger;");
#undef staticRandom
jnipp::StaticField<JavaUtilRandom> JavaMathBigInteger::staticRandom ("java/math/BigInteger", "staticRandom", "Ljava/util/Random;");
#undef MAX_CONSTANT
const jnipp::StaticField<jint> JavaMathBigInteger::MAX_CONSTANT ("java/math/BigInteger", "MAX_CONSTANT", "I");
#undef posConst
jnipp::StaticField<jnipp::Array<JavaMathBigInteger>> JavaMathBigInteger::posConst ("java/math/BigInteger", "posConst", "[Ljava/math/BigInteger;");
#undef negConst
jnipp::StaticField<jnipp::Array<JavaMathBigInteger>> JavaMathBigInteger::negConst ("java/math/BigInteger", "negConst", "[Ljava/math/BigInteger;");
#undef ZERO
const jnipp::StaticField<JavaMathBigInteger> JavaMathBigInteger::ZERO ("java/math/BigInteger", "ZERO", "Ljava/math/BigInteger;");
#undef ONE
const jnipp::StaticField<JavaMathBigInteger> JavaMathBigInteger::ONE ("java/math/BigInteger", "ONE", "Ljava/math/BigInteger;");
#undef TWO
const jnipp::StaticField<JavaMathBigInteger> JavaMathBigInteger::TWO ("java/math/BigInteger", "TWO", "Ljava/math/BigInteger;");
#undef TEN
const jnipp::StaticField<JavaMathBigInteger> JavaMathBigInteger::TEN ("java/math/BigInteger", "TEN", "Ljava/math/BigInteger;");
#undef bnExpModThreshTable
jnipp::StaticField<jnipp::Array<jint>> JavaMathBigInteger::bnExpModThreshTable ("java/math/BigInteger", "bnExpModThreshTable", "[I");
#undef zeros
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaMathBigInteger::zeros ("java/math/BigInteger", "zeros", "[Ljava/lang/String;");
#undef digitsPerLong
jnipp::StaticField<jnipp::Array<jint>> JavaMathBigInteger::digitsPerLong ("java/math/BigInteger", "digitsPerLong", "[I");
#undef longRadix
jnipp::StaticField<jnipp::Array<JavaMathBigInteger>> JavaMathBigInteger::longRadix ("java/math/BigInteger", "longRadix", "[Ljava/math/BigInteger;");
#undef digitsPerInt
jnipp::StaticField<jnipp::Array<jint>> JavaMathBigInteger::digitsPerInt ("java/math/BigInteger", "digitsPerInt", "[I");
#undef intRadix
jnipp::StaticField<jnipp::Array<jint>> JavaMathBigInteger::intRadix ("java/math/BigInteger", "intRadix", "[I");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaMathBigInteger::serialVersionUID ("java/math/BigInteger", "serialVersionUID", "J");
#undef serialPersistentFields
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaMathBigInteger::serialPersistentFields ("java/math/BigInteger", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
#undef unsafe
const jnipp::StaticField<SunMiscUnsafe> JavaMathBigInteger::unsafe ("java/math/BigInteger", "unsafe", "Lsun/misc/Unsafe;");
#undef signumOffset
const jnipp::StaticField<jlong> JavaMathBigInteger::signumOffset ("java/math/BigInteger", "signumOffset", "J");
#undef magOffset
const jnipp::StaticField<jlong> JavaMathBigInteger::magOffset ("java/math/BigInteger", "magOffset", "J");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaMathBigInteger::$assertionsDisabled ("java/math/BigInteger", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRefReference_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/ref/Reference$1"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPattern::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Pattern"));
    return cls;
}

// private java.util.regex.Pattern(java.lang.String,int)
jnipp::LocalRef<JavaUtilRegexPattern> JavaUtilRegexPattern::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaUtilRegexPattern,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.clazz(boolean)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::clazz_(jboolean a0) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,jboolean> method(clazz(), "clazz", "(Z)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0);
}

// public int java.util.regex.Pattern.flags()
jint JavaUtilRegexPattern::flags() const {
    static jnipp::Method<jint> method(clazz(), "flags", "()I");
    return method.call(*this);
}

// private void java.util.regex.Pattern.append(int,int)
void JavaUtilRegexPattern::append(jint a0, jint a1) const {
    static jnipp::Method<void,jint,jint> method(clazz(), "append", "(II)V");
    method.call(*this, a0, a1);
}

// public static boolean java.util.regex.Pattern.matches(java.lang.String,java.lang.CharSequence)
jboolean JavaUtilRegexPattern::matches(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangCharSequence>& a1) {
    static jnipp::StaticMethod<jboolean,JavaLangString,JavaLangCharSequence> method(clazz(), "matches", "(Ljava/lang/String;Ljava/lang/CharSequence;)Z");
    return method.call(a0, a1);
}

// public java.lang.String[] java.util.regex.Pattern.split(java.lang.CharSequence,int)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilRegexPattern::split(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaLangCharSequence,jint> method(clazz(), "split", "(Ljava/lang/CharSequence;I)[Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.String[] java.util.regex.Pattern.split(java.lang.CharSequence)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilRegexPattern::split(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaLangCharSequence> method(clazz(), "split", "(Ljava/lang/CharSequence;)[Ljava/lang/String;");
    return method.call(*this, a0);
}

// private void java.util.regex.Pattern.compile()
void JavaUtilRegexPattern::compile() const {
    static jnipp::Method<void> method(clazz(), "compile", "()V");
    method.call(*this);
}

// public static java.util.regex.Pattern java.util.regex.Pattern.compile(java.lang.String)
jnipp::LocalRef<JavaUtilRegexPattern> JavaUtilRegexPattern::compile(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilRegexPattern,JavaLangString> method(clazz(), "compile", "(Ljava/lang/String;)Ljava/util/regex/Pattern;");
    return method.call(a0);
}

// public static java.util.regex.Pattern java.util.regex.Pattern.compile(java.lang.String,int)
jnipp::LocalRef<JavaUtilRegexPattern> JavaUtilRegexPattern::compile(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::StaticMethod<JavaUtilRegexPattern,JavaLangString,jint> method(clazz(), "compile", "(Ljava/lang/String;I)Ljava/util/regex/Pattern;");
    return method.call(a0, a1);
}

// public java.util.regex.Matcher java.util.regex.Pattern.matcher(java.lang.CharSequence)
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexPattern::matcher(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaUtilRegexMatcher,JavaLangCharSequence> method(clazz(), "matcher", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;");
    return method.call(*this, a0);
}

// private int java.util.regex.Pattern.next()
jint JavaUtilRegexPattern::next() const {
    static jnipp::Method<jint> method(clazz(), "next", "()I");
    return method.call(*this);
}

// private void java.util.regex.Pattern.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilRegexPattern::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.util.regex.Pattern.normalize()
void JavaUtilRegexPattern::normalize() const {
    static jnipp::Method<void> method(clazz(), "normalize", "()V");
    method.call(*this);
}

// private void java.util.regex.Pattern.mark(int)
void JavaUtilRegexPattern::mark(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "mark", "(I)V");
    method.call(*this, a0);
}

// private int java.util.regex.Pattern.peek()
jint JavaUtilRegexPattern::peek() const {
    static jnipp::Method<jint> method(clazz(), "peek", "()I");
    return method.call(*this);
}

// private int java.util.regex.Pattern.c()
jint JavaUtilRegexPattern::c() const {
    static jnipp::Method<jint> method(clazz(), "c", "()I");
    return method.call(*this);
}

// private int java.util.regex.Pattern.read()
jint JavaUtilRegexPattern::read() const {
    static jnipp::Method<jint> method(clazz(), "read", "()I");
    return method.call(*this);
}

// private int java.util.regex.Pattern.skip()
jint JavaUtilRegexPattern::skip() const {
    static jnipp::Method<jint> method(clazz(), "skip", "()I");
    return method.call(*this);
}

// private java.util.regex.PatternSyntaxException java.util.regex.Pattern.error(java.lang.String)
jnipp::LocalRef<JavaUtilRegexPatternSyntaxException> JavaUtilRegexPattern::error(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilRegexPatternSyntaxException,JavaLangString> method(clazz(), "error", "(Ljava/lang/String;)Ljava/util/regex/PatternSyntaxException;");
    return method.call(*this, a0);
}

// private void java.util.regex.Pattern.accept(int,java.lang.String)
void JavaUtilRegexPattern::accept(jint a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,jint,JavaLangString> method(clazz(), "accept", "(ILjava/lang/String;)V");
    method.call(*this, a0, a1);
}

// private int java.util.regex.Pattern.escape(boolean,boolean)
jint JavaUtilRegexPattern::escape(jboolean a0, jboolean a1) const {
    static jnipp::Method<jint,jboolean,jboolean> method(clazz(), "escape", "(ZZ)I");
    return method.call(*this, a0, a1);
}

// public static java.lang.String java.util.regex.Pattern.quote(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilRegexPattern::quote(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "quote", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// private java.util.regex.Pattern$Node java.util.regex.Pattern.ref(int)
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::ref(jint a0) const {
    static jnipp::Method<JavaUtilRegexPattern_Node,jint> method(clazz(), "ref", "(I)Ljava/util/regex/Pattern$Node;");
    return method.call(*this, a0);
}

// private int java.util.regex.Pattern.x()
jint JavaUtilRegexPattern::x() const {
    static jnipp::Method<jint> method(clazz(), "x", "()I");
    return method.call(*this);
}

// private static java.util.regex.Pattern$CharProperty java.util.regex.Pattern.union(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::union_(const jnipp::Ref<JavaUtilRegexPattern_CharProperty>& a0, const jnipp::Ref<JavaUtilRegexPattern_CharProperty>& a1) {
    static jnipp::StaticMethod<JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_CharProperty> method(clazz(), "union", "(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(a0, a1);
}

// private int java.util.regex.Pattern.cursor()
jint JavaUtilRegexPattern::cursor() const {
    static jnipp::Method<jint> method(clazz(), "cursor", "()I");
    return method.call(*this);
}

// public java.lang.String java.util.regex.Pattern.pattern()
jnipp::LocalRef<JavaLangString> JavaUtilRegexPattern::pattern() const {
    static jnipp::Method<JavaLangString> method(clazz(), "pattern", "()Ljava/lang/String;");
    return method.call(*this);
}

// java.util.Map java.util.regex.Pattern.namedGroups()
jnipp::LocalRef<JavaUtilMap> JavaUtilRegexPattern::namedGroups() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "namedGroups", "()Ljava/util/Map;");
    return method.call(*this);
}

// private int java.util.regex.Pattern.normalizeCharClass(java.lang.StringBuilder,int)
jint JavaUtilRegexPattern::normalizeCharClass(const jnipp::Ref<JavaLangStringBuilder>& a0, jint a1) const {
    static jnipp::Method<jint,JavaLangStringBuilder,jint> method(clazz(), "normalizeCharClass", "(Ljava/lang/StringBuilder;I)I");
    return method.call(*this, a0, a1);
}

// private java.lang.String java.util.regex.Pattern.produceEquivalentAlternation(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilRegexPattern::produceEquivalentAlternation(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "produceEquivalentAlternation", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private java.lang.String[] java.util.regex.Pattern.producePermutations(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilRegexPattern::producePermutations(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaLangString> method(clazz(), "producePermutations", "(Ljava/lang/String;)[Ljava/lang/String;");
    return method.call(*this, a0);
}

// private java.lang.String java.util.regex.Pattern.composeOneStep(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilRegexPattern::composeOneStep(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "composeOneStep", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private void java.util.regex.Pattern.RemoveQEQuoting()
void JavaUtilRegexPattern::RemoveQEQuoting() const {
    static jnipp::Method<void> method(clazz(), "RemoveQEQuoting", "()V");
    method.call(*this);
}

// private static void java.util.regex.Pattern.printObjectTree(java.util.regex.Pattern$Node)
void JavaUtilRegexPattern::printObjectTree(const jnipp::Ref<JavaUtilRegexPattern_Node>& a0) {
    static jnipp::StaticMethod<void,JavaUtilRegexPattern_Node> method(clazz(), "printObjectTree", "(Ljava/util/regex/Pattern$Node;)V");
    method.call(a0);
}

// private boolean java.util.regex.Pattern.has(int)
jboolean JavaUtilRegexPattern::has(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "has", "(I)Z");
    return method.call(*this, a0);
}

// private int java.util.regex.Pattern.readEscaped()
jint JavaUtilRegexPattern::readEscaped() const {
    static jnipp::Method<jint> method(clazz(), "readEscaped", "()I");
    return method.call(*this);
}

// private int java.util.regex.Pattern.nextEscaped()
jint JavaUtilRegexPattern::nextEscaped() const {
    static jnipp::Method<jint> method(clazz(), "nextEscaped", "()I");
    return method.call(*this);
}

// private int java.util.regex.Pattern.peekPastWhitespace(int)
jint JavaUtilRegexPattern::peekPastWhitespace(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "peekPastWhitespace", "(I)I");
    return method.call(*this, a0);
}

// private int java.util.regex.Pattern.parsePastWhitespace(int)
jint JavaUtilRegexPattern::parsePastWhitespace(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "parsePastWhitespace", "(I)I");
    return method.call(*this, a0);
}

// private int java.util.regex.Pattern.parsePastLine()
jint JavaUtilRegexPattern::parsePastLine() const {
    static jnipp::Method<jint> method(clazz(), "parsePastLine", "()I");
    return method.call(*this);
}

// private int java.util.regex.Pattern.peekPastLine()
jint JavaUtilRegexPattern::peekPastLine() const {
    static jnipp::Method<jint> method(clazz(), "peekPastLine", "()I");
    return method.call(*this);
}

// private boolean java.util.regex.Pattern.isLineSeparator(int)
jboolean JavaUtilRegexPattern::isLineSeparator(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "isLineSeparator", "(I)Z");
    return method.call(*this, a0);
}

// private void java.util.regex.Pattern.unread()
void JavaUtilRegexPattern::unread() const {
    static jnipp::Method<void> method(clazz(), "unread", "()V");
    method.call(*this);
}

// private boolean java.util.regex.Pattern.findSupplementary(int,int)
jboolean JavaUtilRegexPattern::findSupplementary(jint a0, jint a1) const {
    static jnipp::Method<jboolean,jint,jint> method(clazz(), "findSupplementary", "(II)Z");
    return method.call(*this, a0, a1);
}

// private static final boolean java.util.regex.Pattern.isSupplementary(int)
jboolean JavaUtilRegexPattern::isSupplementary(jint a0) {
    static jnipp::StaticMethod<jboolean,jint> method(clazz(), "isSupplementary", "(I)Z");
    return method.call(a0);
}

// private java.util.regex.Pattern$Node java.util.regex.Pattern.expr(java.util.regex.Pattern$Node)
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::expr(const jnipp::Ref<JavaUtilRegexPattern_Node>& a0) const {
    static jnipp::Method<JavaUtilRegexPattern_Node,JavaUtilRegexPattern_Node> method(clazz(), "expr", "(Ljava/util/regex/Pattern$Node;)Ljava/util/regex/Pattern$Node;");
    return method.call(*this, a0);
}

// private java.util.regex.Pattern$Node java.util.regex.Pattern.sequence(java.util.regex.Pattern$Node)
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::sequence(const jnipp::Ref<JavaUtilRegexPattern_Node>& a0) const {
    static jnipp::Method<JavaUtilRegexPattern_Node,JavaUtilRegexPattern_Node> method(clazz(), "sequence", "(Ljava/util/regex/Pattern$Node;)Ljava/util/regex/Pattern$Node;");
    return method.call(*this, a0);
}

// private java.util.regex.Pattern$Node java.util.regex.Pattern.atom()
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::atom() const {
    static jnipp::Method<JavaUtilRegexPattern_Node> method(clazz(), "atom", "()Ljava/util/regex/Pattern$Node;");
    return method.call(*this);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.bitsOrSingle(java.util.regex.Pattern$BitClass,int)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::bitsOrSingle(const jnipp::Ref<JavaUtilRegexPattern_BitClass>& a0, jint a1) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_BitClass,jint> method(clazz(), "bitsOrSingle", "(Ljava/util/regex/Pattern$BitClass;I)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0, a1);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.range(java.util.regex.Pattern$BitClass)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::range(const jnipp::Ref<JavaUtilRegexPattern_BitClass>& a0) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_BitClass> method(clazz(), "range", "(Ljava/util/regex/Pattern$BitClass;)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0);
}

// private int java.util.regex.Pattern.single()
jint JavaUtilRegexPattern::single() const {
    static jnipp::Method<jint> method(clazz(), "single", "()I");
    return method.call(*this);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.family(boolean,boolean)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::family(jboolean a0, jboolean a1) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,jboolean,jboolean> method(clazz(), "family", "(ZZ)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0, a1);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.unicodeScriptPropertyFor(java.lang.String)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::unicodeScriptPropertyFor(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,JavaLangString> method(clazz(), "unicodeScriptPropertyFor", "(Ljava/lang/String;)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.unicodeBlockPropertyFor(java.lang.String)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::unicodeBlockPropertyFor(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,JavaLangString> method(clazz(), "unicodeBlockPropertyFor", "(Ljava/lang/String;)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.charPropertyNodeFor(java.lang.String)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::charPropertyNodeFor(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,JavaLangString> method(clazz(), "charPropertyNodeFor", "(Ljava/lang/String;)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0);
}

// private java.lang.String java.util.regex.Pattern.groupname(int)
jnipp::LocalRef<JavaLangString> JavaUtilRegexPattern::groupname(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "groupname", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// private java.util.regex.Pattern$Node java.util.regex.Pattern.group0()
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::group0() const {
    static jnipp::Method<JavaUtilRegexPattern_Node> method(clazz(), "group0", "()Ljava/util/regex/Pattern$Node;");
    return method.call(*this);
}

// private java.util.regex.Pattern$Node java.util.regex.Pattern.createGroup(boolean)
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::createGroup(jboolean a0) const {
    static jnipp::Method<JavaUtilRegexPattern_Node,jboolean> method(clazz(), "createGroup", "(Z)Ljava/util/regex/Pattern$Node;");
    return method.call(*this, a0);
}

// private void java.util.regex.Pattern.addFlag()
void JavaUtilRegexPattern::addFlag() const {
    static jnipp::Method<void> method(clazz(), "addFlag", "()V");
    method.call(*this);
}

// private void java.util.regex.Pattern.subFlag()
void JavaUtilRegexPattern::subFlag() const {
    static jnipp::Method<void> method(clazz(), "subFlag", "()V");
    method.call(*this);
}

// private java.util.regex.Pattern$Node java.util.regex.Pattern.closure(java.util.regex.Pattern$Node)
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::closure(const jnipp::Ref<JavaUtilRegexPattern_Node>& a0) const {
    static jnipp::Method<JavaUtilRegexPattern_Node,JavaUtilRegexPattern_Node> method(clazz(), "closure", "(Ljava/util/regex/Pattern$Node;)Ljava/util/regex/Pattern$Node;");
    return method.call(*this, a0);
}

// private int java.util.regex.Pattern.o()
jint JavaUtilRegexPattern::o() const {
    static jnipp::Method<jint> method(clazz(), "o", "()I");
    return method.call(*this);
}

// private void java.util.regex.Pattern.setcursor(int)
void JavaUtilRegexPattern::setcursor(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setcursor", "(I)V");
    method.call(*this, a0);
}

// private int java.util.regex.Pattern.uxxxx()
jint JavaUtilRegexPattern::uxxxx() const {
    static jnipp::Method<jint> method(clazz(), "uxxxx", "()I");
    return method.call(*this);
}

// private int java.util.regex.Pattern.u()
jint JavaUtilRegexPattern::u() const {
    static jnipp::Method<jint> method(clazz(), "u", "()I");
    return method.call(*this);
}

// private static final int java.util.regex.Pattern.countChars(java.lang.CharSequence,int,int)
jint JavaUtilRegexPattern::countChars(const jnipp::Ref<JavaLangCharSequence>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jint,JavaLangCharSequence,jint,jint> method(clazz(), "countChars", "(Ljava/lang/CharSequence;II)I");
    return method.call(a0, a1, a2);
}

// private static final int java.util.regex.Pattern.countCodePoints(java.lang.CharSequence)
jint JavaUtilRegexPattern::countCodePoints(const jnipp::Ref<JavaLangCharSequence>& a0) {
    static jnipp::StaticMethod<jint,JavaLangCharSequence> method(clazz(), "countCodePoints", "(Ljava/lang/CharSequence;)I");
    return method.call(a0);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.newSingle(int)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::newSingle(jint a0) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,jint> method(clazz(), "newSingle", "(I)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0);
}

// private java.util.regex.Pattern$Node java.util.regex.Pattern.newSlice(int[],int,boolean)
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::newSlice(const jnipp::Ref<jnipp::Array<jint>>& a0, jint a1, jboolean a2) const {
    static jnipp::Method<JavaUtilRegexPattern_Node,jnipp::Array<jint>,jint,jboolean> method(clazz(), "newSlice", "([IIZ)Ljava/util/regex/Pattern$Node;");
    return method.call(*this, a0, a1, a2);
}

// private static boolean java.util.regex.Pattern.inRange(int,int,int)
jboolean JavaUtilRegexPattern::inRange(jint a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jboolean,jint,jint,jint> method(clazz(), "inRange", "(III)Z");
    return method.call(a0, a1, a2);
}

// private static java.util.regex.Pattern$CharProperty java.util.regex.Pattern.rangeFor(int,int)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::rangeFor(jint a0, jint a1) {
    static jnipp::StaticMethod<JavaUtilRegexPattern_CharProperty,jint,jint> method(clazz(), "rangeFor", "(II)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(a0, a1);
}

// private java.util.regex.Pattern$CharProperty java.util.regex.Pattern.caseInsensitiveRangeFor(int,int)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::caseInsensitiveRangeFor(jint a0, jint a1) const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty,jint,jint> method(clazz(), "caseInsensitiveRangeFor", "(II)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this, a0, a1);
}

// private static java.util.regex.Pattern$CharProperty java.util.regex.Pattern.intersection(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::intersection(const jnipp::Ref<JavaUtilRegexPattern_CharProperty>& a0, const jnipp::Ref<JavaUtilRegexPattern_CharProperty>& a1) {
    static jnipp::StaticMethod<JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_CharProperty> method(clazz(), "intersection", "(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(a0, a1);
}

// private static java.util.regex.Pattern$CharProperty java.util.regex.Pattern.setDifference(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern::setDifference(const jnipp::Ref<JavaUtilRegexPattern_CharProperty>& a0, const jnipp::Ref<JavaUtilRegexPattern_CharProperty>& a1) {
    static jnipp::StaticMethod<JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_CharProperty> method(clazz(), "setDifference", "(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)Ljava/util/regex/Pattern$CharProperty;");
    return method.call(a0, a1);
}

// private static boolean java.util.regex.Pattern.hasBaseCharacter(java.util.regex.Matcher,int,java.lang.CharSequence)
jboolean JavaUtilRegexPattern::hasBaseCharacter(const jnipp::Ref<JavaUtilRegexMatcher>& a0, jint a1, const jnipp::Ref<JavaLangCharSequence>& a2) {
    static jnipp::StaticMethod<jboolean,JavaUtilRegexMatcher,jint,JavaLangCharSequence> method(clazz(), "hasBaseCharacter", "(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z");
    return method.call(a0, a1, a2);
}
#undef UNIX_LINES
const jnipp::StaticField<jint> JavaUtilRegexPattern::UNIX_LINES ("java/util/regex/Pattern", "UNIX_LINES", "I");
#undef CASE_INSENSITIVE
const jnipp::StaticField<jint> JavaUtilRegexPattern::CASE_INSENSITIVE ("java/util/regex/Pattern", "CASE_INSENSITIVE", "I");
#undef COMMENTS
const jnipp::StaticField<jint> JavaUtilRegexPattern::COMMENTS ("java/util/regex/Pattern", "COMMENTS", "I");
#undef MULTILINE
const jnipp::StaticField<jint> JavaUtilRegexPattern::MULTILINE ("java/util/regex/Pattern", "MULTILINE", "I");
#undef LITERAL
const jnipp::StaticField<jint> JavaUtilRegexPattern::LITERAL ("java/util/regex/Pattern", "LITERAL", "I");
#undef DOTALL
const jnipp::StaticField<jint> JavaUtilRegexPattern::DOTALL ("java/util/regex/Pattern", "DOTALL", "I");
#undef UNICODE_CASE
const jnipp::StaticField<jint> JavaUtilRegexPattern::UNICODE_CASE ("java/util/regex/Pattern", "UNICODE_CASE", "I");
#undef CANON_EQ
const jnipp::StaticField<jint> JavaUtilRegexPattern::CANON_EQ ("java/util/regex/Pattern", "CANON_EQ", "I");
#undef UNICODE_CHARACTER_CLASS
const jnipp::StaticField<jint> JavaUtilRegexPattern::UNICODE_CHARACTER_CLASS ("java/util/regex/Pattern", "UNICODE_CHARACTER_CLASS", "I");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilRegexPattern::serialVersionUID ("java/util/regex/Pattern", "serialVersionUID", "J");
#undef MAX_REPS
const jnipp::StaticField<jint> JavaUtilRegexPattern::MAX_REPS ("java/util/regex/Pattern", "MAX_REPS", "I");
#undef GREEDY
const jnipp::StaticField<jint> JavaUtilRegexPattern::GREEDY ("java/util/regex/Pattern", "GREEDY", "I");
#undef LAZY
const jnipp::StaticField<jint> JavaUtilRegexPattern::LAZY ("java/util/regex/Pattern", "LAZY", "I");
#undef POSSESSIVE
const jnipp::StaticField<jint> JavaUtilRegexPattern::POSSESSIVE ("java/util/regex/Pattern", "POSSESSIVE", "I");
#undef INDEPENDENT
const jnipp::StaticField<jint> JavaUtilRegexPattern::INDEPENDENT ("java/util/regex/Pattern", "INDEPENDENT", "I");
#undef lookbehindEnd
jnipp::StaticField<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::lookbehindEnd ("java/util/regex/Pattern", "lookbehindEnd", "Ljava/util/regex/Pattern$Node;");
#undef accept
jnipp::StaticField<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::accept_ ("java/util/regex/Pattern", "accept", "Ljava/util/regex/Pattern$Node;");
#undef lastAccept
jnipp::StaticField<JavaUtilRegexPattern_Node> JavaUtilRegexPattern::lastAccept ("java/util/regex/Pattern", "lastAccept", "Ljava/util/regex/Pattern$Node;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaUtilRegexPattern::$assertionsDisabled ("java/util/regex/Pattern", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangAppendable::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Appendable"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilFormatter_FormatString::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Formatter$FormatString"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunNioCsStreamEncoder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/nio/cs/StreamEncoder"));
    return cls;
}

// private sun.nio.cs.StreamEncoder(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)
jnipp::LocalRef<SunNioCsStreamEncoder> SunNioCsStreamEncoder::construct(const jnipp::Ref<JavaNioChannelsWritableByteChannel>& a0, const jnipp::Ref<JavaNioCharsetCharsetEncoder>& a1, jint a2) {
    static jnipp::Constructor<SunNioCsStreamEncoder,JavaNioChannelsWritableByteChannel,JavaNioCharsetCharsetEncoder,jint> constructor(clazz(), "(Ljava/nio/channels/WritableByteChannel;Ljava/nio/charset/CharsetEncoder;I)V");
    return constructor.construct(a0, a1, a2);
}

// private sun.nio.cs.StreamEncoder(java.io.OutputStream,java.lang.Object,java.nio.charset.Charset)
jnipp::LocalRef<SunNioCsStreamEncoder> SunNioCsStreamEncoder::construct(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaNioCharsetCharset>& a2) {
    static jnipp::Constructor<SunNioCsStreamEncoder,JavaIoOutputStream,JavaLangObject,JavaNioCharsetCharset> constructor(clazz(), "(Ljava/io/OutputStream;Ljava/lang/Object;Ljava/nio/charset/Charset;)V");
    return constructor.construct(a0, a1, a2);
}

// private sun.nio.cs.StreamEncoder(java.io.OutputStream,java.lang.Object,java.nio.charset.CharsetEncoder)
jnipp::LocalRef<SunNioCsStreamEncoder> SunNioCsStreamEncoder::construct(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaNioCharsetCharsetEncoder>& a2) {
    static jnipp::Constructor<SunNioCsStreamEncoder,JavaIoOutputStream,JavaLangObject,JavaNioCharsetCharsetEncoder> constructor(clazz(), "(Ljava/io/OutputStream;Ljava/lang/Object;Ljava/nio/charset/CharsetEncoder;)V");
    return constructor.construct(a0, a1, a2);
}

// public void sun.nio.cs.StreamEncoder.write(int) throws java.io.IOException
void SunNioCsStreamEncoder::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void sun.nio.cs.StreamEncoder.write(char[],int,int) throws java.io.IOException
void SunNioCsStreamEncoder::write(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jchar>,jint,jint> method(clazz(), "write", "([CII)V");
    method.call(*this, a0, a1, a2);
}

// public void sun.nio.cs.StreamEncoder.write(java.lang.String,int,int) throws java.io.IOException
void SunNioCsStreamEncoder::write(const jnipp::Ref<JavaLangString>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,JavaLangString,jint,jint> method(clazz(), "write", "(Ljava/lang/String;II)V");
    method.call(*this, a0, a1, a2);
}

// public void sun.nio.cs.StreamEncoder.flush() throws java.io.IOException
void SunNioCsStreamEncoder::flush() const {
    static jnipp::Method<void> method(clazz(), "flush", "()V");
    method.call(*this);
}

// public void sun.nio.cs.StreamEncoder.close() throws java.io.IOException
void SunNioCsStreamEncoder::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// void sun.nio.cs.StreamEncoder.implFlush() throws java.io.IOException
void SunNioCsStreamEncoder::implFlush() const {
    static jnipp::Method<void> method(clazz(), "implFlush", "()V");
    method.call(*this);
}

// private void sun.nio.cs.StreamEncoder.writeBytes() throws java.io.IOException
void SunNioCsStreamEncoder::writeBytes() const {
    static jnipp::Method<void> method(clazz(), "writeBytes", "()V");
    method.call(*this);
}

// private void sun.nio.cs.StreamEncoder.ensureOpen() throws java.io.IOException
void SunNioCsStreamEncoder::ensureOpen() const {
    static jnipp::Method<void> method(clazz(), "ensureOpen", "()V");
    method.call(*this);
}

// public void sun.nio.cs.StreamEncoder.flushBuffer() throws java.io.IOException
void SunNioCsStreamEncoder::flushBuffer() const {
    static jnipp::Method<void> method(clazz(), "flushBuffer", "()V");
    method.call(*this);
}

// public java.lang.String sun.nio.cs.StreamEncoder.getEncoding()
jnipp::LocalRef<JavaLangString> SunNioCsStreamEncoder::getEncoding() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getEncoding", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static sun.nio.cs.StreamEncoder sun.nio.cs.StreamEncoder.forOutputStreamWriter(java.io.OutputStream,java.lang.Object,java.nio.charset.CharsetEncoder)
jnipp::LocalRef<SunNioCsStreamEncoder> SunNioCsStreamEncoder::forOutputStreamWriter(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaNioCharsetCharsetEncoder>& a2) {
    static jnipp::StaticMethod<SunNioCsStreamEncoder,JavaIoOutputStream,JavaLangObject,JavaNioCharsetCharsetEncoder> method(clazz(), "forOutputStreamWriter", "(Ljava/io/OutputStream;Ljava/lang/Object;Ljava/nio/charset/CharsetEncoder;)Lsun/nio/cs/StreamEncoder;");
    return method.call(a0, a1, a2);
}

// public static sun.nio.cs.StreamEncoder sun.nio.cs.StreamEncoder.forOutputStreamWriter(java.io.OutputStream,java.lang.Object,java.nio.charset.Charset)
jnipp::LocalRef<SunNioCsStreamEncoder> SunNioCsStreamEncoder::forOutputStreamWriter(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaNioCharsetCharset>& a2) {
    static jnipp::StaticMethod<SunNioCsStreamEncoder,JavaIoOutputStream,JavaLangObject,JavaNioCharsetCharset> method(clazz(), "forOutputStreamWriter", "(Ljava/io/OutputStream;Ljava/lang/Object;Ljava/nio/charset/Charset;)Lsun/nio/cs/StreamEncoder;");
    return method.call(a0, a1, a2);
}

// public static sun.nio.cs.StreamEncoder sun.nio.cs.StreamEncoder.forOutputStreamWriter(java.io.OutputStream,java.lang.Object,java.lang.String) throws java.io.UnsupportedEncodingException
jnipp::LocalRef<SunNioCsStreamEncoder> SunNioCsStreamEncoder::forOutputStreamWriter(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::StaticMethod<SunNioCsStreamEncoder,JavaIoOutputStream,JavaLangObject,JavaLangString> method(clazz(), "forOutputStreamWriter", "(Ljava/io/OutputStream;Ljava/lang/Object;Ljava/lang/String;)Lsun/nio/cs/StreamEncoder;");
    return method.call(a0, a1, a2);
}

// private boolean sun.nio.cs.StreamEncoder.isOpen()
jboolean SunNioCsStreamEncoder::isOpen() const {
    static jnipp::Method<jboolean> method(clazz(), "isOpen", "()Z");
    return method.call(*this);
}

// public static sun.nio.cs.StreamEncoder sun.nio.cs.StreamEncoder.forEncoder(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)
jnipp::LocalRef<SunNioCsStreamEncoder> SunNioCsStreamEncoder::forEncoder(const jnipp::Ref<JavaNioChannelsWritableByteChannel>& a0, const jnipp::Ref<JavaNioCharsetCharsetEncoder>& a1, jint a2) {
    static jnipp::StaticMethod<SunNioCsStreamEncoder,JavaNioChannelsWritableByteChannel,JavaNioCharsetCharsetEncoder,jint> method(clazz(), "forEncoder", "(Ljava/nio/channels/WritableByteChannel;Ljava/nio/charset/CharsetEncoder;I)Lsun/nio/cs/StreamEncoder;");
    return method.call(a0, a1, a2);
}

// private void sun.nio.cs.StreamEncoder.flushLeftoverChar(java.nio.CharBuffer,boolean) throws java.io.IOException
void SunNioCsStreamEncoder::flushLeftoverChar(const jnipp::Ref<JavaNioCharBuffer>& a0, jboolean a1) const {
    static jnipp::Method<void,JavaNioCharBuffer,jboolean> method(clazz(), "flushLeftoverChar", "(Ljava/nio/CharBuffer;Z)V");
    method.call(*this, a0, a1);
}

// void sun.nio.cs.StreamEncoder.implWrite(char[],int,int) throws java.io.IOException
void SunNioCsStreamEncoder::implWrite(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jchar>,jint,jint> method(clazz(), "implWrite", "([CII)V");
    method.call(*this, a0, a1, a2);
}

// void sun.nio.cs.StreamEncoder.implFlushBuffer() throws java.io.IOException
void SunNioCsStreamEncoder::implFlushBuffer() const {
    static jnipp::Method<void> method(clazz(), "implFlushBuffer", "()V");
    method.call(*this);
}

// void sun.nio.cs.StreamEncoder.implClose() throws java.io.IOException
void SunNioCsStreamEncoder::implClose() const {
    static jnipp::Method<void> method(clazz(), "implClose", "()V");
    method.call(*this);
}

// java.lang.String sun.nio.cs.StreamEncoder.encodingName()
jnipp::LocalRef<JavaLangString> SunNioCsStreamEncoder::encodingName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "encodingName", "()Ljava/lang/String;");
    return method.call(*this);
}
#undef DEFAULT_BYTE_BUFFER_SIZE
const jnipp::StaticField<jint> SunNioCsStreamEncoder::DEFAULT_BYTE_BUFFER_SIZE ("sun/nio/cs/StreamEncoder", "DEFAULT_BYTE_BUFFER_SIZE", "I");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> SunNioCsStreamEncoder::$assertionsDisabled ("sun/nio/cs/StreamEncoder", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharsetCharsetEncoder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/charset/CharsetEncoder"));
    return cls;
}

// protected java.nio.charset.CharsetEncoder(java.nio.charset.Charset,float,float,byte[])
jnipp::LocalRef<JavaNioCharsetCharsetEncoder> JavaNioCharsetCharsetEncoder::construct(const jnipp::Ref<JavaNioCharsetCharset>& a0, jfloat a1, jfloat a2, const jnipp::Ref<jnipp::Array<jbyte>>& a3) {
    static jnipp::Constructor<JavaNioCharsetCharsetEncoder,JavaNioCharsetCharset,jfloat,jfloat,jnipp::Array<jbyte>> constructor(clazz(), "(Ljava/nio/charset/Charset;FF[B)V");
    return constructor.construct(a0, a1, a2, a3);
}

// protected java.nio.charset.CharsetEncoder(java.nio.charset.Charset,float,float)
jnipp::LocalRef<JavaNioCharsetCharsetEncoder> JavaNioCharsetCharsetEncoder::construct(const jnipp::Ref<JavaNioCharsetCharset>& a0, jfloat a1, jfloat a2) {
    static jnipp::Constructor<JavaNioCharsetCharsetEncoder,JavaNioCharsetCharset,jfloat,jfloat> constructor(clazz(), "(Ljava/nio/charset/Charset;FF)V");
    return constructor.construct(a0, a1, a2);
}

// public final java.nio.charset.Charset java.nio.charset.CharsetEncoder.charset()
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharsetEncoder::charset() const {
    static jnipp::Method<JavaNioCharsetCharset> method(clazz(), "charset", "()Ljava/nio/charset/Charset;");
    return method.call(*this);
}

// public final java.nio.ByteBuffer java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer) throws java.nio.charset.CharacterCodingException
jnipp::LocalRef<JavaNioByteBuffer> JavaNioCharsetCharsetEncoder::encode(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,JavaNioCharBuffer> method(clazz(), "encode", "(Ljava/nio/CharBuffer;)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}

// public final java.nio.charset.CoderResult java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCharsetEncoder::encode(const jnipp::Ref<JavaNioCharBuffer>& a0, const jnipp::Ref<JavaNioByteBuffer>& a1, jboolean a2) const {
    static jnipp::Method<JavaNioCharsetCoderResult,JavaNioCharBuffer,JavaNioByteBuffer,jboolean> method(clazz(), "encode", "(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;");
    return method.call(*this, a0, a1, a2);
}

// public final java.nio.charset.CoderResult java.nio.charset.CharsetEncoder.flush(java.nio.ByteBuffer)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCharsetEncoder::flush(const jnipp::Ref<JavaNioByteBuffer>& a0) const {
    static jnipp::Method<JavaNioCharsetCoderResult,JavaNioByteBuffer> method(clazz(), "flush", "(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;");
    return method.call(*this, a0);
}

// public final java.nio.charset.CharsetEncoder java.nio.charset.CharsetEncoder.reset()
jnipp::LocalRef<JavaNioCharsetCharsetEncoder> JavaNioCharsetCharsetEncoder::reset() const {
    static jnipp::Method<JavaNioCharsetCharsetEncoder> method(clazz(), "reset", "()Ljava/nio/charset/CharsetEncoder;");
    return method.call(*this);
}

// public boolean java.nio.charset.CharsetEncoder.canEncode(char)
jboolean JavaNioCharsetCharsetEncoder::canEncode(jchar a0) const {
    static jnipp::Method<jboolean,jchar> method(clazz(), "canEncode", "(C)Z");
    return method.call(*this, a0);
}

// public boolean java.nio.charset.CharsetEncoder.canEncode(java.lang.CharSequence)
jboolean JavaNioCharsetCharsetEncoder::canEncode(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<jboolean,JavaLangCharSequence> method(clazz(), "canEncode", "(Ljava/lang/CharSequence;)Z");
    return method.call(*this, a0);
}

// private boolean java.nio.charset.CharsetEncoder.canEncode(java.nio.CharBuffer)
jboolean JavaNioCharsetCharsetEncoder::canEncode(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<jboolean,JavaNioCharBuffer> method(clazz(), "canEncode", "(Ljava/nio/CharBuffer;)Z");
    return method.call(*this, a0);
}

// public final java.nio.charset.CharsetEncoder java.nio.charset.CharsetEncoder.onMalformedInput(java.nio.charset.CodingErrorAction)
jnipp::LocalRef<JavaNioCharsetCharsetEncoder> JavaNioCharsetCharsetEncoder::onMalformedInput(const jnipp::Ref<JavaNioCharsetCodingErrorAction>& a0) const {
    static jnipp::Method<JavaNioCharsetCharsetEncoder,JavaNioCharsetCodingErrorAction> method(clazz(), "onMalformedInput", "(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;");
    return method.call(*this, a0);
}

// public final java.nio.charset.CharsetEncoder java.nio.charset.CharsetEncoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)
jnipp::LocalRef<JavaNioCharsetCharsetEncoder> JavaNioCharsetCharsetEncoder::onUnmappableCharacter(const jnipp::Ref<JavaNioCharsetCodingErrorAction>& a0) const {
    static jnipp::Method<JavaNioCharsetCharsetEncoder,JavaNioCharsetCodingErrorAction> method(clazz(), "onUnmappableCharacter", "(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;");
    return method.call(*this, a0);
}

// public final float java.nio.charset.CharsetEncoder.maxBytesPerChar()
jfloat JavaNioCharsetCharsetEncoder::maxBytesPerChar() const {
    static jnipp::Method<jfloat> method(clazz(), "maxBytesPerChar", "()F");
    return method.call(*this);
}

// public java.nio.charset.CodingErrorAction java.nio.charset.CharsetEncoder.malformedInputAction()
jnipp::LocalRef<JavaNioCharsetCodingErrorAction> JavaNioCharsetCharsetEncoder::malformedInputAction() const {
    static jnipp::Method<JavaNioCharsetCodingErrorAction> method(clazz(), "malformedInputAction", "()Ljava/nio/charset/CodingErrorAction;");
    return method.call(*this);
}

// public final byte[] java.nio.charset.CharsetEncoder.replacement()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaNioCharsetCharsetEncoder::replacement() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "replacement", "()[B");
    return method.call(*this);
}

// public java.nio.charset.CodingErrorAction java.nio.charset.CharsetEncoder.unmappableCharacterAction()
jnipp::LocalRef<JavaNioCharsetCodingErrorAction> JavaNioCharsetCharsetEncoder::unmappableCharacterAction() const {
    static jnipp::Method<JavaNioCharsetCodingErrorAction> method(clazz(), "unmappableCharacterAction", "()Ljava/nio/charset/CodingErrorAction;");
    return method.call(*this);
}

// public final java.nio.charset.CharsetEncoder java.nio.charset.CharsetEncoder.replaceWith(byte[])
jnipp::LocalRef<JavaNioCharsetCharsetEncoder> JavaNioCharsetCharsetEncoder::replaceWith(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<JavaNioCharsetCharsetEncoder,jnipp::Array<jbyte>> method(clazz(), "replaceWith", "([B)Ljava/nio/charset/CharsetEncoder;");
    return method.call(*this, a0);
}

// protected void java.nio.charset.CharsetEncoder.implReplaceWith(byte[])
void JavaNioCharsetCharsetEncoder::implReplaceWith(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "implReplaceWith", "([B)V");
    method.call(*this, a0);
}

// protected void java.nio.charset.CharsetEncoder.implOnMalformedInput(java.nio.charset.CodingErrorAction)
void JavaNioCharsetCharsetEncoder::implOnMalformedInput(const jnipp::Ref<JavaNioCharsetCodingErrorAction>& a0) const {
    static jnipp::Method<void,JavaNioCharsetCodingErrorAction> method(clazz(), "implOnMalformedInput", "(Ljava/nio/charset/CodingErrorAction;)V");
    method.call(*this, a0);
}

// protected void java.nio.charset.CharsetEncoder.implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)
void JavaNioCharsetCharsetEncoder::implOnUnmappableCharacter(const jnipp::Ref<JavaNioCharsetCodingErrorAction>& a0) const {
    static jnipp::Method<void,JavaNioCharsetCodingErrorAction> method(clazz(), "implOnUnmappableCharacter", "(Ljava/nio/charset/CodingErrorAction;)V");
    method.call(*this, a0);
}

// protected java.nio.charset.CoderResult java.nio.charset.CharsetEncoder.implFlush(java.nio.ByteBuffer)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCharsetEncoder::implFlush(const jnipp::Ref<JavaNioByteBuffer>& a0) const {
    static jnipp::Method<JavaNioCharsetCoderResult,JavaNioByteBuffer> method(clazz(), "implFlush", "(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;");
    return method.call(*this, a0);
}

// protected void java.nio.charset.CharsetEncoder.implReset()
void JavaNioCharsetCharsetEncoder::implReset() const {
    static jnipp::Method<void> method(clazz(), "implReset", "()V");
    method.call(*this);
}

// private void java.nio.charset.CharsetEncoder.throwIllegalStateException(int,int)
void JavaNioCharsetCharsetEncoder::throwIllegalStateException(jint a0, jint a1) const {
    static jnipp::Method<void,jint,jint> method(clazz(), "throwIllegalStateException", "(II)V");
    method.call(*this, a0, a1);
}

// public boolean java.nio.charset.CharsetEncoder.isLegalReplacement(byte[])
jboolean JavaNioCharsetCharsetEncoder::isLegalReplacement(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<jboolean,jnipp::Array<jbyte>> method(clazz(), "isLegalReplacement", "([B)Z");
    return method.call(*this, a0);
}

// public final float java.nio.charset.CharsetEncoder.averageBytesPerChar()
jfloat JavaNioCharsetCharsetEncoder::averageBytesPerChar() const {
    static jnipp::Method<jfloat> method(clazz(), "averageBytesPerChar", "()F");
    return method.call(*this);
}
#undef ST_RESET
const jnipp::StaticField<jint> JavaNioCharsetCharsetEncoder::ST_RESET ("java/nio/charset/CharsetEncoder", "ST_RESET", "I");
#undef ST_CODING
const jnipp::StaticField<jint> JavaNioCharsetCharsetEncoder::ST_CODING ("java/nio/charset/CharsetEncoder", "ST_CODING", "I");
#undef ST_END
const jnipp::StaticField<jint> JavaNioCharsetCharsetEncoder::ST_END ("java/nio/charset/CharsetEncoder", "ST_END", "I");
#undef ST_FLUSHED
const jnipp::StaticField<jint> JavaNioCharsetCharsetEncoder::ST_FLUSHED ("java/nio/charset/CharsetEncoder", "ST_FLUSHED", "I");
#undef stateNames
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaNioCharsetCharsetEncoder::stateNames ("java/nio/charset/CharsetEncoder", "stateNames", "[Ljava/lang/String;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaNioCharsetCharsetEncoder::$assertionsDisabled ("java/nio/charset/CharsetEncoder", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilZipZipFile::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/zip/ZipFile"));
    return cls;
}

// public java.util.zip.ZipFile(java.lang.String,java.nio.charset.Charset) throws java.io.IOException
jnipp::LocalRef<JavaUtilZipZipFile> JavaUtilZipZipFile::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaNioCharsetCharset>& a1) {
    static jnipp::Constructor<JavaUtilZipZipFile,JavaLangString,JavaNioCharsetCharset> constructor(clazz(), "(Ljava/lang/String;Ljava/nio/charset/Charset;)V");
    return constructor.construct(a0, a1);
}

// public java.util.zip.ZipFile(java.io.File,int,java.nio.charset.Charset) throws java.io.IOException
jnipp::LocalRef<JavaUtilZipZipFile> JavaUtilZipZipFile::construct(const jnipp::Ref<JavaIoFile>& a0, jint a1, const jnipp::Ref<JavaNioCharsetCharset>& a2) {
    static jnipp::Constructor<JavaUtilZipZipFile,JavaIoFile,jint,JavaNioCharsetCharset> constructor(clazz(), "(Ljava/io/File;ILjava/nio/charset/Charset;)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.zip.ZipFile(java.io.File) throws java.util.zip.ZipException,java.io.IOException
jnipp::LocalRef<JavaUtilZipZipFile> JavaUtilZipZipFile::construct(const jnipp::Ref<JavaIoFile>& a0) {
    static jnipp::Constructor<JavaUtilZipZipFile,JavaIoFile> constructor(clazz(), "(Ljava/io/File;)V");
    return constructor.construct(a0);
}

// public java.util.zip.ZipFile(java.io.File,java.nio.charset.Charset) throws java.io.IOException
jnipp::LocalRef<JavaUtilZipZipFile> JavaUtilZipZipFile::construct(const jnipp::Ref<JavaIoFile>& a0, const jnipp::Ref<JavaNioCharsetCharset>& a1) {
    static jnipp::Constructor<JavaUtilZipZipFile,JavaIoFile,JavaNioCharsetCharset> constructor(clazz(), "(Ljava/io/File;Ljava/nio/charset/Charset;)V");
    return constructor.construct(a0, a1);
}

// public java.util.zip.ZipFile(java.lang.String) throws java.io.IOException
jnipp::LocalRef<JavaUtilZipZipFile> JavaUtilZipZipFile::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaUtilZipZipFile,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.util.zip.ZipFile(java.io.File,int) throws java.io.IOException
jnipp::LocalRef<JavaUtilZipZipFile> JavaUtilZipZipFile::construct(const jnipp::Ref<JavaIoFile>& a0, jint a1) {
    static jnipp::Constructor<JavaUtilZipZipFile,JavaIoFile,jint> constructor(clazz(), "(Ljava/io/File;I)V");
    return constructor.construct(a0, a1);
}

// protected void java.util.zip.ZipFile.finalize() throws java.io.IOException
void JavaUtilZipZipFile::finalize() const {
    static jnipp::Method<void> method(clazz(), "finalize", "()V");
    method.call(*this);
}

// public java.lang.String java.util.zip.ZipFile.getName()
jnipp::LocalRef<JavaLangString> JavaUtilZipZipFile::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public int java.util.zip.ZipFile.size()
jint JavaUtilZipZipFile::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// private static native void java.util.zip.ZipFile.close(long)
void JavaUtilZipZipFile::close(jlong a0) {
    static jnipp::StaticMethod<void,jlong> method(clazz(), "close", "(J)V");
    method.call(a0);
}

// public void java.util.zip.ZipFile.close() throws java.io.IOException
void JavaUtilZipZipFile::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// private static native long java.util.zip.ZipFile.getEntry(long,byte[],boolean)
jlong JavaUtilZipZipFile::getEntry(jlong a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jboolean a2) {
    static jnipp::StaticMethod<jlong,jlong,jnipp::Array<jbyte>,jboolean> method(clazz(), "getEntry", "(J[BZ)J");
    return method.call(a0, a1, a2);
}

// public java.util.zip.ZipEntry java.util.zip.ZipFile.getEntry(java.lang.String)
jnipp::LocalRef<JavaUtilZipZipEntry> JavaUtilZipZipFile::getEntry(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilZipZipEntry,JavaLangString> method(clazz(), "getEntry", "(Ljava/lang/String;)Ljava/util/zip/ZipEntry;");
    return method.call(*this, a0);
}

// private static native long java.util.zip.ZipFile.open(java.lang.String,int,long,boolean) throws java.io.IOException
jlong JavaUtilZipZipFile::open(const jnipp::Ref<JavaLangString>& a0, jint a1, jlong a2, jboolean a3) {
    static jnipp::StaticMethod<jlong,JavaLangString,jint,jlong,jboolean> method(clazz(), "open", "(Ljava/lang/String;IJZ)J");
    return method.call(a0, a1, a2, a3);
}

// private static native int java.util.zip.ZipFile.read(long,long,long,byte[],int,int)
jint JavaUtilZipZipFile::read(jlong a0, jlong a1, jlong a2, const jnipp::Ref<jnipp::Array<jbyte>>& a3, jint a4, jint a5) {
    static jnipp::StaticMethod<jint,jlong,jlong,jlong,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "(JJJ[BII)I");
    return method.call(a0, a1, a2, a3, a4, a5);
}

// private static native void java.util.zip.ZipFile.initIDs()
void JavaUtilZipZipFile::initIDs() {
    static jnipp::StaticMethod<void> method(clazz(), "initIDs", "()V");
    method.call();
}

// private void java.util.zip.ZipFile.ensureOpen()
void JavaUtilZipZipFile::ensureOpen() const {
    static jnipp::Method<void> method(clazz(), "ensureOpen", "()V");
    method.call(*this);
}

// public java.io.InputStream java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry) throws java.io.IOException
jnipp::LocalRef<JavaIoInputStream> JavaUtilZipZipFile::getInputStream(const jnipp::Ref<JavaUtilZipZipEntry>& a0) const {
    static jnipp::Method<JavaIoInputStream,JavaUtilZipZipEntry> method(clazz(), "getInputStream", "(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;");
    return method.call(*this, a0);
}

// private boolean java.util.zip.ZipFile.startsWithLocHeader()
jboolean JavaUtilZipZipFile::startsWithLocHeader() const {
    static jnipp::Method<jboolean> method(clazz(), "startsWithLocHeader", "()Z");
    return method.call(*this);
}

// public java.util.Enumeration java.util.zip.ZipFile.entries()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilZipZipFile::entries() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "entries", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.lang.String java.util.zip.ZipFile.getComment()
jnipp::LocalRef<JavaLangString> JavaUtilZipZipFile::getComment() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getComment", "()Ljava/lang/String;");
    return method.call(*this);
}

// private static native void java.util.zip.ZipFile.freeEntry(long,long)
void JavaUtilZipZipFile::freeEntry(jlong a0, jlong a1) {
    static jnipp::StaticMethod<void,jlong,jlong> method(clazz(), "freeEntry", "(JJ)V");
    method.call(a0, a1);
}

// private java.util.zip.Inflater java.util.zip.ZipFile.getInflater()
jnipp::LocalRef<JavaUtilZipInflater> JavaUtilZipZipFile::getInflater() const {
    static jnipp::Method<JavaUtilZipInflater> method(clazz(), "getInflater", "()Ljava/util/zip/Inflater;");
    return method.call(*this);
}

// private void java.util.zip.ZipFile.releaseInflater(java.util.zip.Inflater)
void JavaUtilZipZipFile::releaseInflater(const jnipp::Ref<JavaUtilZipInflater>& a0) const {
    static jnipp::Method<void,JavaUtilZipInflater> method(clazz(), "releaseInflater", "(Ljava/util/zip/Inflater;)V");
    method.call(*this, a0);
}

// private java.util.zip.ZipEntry java.util.zip.ZipFile.getZipEntry(java.lang.String,long)
jnipp::LocalRef<JavaUtilZipZipEntry> JavaUtilZipZipFile::getZipEntry(const jnipp::Ref<JavaLangString>& a0, jlong a1) const {
    static jnipp::Method<JavaUtilZipZipEntry,JavaLangString,jlong> method(clazz(), "getZipEntry", "(Ljava/lang/String;J)Ljava/util/zip/ZipEntry;");
    return method.call(*this, a0, a1);
}

// private static native long java.util.zip.ZipFile.getNextEntry(long,int)
jlong JavaUtilZipZipFile::getNextEntry(jlong a0, jint a1) {
    static jnipp::StaticMethod<jlong,jlong,jint> method(clazz(), "getNextEntry", "(JI)J");
    return method.call(a0, a1);
}

// private void java.util.zip.ZipFile.ensureOpenOrZipException() throws java.io.IOException
void JavaUtilZipZipFile::ensureOpenOrZipException() const {
    static jnipp::Method<void> method(clazz(), "ensureOpenOrZipException", "()V");
    method.call(*this);
}

// private static native int java.util.zip.ZipFile.getTotal(long)
jint JavaUtilZipZipFile::getTotal(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "getTotal", "(J)I");
    return method.call(a0);
}

// private static native boolean java.util.zip.ZipFile.startsWithLOC(long)
jboolean JavaUtilZipZipFile::startsWithLOC(jlong a0) {
    static jnipp::StaticMethod<jboolean,jlong> method(clazz(), "startsWithLOC", "(J)Z");
    return method.call(a0);
}

// private static native long java.util.zip.ZipFile.getEntryTime(long)
jlong JavaUtilZipZipFile::getEntryTime(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "getEntryTime", "(J)J");
    return method.call(a0);
}

// private static native long java.util.zip.ZipFile.getEntryCrc(long)
jlong JavaUtilZipZipFile::getEntryCrc(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "getEntryCrc", "(J)J");
    return method.call(a0);
}

// private static native long java.util.zip.ZipFile.getEntryCSize(long)
jlong JavaUtilZipZipFile::getEntryCSize(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "getEntryCSize", "(J)J");
    return method.call(a0);
}

// private static native long java.util.zip.ZipFile.getEntrySize(long)
jlong JavaUtilZipZipFile::getEntrySize(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "getEntrySize", "(J)J");
    return method.call(a0);
}

// private static native int java.util.zip.ZipFile.getEntryMethod(long)
jint JavaUtilZipZipFile::getEntryMethod(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "getEntryMethod", "(J)I");
    return method.call(a0);
}

// private static native int java.util.zip.ZipFile.getEntryFlag(long)
jint JavaUtilZipZipFile::getEntryFlag(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "getEntryFlag", "(J)I");
    return method.call(a0);
}

// private static native byte[] java.util.zip.ZipFile.getCommentBytes(long)
jnipp::LocalRef<jnipp::Array<jbyte>> JavaUtilZipZipFile::getCommentBytes(jlong a0) {
    static jnipp::StaticMethod<jnipp::Array<jbyte>,jlong> method(clazz(), "getCommentBytes", "(J)[B");
    return method.call(a0);
}

// private static native byte[] java.util.zip.ZipFile.getEntryBytes(long,int)
jnipp::LocalRef<jnipp::Array<jbyte>> JavaUtilZipZipFile::getEntryBytes(jlong a0, jint a1) {
    static jnipp::StaticMethod<jnipp::Array<jbyte>,jlong,jint> method(clazz(), "getEntryBytes", "(JI)[B");
    return method.call(a0, a1);
}

// private static native java.lang.String java.util.zip.ZipFile.getZipMessage(long)
jnipp::LocalRef<JavaLangString> JavaUtilZipZipFile::getZipMessage(jlong a0) {
    static jnipp::StaticMethod<JavaLangString,jlong> method(clazz(), "getZipMessage", "(J)Ljava/lang/String;");
    return method.call(a0);
}
#undef STORED
const jnipp::StaticField<jint> JavaUtilZipZipFile::STORED ("java/util/zip/ZipFile", "STORED", "I");
#undef DEFLATED
const jnipp::StaticField<jint> JavaUtilZipZipFile::DEFLATED ("java/util/zip/ZipFile", "DEFLATED", "I");
#undef OPEN_READ
const jnipp::StaticField<jint> JavaUtilZipZipFile::OPEN_READ ("java/util/zip/ZipFile", "OPEN_READ", "I");
#undef OPEN_DELETE
const jnipp::StaticField<jint> JavaUtilZipZipFile::OPEN_DELETE ("java/util/zip/ZipFile", "OPEN_DELETE", "I");
#undef usemmap
const jnipp::StaticField<jboolean> JavaUtilZipZipFile::usemmap ("java/util/zip/ZipFile", "usemmap", "Z");
#undef JZENTRY_NAME
const jnipp::StaticField<jint> JavaUtilZipZipFile::JZENTRY_NAME ("java/util/zip/ZipFile", "JZENTRY_NAME", "I");
#undef JZENTRY_EXTRA
const jnipp::StaticField<jint> JavaUtilZipZipFile::JZENTRY_EXTRA ("java/util/zip/ZipFile", "JZENTRY_EXTRA", "I");
#undef JZENTRY_COMMENT
const jnipp::StaticField<jint> JavaUtilZipZipFile::JZENTRY_COMMENT ("java/util/zip/ZipFile", "JZENTRY_COMMENT", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilJarJarFile::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/jar/JarFile"));
    return cls;
}

// public java.util.jar.JarFile(java.io.File,boolean,int) throws java.io.IOException
jnipp::LocalRef<JavaUtilJarJarFile> JavaUtilJarJarFile::construct(const jnipp::Ref<JavaIoFile>& a0, jboolean a1, jint a2) {
    static jnipp::Constructor<JavaUtilJarJarFile,JavaIoFile,jboolean,jint> constructor(clazz(), "(Ljava/io/File;ZI)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.jar.JarFile(java.io.File,boolean) throws java.io.IOException
jnipp::LocalRef<JavaUtilJarJarFile> JavaUtilJarJarFile::construct(const jnipp::Ref<JavaIoFile>& a0, jboolean a1) {
    static jnipp::Constructor<JavaUtilJarJarFile,JavaIoFile,jboolean> constructor(clazz(), "(Ljava/io/File;Z)V");
    return constructor.construct(a0, a1);
}

// public java.util.jar.JarFile(java.io.File) throws java.io.IOException
jnipp::LocalRef<JavaUtilJarJarFile> JavaUtilJarJarFile::construct(const jnipp::Ref<JavaIoFile>& a0) {
    static jnipp::Constructor<JavaUtilJarJarFile,JavaIoFile> constructor(clazz(), "(Ljava/io/File;)V");
    return constructor.construct(a0);
}

// public java.util.jar.JarFile(java.lang.String,boolean) throws java.io.IOException
jnipp::LocalRef<JavaUtilJarJarFile> JavaUtilJarJarFile::construct(const jnipp::Ref<JavaLangString>& a0, jboolean a1) {
    static jnipp::Constructor<JavaUtilJarJarFile,JavaLangString,jboolean> constructor(clazz(), "(Ljava/lang/String;Z)V");
    return constructor.construct(a0, a1);
}

// public java.util.jar.JarFile(java.lang.String) throws java.io.IOException
jnipp::LocalRef<JavaUtilJarJarFile> JavaUtilJarJarFile::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaUtilJarJarFile,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// private byte[] java.util.jar.JarFile.getBytes(java.util.zip.ZipEntry) throws java.io.IOException
jnipp::LocalRef<jnipp::Array<jbyte>> JavaUtilJarJarFile::getBytes(const jnipp::Ref<JavaUtilZipZipEntry>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaUtilZipZipEntry> method(clazz(), "getBytes", "(Ljava/util/zip/ZipEntry;)[B");
    return method.call(*this, a0);
}

// java.security.CodeSource java.util.jar.JarFile.getCodeSource(java.net.URL,java.lang.String)
jnipp::LocalRef<JavaSecurityCodeSource> JavaUtilJarJarFile::getCodeSource(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaSecurityCodeSource,JavaNetURL,JavaLangString> method(clazz(), "getCodeSource", "(Ljava/net/URL;Ljava/lang/String;)Ljava/security/CodeSource;");
    return method.call(*this, a0, a1);
}

// public java.util.zip.ZipEntry java.util.jar.JarFile.getEntry(java.lang.String)
jnipp::LocalRef<JavaUtilZipZipEntry> JavaUtilJarJarFile::getEntry(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilZipZipEntry,JavaLangString> method(clazz(), "getEntry", "(Ljava/lang/String;)Ljava/util/zip/ZipEntry;");
    return method.call(*this, a0);
}

// public synchronized java.io.InputStream java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry) throws java.io.IOException
jnipp::LocalRef<JavaIoInputStream> JavaUtilJarJarFile::getInputStream(const jnipp::Ref<JavaUtilZipZipEntry>& a0) const {
    static jnipp::Method<JavaIoInputStream,JavaUtilZipZipEntry> method(clazz(), "getInputStream", "(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;");
    return method.call(*this, a0);
}

// public java.util.jar.Manifest java.util.jar.JarFile.getManifest() throws java.io.IOException
jnipp::LocalRef<JavaUtilJarManifest> JavaUtilJarJarFile::getManifest() const {
    static jnipp::Method<JavaUtilJarManifest> method(clazz(), "getManifest", "()Ljava/util/jar/Manifest;");
    return method.call(*this);
}

// public java.util.Enumeration java.util.jar.JarFile.entries()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilJarJarFile::entries() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "entries", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.util.jar.JarEntry java.util.jar.JarFile.getJarEntry(java.lang.String)
jnipp::LocalRef<JavaUtilJarJarEntry> JavaUtilJarJarFile::getJarEntry(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaUtilJarJarEntry,JavaLangString> method(clazz(), "getJarEntry", "(Ljava/lang/String;)Ljava/util/jar/JarEntry;");
    return method.call(*this, a0);
}

// boolean java.util.jar.JarFile.hasClassPathAttribute() throws java.io.IOException
jboolean JavaUtilJarJarFile::hasClassPathAttribute() const {
    static jnipp::Method<jboolean> method(clazz(), "hasClassPathAttribute", "()Z");
    return method.call(*this);
}

// private java.util.jar.Manifest java.util.jar.JarFile.getManifestFromReference() throws java.io.IOException
jnipp::LocalRef<JavaUtilJarManifest> JavaUtilJarJarFile::getManifestFromReference() const {
    static jnipp::Method<JavaUtilJarManifest> method(clazz(), "getManifestFromReference", "()Ljava/util/jar/Manifest;");
    return method.call(*this);
}

// private native java.lang.String[] java.util.jar.JarFile.getMetaInfEntryNames()
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilJarJarFile::getMetaInfEntryNames() const {
    static jnipp::Method<jnipp::Array<JavaLangString>> method(clazz(), "getMetaInfEntryNames", "()[Ljava/lang/String;");
    return method.call(*this);
}

// private void java.util.jar.JarFile.maybeInstantiateVerifier() throws java.io.IOException
void JavaUtilJarJarFile::maybeInstantiateVerifier() const {
    static jnipp::Method<void> method(clazz(), "maybeInstantiateVerifier", "()V");
    method.call(*this);
}

// private void java.util.jar.JarFile.initializeVerifier()
void JavaUtilJarJarFile::initializeVerifier() const {
    static jnipp::Method<void> method(clazz(), "initializeVerifier", "()V");
    method.call(*this);
}

// private java.util.jar.JarEntry java.util.jar.JarFile.getManEntry()
jnipp::LocalRef<JavaUtilJarJarEntry> JavaUtilJarJarFile::getManEntry() const {
    static jnipp::Method<JavaUtilJarJarEntry> method(clazz(), "getManEntry", "()Ljava/util/jar/JarEntry;");
    return method.call(*this);
}

// private boolean java.util.jar.JarFile.isKnownToNotHaveClassPathAttribute()
jboolean JavaUtilJarJarFile::isKnownToNotHaveClassPathAttribute() const {
    static jnipp::Method<jboolean> method(clazz(), "isKnownToNotHaveClassPathAttribute", "()Z");
    return method.call(*this);
}

// private synchronized void java.util.jar.JarFile.ensureInitialization()
void JavaUtilJarJarFile::ensureInitialization() const {
    static jnipp::Method<void> method(clazz(), "ensureInitialization", "()V");
    method.call(*this);
}

// java.util.jar.JarEntry java.util.jar.JarFile.newEntry(java.util.zip.ZipEntry)
jnipp::LocalRef<JavaUtilJarJarEntry> JavaUtilJarJarFile::newEntry(const jnipp::Ref<JavaUtilZipZipEntry>& a0) const {
    static jnipp::Method<JavaUtilJarJarEntry,JavaUtilZipZipEntry> method(clazz(), "newEntry", "(Ljava/util/zip/ZipEntry;)Ljava/util/jar/JarEntry;");
    return method.call(*this, a0);
}

// java.util.Enumeration java.util.jar.JarFile.entryNames(java.security.CodeSource[])
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilJarJarFile::entryNames(const jnipp::Ref<jnipp::Array<JavaSecurityCodeSource>>& a0) const {
    static jnipp::Method<JavaUtilEnumeration,jnipp::Array<JavaSecurityCodeSource>> method(clazz(), "entryNames", "([Ljava/security/CodeSource;)Ljava/util/Enumeration;");
    return method.call(*this, a0);
}

// java.util.Enumeration java.util.jar.JarFile.entries2()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilJarJarFile::entries2() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "entries2", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// java.security.CodeSource[] java.util.jar.JarFile.getCodeSources(java.net.URL)
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSource>> JavaUtilJarJarFile::getCodeSources(const jnipp::Ref<JavaNetURL>& a0) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSource>,JavaNetURL> method(clazz(), "getCodeSources", "(Ljava/net/URL;)[Ljava/security/CodeSource;");
    return method.call(*this, a0);
}

// private java.util.Enumeration java.util.jar.JarFile.unsignedEntryNames()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilJarJarFile::unsignedEntryNames() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "unsignedEntryNames", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// void java.util.jar.JarFile.setEagerValidation(boolean)
void JavaUtilJarJarFile::setEagerValidation(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setEagerValidation", "(Z)V");
    method.call(*this, a0);
}

// java.util.List java.util.jar.JarFile.getManifestDigests()
jnipp::LocalRef<JavaUtilList> JavaUtilJarJarFile::getManifestDigests() const {
    static jnipp::Method<JavaUtilList> method(clazz(), "getManifestDigests", "()Ljava/util/List;");
    return method.call(*this);
}
#undef MANIFEST_NAME
const jnipp::StaticField<JavaLangString> JavaUtilJarJarFile::MANIFEST_NAME ("java/util/jar/JarFile", "MANIFEST_NAME", "Ljava/lang/String;");
#undef lastOcc
jnipp::StaticField<jnipp::Array<jint>> JavaUtilJarJarFile::lastOcc ("java/util/jar/JarFile", "lastOcc", "[I");
#undef optoSft
jnipp::StaticField<jnipp::Array<jint>> JavaUtilJarJarFile::optoSft ("java/util/jar/JarFile", "optoSft", "[I");
#undef src
jnipp::StaticField<jnipp::Array<jchar>> JavaUtilJarJarFile::src ("java/util/jar/JarFile", "src", "[C");
#undef javaHome
jnipp::StaticField<JavaLangString> JavaUtilJarJarFile::javaHome ("java/util/jar/JarFile", "javaHome", "Ljava/lang/String;");
#undef jarNames
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaUtilJarJarFile::jarNames ("java/util/jar/JarFile", "jarNames", "[Ljava/lang/String;");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityCertCertPath::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/cert/CertPath"));
    return cls;
}

// protected java.security.cert.CertPath(java.lang.String)
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityCertCertPath::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaSecurityCertCertPath,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public boolean java.security.cert.CertPath.equals(java.lang.Object)
jboolean JavaSecurityCertCertPath::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.security.cert.CertPath.hashCode()
jint JavaSecurityCertCertPath::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.String java.security.cert.CertPath.getType()
jnipp::LocalRef<JavaLangString> JavaSecurityCertCertPath::getType() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getType", "()Ljava/lang/String;");
    return method.call(*this);
}

// protected java.lang.Object java.security.cert.CertPath.writeReplace() throws java.io.ObjectStreamException
jnipp::LocalRef<JavaLangObject> JavaSecurityCertCertPath::writeReplace() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "writeReplace", "()Ljava/lang/Object;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityCertCertPath::serialVersionUID ("java/security/cert/CertPath", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilProperties::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Properties"));
    return cls;
}

// public java.util.Properties()
jnipp::LocalRef<JavaUtilProperties> JavaUtilProperties::construct() {
    static jnipp::Constructor<JavaUtilProperties> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.Properties(java.util.Properties)
jnipp::LocalRef<JavaUtilProperties> JavaUtilProperties::construct(const jnipp::Ref<JavaUtilProperties>& a0) {
    static jnipp::Constructor<JavaUtilProperties,JavaUtilProperties> constructor(clazz(), "(Ljava/util/Properties;)V");
    return constructor.construct(a0);
}

// public synchronized java.lang.Object java.util.Properties.setProperty(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangObject> JavaUtilProperties::setProperty(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangString,JavaLangString> method(clazz(), "setProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.util.Properties.getProperty(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilProperties::getProperty(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaLangString,JavaLangString,JavaLangString> method(clazz(), "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.util.Properties.getProperty(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilProperties::getProperty(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public synchronized void java.util.Properties.load(java.io.Reader) throws java.io.IOException
void JavaUtilProperties::load(const jnipp::Ref<JavaIoReader>& a0) const {
    static jnipp::Method<void,JavaIoReader> method(clazz(), "load", "(Ljava/io/Reader;)V");
    method.call(*this, a0);
}

// public synchronized void java.util.Properties.load(java.io.InputStream) throws java.io.IOException
void JavaUtilProperties::load(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<void,JavaIoInputStream> method(clazz(), "load", "(Ljava/io/InputStream;)V");
    method.call(*this, a0);
}

// private void java.util.Properties.load0(java.util.Properties$LineReader) throws java.io.IOException
void JavaUtilProperties::load0(const jnipp::Ref<JavaUtilProperties_LineReader>& a0) const {
    static jnipp::Method<void,JavaUtilProperties_LineReader> method(clazz(), "load0", "(Ljava/util/Properties$LineReader;)V");
    method.call(*this, a0);
}

// private synchronized void java.util.Properties.enumerate(java.util.Hashtable)
void JavaUtilProperties::enumerate(const jnipp::Ref<JavaUtilHashtable>& a0) const {
    static jnipp::Method<void,JavaUtilHashtable> method(clazz(), "enumerate", "(Ljava/util/Hashtable;)V");
    method.call(*this, a0);
}

// public void java.util.Properties.list(java.io.PrintWriter)
void JavaUtilProperties::list(const jnipp::Ref<JavaIoPrintWriter>& a0) const {
    static jnipp::Method<void,JavaIoPrintWriter> method(clazz(), "list", "(Ljava/io/PrintWriter;)V");
    method.call(*this, a0);
}

// public void java.util.Properties.list(java.io.PrintStream)
void JavaUtilProperties::list(const jnipp::Ref<JavaIoPrintStream>& a0) const {
    static jnipp::Method<void,JavaIoPrintStream> method(clazz(), "list", "(Ljava/io/PrintStream;)V");
    method.call(*this, a0);
}

// private java.lang.String java.util.Properties.loadConvert(char[],int,int,char[])
jnipp::LocalRef<JavaLangString> JavaUtilProperties::loadConvert(const jnipp::Ref<jnipp::Array<jchar>>& a0, jint a1, jint a2, const jnipp::Ref<jnipp::Array<jchar>>& a3) const {
    static jnipp::Method<JavaLangString,jnipp::Array<jchar>,jint,jint,jnipp::Array<jchar>> method(clazz(), "loadConvert", "([CII[C)Ljava/lang/String;");
    return method.call(*this, a0, a1, a2, a3);
}

// private java.lang.String java.util.Properties.saveConvert(java.lang.String,boolean,boolean)
jnipp::LocalRef<JavaLangString> JavaUtilProperties::saveConvert(const jnipp::Ref<JavaLangString>& a0, jboolean a1, jboolean a2) const {
    static jnipp::Method<JavaLangString,JavaLangString,jboolean,jboolean> method(clazz(), "saveConvert", "(Ljava/lang/String;ZZ)Ljava/lang/String;");
    return method.call(*this, a0, a1, a2);
}

// private static void java.util.Properties.writeComments(java.io.BufferedWriter,java.lang.String) throws java.io.IOException
void JavaUtilProperties::writeComments(const jnipp::Ref<JavaIoBufferedWriter>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<void,JavaIoBufferedWriter,JavaLangString> method(clazz(), "writeComments", "(Ljava/io/BufferedWriter;Ljava/lang/String;)V");
    method.call(a0, a1);
}

// public void java.util.Properties.save(java.io.OutputStream,java.lang.String)
void JavaUtilProperties::save(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaIoOutputStream,JavaLangString> method(clazz(), "save", "(Ljava/io/OutputStream;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public void java.util.Properties.store(java.io.OutputStream,java.lang.String) throws java.io.IOException
void JavaUtilProperties::store(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaIoOutputStream,JavaLangString> method(clazz(), "store", "(Ljava/io/OutputStream;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public void java.util.Properties.store(java.io.Writer,java.lang.String) throws java.io.IOException
void JavaUtilProperties::store(const jnipp::Ref<JavaIoWriter>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaIoWriter,JavaLangString> method(clazz(), "store", "(Ljava/io/Writer;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// private void java.util.Properties.store0(java.io.BufferedWriter,java.lang.String,boolean) throws java.io.IOException
void JavaUtilProperties::store0(const jnipp::Ref<JavaIoBufferedWriter>& a0, const jnipp::Ref<JavaLangString>& a1, jboolean a2) const {
    static jnipp::Method<void,JavaIoBufferedWriter,JavaLangString,jboolean> method(clazz(), "store0", "(Ljava/io/BufferedWriter;Ljava/lang/String;Z)V");
    method.call(*this, a0, a1, a2);
}

// public synchronized void java.util.Properties.loadFromXML(java.io.InputStream) throws java.io.IOException,java.util.InvalidPropertiesFormatException
void JavaUtilProperties::loadFromXML(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<void,JavaIoInputStream> method(clazz(), "loadFromXML", "(Ljava/io/InputStream;)V");
    method.call(*this, a0);
}

// public void java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String) throws java.io.IOException
void JavaUtilProperties::storeToXML(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaIoOutputStream,JavaLangString> method(clazz(), "storeToXML", "(Ljava/io/OutputStream;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public void java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String) throws java.io.IOException
void JavaUtilProperties::storeToXML(const jnipp::Ref<JavaIoOutputStream>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2) const {
    static jnipp::Method<void,JavaIoOutputStream,JavaLangString,JavaLangString> method(clazz(), "storeToXML", "(Ljava/io/OutputStream;Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1, a2);
}

// public java.util.Enumeration java.util.Properties.propertyNames()
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilProperties::propertyNames() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "propertyNames", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.util.Set java.util.Properties.stringPropertyNames()
jnipp::LocalRef<JavaUtilSet> JavaUtilProperties::stringPropertyNames() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "stringPropertyNames", "()Ljava/util/Set;");
    return method.call(*this);
}

// private synchronized void java.util.Properties.enumerateStringProperties(java.util.Hashtable)
void JavaUtilProperties::enumerateStringProperties(const jnipp::Ref<JavaUtilHashtable>& a0) const {
    static jnipp::Method<void,JavaUtilHashtable> method(clazz(), "enumerateStringProperties", "(Ljava/util/Hashtable;)V");
    method.call(*this, a0);
}

// private static char java.util.Properties.toHex(int)
jchar JavaUtilProperties::toHex(jint a0) {
    static jnipp::StaticMethod<jchar,jint> method(clazz(), "toHex", "(I)C");
    return method.call(a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilProperties::serialVersionUID ("java/util/Properties", "serialVersionUID", "J");
#undef hexDigit
const jnipp::StaticField<jnipp::Array<jchar>> JavaUtilProperties::hexDigit ("java/util/Properties", "hexDigit", "[C");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityProvider::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/Provider"));
    return cls;
}

// protected java.security.Provider(java.lang.String,double,java.lang.String)
jnipp::LocalRef<JavaSecurityProvider> JavaSecurityProvider::construct(const jnipp::Ref<JavaLangString>& a0, jdouble a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::Constructor<JavaSecurityProvider,JavaLangString,jdouble,JavaLangString> constructor(clazz(), "(Ljava/lang/String;DLjava/lang/String;)V");
    return constructor.construct(a0, a1, a2);
}

// public synchronized java.lang.Object java.security.Provider.remove(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaSecurityProvider::remove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public java.lang.Object java.security.Provider.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaSecurityProvider::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public synchronized java.lang.Object java.security.Provider.put(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaSecurityProvider::put(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.security.Provider.getProperty(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaSecurityProvider::getProperty(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.util.Collection java.security.Provider.values()
jnipp::LocalRef<JavaUtilCollection> JavaSecurityProvider::values() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "values", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public synchronized void java.security.Provider.clear()
void JavaSecurityProvider::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// public java.lang.String java.security.Provider.getName()
jnipp::LocalRef<JavaLangString> JavaSecurityProvider::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public synchronized java.util.Set java.security.Provider.entrySet()
jnipp::LocalRef<JavaUtilSet> JavaSecurityProvider::entrySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "entrySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// public synchronized void java.security.Provider.putAll(java.util.Map)
void JavaSecurityProvider::putAll(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "putAll", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// public synchronized void java.security.Provider.load(java.io.InputStream) throws java.io.IOException
void JavaSecurityProvider::load(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<void,JavaIoInputStream> method(clazz(), "load", "(Ljava/io/InputStream;)V");
    method.call(*this, a0);
}

// private void java.security.Provider.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaSecurityProvider::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// public java.util.Enumeration java.security.Provider.elements()
jnipp::LocalRef<JavaUtilEnumeration> JavaSecurityProvider::elements() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "elements", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.util.Enumeration java.security.Provider.keys()
jnipp::LocalRef<JavaUtilEnumeration> JavaSecurityProvider::keys() const {
    static jnipp::Method<JavaUtilEnumeration> method(clazz(), "keys", "()Ljava/util/Enumeration;");
    return method.call(*this);
}

// public java.util.Set java.security.Provider.keySet()
jnipp::LocalRef<JavaUtilSet> JavaSecurityProvider::keySet() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "keySet", "()Ljava/util/Set;");
    return method.call(*this);
}

// private void java.security.Provider.check(java.lang.String)
void JavaSecurityProvider::check(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "check", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// public double java.security.Provider.getVersion()
jdouble JavaSecurityProvider::getVersion() const {
    static jnipp::Method<jdouble> method(clazz(), "getVersion", "()D");
    return method.call(*this);
}

// public java.lang.String java.security.Provider.getInfo()
jnipp::LocalRef<JavaLangString> JavaSecurityProvider::getInfo() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getInfo", "()Ljava/lang/String;");
    return method.call(*this);
}

// private void java.security.Provider.checkInitialized()
void JavaSecurityProvider::checkInitialized() const {
    static jnipp::Method<void> method(clazz(), "checkInitialized", "()V");
    method.call(*this);
}

// private void java.security.Provider.putId()
void JavaSecurityProvider::putId() const {
    static jnipp::Method<void> method(clazz(), "putId", "()V");
    method.call(*this);
}

// private void java.security.Provider.implPutAll(java.util.Map)
void JavaSecurityProvider::implPutAll(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "implPutAll", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// private java.lang.Object java.security.Provider.implRemove(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaSecurityProvider::implRemove(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "implRemove", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// private java.lang.Object java.security.Provider.implPut(java.lang.Object,java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaSecurityProvider::implPut(const jnipp::Ref<JavaLangObject>& a0, const jnipp::Ref<JavaLangObject>& a1) const {
    static jnipp::Method<JavaLangObject,JavaLangObject,JavaLangObject> method(clazz(), "implPut", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0, a1);
}

// private void java.security.Provider.implClear()
void JavaSecurityProvider::implClear() const {
    static jnipp::Method<void> method(clazz(), "implClear", "()V");
    method.call(*this);
}

// private void java.security.Provider.ensureLegacyParsed()
void JavaSecurityProvider::ensureLegacyParsed() const {
    static jnipp::Method<void> method(clazz(), "ensureLegacyParsed", "()V");
    method.call(*this);
}

// private void java.security.Provider.removeInvalidServices(java.util.Map)
void JavaSecurityProvider::removeInvalidServices(const jnipp::Ref<JavaUtilMap>& a0) const {
    static jnipp::Method<void,JavaUtilMap> method(clazz(), "removeInvalidServices", "(Ljava/util/Map;)V");
    method.call(*this, a0);
}

// private java.lang.String[] java.security.Provider.getTypeAndAlgorithm(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaSecurityProvider::getTypeAndAlgorithm(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<JavaLangString>,JavaLangString> method(clazz(), "getTypeAndAlgorithm", "(Ljava/lang/String;)[Ljava/lang/String;");
    return method.call(*this, a0);
}

// private void java.security.Provider.parseLegacyPut(java.lang.String,java.lang.String)
void JavaSecurityProvider::parseLegacyPut(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangString> method(clazz(), "parseLegacyPut", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public synchronized java.security.Provider$Service java.security.Provider.getService(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaSecurityProvider_Service> JavaSecurityProvider::getService(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaSecurityProvider_Service,JavaLangString,JavaLangString> method(clazz(), "getService", "(Ljava/lang/String;Ljava/lang/String;)Ljava/security/Provider$Service;");
    return method.call(*this, a0, a1);
}

// public synchronized java.util.Set java.security.Provider.getServices()
jnipp::LocalRef<JavaUtilSet> JavaSecurityProvider::getServices() const {
    static jnipp::Method<JavaUtilSet> method(clazz(), "getServices", "()Ljava/util/Set;");
    return method.call(*this);
}

// protected synchronized void java.security.Provider.putService(java.security.Provider$Service)
void JavaSecurityProvider::putService(const jnipp::Ref<JavaSecurityProvider_Service>& a0) const {
    static jnipp::Method<void,JavaSecurityProvider_Service> method(clazz(), "putService", "(Ljava/security/Provider$Service;)V");
    method.call(*this, a0);
}

// private void java.security.Provider.putPropertyStrings(java.security.Provider$Service)
void JavaSecurityProvider::putPropertyStrings(const jnipp::Ref<JavaSecurityProvider_Service>& a0) const {
    static jnipp::Method<void,JavaSecurityProvider_Service> method(clazz(), "putPropertyStrings", "(Ljava/security/Provider$Service;)V");
    method.call(*this, a0);
}

// private void java.security.Provider.removePropertyStrings(java.security.Provider$Service)
void JavaSecurityProvider::removePropertyStrings(const jnipp::Ref<JavaSecurityProvider_Service>& a0) const {
    static jnipp::Method<void,JavaSecurityProvider_Service> method(clazz(), "removePropertyStrings", "(Ljava/security/Provider$Service;)V");
    method.call(*this, a0);
}

// protected synchronized void java.security.Provider.removeService(java.security.Provider$Service)
void JavaSecurityProvider::removeService(const jnipp::Ref<JavaSecurityProvider_Service>& a0) const {
    static jnipp::Method<void,JavaSecurityProvider_Service> method(clazz(), "removeService", "(Ljava/security/Provider$Service;)V");
    method.call(*this, a0);
}

// private void java.security.Provider.implRemoveService(java.security.Provider$Service)
void JavaSecurityProvider::implRemoveService(const jnipp::Ref<JavaSecurityProvider_Service>& a0) const {
    static jnipp::Method<void,JavaSecurityProvider_Service> method(clazz(), "implRemoveService", "(Ljava/security/Provider$Service;)V");
    method.call(*this, a0);
}

// private static void java.security.Provider.addEngine(java.lang.String,boolean,java.lang.String)
void JavaSecurityProvider::addEngine(const jnipp::Ref<JavaLangString>& a0, jboolean a1, const jnipp::Ref<JavaLangString>& a2) {
    static jnipp::StaticMethod<void,JavaLangString,jboolean,JavaLangString> method(clazz(), "addEngine", "(Ljava/lang/String;ZLjava/lang/String;)V");
    method.call(a0, a1, a2);
}

// private static java.lang.String java.security.Provider.getEngineName(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaSecurityProvider::getEngineName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "getEngineName", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityProvider::serialVersionUID ("java/security/Provider", "serialVersionUID", "J");
#undef debug
const jnipp::StaticField<SunSecurityUtilDebug> JavaSecurityProvider::debug ("java/security/Provider", "debug", "Lsun/security/util/Debug;");
#undef ALIAS_PREFIX
const jnipp::StaticField<JavaLangString> JavaSecurityProvider::ALIAS_PREFIX ("java/security/Provider", "ALIAS_PREFIX", "Ljava/lang/String;");
#undef ALIAS_PREFIX_LOWER
const jnipp::StaticField<JavaLangString> JavaSecurityProvider::ALIAS_PREFIX_LOWER ("java/security/Provider", "ALIAS_PREFIX_LOWER", "Ljava/lang/String;");
#undef ALIAS_LENGTH
const jnipp::StaticField<jint> JavaSecurityProvider::ALIAS_LENGTH ("java/security/Provider", "ALIAS_LENGTH", "I");
#undef previousKey
jnipp::StaticField<JavaSecurityProvider_ServiceKey> JavaSecurityProvider::previousKey ("java/security/Provider", "previousKey", "Ljava/security/Provider$ServiceKey;");
#undef knownEngines
const jnipp::StaticField<JavaUtilMap> JavaSecurityProvider::knownEngines ("java/security/Provider", "knownEngines", "Ljava/util/Map;");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityCertCertificateFactorySpi::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/cert/CertificateFactorySpi"));
    return cls;
}

// public java.security.cert.CertificateFactorySpi()
jnipp::LocalRef<JavaSecurityCertCertificateFactorySpi> JavaSecurityCertCertificateFactorySpi::construct() {
    static jnipp::Constructor<JavaSecurityCertCertificateFactorySpi> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.Iterator java.security.cert.CertificateFactorySpi.engineGetCertPathEncodings()
jnipp::LocalRef<JavaUtilIterator> JavaSecurityCertCertificateFactorySpi::engineGetCertPathEncodings() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "engineGetCertPathEncodings", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// public java.security.cert.CertPath java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.util.List) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityCertCertificateFactorySpi::engineGenerateCertPath(const jnipp::Ref<JavaUtilList>& a0) const {
    static jnipp::Method<JavaSecurityCertCertPath,JavaUtilList> method(clazz(), "engineGenerateCertPath", "(Ljava/util/List;)Ljava/security/cert/CertPath;");
    return method.call(*this, a0);
}

// public java.security.cert.CertPath java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.io.InputStream,java.lang.String) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityCertCertificateFactorySpi::engineGenerateCertPath(const jnipp::Ref<JavaIoInputStream>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaSecurityCertCertPath,JavaIoInputStream,JavaLangString> method(clazz(), "engineGenerateCertPath", "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/security/cert/CertPath;");
    return method.call(*this, a0, a1);
}

// public java.security.cert.CertPath java.security.cert.CertificateFactorySpi.engineGenerateCertPath(java.io.InputStream) throws java.security.cert.CertificateException
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityCertCertificateFactorySpi::engineGenerateCertPath(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<JavaSecurityCertCertPath,JavaIoInputStream> method(clazz(), "engineGenerateCertPath", "(Ljava/io/InputStream;)Ljava/security/cert/CertPath;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityCertCRL::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/cert/CRL"));
    return cls;
}

// protected java.security.cert.CRL(java.lang.String)
jnipp::LocalRef<JavaSecurityCertCRL> JavaSecurityCertCRL::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaSecurityCertCRL,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public final java.lang.String java.security.cert.CRL.getType()
jnipp::LocalRef<JavaLangString> JavaSecurityCertCRL::getType() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getType", "()Ljava/lang/String;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityTimestamp::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/Timestamp"));
    return cls;
}

// public java.security.Timestamp(java.util.Date,java.security.cert.CertPath)
jnipp::LocalRef<JavaSecurityTimestamp> JavaSecurityTimestamp::construct(const jnipp::Ref<JavaUtilDate>& a0, const jnipp::Ref<JavaSecurityCertCertPath>& a1) {
    static jnipp::Constructor<JavaSecurityTimestamp,JavaUtilDate,JavaSecurityCertCertPath> constructor(clazz(), "(Ljava/util/Date;Ljava/security/cert/CertPath;)V");
    return constructor.construct(a0, a1);
}

// public boolean java.security.Timestamp.equals(java.lang.Object)
jboolean JavaSecurityTimestamp::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.security.Timestamp.hashCode()
jint JavaSecurityTimestamp::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// private void java.security.Timestamp.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaSecurityTimestamp::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// public java.security.cert.CertPath java.security.Timestamp.getSignerCertPath()
jnipp::LocalRef<JavaSecurityCertCertPath> JavaSecurityTimestamp::getSignerCertPath() const {
    static jnipp::Method<JavaSecurityCertCertPath> method(clazz(), "getSignerCertPath", "()Ljava/security/cert/CertPath;");
    return method.call(*this);
}

// public java.util.Date java.security.Timestamp.getTimestamp()
jnipp::LocalRef<JavaUtilDate> JavaSecurityTimestamp::getTimestamp() const {
    static jnipp::Method<JavaUtilDate> method(clazz(), "getTimestamp", "()Ljava/util/Date;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityTimestamp::serialVersionUID ("java/security/Timestamp", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentLocksAbstractOwnableSynchronizer::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/locks/AbstractOwnableSynchronizer"));
    return cls;
}

// protected java.util.concurrent.locks.AbstractOwnableSynchronizer()
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractOwnableSynchronizer> JavaUtilConcurrentLocksAbstractOwnableSynchronizer::construct() {
    static jnipp::Constructor<JavaUtilConcurrentLocksAbstractOwnableSynchronizer> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected final void java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(java.lang.Thread)
void JavaUtilConcurrentLocksAbstractOwnableSynchronizer::setExclusiveOwnerThread(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<void,JavaLangThread> method(clazz(), "setExclusiveOwnerThread", "(Ljava/lang/Thread;)V");
    method.call(*this, a0);
}

// protected final java.lang.Thread java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread()
jnipp::LocalRef<JavaLangThread> JavaUtilConcurrentLocksAbstractOwnableSynchronizer::getExclusiveOwnerThread() const {
    static jnipp::Method<JavaLangThread> method(clazz(), "getExclusiveOwnerThread", "()Ljava/lang/Thread;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractOwnableSynchronizer::serialVersionUID ("java/util/concurrent/locks/AbstractOwnableSynchronizer", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentLocksAbstractQueuedSynchronizer::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/locks/AbstractQueuedSynchronizer"));
    return cls;
}

// protected java.util.concurrent.locks.AbstractQueuedSynchronizer()
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::construct() {
    static jnipp::Constructor<JavaUtilConcurrentLocksAbstractQueuedSynchronizer> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected final int java.util.concurrent.locks.AbstractQueuedSynchronizer.getState()
jint JavaUtilConcurrentLocksAbstractQueuedSynchronizer::getState() const {
    static jnipp::Method<jint> method(clazz(), "getState", "()I");
    return method.call(*this);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedThreads()
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::hasQueuedThreads() const {
    static jnipp::Method<jboolean> method(clazz(), "hasQueuedThreads", "()Z");
    return method.call(*this);
}

// public final int java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueueLength()
jint JavaUtilConcurrentLocksAbstractQueuedSynchronizer::getQueueLength() const {
    static jnipp::Method<jint> method(clazz(), "getQueueLength", "()I");
    return method.call(*this);
}

// public final java.util.Collection java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueuedThreads()
jnipp::LocalRef<JavaUtilCollection> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::getQueuedThreads() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "getQueuedThreads", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::hasWaiters(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject> method(clazz(), "hasWaiters", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z");
    return method.call(*this, a0);
}

// public final int java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
jint JavaUtilConcurrentLocksAbstractQueuedSynchronizer::getWaitQueueLength(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject>& a0) const {
    static jnipp::Method<jint,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject> method(clazz(), "getWaitQueueLength", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I");
    return method.call(*this, a0);
}

// public final java.util.Collection java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
jnipp::LocalRef<JavaUtilCollection> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::getWaitingThreads(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject>& a0) const {
    static jnipp::Method<JavaUtilCollection,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject> method(clazz(), "getWaitingThreads", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;");
    return method.call(*this, a0);
}

// public final void java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(int) throws java.lang.InterruptedException
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::acquireInterruptibly(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "acquireInterruptibly", "(I)V");
    method.call(*this, a0);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(int,long) throws java.lang.InterruptedException
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::tryAcquireNanos(jint a0, jlong a1) const {
    static jnipp::Method<jboolean,jint,jlong> method(clazz(), "tryAcquireNanos", "(IJ)Z");
    return method.call(*this, a0, a1);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.release(int)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::release(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "release", "(I)Z");
    return method.call(*this, a0);
}

// protected boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.isHeldExclusively()
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::isHeldExclusively() const {
    static jnipp::Method<jboolean> method(clazz(), "isHeldExclusively", "()Z");
    return method.call(*this);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.isQueued(java.lang.Thread)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::isQueued(const jnipp::Ref<JavaLangThread>& a0) const {
    static jnipp::Method<jboolean,JavaLangThread> method(clazz(), "isQueued", "(Ljava/lang/Thread;)Z");
    return method.call(*this, a0);
}

// protected boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquire(int)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::tryAcquire(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "tryAcquire", "(I)Z");
    return method.call(*this, a0);
}

// protected final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int,int)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::compareAndSetState(jint a0, jint a1) const {
    static jnipp::Method<jboolean,jint,jint> method(clazz(), "compareAndSetState", "(II)Z");
    return method.call(*this, a0, a1);
}

// public final void java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(int)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::acquire(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "acquire", "(I)V");
    method.call(*this, a0);
}

// protected boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.tryRelease(int)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::tryRelease(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "tryRelease", "(I)Z");
    return method.call(*this, a0);
}

// protected final void java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::setState(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setState", "(I)V");
    method.call(*this, a0);
}

// private java.util.concurrent.locks.AbstractQueuedSynchronizer$Node java.util.concurrent.locks.AbstractQueuedSynchronizer.enq(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::enq(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "enq", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;");
    return method.call(*this, a0);
}

// private java.util.concurrent.locks.AbstractQueuedSynchronizer$Node java.util.concurrent.locks.AbstractQueuedSynchronizer.addWaiter(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::addWaiter(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "addWaiter", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;");
    return method.call(*this, a0);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer.setHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::setHead(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<void,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "setHead", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V");
    method.call(*this, a0);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer.unparkSuccessor(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::unparkSuccessor(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<void,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "unparkSuccessor", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V");
    method.call(*this, a0);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer.doReleaseShared()
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::doReleaseShared() const {
    static jnipp::Method<void> method(clazz(), "doReleaseShared", "()V");
    method.call(*this);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer.setHeadAndPropagate(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::setHeadAndPropagate(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0, jint a1) const {
    static jnipp::Method<void,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,jint> method(clazz(), "setHeadAndPropagate", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I)V");
    method.call(*this, a0, a1);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer.cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::cancelAcquire(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<void,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "cancelAcquire", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V");
    method.call(*this, a0);
}

// private static boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::shouldParkAfterFailedAcquire(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0, const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a1) {
    static jnipp::StaticMethod<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "shouldParkAfterFailedAcquire", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z");
    return method.call(a0, a1);
}

// private static void java.util.concurrent.locks.AbstractQueuedSynchronizer.selfInterrupt()
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::selfInterrupt() {
    static jnipp::StaticMethod<void> method(clazz(), "selfInterrupt", "()V");
    method.call();
}

// private final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt()
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::parkAndCheckInterrupt() const {
    static jnipp::Method<jboolean> method(clazz(), "parkAndCheckInterrupt", "()Z");
    return method.call(*this);
}

// final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::acquireQueued(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0, jint a1) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,jint> method(clazz(), "acquireQueued", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I)Z");
    return method.call(*this, a0, a1);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(int) throws java.lang.InterruptedException
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::doAcquireInterruptibly(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "doAcquireInterruptibly", "(I)V");
    method.call(*this, a0);
}

// private boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireNanos(int,long) throws java.lang.InterruptedException
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::doAcquireNanos(jint a0, jlong a1) const {
    static jnipp::Method<jboolean,jint,jlong> method(clazz(), "doAcquireNanos", "(IJ)Z");
    return method.call(*this, a0, a1);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(int)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::doAcquireShared(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "doAcquireShared", "(I)V");
    method.call(*this, a0);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(int) throws java.lang.InterruptedException
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::doAcquireSharedInterruptibly(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "doAcquireSharedInterruptibly", "(I)V");
    method.call(*this, a0);
}

// private boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(int,long) throws java.lang.InterruptedException
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::doAcquireSharedNanos(jint a0, jlong a1) const {
    static jnipp::Method<jboolean,jint,jlong> method(clazz(), "doAcquireSharedNanos", "(IJ)Z");
    return method.call(*this, a0, a1);
}

// protected int java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(int)
jint JavaUtilConcurrentLocksAbstractQueuedSynchronizer::tryAcquireShared(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "tryAcquireShared", "(I)I");
    return method.call(*this, a0);
}

// protected boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared(int)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::tryReleaseShared(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "tryReleaseShared", "(I)Z");
    return method.call(*this, a0);
}

// public final void java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(int)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::acquireShared(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "acquireShared", "(I)V");
    method.call(*this, a0);
}

// public final void java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(int) throws java.lang.InterruptedException
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer::acquireSharedInterruptibly(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "acquireSharedInterruptibly", "(I)V");
    method.call(*this, a0);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(int,long) throws java.lang.InterruptedException
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::tryAcquireSharedNanos(jint a0, jlong a1) const {
    static jnipp::Method<jboolean,jint,jlong> method(clazz(), "tryAcquireSharedNanos", "(IJ)Z");
    return method.call(*this, a0, a1);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared(int)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::releaseShared(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "releaseShared", "(I)Z");
    return method.call(*this, a0);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.hasContended()
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::hasContended() const {
    static jnipp::Method<jboolean> method(clazz(), "hasContended", "()Z");
    return method.call(*this);
}

// public final java.lang.Thread java.util.concurrent.locks.AbstractQueuedSynchronizer.getFirstQueuedThread()
jnipp::LocalRef<JavaLangThread> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::getFirstQueuedThread() const {
    static jnipp::Method<JavaLangThread> method(clazz(), "getFirstQueuedThread", "()Ljava/lang/Thread;");
    return method.call(*this);
}

// private java.lang.Thread java.util.concurrent.locks.AbstractQueuedSynchronizer.fullGetFirstQueuedThread()
jnipp::LocalRef<JavaLangThread> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::fullGetFirstQueuedThread() const {
    static jnipp::Method<JavaLangThread> method(clazz(), "fullGetFirstQueuedThread", "()Ljava/lang/Thread;");
    return method.call(*this);
}

// final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive()
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::apparentlyFirstQueuedIsExclusive() const {
    static jnipp::Method<jboolean> method(clazz(), "apparentlyFirstQueuedIsExclusive", "()Z");
    return method.call(*this);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedPredecessors()
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::hasQueuedPredecessors() const {
    static jnipp::Method<jboolean> method(clazz(), "hasQueuedPredecessors", "()Z");
    return method.call(*this);
}

// public final java.util.Collection java.util.concurrent.locks.AbstractQueuedSynchronizer.getExclusiveQueuedThreads()
jnipp::LocalRef<JavaUtilCollection> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::getExclusiveQueuedThreads() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "getExclusiveQueuedThreads", "()Ljava/util/Collection;");
    return method.call(*this);
}

// public final java.util.Collection java.util.concurrent.locks.AbstractQueuedSynchronizer.getSharedQueuedThreads()
jnipp::LocalRef<JavaUtilCollection> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::getSharedQueuedThreads() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "getSharedQueuedThreads", "()Ljava/util/Collection;");
    return method.call(*this);
}

// final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::isOnSyncQueue(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "isOnSyncQueue", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z");
    return method.call(*this, a0);
}

// private boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.findNodeFromTail(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::findNodeFromTail(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "findNodeFromTail", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z");
    return method.call(*this, a0);
}

// final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::transferForSignal(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "transferForSignal", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z");
    return method.call(*this, a0);
}

// final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::transferAfterCancelledWait(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "transferAfterCancelledWait", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z");
    return method.call(*this, a0);
}

// final int java.util.concurrent.locks.AbstractQueuedSynchronizer.fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jint JavaUtilConcurrentLocksAbstractQueuedSynchronizer::fullyRelease(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<jint,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "fullyRelease", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)I");
    return method.call(*this, a0);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.owns(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::owns(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject> method(clazz(), "owns", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z");
    return method.call(*this, a0);
}

// private final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::compareAndSetHead(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "compareAndSetHead", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z");
    return method.call(*this, a0);
}

// private final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::compareAndSetTail(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0, const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a1) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "compareAndSetTail", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z");
    return method.call(*this, a0, a1);
}

// private static final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int,int)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::compareAndSetWaitStatus(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0, jint a1, jint a2) {
    static jnipp::StaticMethod<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,jint,jint> method(clazz(), "compareAndSetWaitStatus", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;II)Z");
    return method.call(a0, a1, a2);
}

// private static final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetNext(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer::compareAndSetNext(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0, const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a1, const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a2) {
    static jnipp::StaticMethod<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "compareAndSetNext", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z");
    return method.call(a0, a1, a2);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::serialVersionUID ("java/util/concurrent/locks/AbstractQueuedSynchronizer", "serialVersionUID", "J");
#undef spinForTimeoutThreshold
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::spinForTimeoutThreshold ("java/util/concurrent/locks/AbstractQueuedSynchronizer", "spinForTimeoutThreshold", "J");
#undef unsafe
const jnipp::StaticField<SunMiscUnsafe> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::unsafe ("java/util/concurrent/locks/AbstractQueuedSynchronizer", "unsafe", "Lsun/misc/Unsafe;");
#undef stateOffset
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::stateOffset ("java/util/concurrent/locks/AbstractQueuedSynchronizer", "stateOffset", "J");
#undef headOffset
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::headOffset ("java/util/concurrent/locks/AbstractQueuedSynchronizer", "headOffset", "J");
#undef tailOffset
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::tailOffset ("java/util/concurrent/locks/AbstractQueuedSynchronizer", "tailOffset", "J");
#undef waitStatusOffset
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::waitStatusOffset ("java/util/concurrent/locks/AbstractQueuedSynchronizer", "waitStatusOffset", "J");
#undef nextOffset
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractQueuedSynchronizer::nextOffset ("java/util/concurrent/locks/AbstractQueuedSynchronizer", "nextOffset", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentLocksReentrantLock_Sync::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/locks/ReentrantLock$Sync"));
    return cls;
}

// java.util.concurrent.locks.ReentrantLock$Sync()
jnipp::LocalRef<JavaUtilConcurrentLocksReentrantLock_Sync> JavaUtilConcurrentLocksReentrantLock_Sync::construct() {
    static jnipp::Constructor<JavaUtilConcurrentLocksReentrantLock_Sync> constructor(clazz(), "()V");
    return constructor.construct();
}

// private void java.util.concurrent.locks.ReentrantLock$Sync.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilConcurrentLocksReentrantLock_Sync::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// final java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject java.util.concurrent.locks.ReentrantLock$Sync.newCondition()
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject> JavaUtilConcurrentLocksReentrantLock_Sync::newCondition() const {
    static jnipp::Method<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject> method(clazz(), "newCondition", "()Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;");
    return method.call(*this);
}

// final int java.util.concurrent.locks.ReentrantLock$Sync.getHoldCount()
jint JavaUtilConcurrentLocksReentrantLock_Sync::getHoldCount() const {
    static jnipp::Method<jint> method(clazz(), "getHoldCount", "()I");
    return method.call(*this);
}

// final boolean java.util.concurrent.locks.ReentrantLock$Sync.isLocked()
jboolean JavaUtilConcurrentLocksReentrantLock_Sync::isLocked() const {
    static jnipp::Method<jboolean> method(clazz(), "isLocked", "()Z");
    return method.call(*this);
}

// final java.lang.Thread java.util.concurrent.locks.ReentrantLock$Sync.getOwner()
jnipp::LocalRef<JavaLangThread> JavaUtilConcurrentLocksReentrantLock_Sync::getOwner() const {
    static jnipp::Method<JavaLangThread> method(clazz(), "getOwner", "()Ljava/lang/Thread;");
    return method.call(*this);
}

// final boolean java.util.concurrent.locks.ReentrantLock$Sync.nonfairTryAcquire(int)
jboolean JavaUtilConcurrentLocksReentrantLock_Sync::nonfairTryAcquire(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "nonfairTryAcquire", "(I)Z");
    return method.call(*this, a0);
}

// protected final boolean java.util.concurrent.locks.ReentrantLock$Sync.isHeldExclusively()
jboolean JavaUtilConcurrentLocksReentrantLock_Sync::isHeldExclusively() const {
    static jnipp::Method<jboolean> method(clazz(), "isHeldExclusively", "()Z");
    return method.call(*this);
}

// protected final boolean java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(int)
jboolean JavaUtilConcurrentLocksReentrantLock_Sync::tryRelease(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "tryRelease", "(I)Z");
    return method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksReentrantLock_Sync::serialVersionUID ("java/util/concurrent/locks/ReentrantLock$Sync", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentTimeUnit::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/TimeUnit"));
    return cls;
}

// private java.util.concurrent.TimeUnit(java.lang.String,int)
jnipp::LocalRef<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaUtilConcurrentTimeUnit,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// java.util.concurrent.TimeUnit(java.lang.String,int,java.util.concurrent.TimeUnit$1)
jnipp::LocalRef<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::construct(const jnipp::Ref<JavaLangString>& a0, jint a1, const jnipp::Ref<JavaUtilConcurrentTimeUnit_1>& a2) {
    static jnipp::Constructor<JavaUtilConcurrentTimeUnit,JavaLangString,jint,JavaUtilConcurrentTimeUnit_1> constructor(clazz(), "(Ljava/lang/String;ILjava/util/concurrent/TimeUnit$1;)V");
    return constructor.construct(a0, a1, a2);
}

// public static java.util.concurrent.TimeUnit[] java.util.concurrent.TimeUnit.values()
jnipp::LocalRef<jnipp::Array<JavaUtilConcurrentTimeUnit>> JavaUtilConcurrentTimeUnit::values() {
    static jnipp::StaticMethod<jnipp::Array<JavaUtilConcurrentTimeUnit>> method(clazz(), "values", "()[Ljava/util/concurrent/TimeUnit;");
    return method.call();
}

// public static java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit.valueOf(java.lang.String)
jnipp::LocalRef<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilConcurrentTimeUnit,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/util/concurrent/TimeUnit;");
    return method.call(a0);
}

// public void java.util.concurrent.TimeUnit.sleep(long) throws java.lang.InterruptedException
void JavaUtilConcurrentTimeUnit::sleep(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "sleep", "(J)V");
    method.call(*this, a0);
}

// static long java.util.concurrent.TimeUnit.x(long,long,long)
jlong JavaUtilConcurrentTimeUnit::x(jlong a0, jlong a1, jlong a2) {
    static jnipp::StaticMethod<jlong,jlong,jlong,jlong> method(clazz(), "x", "(JJJ)J");
    return method.call(a0, a1, a2);
}

// public long java.util.concurrent.TimeUnit.toNanos(long)
jlong JavaUtilConcurrentTimeUnit::toNanos(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toNanos", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit.convert(long,java.util.concurrent.TimeUnit)
jlong JavaUtilConcurrentTimeUnit::convert(jlong a0, const jnipp::Ref<JavaUtilConcurrentTimeUnit>& a1) const {
    static jnipp::Method<jlong,jlong,JavaUtilConcurrentTimeUnit> method(clazz(), "convert", "(JLjava/util/concurrent/TimeUnit;)J");
    return method.call(*this, a0, a1);
}

// public long java.util.concurrent.TimeUnit.toMicros(long)
jlong JavaUtilConcurrentTimeUnit::toMicros(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toMicros", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit.toMillis(long)
jlong JavaUtilConcurrentTimeUnit::toMillis(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toMillis", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit.toSeconds(long)
jlong JavaUtilConcurrentTimeUnit::toSeconds(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toSeconds", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit.toMinutes(long)
jlong JavaUtilConcurrentTimeUnit::toMinutes(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toMinutes", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit.toHours(long)
jlong JavaUtilConcurrentTimeUnit::toHours(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toHours", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit.toDays(long)
jlong JavaUtilConcurrentTimeUnit::toDays(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toDays", "(J)J");
    return method.call(*this, a0);
}

// public void java.util.concurrent.TimeUnit.timedWait(java.lang.Object,long) throws java.lang.InterruptedException
void JavaUtilConcurrentTimeUnit::timedWait(const jnipp::Ref<JavaLangObject>& a0, jlong a1) const {
    static jnipp::Method<void,JavaLangObject,jlong> method(clazz(), "timedWait", "(Ljava/lang/Object;J)V");
    method.call(*this, a0, a1);
}

// public void java.util.concurrent.TimeUnit.timedJoin(java.lang.Thread,long) throws java.lang.InterruptedException
void JavaUtilConcurrentTimeUnit::timedJoin(const jnipp::Ref<JavaLangThread>& a0, jlong a1) const {
    static jnipp::Method<void,JavaLangThread,jlong> method(clazz(), "timedJoin", "(Ljava/lang/Thread;J)V");
    method.call(*this, a0, a1);
}
#undef NANOSECONDS
const jnipp::StaticField<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::NANOSECONDS ("java/util/concurrent/TimeUnit", "NANOSECONDS", "Ljava/util/concurrent/TimeUnit;");
#undef MICROSECONDS
const jnipp::StaticField<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::MICROSECONDS ("java/util/concurrent/TimeUnit", "MICROSECONDS", "Ljava/util/concurrent/TimeUnit;");
#undef MILLISECONDS
const jnipp::StaticField<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::MILLISECONDS ("java/util/concurrent/TimeUnit", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;");
#undef SECONDS
const jnipp::StaticField<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::SECONDS ("java/util/concurrent/TimeUnit", "SECONDS", "Ljava/util/concurrent/TimeUnit;");
#undef MINUTES
const jnipp::StaticField<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::MINUTES ("java/util/concurrent/TimeUnit", "MINUTES", "Ljava/util/concurrent/TimeUnit;");
#undef HOURS
const jnipp::StaticField<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::HOURS ("java/util/concurrent/TimeUnit", "HOURS", "Ljava/util/concurrent/TimeUnit;");
#undef DAYS
const jnipp::StaticField<JavaUtilConcurrentTimeUnit> JavaUtilConcurrentTimeUnit::DAYS ("java/util/concurrent/TimeUnit", "DAYS", "Ljava/util/concurrent/TimeUnit;");
#undef C0
const jnipp::StaticField<jlong> JavaUtilConcurrentTimeUnit::C0 ("java/util/concurrent/TimeUnit", "C0", "J");
#undef C1
const jnipp::StaticField<jlong> JavaUtilConcurrentTimeUnit::C1 ("java/util/concurrent/TimeUnit", "C1", "J");
#undef C2
const jnipp::StaticField<jlong> JavaUtilConcurrentTimeUnit::C2 ("java/util/concurrent/TimeUnit", "C2", "J");
#undef C3
const jnipp::StaticField<jlong> JavaUtilConcurrentTimeUnit::C3 ("java/util/concurrent/TimeUnit", "C3", "J");
#undef C4
const jnipp::StaticField<jlong> JavaUtilConcurrentTimeUnit::C4 ("java/util/concurrent/TimeUnit", "C4", "J");
#undef C5
const jnipp::StaticField<jlong> JavaUtilConcurrentTimeUnit::C5 ("java/util/concurrent/TimeUnit", "C5", "J");
#undef C6
const jnipp::StaticField<jlong> JavaUtilConcurrentTimeUnit::C6 ("java/util/concurrent/TimeUnit", "C6", "J");
#undef MAX
const jnipp::StaticField<jlong> JavaUtilConcurrentTimeUnit::MAX ("java/util/concurrent/TimeUnit", "MAX", "J");
#undef $VALUES
const jnipp::StaticField<jnipp::Array<JavaUtilConcurrentTimeUnit>> JavaUtilConcurrentTimeUnit::$VALUES ("java/util/concurrent/TimeUnit", "$VALUES", "[Ljava/util/concurrent/TimeUnit;");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentLocksCondition::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/locks/Condition"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilLinkedHashMap::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/LinkedHashMap"));
    return cls;
}

// public java.util.LinkedHashMap(int,float,boolean)
jnipp::LocalRef<JavaUtilLinkedHashMap> JavaUtilLinkedHashMap::construct(jint a0, jfloat a1, jboolean a2) {
    static jnipp::Constructor<JavaUtilLinkedHashMap,jint,jfloat,jboolean> constructor(clazz(), "(IFZ)V");
    return constructor.construct(a0, a1, a2);
}

// public java.util.LinkedHashMap(java.util.Map)
jnipp::LocalRef<JavaUtilLinkedHashMap> JavaUtilLinkedHashMap::construct(const jnipp::Ref<JavaUtilMap>& a0) {
    static jnipp::Constructor<JavaUtilLinkedHashMap,JavaUtilMap> constructor(clazz(), "(Ljava/util/Map;)V");
    return constructor.construct(a0);
}

// public java.util.LinkedHashMap()
jnipp::LocalRef<JavaUtilLinkedHashMap> JavaUtilLinkedHashMap::construct() {
    static jnipp::Constructor<JavaUtilLinkedHashMap> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.LinkedHashMap(int)
jnipp::LocalRef<JavaUtilLinkedHashMap> JavaUtilLinkedHashMap::construct(jint a0) {
    static jnipp::Constructor<JavaUtilLinkedHashMap,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public java.util.LinkedHashMap(int,float)
jnipp::LocalRef<JavaUtilLinkedHashMap> JavaUtilLinkedHashMap::construct(jint a0, jfloat a1) {
    static jnipp::Constructor<JavaUtilLinkedHashMap,jint,jfloat> constructor(clazz(), "(IF)V");
    return constructor.construct(a0, a1);
}

// public java.lang.Object java.util.LinkedHashMap.get(java.lang.Object)
jnipp::LocalRef<JavaLangObject> JavaUtilLinkedHashMap::get(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public void java.util.LinkedHashMap.clear()
void JavaUtilLinkedHashMap::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// void java.util.LinkedHashMap.init()
void JavaUtilLinkedHashMap::init() const {
    static jnipp::Method<void> method(clazz(), "init", "()V");
    method.call(*this);
}

// public boolean java.util.LinkedHashMap.containsValue(java.lang.Object)
jboolean JavaUtilLinkedHashMap::containsValue(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "containsValue", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// void java.util.LinkedHashMap.transfer(java.util.HashMap$Entry[],boolean)
void JavaUtilLinkedHashMap::transfer(const jnipp::Ref<jnipp::Array<JavaUtilHashMap_Entry>>& a0, jboolean a1) const {
    static jnipp::Method<void,jnipp::Array<JavaUtilHashMap_Entry>,jboolean> method(clazz(), "transfer", "([Ljava/util/HashMap$Entry;Z)V");
    method.call(*this, a0, a1);
}

// void java.util.LinkedHashMap.addEntry(int,java.lang.Object,java.lang.Object,int)
void JavaUtilLinkedHashMap::addEntry(jint a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2, jint a3) const {
    static jnipp::Method<void,jint,JavaLangObject,JavaLangObject,jint> method(clazz(), "addEntry", "(ILjava/lang/Object;Ljava/lang/Object;I)V");
    method.call(*this, a0, a1, a2, a3);
}

// void java.util.LinkedHashMap.createEntry(int,java.lang.Object,java.lang.Object,int)
void JavaUtilLinkedHashMap::createEntry(jint a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2, jint a3) const {
    static jnipp::Method<void,jint,JavaLangObject,JavaLangObject,jint> method(clazz(), "createEntry", "(ILjava/lang/Object;Ljava/lang/Object;I)V");
    method.call(*this, a0, a1, a2, a3);
}

// java.util.Iterator java.util.LinkedHashMap.newKeyIterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilLinkedHashMap::newKeyIterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "newKeyIterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// java.util.Iterator java.util.LinkedHashMap.newValueIterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilLinkedHashMap::newValueIterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "newValueIterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// java.util.Iterator java.util.LinkedHashMap.newEntryIterator()
jnipp::LocalRef<JavaUtilIterator> JavaUtilLinkedHashMap::newEntryIterator() const {
    static jnipp::Method<JavaUtilIterator> method(clazz(), "newEntryIterator", "()Ljava/util/Iterator;");
    return method.call(*this);
}

// protected boolean java.util.LinkedHashMap.removeEldestEntry(java.util.Map$Entry)
jboolean JavaUtilLinkedHashMap::removeEldestEntry(const jnipp::Ref<JavaUtilMap_Entry>& a0) const {
    static jnipp::Method<jboolean,JavaUtilMap_Entry> method(clazz(), "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");
    return method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilLinkedHashMap::serialVersionUID ("java/util/LinkedHashMap", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaNetInetAddress_CacheEntry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/InetAddress$CacheEntry"));
    return cls;
}

// java.net.InetAddress$CacheEntry(java.net.InetAddress[],long)
jnipp::LocalRef<JavaNetInetAddress_CacheEntry> JavaNetInetAddress_CacheEntry::construct(const jnipp::Ref<jnipp::Array<JavaNetInetAddress>>& a0, jlong a1) {
    static jnipp::Constructor<JavaNetInetAddress_CacheEntry,jnipp::Array<JavaNetInetAddress>,jlong> constructor(clazz(), "([Ljava/net/InetAddress;J)V");
    return constructor.construct(a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetInetAddress_Cache_Type::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/InetAddress$Cache$Type"));
    return cls;
}

// private java.net.InetAddress$Cache$Type(java.lang.String,int)
jnipp::LocalRef<JavaNetInetAddress_Cache_Type> JavaNetInetAddress_Cache_Type::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaNetInetAddress_Cache_Type,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public static java.net.InetAddress$Cache$Type[] java.net.InetAddress$Cache$Type.values()
jnipp::LocalRef<jnipp::Array<JavaNetInetAddress_Cache_Type>> JavaNetInetAddress_Cache_Type::values() {
    static jnipp::StaticMethod<jnipp::Array<JavaNetInetAddress_Cache_Type>> method(clazz(), "values", "()[Ljava/net/InetAddress$Cache$Type;");
    return method.call();
}

// public static java.net.InetAddress$Cache$Type java.net.InetAddress$Cache$Type.valueOf(java.lang.String)
jnipp::LocalRef<JavaNetInetAddress_Cache_Type> JavaNetInetAddress_Cache_Type::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaNetInetAddress_Cache_Type,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/net/InetAddress$Cache$Type;");
    return method.call(a0);
}
#undef Positive
const jnipp::StaticField<JavaNetInetAddress_Cache_Type> JavaNetInetAddress_Cache_Type::Positive ("java/net/InetAddress$Cache$Type", "Positive", "Ljava/net/InetAddress$Cache$Type;");
#undef Negative
const jnipp::StaticField<JavaNetInetAddress_Cache_Type> JavaNetInetAddress_Cache_Type::Negative ("java/net/InetAddress$Cache$Type", "Negative", "Ljava/net/InetAddress$Cache$Type;");
#undef $VALUES
const jnipp::StaticField<jnipp::Array<JavaNetInetAddress_Cache_Type>> JavaNetInetAddress_Cache_Type::$VALUES ("java/net/InetAddress$Cache$Type", "$VALUES", "[Ljava/net/InetAddress$Cache$Type;");
inline jnipp::GlobalRef<jnipp::Class>& JavaNetInterfaceAddress::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/InterfaceAddress"));
    return cls;
}

// java.net.InterfaceAddress()
jnipp::LocalRef<JavaNetInterfaceAddress> JavaNetInterfaceAddress::construct() {
    static jnipp::Constructor<JavaNetInterfaceAddress> constructor(clazz(), "()V");
    return constructor.construct();
}

// public boolean java.net.InterfaceAddress.equals(java.lang.Object)
jboolean JavaNetInterfaceAddress::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.net.InterfaceAddress.hashCode()
jint JavaNetInterfaceAddress::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.net.InetAddress java.net.InterfaceAddress.getAddress()
jnipp::LocalRef<JavaNetInetAddress> JavaNetInterfaceAddress::getAddress() const {
    static jnipp::Method<JavaNetInetAddress> method(clazz(), "getAddress", "()Ljava/net/InetAddress;");
    return method.call(*this);
}

// public java.net.InetAddress java.net.InterfaceAddress.getBroadcast()
jnipp::LocalRef<JavaNetInetAddress> JavaNetInterfaceAddress::getBroadcast() const {
    static jnipp::Method<JavaNetInetAddress> method(clazz(), "getBroadcast", "()Ljava/net/InetAddress;");
    return method.call(*this);
}

// public short java.net.InterfaceAddress.getNetworkPrefixLength()
jshort JavaNetInterfaceAddress::getNetworkPrefixLength() const {
    static jnipp::Method<jshort> method(clazz(), "getNetworkPrefixLength", "()S");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsVisitorTypeTreeVisitor::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/visitor/TypeTreeVisitor"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeFieldTypeSignature::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/FieldTypeSignature"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilJarAttributes_Name::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/jar/Attributes$Name"));
    return cls;
}

// public java.util.jar.Attributes$Name(java.lang.String)
jnipp::LocalRef<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaUtilJarAttributes_Name,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public boolean java.util.jar.Attributes$Name.equals(java.lang.Object)
jboolean JavaUtilJarAttributes_Name::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.jar.Attributes$Name.hashCode()
jint JavaUtilJarAttributes_Name::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// private static boolean java.util.jar.Attributes$Name.isDigit(char)
jboolean JavaUtilJarAttributes_Name::isDigit(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isDigit", "(C)Z");
    return method.call(a0);
}

// private static boolean java.util.jar.Attributes$Name.isAlpha(char)
jboolean JavaUtilJarAttributes_Name::isAlpha(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isAlpha", "(C)Z");
    return method.call(a0);
}

// private static boolean java.util.jar.Attributes$Name.isValid(java.lang.String)
jboolean JavaUtilJarAttributes_Name::isValid(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "isValid", "(Ljava/lang/String;)Z");
    return method.call(a0);
}

// private static boolean java.util.jar.Attributes$Name.isValid(char)
jboolean JavaUtilJarAttributes_Name::isValid(jchar a0) {
    static jnipp::StaticMethod<jboolean,jchar> method(clazz(), "isValid", "(C)Z");
    return method.call(a0);
}
#undef MANIFEST_VERSION
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::MANIFEST_VERSION ("java/util/jar/Attributes$Name", "MANIFEST_VERSION", "Ljava/util/jar/Attributes$Name;");
#undef SIGNATURE_VERSION
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::SIGNATURE_VERSION ("java/util/jar/Attributes$Name", "SIGNATURE_VERSION", "Ljava/util/jar/Attributes$Name;");
#undef CONTENT_TYPE
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::CONTENT_TYPE ("java/util/jar/Attributes$Name", "CONTENT_TYPE", "Ljava/util/jar/Attributes$Name;");
#undef CLASS_PATH
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::CLASS_PATH ("java/util/jar/Attributes$Name", "CLASS_PATH", "Ljava/util/jar/Attributes$Name;");
#undef MAIN_CLASS
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::MAIN_CLASS ("java/util/jar/Attributes$Name", "MAIN_CLASS", "Ljava/util/jar/Attributes$Name;");
#undef SEALED
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::SEALED ("java/util/jar/Attributes$Name", "SEALED", "Ljava/util/jar/Attributes$Name;");
#undef EXTENSION_LIST
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::EXTENSION_LIST ("java/util/jar/Attributes$Name", "EXTENSION_LIST", "Ljava/util/jar/Attributes$Name;");
#undef EXTENSION_NAME
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::EXTENSION_NAME ("java/util/jar/Attributes$Name", "EXTENSION_NAME", "Ljava/util/jar/Attributes$Name;");
#undef EXTENSION_INSTALLATION
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::EXTENSION_INSTALLATION ("java/util/jar/Attributes$Name", "EXTENSION_INSTALLATION", "Ljava/util/jar/Attributes$Name;");
#undef IMPLEMENTATION_TITLE
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::IMPLEMENTATION_TITLE ("java/util/jar/Attributes$Name", "IMPLEMENTATION_TITLE", "Ljava/util/jar/Attributes$Name;");
#undef IMPLEMENTATION_VERSION
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::IMPLEMENTATION_VERSION ("java/util/jar/Attributes$Name", "IMPLEMENTATION_VERSION", "Ljava/util/jar/Attributes$Name;");
#undef IMPLEMENTATION_VENDOR
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::IMPLEMENTATION_VENDOR ("java/util/jar/Attributes$Name", "IMPLEMENTATION_VENDOR", "Ljava/util/jar/Attributes$Name;");
#undef IMPLEMENTATION_VENDOR_ID
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::IMPLEMENTATION_VENDOR_ID ("java/util/jar/Attributes$Name", "IMPLEMENTATION_VENDOR_ID", "Ljava/util/jar/Attributes$Name;");
#undef IMPLEMENTATION_URL
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::IMPLEMENTATION_URL ("java/util/jar/Attributes$Name", "IMPLEMENTATION_URL", "Ljava/util/jar/Attributes$Name;");
#undef SPECIFICATION_TITLE
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::SPECIFICATION_TITLE ("java/util/jar/Attributes$Name", "SPECIFICATION_TITLE", "Ljava/util/jar/Attributes$Name;");
#undef SPECIFICATION_VERSION
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::SPECIFICATION_VERSION ("java/util/jar/Attributes$Name", "SPECIFICATION_VERSION", "Ljava/util/jar/Attributes$Name;");
#undef SPECIFICATION_VENDOR
const jnipp::StaticField<JavaUtilJarAttributes_Name> JavaUtilJarAttributes_Name::SPECIFICATION_VENDOR ("java/util/jar/Attributes$Name", "SPECIFICATION_VENDOR", "Ljava/util/jar/Attributes$Name;");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilJarManifest_FastInputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/jar/Manifest$FastInputStream"));
    return cls;
}

// java.util.jar.Manifest$FastInputStream(java.io.InputStream)
jnipp::LocalRef<JavaUtilJarManifest_FastInputStream> JavaUtilJarManifest_FastInputStream::construct(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::Constructor<JavaUtilJarManifest_FastInputStream,JavaIoInputStream> constructor(clazz(), "(Ljava/io/InputStream;)V");
    return constructor.construct(a0);
}

// java.util.jar.Manifest$FastInputStream(java.io.InputStream,int)
jnipp::LocalRef<JavaUtilJarManifest_FastInputStream> JavaUtilJarManifest_FastInputStream::construct(const jnipp::Ref<JavaIoInputStream>& a0, jint a1) {
    static jnipp::Constructor<JavaUtilJarManifest_FastInputStream,JavaIoInputStream,jint> constructor(clazz(), "(Ljava/io/InputStream;I)V");
    return constructor.construct(a0, a1);
}

// public int java.util.jar.Manifest$FastInputStream.readLine(byte[]) throws java.io.IOException
jint JavaUtilJarManifest_FastInputStream::readLine(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>> method(clazz(), "readLine", "([B)I");
    return method.call(*this, a0);
}

// public int java.util.jar.Manifest$FastInputStream.readLine(byte[],int,int) throws java.io.IOException
jint JavaUtilJarManifest_FastInputStream::readLine(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "readLine", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public void java.util.jar.Manifest$FastInputStream.close() throws java.io.IOException
void JavaUtilJarManifest_FastInputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// private void java.util.jar.Manifest$FastInputStream.fill() throws java.io.IOException
void JavaUtilJarManifest_FastInputStream::fill() const {
    static jnipp::Method<void> method(clazz(), "fill", "()V");
    method.call(*this);
}

// public byte java.util.jar.Manifest$FastInputStream.peek() throws java.io.IOException
jbyte JavaUtilJarManifest_FastInputStream::peek() const {
    static jnipp::Method<jbyte> method(clazz(), "peek", "()B");
    return method.call(*this);
}

// public int java.util.jar.Manifest$FastInputStream.read() throws java.io.IOException
jint JavaUtilJarManifest_FastInputStream::read() const {
    static jnipp::Method<jint> method(clazz(), "read", "()I");
    return method.call(*this);
}

// public int java.util.jar.Manifest$FastInputStream.read(byte[],int,int) throws java.io.IOException
jint JavaUtilJarManifest_FastInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public long java.util.jar.Manifest$FastInputStream.skip(long) throws java.io.IOException
jlong JavaUtilJarManifest_FastInputStream::skip(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "skip", "(J)J");
    return method.call(*this, a0);
}

// public int java.util.jar.Manifest$FastInputStream.available() throws java.io.IOException
jint JavaUtilJarManifest_FastInputStream::available() const {
    static jnipp::Method<jint> method(clazz(), "available", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunReflectGenericsTreeReturnType::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/reflect/generics/tree/ReturnType"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRandom::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Random"));
    return cls;
}

// public java.util.Random()
jnipp::LocalRef<JavaUtilRandom> JavaUtilRandom::construct() {
    static jnipp::Constructor<JavaUtilRandom> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.Random(long)
jnipp::LocalRef<JavaUtilRandom> JavaUtilRandom::construct(jlong a0) {
    static jnipp::Constructor<JavaUtilRandom,jlong> constructor(clazz(), "(J)V");
    return constructor.construct(a0);
}

// protected int java.util.Random.next(int)
jint JavaUtilRandom::next(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "next", "(I)I");
    return method.call(*this, a0);
}

// private void java.util.Random.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilRandom::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private synchronized void java.util.Random.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaUtilRandom::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// public double java.util.Random.nextDouble()
jdouble JavaUtilRandom::nextDouble() const {
    static jnipp::Method<jdouble> method(clazz(), "nextDouble", "()D");
    return method.call(*this);
}

// public int java.util.Random.nextInt(int)
jint JavaUtilRandom::nextInt(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "nextInt", "(I)I");
    return method.call(*this, a0);
}

// public int java.util.Random.nextInt()
jint JavaUtilRandom::nextInt() const {
    static jnipp::Method<jint> method(clazz(), "nextInt", "()I");
    return method.call(*this);
}

// public synchronized void java.util.Random.setSeed(long)
void JavaUtilRandom::setSeed(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "setSeed", "(J)V");
    method.call(*this, a0);
}

// public long java.util.Random.nextLong()
jlong JavaUtilRandom::nextLong() const {
    static jnipp::Method<jlong> method(clazz(), "nextLong", "()J");
    return method.call(*this);
}

// private static long java.util.Random.seedUniquifier()
jlong JavaUtilRandom::seedUniquifier() {
    static jnipp::StaticMethod<jlong> method(clazz(), "seedUniquifier", "()J");
    return method.call();
}

// private static long java.util.Random.initialScramble(long)
jlong JavaUtilRandom::initialScramble(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "initialScramble", "(J)J");
    return method.call(a0);
}

// public void java.util.Random.nextBytes(byte[])
void JavaUtilRandom::nextBytes(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "nextBytes", "([B)V");
    method.call(*this, a0);
}

// public boolean java.util.Random.nextBoolean()
jboolean JavaUtilRandom::nextBoolean() const {
    static jnipp::Method<jboolean> method(clazz(), "nextBoolean", "()Z");
    return method.call(*this);
}

// public float java.util.Random.nextFloat()
jfloat JavaUtilRandom::nextFloat() const {
    static jnipp::Method<jfloat> method(clazz(), "nextFloat", "()F");
    return method.call(*this);
}

// public synchronized double java.util.Random.nextGaussian()
jdouble JavaUtilRandom::nextGaussian() const {
    static jnipp::Method<jdouble> method(clazz(), "nextGaussian", "()D");
    return method.call(*this);
}

// private void java.util.Random.resetSeed(long)
void JavaUtilRandom::resetSeed(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "resetSeed", "(J)V");
    method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilRandom::serialVersionUID ("java/util/Random", "serialVersionUID", "J");
#undef multiplier
const jnipp::StaticField<jlong> JavaUtilRandom::multiplier ("java/util/Random", "multiplier", "J");
#undef addend
const jnipp::StaticField<jlong> JavaUtilRandom::addend ("java/util/Random", "addend", "J");
#undef mask
const jnipp::StaticField<jlong> JavaUtilRandom::mask ("java/util/Random", "mask", "J");
#undef seedUniquifier
const jnipp::StaticField<JavaUtilConcurrentAtomicAtomicLong> JavaUtilRandom::seedUniquifier_ ("java/util/Random", "seedUniquifier", "Ljava/util/concurrent/atomic/AtomicLong;");
#undef serialPersistentFields
const jnipp::StaticField<jnipp::Array<JavaIoObjectStreamField>> JavaUtilRandom::serialPersistentFields ("java/util/Random", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
#undef unsafe
const jnipp::StaticField<SunMiscUnsafe> JavaUtilRandom::unsafe ("java/util/Random", "unsafe", "Lsun/misc/Unsafe;");
#undef seedOffset
const jnipp::StaticField<jlong> JavaUtilRandom::seedOffset ("java/util/Random", "seedOffset", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPattern_Node::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Pattern$Node"));
    return cls;
}

// java.util.regex.Pattern$Node()
jnipp::LocalRef<JavaUtilRegexPattern_Node> JavaUtilRegexPattern_Node::construct() {
    static jnipp::Constructor<JavaUtilRegexPattern_Node> constructor(clazz(), "()V");
    return constructor.construct();
}

// boolean java.util.regex.Pattern$Node.match(java.util.regex.Matcher,int,java.lang.CharSequence)
jboolean JavaUtilRegexPattern_Node::match(const jnipp::Ref<JavaUtilRegexMatcher>& a0, jint a1, const jnipp::Ref<JavaLangCharSequence>& a2) const {
    static jnipp::Method<jboolean,JavaUtilRegexMatcher,jint,JavaLangCharSequence> method(clazz(), "match", "(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z");
    return method.call(*this, a0, a1, a2);
}

// boolean java.util.regex.Pattern$Node.study(java.util.regex.Pattern$TreeInfo)
jboolean JavaUtilRegexPattern_Node::study(const jnipp::Ref<JavaUtilRegexPattern_TreeInfo>& a0) const {
    static jnipp::Method<jboolean,JavaUtilRegexPattern_TreeInfo> method(clazz(), "study", "(Ljava/util/regex/Pattern$TreeInfo;)Z");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPattern_GroupHead::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Pattern$GroupHead"));
    return cls;
}

// java.util.regex.Pattern$GroupHead(int)
jnipp::LocalRef<JavaUtilRegexPattern_GroupHead> JavaUtilRegexPattern_GroupHead::construct(jint a0) {
    static jnipp::Constructor<JavaUtilRegexPattern_GroupHead,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher,int,java.lang.CharSequence)
jboolean JavaUtilRegexPattern_GroupHead::match(const jnipp::Ref<JavaUtilRegexMatcher>& a0, jint a1, const jnipp::Ref<JavaLangCharSequence>& a2) const {
    static jnipp::Method<jboolean,JavaUtilRegexMatcher,jint,JavaLangCharSequence> method(clazz(), "match", "(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z");
    return method.call(*this, a0, a1, a2);
}

// boolean java.util.regex.Pattern$GroupHead.matchRef(java.util.regex.Matcher,int,java.lang.CharSequence)
jboolean JavaUtilRegexPattern_GroupHead::matchRef(const jnipp::Ref<JavaUtilRegexMatcher>& a0, jint a1, const jnipp::Ref<JavaLangCharSequence>& a2) const {
    static jnipp::Method<jboolean,JavaUtilRegexMatcher,jint,JavaLangCharSequence> method(clazz(), "matchRef", "(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z");
    return method.call(*this, a0, a1, a2);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPattern_CharProperty::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Pattern$CharProperty"));
    return cls;
}

// java.util.regex.Pattern$CharProperty(java.util.regex.Pattern$1)
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern_CharProperty::construct(const jnipp::Ref<JavaUtilRegexPattern_1>& a0) {
    static jnipp::Constructor<JavaUtilRegexPattern_CharProperty,JavaUtilRegexPattern_1> constructor(clazz(), "(Ljava/util/regex/Pattern$1;)V");
    return constructor.construct(a0);
}

// private java.util.regex.Pattern$CharProperty()
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern_CharProperty::construct() {
    static jnipp::Constructor<JavaUtilRegexPattern_CharProperty> constructor(clazz(), "()V");
    return constructor.construct();
}

// boolean java.util.regex.Pattern$CharProperty.match(java.util.regex.Matcher,int,java.lang.CharSequence)
jboolean JavaUtilRegexPattern_CharProperty::match(const jnipp::Ref<JavaUtilRegexMatcher>& a0, jint a1, const jnipp::Ref<JavaLangCharSequence>& a2) const {
    static jnipp::Method<jboolean,JavaUtilRegexMatcher,jint,JavaLangCharSequence> method(clazz(), "match", "(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z");
    return method.call(*this, a0, a1, a2);
}

// java.util.regex.Pattern$CharProperty java.util.regex.Pattern$CharProperty.complement()
jnipp::LocalRef<JavaUtilRegexPattern_CharProperty> JavaUtilRegexPattern_CharProperty::complement() const {
    static jnipp::Method<JavaUtilRegexPattern_CharProperty> method(clazz(), "complement", "()Ljava/util/regex/Pattern$CharProperty;");
    return method.call(*this);
}

// boolean java.util.regex.Pattern$CharProperty.study(java.util.regex.Pattern$TreeInfo)
jboolean JavaUtilRegexPattern_CharProperty::study(const jnipp::Ref<JavaUtilRegexPattern_TreeInfo>& a0) const {
    static jnipp::Method<jboolean,JavaUtilRegexPattern_TreeInfo> method(clazz(), "study", "(Ljava/util/regex/Pattern$TreeInfo;)Z");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPattern_BmpCharProperty::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Pattern$BmpCharProperty"));
    return cls;
}

// private java.util.regex.Pattern$BmpCharProperty()
jnipp::LocalRef<JavaUtilRegexPattern_BmpCharProperty> JavaUtilRegexPattern_BmpCharProperty::construct() {
    static jnipp::Constructor<JavaUtilRegexPattern_BmpCharProperty> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.util.regex.Pattern$BmpCharProperty(java.util.regex.Pattern$1)
jnipp::LocalRef<JavaUtilRegexPattern_BmpCharProperty> JavaUtilRegexPattern_BmpCharProperty::construct(const jnipp::Ref<JavaUtilRegexPattern_1>& a0) {
    static jnipp::Constructor<JavaUtilRegexPattern_BmpCharProperty,JavaUtilRegexPattern_1> constructor(clazz(), "(Ljava/util/regex/Pattern$1;)V");
    return constructor.construct(a0);
}

// boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher,int,java.lang.CharSequence)
jboolean JavaUtilRegexPattern_BmpCharProperty::match(const jnipp::Ref<JavaUtilRegexMatcher>& a0, jint a1, const jnipp::Ref<JavaLangCharSequence>& a2) const {
    static jnipp::Method<jboolean,JavaUtilRegexMatcher,jint,JavaLangCharSequence> method(clazz(), "match", "(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z");
    return method.call(*this, a0, a1, a2);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPattern_BitClass::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Pattern$BitClass"));
    return cls;
}

// java.util.regex.Pattern$BitClass()
jnipp::LocalRef<JavaUtilRegexPattern_BitClass> JavaUtilRegexPattern_BitClass::construct() {
    static jnipp::Constructor<JavaUtilRegexPattern_BitClass> constructor(clazz(), "()V");
    return constructor.construct();
}

// private java.util.regex.Pattern$BitClass(boolean[])
jnipp::LocalRef<JavaUtilRegexPattern_BitClass> JavaUtilRegexPattern_BitClass::construct(const jnipp::Ref<jnipp::Array<jboolean>>& a0) {
    static jnipp::Constructor<JavaUtilRegexPattern_BitClass,jnipp::Array<jboolean>> constructor(clazz(), "([Z)V");
    return constructor.construct(a0);
}

// java.util.regex.Pattern$BitClass java.util.regex.Pattern$BitClass.add(int,int)
jnipp::LocalRef<JavaUtilRegexPattern_BitClass> JavaUtilRegexPattern_BitClass::add(jint a0, jint a1) const {
    static jnipp::Method<JavaUtilRegexPattern_BitClass,jint,jint> method(clazz(), "add", "(II)Ljava/util/regex/Pattern$BitClass;");
    return method.call(*this, a0, a1);
}

// boolean java.util.regex.Pattern$BitClass.isSatisfiedBy(int)
jboolean JavaUtilRegexPattern_BitClass::isSatisfiedBy(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "isSatisfiedBy", "(I)Z");
    return method.call(*this, a0);
}
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaUtilRegexPattern_BitClass::$assertionsDisabled ("java/util/regex/Pattern$BitClass", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexMatcher::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Matcher"));
    return cls;
}

// java.util.regex.Matcher()
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::construct() {
    static jnipp::Constructor<JavaUtilRegexMatcher> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.util.regex.Matcher(java.util.regex.Pattern,java.lang.CharSequence)
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::construct(const jnipp::Ref<JavaUtilRegexPattern>& a0, const jnipp::Ref<JavaLangCharSequence>& a1) {
    static jnipp::Constructor<JavaUtilRegexMatcher,JavaUtilRegexPattern,JavaLangCharSequence> constructor(clazz(), "(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.String java.util.regex.Matcher.group(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilRegexMatcher::group(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "group", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.util.regex.Matcher.group(int)
jnipp::LocalRef<JavaLangString> JavaUtilRegexMatcher::group(jint a0) const {
    static jnipp::Method<JavaLangString,jint> method(clazz(), "group", "(I)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.util.regex.Matcher.group()
jnipp::LocalRef<JavaLangString> JavaUtilRegexMatcher::group() const {
    static jnipp::Method<JavaLangString> method(clazz(), "group", "()Ljava/lang/String;");
    return method.call(*this);
}

// char java.util.regex.Matcher.charAt(int)
jchar JavaUtilRegexMatcher::charAt(jint a0) const {
    static jnipp::Method<jchar,jint> method(clazz(), "charAt", "(I)C");
    return method.call(*this, a0);
}

// public boolean java.util.regex.Matcher.matches()
jboolean JavaUtilRegexMatcher::matches() const {
    static jnipp::Method<jboolean> method(clazz(), "matches", "()Z");
    return method.call(*this);
}

// public java.lang.String java.util.regex.Matcher.replaceFirst(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilRegexMatcher::replaceFirst(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "replaceFirst", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.util.regex.Matcher.replaceAll(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilRegexMatcher::replaceAll(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "replaceAll", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public static java.lang.String java.util.regex.Matcher.quoteReplacement(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilRegexMatcher::quoteReplacement(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString> method(clazz(), "quoteReplacement", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0);
}

// public boolean java.util.regex.Matcher.find()
jboolean JavaUtilRegexMatcher::find() const {
    static jnipp::Method<jboolean> method(clazz(), "find", "()Z");
    return method.call(*this);
}

// public boolean java.util.regex.Matcher.find(int)
jboolean JavaUtilRegexMatcher::find(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "find", "(I)Z");
    return method.call(*this, a0);
}

// public int java.util.regex.Matcher.start()
jint JavaUtilRegexMatcher::start() const {
    static jnipp::Method<jint> method(clazz(), "start", "()I");
    return method.call(*this);
}

// public int java.util.regex.Matcher.start(int)
jint JavaUtilRegexMatcher::start(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "start", "(I)I");
    return method.call(*this, a0);
}

// public java.util.regex.Matcher java.util.regex.Matcher.reset(java.lang.CharSequence)
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::reset(const jnipp::Ref<JavaLangCharSequence>& a0) const {
    static jnipp::Method<JavaUtilRegexMatcher,JavaLangCharSequence> method(clazz(), "reset", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;");
    return method.call(*this, a0);
}

// public java.util.regex.Matcher java.util.regex.Matcher.reset()
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::reset() const {
    static jnipp::Method<JavaUtilRegexMatcher> method(clazz(), "reset", "()Ljava/util/regex/Matcher;");
    return method.call(*this);
}

// boolean java.util.regex.Matcher.search(int)
jboolean JavaUtilRegexMatcher::search(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "search", "(I)Z");
    return method.call(*this, a0);
}

// public java.util.regex.Matcher java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer,java.lang.String)
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::appendReplacement(const jnipp::Ref<JavaLangStringBuffer>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaUtilRegexMatcher,JavaLangStringBuffer,JavaLangString> method(clazz(), "appendReplacement", "(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/util/regex/Matcher;");
    return method.call(*this, a0, a1);
}

// public java.lang.StringBuffer java.util.regex.Matcher.appendTail(java.lang.StringBuffer)
jnipp::LocalRef<JavaLangStringBuffer> JavaUtilRegexMatcher::appendTail(const jnipp::Ref<JavaLangStringBuffer>& a0) const {
    static jnipp::Method<JavaLangStringBuffer,JavaLangStringBuffer> method(clazz(), "appendTail", "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;");
    return method.call(*this, a0);
}

// boolean java.util.regex.Matcher.match(int,int)
jboolean JavaUtilRegexMatcher::match(jint a0, jint a1) const {
    static jnipp::Method<jboolean,jint,jint> method(clazz(), "match", "(II)Z");
    return method.call(*this, a0, a1);
}

// public java.util.regex.Matcher java.util.regex.Matcher.region(int,int)
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::region(jint a0, jint a1) const {
    static jnipp::Method<JavaUtilRegexMatcher,jint,jint> method(clazz(), "region", "(II)Ljava/util/regex/Matcher;");
    return method.call(*this, a0, a1);
}

// public int java.util.regex.Matcher.end()
jint JavaUtilRegexMatcher::end() const {
    static jnipp::Method<jint> method(clazz(), "end", "()I");
    return method.call(*this);
}

// public int java.util.regex.Matcher.end(int)
jint JavaUtilRegexMatcher::end(jint a0) const {
    static jnipp::Method<jint,jint> method(clazz(), "end", "(I)I");
    return method.call(*this, a0);
}

// public java.util.regex.Pattern java.util.regex.Matcher.pattern()
jnipp::LocalRef<JavaUtilRegexPattern> JavaUtilRegexMatcher::pattern() const {
    static jnipp::Method<JavaUtilRegexPattern> method(clazz(), "pattern", "()Ljava/util/regex/Pattern;");
    return method.call(*this);
}

// public boolean java.util.regex.Matcher.hitEnd()
jboolean JavaUtilRegexMatcher::hitEnd() const {
    static jnipp::Method<jboolean> method(clazz(), "hitEnd", "()Z");
    return method.call(*this);
}

// public boolean java.util.regex.Matcher.requireEnd()
jboolean JavaUtilRegexMatcher::requireEnd() const {
    static jnipp::Method<jboolean> method(clazz(), "requireEnd", "()Z");
    return method.call(*this);
}

// public java.util.regex.MatchResult java.util.regex.Matcher.toMatchResult()
jnipp::LocalRef<JavaUtilRegexMatchResult> JavaUtilRegexMatcher::toMatchResult() const {
    static jnipp::Method<JavaUtilRegexMatchResult> method(clazz(), "toMatchResult", "()Ljava/util/regex/MatchResult;");
    return method.call(*this);
}

// public java.util.regex.Matcher java.util.regex.Matcher.usePattern(java.util.regex.Pattern)
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::usePattern(const jnipp::Ref<JavaUtilRegexPattern>& a0) const {
    static jnipp::Method<JavaUtilRegexMatcher,JavaUtilRegexPattern> method(clazz(), "usePattern", "(Ljava/util/regex/Pattern;)Ljava/util/regex/Matcher;");
    return method.call(*this, a0);
}

// public int java.util.regex.Matcher.groupCount()
jint JavaUtilRegexMatcher::groupCount() const {
    static jnipp::Method<jint> method(clazz(), "groupCount", "()I");
    return method.call(*this);
}

// public boolean java.util.regex.Matcher.lookingAt()
jboolean JavaUtilRegexMatcher::lookingAt() const {
    static jnipp::Method<jboolean> method(clazz(), "lookingAt", "()Z");
    return method.call(*this);
}

// public int java.util.regex.Matcher.regionStart()
jint JavaUtilRegexMatcher::regionStart() const {
    static jnipp::Method<jint> method(clazz(), "regionStart", "()I");
    return method.call(*this);
}

// public int java.util.regex.Matcher.regionEnd()
jint JavaUtilRegexMatcher::regionEnd() const {
    static jnipp::Method<jint> method(clazz(), "regionEnd", "()I");
    return method.call(*this);
}

// public boolean java.util.regex.Matcher.hasTransparentBounds()
jboolean JavaUtilRegexMatcher::hasTransparentBounds() const {
    static jnipp::Method<jboolean> method(clazz(), "hasTransparentBounds", "()Z");
    return method.call(*this);
}

// public java.util.regex.Matcher java.util.regex.Matcher.useTransparentBounds(boolean)
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::useTransparentBounds(jboolean a0) const {
    static jnipp::Method<JavaUtilRegexMatcher,jboolean> method(clazz(), "useTransparentBounds", "(Z)Ljava/util/regex/Matcher;");
    return method.call(*this, a0);
}

// public boolean java.util.regex.Matcher.hasAnchoringBounds()
jboolean JavaUtilRegexMatcher::hasAnchoringBounds() const {
    static jnipp::Method<jboolean> method(clazz(), "hasAnchoringBounds", "()Z");
    return method.call(*this);
}

// public java.util.regex.Matcher java.util.regex.Matcher.useAnchoringBounds(boolean)
jnipp::LocalRef<JavaUtilRegexMatcher> JavaUtilRegexMatcher::useAnchoringBounds(jboolean a0) const {
    static jnipp::Method<JavaUtilRegexMatcher,jboolean> method(clazz(), "useAnchoringBounds", "(Z)Ljava/util/regex/Matcher;");
    return method.call(*this, a0);
}

// int java.util.regex.Matcher.getTextLength()
jint JavaUtilRegexMatcher::getTextLength() const {
    static jnipp::Method<jint> method(clazz(), "getTextLength", "()I");
    return method.call(*this);
}

// java.lang.CharSequence java.util.regex.Matcher.getSubSequence(int,int)
jnipp::LocalRef<JavaLangCharSequence> JavaUtilRegexMatcher::getSubSequence(jint a0, jint a1) const {
    static jnipp::Method<JavaLangCharSequence,jint,jint> method(clazz(), "getSubSequence", "(II)Ljava/lang/CharSequence;");
    return method.call(*this, a0, a1);
}
#undef ENDANCHOR
const jnipp::StaticField<jint> JavaUtilRegexMatcher::ENDANCHOR ("java/util/regex/Matcher", "ENDANCHOR", "I");
#undef NOANCHOR
const jnipp::StaticField<jint> JavaUtilRegexMatcher::NOANCHOR ("java/util/regex/Matcher", "NOANCHOR", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangRuntimeException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/RuntimeException"));
    return cls;
}

// protected java.lang.RuntimeException(java.lang.String,java.lang.Throwable,boolean,boolean)
jnipp::LocalRef<JavaLangRuntimeException> JavaLangRuntimeException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1, jboolean a2, jboolean a3) {
    static jnipp::Constructor<JavaLangRuntimeException,JavaLangString,JavaLangThrowable,jboolean,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public java.lang.RuntimeException(java.lang.Throwable)
jnipp::LocalRef<JavaLangRuntimeException> JavaLangRuntimeException::construct(const jnipp::Ref<JavaLangThrowable>& a0) {
    static jnipp::Constructor<JavaLangRuntimeException,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/Throwable;)V");
    return constructor.construct(a0);
}

// public java.lang.RuntimeException(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaLangRuntimeException> JavaLangRuntimeException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaLangRuntimeException,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.RuntimeException(java.lang.String)
jnipp::LocalRef<JavaLangRuntimeException> JavaLangRuntimeException::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangRuntimeException,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.RuntimeException()
jnipp::LocalRef<JavaLangRuntimeException> JavaLangRuntimeException::construct() {
    static jnipp::Constructor<JavaLangRuntimeException> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangRuntimeException::serialVersionUID ("java/lang/RuntimeException", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangIllegalArgumentException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/IllegalArgumentException"));
    return cls;
}

// public java.lang.IllegalArgumentException(java.lang.Throwable)
jnipp::LocalRef<JavaLangIllegalArgumentException> JavaLangIllegalArgumentException::construct(const jnipp::Ref<JavaLangThrowable>& a0) {
    static jnipp::Constructor<JavaLangIllegalArgumentException,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/Throwable;)V");
    return constructor.construct(a0);
}

// public java.lang.IllegalArgumentException(java.lang.String,java.lang.Throwable)
jnipp::LocalRef<JavaLangIllegalArgumentException> JavaLangIllegalArgumentException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangThrowable>& a1) {
    static jnipp::Constructor<JavaLangIllegalArgumentException,JavaLangString,JavaLangThrowable> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/Throwable;)V");
    return constructor.construct(a0, a1);
}

// public java.lang.IllegalArgumentException(java.lang.String)
jnipp::LocalRef<JavaLangIllegalArgumentException> JavaLangIllegalArgumentException::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangIllegalArgumentException,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.IllegalArgumentException()
jnipp::LocalRef<JavaLangIllegalArgumentException> JavaLangIllegalArgumentException::construct() {
    static jnipp::Constructor<JavaLangIllegalArgumentException> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangIllegalArgumentException::serialVersionUID ("java/lang/IllegalArgumentException", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPatternSyntaxException::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/PatternSyntaxException"));
    return cls;
}

// public java.util.regex.PatternSyntaxException(java.lang.String,java.lang.String,int)
jnipp::LocalRef<JavaUtilRegexPatternSyntaxException> JavaUtilRegexPatternSyntaxException::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jint a2) {
    static jnipp::Constructor<JavaUtilRegexPatternSyntaxException,JavaLangString,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;I)V");
    return constructor.construct(a0, a1, a2);
}

// public java.lang.String java.util.regex.PatternSyntaxException.getMessage()
jnipp::LocalRef<JavaLangString> JavaUtilRegexPatternSyntaxException::getMessage() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getMessage", "()Ljava/lang/String;");
    return method.call(*this);
}

// public int java.util.regex.PatternSyntaxException.getIndex()
jint JavaUtilRegexPatternSyntaxException::getIndex() const {
    static jnipp::Method<jint> method(clazz(), "getIndex", "()I");
    return method.call(*this);
}

// public java.lang.String java.util.regex.PatternSyntaxException.getDescription()
jnipp::LocalRef<JavaLangString> JavaUtilRegexPatternSyntaxException::getDescription() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDescription", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.regex.PatternSyntaxException.getPattern()
jnipp::LocalRef<JavaLangString> JavaUtilRegexPatternSyntaxException::getPattern() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getPattern", "()Ljava/lang/String;");
    return method.call(*this);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilRegexPatternSyntaxException::serialVersionUID ("java/util/regex/PatternSyntaxException", "serialVersionUID", "J");
#undef nl
const jnipp::StaticField<JavaLangString> JavaUtilRegexPatternSyntaxException::nl ("java/util/regex/PatternSyntaxException", "nl", "Ljava/lang/String;");
inline jnipp::GlobalRef<jnipp::Class>& JavaNioChannelsWritableByteChannel::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/channels/WritableByteChannel"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharsetCodingErrorAction::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/charset/CodingErrorAction"));
    return cls;
}

// private java.nio.charset.CodingErrorAction(java.lang.String)
jnipp::LocalRef<JavaNioCharsetCodingErrorAction> JavaNioCharsetCodingErrorAction::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaNioCharsetCodingErrorAction,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}
#undef IGNORE
const jnipp::StaticField<JavaNioCharsetCodingErrorAction> JavaNioCharsetCodingErrorAction::IGNORE ("java/nio/charset/CodingErrorAction", "IGNORE", "Ljava/nio/charset/CodingErrorAction;");
#undef REPLACE
const jnipp::StaticField<JavaNioCharsetCodingErrorAction> JavaNioCharsetCodingErrorAction::REPLACE ("java/nio/charset/CodingErrorAction", "REPLACE", "Ljava/nio/charset/CodingErrorAction;");
#undef REPORT
const jnipp::StaticField<JavaNioCharsetCodingErrorAction> JavaNioCharsetCodingErrorAction::REPORT ("java/nio/charset/CodingErrorAction", "REPORT", "Ljava/nio/charset/CodingErrorAction;");
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharsetCoderResult::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/charset/CoderResult"));
    return cls;
}

// private java.nio.charset.CoderResult(int,int)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCoderResult::construct(jint a0, jint a1) {
    static jnipp::Constructor<JavaNioCharsetCoderResult,jint,jint> constructor(clazz(), "(II)V");
    return constructor.construct(a0, a1);
}

// java.nio.charset.CoderResult(int,int,java.nio.charset.CoderResult$1)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCoderResult::construct(jint a0, jint a1, const jnipp::Ref<JavaNioCharsetCoderResult_1>& a2) {
    static jnipp::Constructor<JavaNioCharsetCoderResult,jint,jint,JavaNioCharsetCoderResult_1> constructor(clazz(), "(IILjava/nio/charset/CoderResult$1;)V");
    return constructor.construct(a0, a1, a2);
}

// public int java.nio.charset.CoderResult.length()
jint JavaNioCharsetCoderResult::length() const {
    static jnipp::Method<jint> method(clazz(), "length", "()I");
    return method.call(*this);
}

// public void java.nio.charset.CoderResult.throwException() throws java.nio.charset.CharacterCodingException
void JavaNioCharsetCoderResult::throwException() const {
    static jnipp::Method<void> method(clazz(), "throwException", "()V");
    method.call(*this);
}

// public boolean java.nio.charset.CoderResult.isUnderflow()
jboolean JavaNioCharsetCoderResult::isUnderflow() const {
    static jnipp::Method<jboolean> method(clazz(), "isUnderflow", "()Z");
    return method.call(*this);
}

// public static java.nio.charset.CoderResult java.nio.charset.CoderResult.malformedForLength(int)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCoderResult::malformedForLength(jint a0) {
    static jnipp::StaticMethod<JavaNioCharsetCoderResult,jint> method(clazz(), "malformedForLength", "(I)Ljava/nio/charset/CoderResult;");
    return method.call(a0);
}

// public boolean java.nio.charset.CoderResult.isError()
jboolean JavaNioCharsetCoderResult::isError() const {
    static jnipp::Method<jboolean> method(clazz(), "isError", "()Z");
    return method.call(*this);
}

// public boolean java.nio.charset.CoderResult.isOverflow()
jboolean JavaNioCharsetCoderResult::isOverflow() const {
    static jnipp::Method<jboolean> method(clazz(), "isOverflow", "()Z");
    return method.call(*this);
}

// public boolean java.nio.charset.CoderResult.isMalformed()
jboolean JavaNioCharsetCoderResult::isMalformed() const {
    static jnipp::Method<jboolean> method(clazz(), "isMalformed", "()Z");
    return method.call(*this);
}

// public boolean java.nio.charset.CoderResult.isUnmappable()
jboolean JavaNioCharsetCoderResult::isUnmappable() const {
    static jnipp::Method<jboolean> method(clazz(), "isUnmappable", "()Z");
    return method.call(*this);
}

// public static java.nio.charset.CoderResult java.nio.charset.CoderResult.unmappableForLength(int)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCoderResult::unmappableForLength(jint a0) {
    static jnipp::StaticMethod<JavaNioCharsetCoderResult,jint> method(clazz(), "unmappableForLength", "(I)Ljava/nio/charset/CoderResult;");
    return method.call(a0);
}
#undef CR_UNDERFLOW
const jnipp::StaticField<jint> JavaNioCharsetCoderResult::CR_UNDERFLOW ("java/nio/charset/CoderResult", "CR_UNDERFLOW", "I");
#undef CR_OVERFLOW
const jnipp::StaticField<jint> JavaNioCharsetCoderResult::CR_OVERFLOW ("java/nio/charset/CoderResult", "CR_OVERFLOW", "I");
#undef CR_ERROR_MIN
const jnipp::StaticField<jint> JavaNioCharsetCoderResult::CR_ERROR_MIN ("java/nio/charset/CoderResult", "CR_ERROR_MIN", "I");
#undef CR_MALFORMED
const jnipp::StaticField<jint> JavaNioCharsetCoderResult::CR_MALFORMED ("java/nio/charset/CoderResult", "CR_MALFORMED", "I");
#undef CR_UNMAPPABLE
const jnipp::StaticField<jint> JavaNioCharsetCoderResult::CR_UNMAPPABLE ("java/nio/charset/CoderResult", "CR_UNMAPPABLE", "I");
#undef names
const jnipp::StaticField<jnipp::Array<JavaLangString>> JavaNioCharsetCoderResult::names ("java/nio/charset/CoderResult", "names", "[Ljava/lang/String;");
#undef UNDERFLOW
const jnipp::StaticField<JavaNioCharsetCoderResult> JavaNioCharsetCoderResult::UNDERFLOW ("java/nio/charset/CoderResult", "UNDERFLOW", "Ljava/nio/charset/CoderResult;");
#undef OVERFLOW
const jnipp::StaticField<JavaNioCharsetCoderResult> JavaNioCharsetCoderResult::OVERFLOW ("java/nio/charset/CoderResult", "OVERFLOW", "Ljava/nio/charset/CoderResult;");
#undef malformedCache
jnipp::StaticField<JavaNioCharsetCoderResult_Cache> JavaNioCharsetCoderResult::malformedCache ("java/nio/charset/CoderResult", "malformedCache", "Ljava/nio/charset/CoderResult$Cache;");
#undef unmappableCache
jnipp::StaticField<JavaNioCharsetCoderResult_Cache> JavaNioCharsetCoderResult::unmappableCache ("java/nio/charset/CoderResult", "unmappableCache", "Ljava/nio/charset/CoderResult$Cache;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaNioCharsetCoderResult::$assertionsDisabled ("java/nio/charset/CoderResult", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilZipInflater::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/zip/Inflater"));
    return cls;
}

// public java.util.zip.Inflater(boolean)
jnipp::LocalRef<JavaUtilZipInflater> JavaUtilZipInflater::construct(jboolean a0) {
    static jnipp::Constructor<JavaUtilZipInflater,jboolean> constructor(clazz(), "(Z)V");
    return constructor.construct(a0);
}

// public java.util.zip.Inflater()
jnipp::LocalRef<JavaUtilZipInflater> JavaUtilZipInflater::construct() {
    static jnipp::Constructor<JavaUtilZipInflater> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected void java.util.zip.Inflater.finalize()
void JavaUtilZipInflater::finalize() const {
    static jnipp::Method<void> method(clazz(), "finalize", "()V");
    method.call(*this);
}

// private static native long java.util.zip.Inflater.init(boolean)
jlong JavaUtilZipInflater::init(jboolean a0) {
    static jnipp::StaticMethod<jlong,jboolean> method(clazz(), "init", "(Z)J");
    return method.call(a0);
}

// private static native void java.util.zip.Inflater.reset(long)
void JavaUtilZipInflater::reset(jlong a0) {
    static jnipp::StaticMethod<void,jlong> method(clazz(), "reset", "(J)V");
    method.call(a0);
}

// public void java.util.zip.Inflater.reset()
void JavaUtilZipInflater::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// private static native void java.util.zip.Inflater.initIDs()
void JavaUtilZipInflater::initIDs() {
    static jnipp::StaticMethod<void> method(clazz(), "initIDs", "()V");
    method.call();
}

// private void java.util.zip.Inflater.ensureOpen()
void JavaUtilZipInflater::ensureOpen() const {
    static jnipp::Method<void> method(clazz(), "ensureOpen", "()V");
    method.call(*this);
}

// boolean java.util.zip.Inflater.ended()
jboolean JavaUtilZipInflater::ended() const {
    static jnipp::Method<jboolean> method(clazz(), "ended", "()Z");
    return method.call(*this);
}

// private static native void java.util.zip.Inflater.end(long)
void JavaUtilZipInflater::end(jlong a0) {
    static jnipp::StaticMethod<void,jlong> method(clazz(), "end", "(J)V");
    method.call(a0);
}

// public void java.util.zip.Inflater.end()
void JavaUtilZipInflater::end() const {
    static jnipp::Method<void> method(clazz(), "end", "()V");
    method.call(*this);
}

// public boolean java.util.zip.Inflater.finished()
jboolean JavaUtilZipInflater::finished() const {
    static jnipp::Method<jboolean> method(clazz(), "finished", "()Z");
    return method.call(*this);
}

// public void java.util.zip.Inflater.setInput(byte[],int,int)
void JavaUtilZipInflater::setInput(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "setInput", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.util.zip.Inflater.setInput(byte[])
void JavaUtilZipInflater::setInput(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "setInput", "([B)V");
    method.call(*this, a0);
}

// public void java.util.zip.Inflater.setDictionary(byte[],int,int)
void JavaUtilZipInflater::setDictionary(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "setDictionary", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// private static native void java.util.zip.Inflater.setDictionary(long,byte[],int,int)
void JavaUtilZipInflater::setDictionary(jlong a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3) {
    static jnipp::StaticMethod<void,jlong,jnipp::Array<jbyte>,jint,jint> method(clazz(), "setDictionary", "(J[BII)V");
    method.call(a0, a1, a2, a3);
}

// public void java.util.zip.Inflater.setDictionary(byte[])
void JavaUtilZipInflater::setDictionary(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "setDictionary", "([B)V");
    method.call(*this, a0);
}

// public int java.util.zip.Inflater.getRemaining()
jint JavaUtilZipInflater::getRemaining() const {
    static jnipp::Method<jint> method(clazz(), "getRemaining", "()I");
    return method.call(*this);
}

// public boolean java.util.zip.Inflater.needsInput()
jboolean JavaUtilZipInflater::needsInput() const {
    static jnipp::Method<jboolean> method(clazz(), "needsInput", "()Z");
    return method.call(*this);
}

// public boolean java.util.zip.Inflater.needsDictionary()
jboolean JavaUtilZipInflater::needsDictionary() const {
    static jnipp::Method<jboolean> method(clazz(), "needsDictionary", "()Z");
    return method.call(*this);
}

// public int java.util.zip.Inflater.inflate(byte[],int,int) throws java.util.zip.DataFormatException
jint JavaUtilZipInflater::inflate(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "inflate", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public int java.util.zip.Inflater.inflate(byte[]) throws java.util.zip.DataFormatException
jint JavaUtilZipInflater::inflate(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>> method(clazz(), "inflate", "([B)I");
    return method.call(*this, a0);
}

// private static native int java.util.zip.Inflater.getAdler(long)
jint JavaUtilZipInflater::getAdler(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "getAdler", "(J)I");
    return method.call(a0);
}

// public int java.util.zip.Inflater.getAdler()
jint JavaUtilZipInflater::getAdler() const {
    static jnipp::Method<jint> method(clazz(), "getAdler", "()I");
    return method.call(*this);
}

// public int java.util.zip.Inflater.getTotalIn()
jint JavaUtilZipInflater::getTotalIn() const {
    static jnipp::Method<jint> method(clazz(), "getTotalIn", "()I");
    return method.call(*this);
}

// public long java.util.zip.Inflater.getBytesRead()
jlong JavaUtilZipInflater::getBytesRead() const {
    static jnipp::Method<jlong> method(clazz(), "getBytesRead", "()J");
    return method.call(*this);
}

// public int java.util.zip.Inflater.getTotalOut()
jint JavaUtilZipInflater::getTotalOut() const {
    static jnipp::Method<jint> method(clazz(), "getTotalOut", "()I");
    return method.call(*this);
}

// public long java.util.zip.Inflater.getBytesWritten()
jlong JavaUtilZipInflater::getBytesWritten() const {
    static jnipp::Method<jlong> method(clazz(), "getBytesWritten", "()J");
    return method.call(*this);
}

// private native int java.util.zip.Inflater.inflateBytes(long,byte[],int,int) throws java.util.zip.DataFormatException
jint JavaUtilZipInflater::inflateBytes(jlong a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3) const {
    static jnipp::Method<jint,jlong,jnipp::Array<jbyte>,jint,jint> method(clazz(), "inflateBytes", "(J[BII)I");
    return method.call(*this, a0, a1, a2, a3);
}
#undef defaultBuf
const jnipp::StaticField<jnipp::Array<jbyte>> JavaUtilZipInflater::defaultBuf ("java/util/zip/Inflater", "defaultBuf", "[B");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaUtilZipInflater::$assertionsDisabled ("java/util/zip/Inflater", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilDeque::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Deque"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilZipZipCoder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/zip/ZipCoder"));
    return cls;
}

// private java.util.zip.ZipCoder(java.nio.charset.Charset)
jnipp::LocalRef<JavaUtilZipZipCoder> JavaUtilZipZipCoder::construct(const jnipp::Ref<JavaNioCharsetCharset>& a0) {
    static jnipp::Constructor<JavaUtilZipZipCoder,JavaNioCharsetCharset> constructor(clazz(), "(Ljava/nio/charset/Charset;)V");
    return constructor.construct(a0);
}

// static java.util.zip.ZipCoder java.util.zip.ZipCoder.get(java.nio.charset.Charset)
jnipp::LocalRef<JavaUtilZipZipCoder> JavaUtilZipZipCoder::get(const jnipp::Ref<JavaNioCharsetCharset>& a0) {
    static jnipp::StaticMethod<JavaUtilZipZipCoder,JavaNioCharsetCharset> method(clazz(), "get", "(Ljava/nio/charset/Charset;)Ljava/util/zip/ZipCoder;");
    return method.call(a0);
}

// byte[] java.util.zip.ZipCoder.getBytes(java.lang.String)
jnipp::LocalRef<jnipp::Array<jbyte>> JavaUtilZipZipCoder::getBytes(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaLangString> method(clazz(), "getBytes", "(Ljava/lang/String;)[B");
    return method.call(*this, a0);
}

// private java.nio.charset.CharsetDecoder java.util.zip.ZipCoder.decoder()
jnipp::LocalRef<JavaNioCharsetCharsetDecoder> JavaUtilZipZipCoder::decoder() const {
    static jnipp::Method<JavaNioCharsetCharsetDecoder> method(clazz(), "decoder", "()Ljava/nio/charset/CharsetDecoder;");
    return method.call(*this);
}

// private java.nio.charset.CharsetEncoder java.util.zip.ZipCoder.encoder()
jnipp::LocalRef<JavaNioCharsetCharsetEncoder> JavaUtilZipZipCoder::encoder() const {
    static jnipp::Method<JavaNioCharsetCharsetEncoder> method(clazz(), "encoder", "()Ljava/nio/charset/CharsetEncoder;");
    return method.call(*this);
}

// boolean java.util.zip.ZipCoder.isUTF8()
jboolean JavaUtilZipZipCoder::isUTF8() const {
    static jnipp::Method<jboolean> method(clazz(), "isUTF8", "()Z");
    return method.call(*this);
}

// byte[] java.util.zip.ZipCoder.getBytesUTF8(java.lang.String)
jnipp::LocalRef<jnipp::Array<jbyte>> JavaUtilZipZipCoder::getBytesUTF8(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaLangString> method(clazz(), "getBytesUTF8", "(Ljava/lang/String;)[B");
    return method.call(*this, a0);
}

// java.lang.String java.util.zip.ZipCoder.toStringUTF8(byte[],int)
jnipp::LocalRef<JavaLangString> JavaUtilZipZipCoder::toStringUTF8(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1) const {
    static jnipp::Method<JavaLangString,jnipp::Array<jbyte>,jint> method(clazz(), "toStringUTF8", "([BI)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilZipZipEntry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/zip/ZipEntry"));
    return cls;
}

// java.util.zip.ZipEntry()
jnipp::LocalRef<JavaUtilZipZipEntry> JavaUtilZipZipEntry::construct() {
    static jnipp::Constructor<JavaUtilZipZipEntry> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.zip.ZipEntry(java.util.zip.ZipEntry)
jnipp::LocalRef<JavaUtilZipZipEntry> JavaUtilZipZipEntry::construct(const jnipp::Ref<JavaUtilZipZipEntry>& a0) {
    static jnipp::Constructor<JavaUtilZipZipEntry,JavaUtilZipZipEntry> constructor(clazz(), "(Ljava/util/zip/ZipEntry;)V");
    return constructor.construct(a0);
}

// public java.util.zip.ZipEntry(java.lang.String)
jnipp::LocalRef<JavaUtilZipZipEntry> JavaUtilZipZipEntry::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaUtilZipZipEntry,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public int java.util.zip.ZipEntry.hashCode()
jint JavaUtilZipZipEntry::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object java.util.zip.ZipEntry.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilZipZipEntry::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.String java.util.zip.ZipEntry.getName()
jnipp::LocalRef<JavaLangString> JavaUtilZipZipEntry::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public int java.util.zip.ZipEntry.getMethod()
jint JavaUtilZipZipEntry::getMethod() const {
    static jnipp::Method<jint> method(clazz(), "getMethod", "()I");
    return method.call(*this);
}

// public long java.util.zip.ZipEntry.getSize()
jlong JavaUtilZipZipEntry::getSize() const {
    static jnipp::Method<jlong> method(clazz(), "getSize", "()J");
    return method.call(*this);
}

// public void java.util.zip.ZipEntry.setSize(long)
void JavaUtilZipZipEntry::setSize(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "setSize", "(J)V");
    method.call(*this, a0);
}

// public boolean java.util.zip.ZipEntry.isDirectory()
jboolean JavaUtilZipZipEntry::isDirectory() const {
    static jnipp::Method<jboolean> method(clazz(), "isDirectory", "()Z");
    return method.call(*this);
}

// public java.lang.String java.util.zip.ZipEntry.getComment()
jnipp::LocalRef<JavaLangString> JavaUtilZipZipEntry::getComment() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getComment", "()Ljava/lang/String;");
    return method.call(*this);
}

// public void java.util.zip.ZipEntry.setTime(long)
void JavaUtilZipZipEntry::setTime(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "setTime", "(J)V");
    method.call(*this, a0);
}

// public long java.util.zip.ZipEntry.getTime()
jlong JavaUtilZipZipEntry::getTime() const {
    static jnipp::Method<jlong> method(clazz(), "getTime", "()J");
    return method.call(*this);
}

// public long java.util.zip.ZipEntry.getCompressedSize()
jlong JavaUtilZipZipEntry::getCompressedSize() const {
    static jnipp::Method<jlong> method(clazz(), "getCompressedSize", "()J");
    return method.call(*this);
}

// public void java.util.zip.ZipEntry.setCompressedSize(long)
void JavaUtilZipZipEntry::setCompressedSize(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "setCompressedSize", "(J)V");
    method.call(*this, a0);
}

// public void java.util.zip.ZipEntry.setCrc(long)
void JavaUtilZipZipEntry::setCrc(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "setCrc", "(J)V");
    method.call(*this, a0);
}

// public long java.util.zip.ZipEntry.getCrc()
jlong JavaUtilZipZipEntry::getCrc() const {
    static jnipp::Method<jlong> method(clazz(), "getCrc", "()J");
    return method.call(*this);
}

// public void java.util.zip.ZipEntry.setMethod(int)
void JavaUtilZipZipEntry::setMethod(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setMethod", "(I)V");
    method.call(*this, a0);
}

// public void java.util.zip.ZipEntry.setExtra(byte[])
void JavaUtilZipZipEntry::setExtra(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "setExtra", "([B)V");
    method.call(*this, a0);
}

// public byte[] java.util.zip.ZipEntry.getExtra()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaUtilZipZipEntry::getExtra() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getExtra", "()[B");
    return method.call(*this);
}

// public void java.util.zip.ZipEntry.setComment(java.lang.String)
void JavaUtilZipZipEntry::setComment(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "setComment", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// private static long java.util.zip.ZipEntry.dosToJavaTime(long)
jlong JavaUtilZipZipEntry::dosToJavaTime(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "dosToJavaTime", "(J)J");
    return method.call(a0);
}

// private static long java.util.zip.ZipEntry.javaToDosTime(long)
jlong JavaUtilZipZipEntry::javaToDosTime(jlong a0) {
    static jnipp::StaticMethod<jlong,jlong> method(clazz(), "javaToDosTime", "(J)J");
    return method.call(a0);
}
#undef STORED
const jnipp::StaticField<jint> JavaUtilZipZipEntry::STORED ("java/util/zip/ZipEntry", "STORED", "I");
#undef DEFLATED
const jnipp::StaticField<jint> JavaUtilZipZipEntry::DEFLATED ("java/util/zip/ZipEntry", "DEFLATED", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilJarJarVerifier::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/jar/JarVerifier"));
    return cls;
}

// public java.util.jar.JarVerifier(byte[])
jnipp::LocalRef<JavaUtilJarJarVerifier> JavaUtilJarJarVerifier::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::Constructor<JavaUtilJarJarVerifier,jnipp::Array<jbyte>> constructor(clazz(), "([B)V");
    return constructor.construct(a0);
}

// public java.security.CodeSource java.util.jar.JarVerifier.getCodeSource(java.net.URL,java.util.jar.JarFile,java.util.jar.JarEntry)
jnipp::LocalRef<JavaSecurityCodeSource> JavaUtilJarJarVerifier::getCodeSource(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaUtilJarJarFile>& a1, const jnipp::Ref<JavaUtilJarJarEntry>& a2) const {
    static jnipp::Method<JavaSecurityCodeSource,JavaNetURL,JavaUtilJarJarFile,JavaUtilJarJarEntry> method(clazz(), "getCodeSource", "(Ljava/net/URL;Ljava/util/jar/JarFile;Ljava/util/jar/JarEntry;)Ljava/security/CodeSource;");
    return method.call(*this, a0, a1, a2);
}

// public java.security.CodeSource java.util.jar.JarVerifier.getCodeSource(java.net.URL,java.lang.String)
jnipp::LocalRef<JavaSecurityCodeSource> JavaUtilJarJarVerifier::getCodeSource(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<JavaSecurityCodeSource,JavaNetURL,JavaLangString> method(clazz(), "getCodeSource", "(Ljava/net/URL;Ljava/lang/String;)Ljava/security/CodeSource;");
    return method.call(*this, a0, a1);
}

// public java.security.CodeSigner[] java.util.jar.JarVerifier.getCodeSigners(java.util.jar.JarFile,java.util.jar.JarEntry)
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSigner>> JavaUtilJarJarVerifier::getCodeSigners(const jnipp::Ref<JavaUtilJarJarFile>& a0, const jnipp::Ref<JavaUtilJarJarEntry>& a1) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSigner>,JavaUtilJarJarFile,JavaUtilJarJarEntry> method(clazz(), "getCodeSigners", "(Ljava/util/jar/JarFile;Ljava/util/jar/JarEntry;)[Ljava/security/CodeSigner;");
    return method.call(*this, a0, a1);
}

// public java.security.CodeSigner[] java.util.jar.JarVerifier.getCodeSigners(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSigner>> JavaUtilJarJarVerifier::getCodeSigners(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSigner>,JavaLangString> method(clazz(), "getCodeSigners", "(Ljava/lang/String;)[Ljava/security/CodeSigner;");
    return method.call(*this, a0);
}

// public synchronized java.util.Enumeration java.util.jar.JarVerifier.entryNames(java.util.jar.JarFile,java.security.CodeSource[])
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilJarJarVerifier::entryNames(const jnipp::Ref<JavaUtilJarJarFile>& a0, const jnipp::Ref<jnipp::Array<JavaSecurityCodeSource>>& a1) const {
    static jnipp::Method<JavaUtilEnumeration,JavaUtilJarJarFile,jnipp::Array<JavaSecurityCodeSource>> method(clazz(), "entryNames", "(Ljava/util/jar/JarFile;[Ljava/security/CodeSource;)Ljava/util/Enumeration;");
    return method.call(*this, a0, a1);
}

// public java.util.Enumeration java.util.jar.JarVerifier.entries2(java.util.jar.JarFile,java.util.Enumeration)
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilJarJarVerifier::entries2(const jnipp::Ref<JavaUtilJarJarFile>& a0, const jnipp::Ref<JavaUtilEnumeration>& a1) const {
    static jnipp::Method<JavaUtilEnumeration,JavaUtilJarJarFile,JavaUtilEnumeration> method(clazz(), "entries2", "(Ljava/util/jar/JarFile;Ljava/util/Enumeration;)Ljava/util/Enumeration;");
    return method.call(*this, a0, a1);
}

// public synchronized java.security.CodeSource[] java.util.jar.JarVerifier.getCodeSources(java.util.jar.JarFile,java.net.URL)
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSource>> JavaUtilJarJarVerifier::getCodeSources(const jnipp::Ref<JavaUtilJarJarFile>& a0, const jnipp::Ref<JavaNetURL>& a1) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSource>,JavaUtilJarJarFile,JavaNetURL> method(clazz(), "getCodeSources", "(Ljava/util/jar/JarFile;Ljava/net/URL;)[Ljava/security/CodeSource;");
    return method.call(*this, a0, a1);
}

// private java.util.Enumeration java.util.jar.JarVerifier.unsignedEntryNames(java.util.jar.JarFile)
jnipp::LocalRef<JavaUtilEnumeration> JavaUtilJarJarVerifier::unsignedEntryNames(const jnipp::Ref<JavaUtilJarJarFile>& a0) const {
    static jnipp::Method<JavaUtilEnumeration,JavaUtilJarJarFile> method(clazz(), "unsignedEntryNames", "(Ljava/util/jar/JarFile;)Ljava/util/Enumeration;");
    return method.call(*this, a0);
}

// public void java.util.jar.JarVerifier.setEagerValidation(boolean)
void JavaUtilJarJarVerifier::setEagerValidation(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setEagerValidation", "(Z)V");
    method.call(*this, a0);
}

// public synchronized java.util.List java.util.jar.JarVerifier.getManifestDigests()
jnipp::LocalRef<JavaUtilList> JavaUtilJarJarVerifier::getManifestDigests() const {
    static jnipp::Method<JavaUtilList> method(clazz(), "getManifestDigests", "()Ljava/util/List;");
    return method.call(*this);
}

// public void java.util.jar.JarVerifier.beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier) throws java.io.IOException
void JavaUtilJarJarVerifier::beginEntry(const jnipp::Ref<JavaUtilJarJarEntry>& a0, const jnipp::Ref<SunSecurityUtilManifestEntryVerifier>& a1) const {
    static jnipp::Method<void,JavaUtilJarJarEntry,SunSecurityUtilManifestEntryVerifier> method(clazz(), "beginEntry", "(Ljava/util/jar/JarEntry;Lsun/security/util/ManifestEntryVerifier;)V");
    method.call(*this, a0, a1);
}

// public void java.util.jar.JarVerifier.update(int,sun.security.util.ManifestEntryVerifier) throws java.io.IOException
void JavaUtilJarJarVerifier::update(jint a0, const jnipp::Ref<SunSecurityUtilManifestEntryVerifier>& a1) const {
    static jnipp::Method<void,jint,SunSecurityUtilManifestEntryVerifier> method(clazz(), "update", "(ILsun/security/util/ManifestEntryVerifier;)V");
    method.call(*this, a0, a1);
}

// public void java.util.jar.JarVerifier.update(int,byte[],int,int,sun.security.util.ManifestEntryVerifier) throws java.io.IOException
void JavaUtilJarJarVerifier::update(jint a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3, const jnipp::Ref<SunSecurityUtilManifestEntryVerifier>& a4) const {
    static jnipp::Method<void,jint,jnipp::Array<jbyte>,jint,jint,SunSecurityUtilManifestEntryVerifier> method(clazz(), "update", "(I[BIILsun/security/util/ManifestEntryVerifier;)V");
    method.call(*this, a0, a1, a2, a3, a4);
}

// void java.util.jar.JarVerifier.doneWithMeta()
void JavaUtilJarJarVerifier::doneWithMeta() const {
    static jnipp::Method<void> method(clazz(), "doneWithMeta", "()V");
    method.call(*this);
}

// boolean java.util.jar.JarVerifier.nothingToVerify()
jboolean JavaUtilJarJarVerifier::nothingToVerify() const {
    static jnipp::Method<jboolean> method(clazz(), "nothingToVerify", "()Z");
    return method.call(*this);
}

// static java.security.CodeSource java.util.jar.JarVerifier.getUnsignedCS(java.net.URL)
jnipp::LocalRef<JavaSecurityCodeSource> JavaUtilJarJarVerifier::getUnsignedCS(const jnipp::Ref<JavaNetURL>& a0) {
    static jnipp::StaticMethod<JavaSecurityCodeSource,JavaNetURL> method(clazz(), "getUnsignedCS", "(Ljava/net/URL;)Ljava/security/CodeSource;");
    return method.call(a0);
}

// public java.security.cert.Certificate[] java.util.jar.JarVerifier.getCerts(java.lang.String)
jnipp::LocalRef<jnipp::Array<JavaSecurityCertCertificate>> JavaUtilJarJarVerifier::getCerts(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCertCertificate>,JavaLangString> method(clazz(), "getCerts", "(Ljava/lang/String;)[Ljava/security/cert/Certificate;");
    return method.call(*this, a0);
}

// public java.security.cert.Certificate[] java.util.jar.JarVerifier.getCerts(java.util.jar.JarFile,java.util.jar.JarEntry)
jnipp::LocalRef<jnipp::Array<JavaSecurityCertCertificate>> JavaUtilJarJarVerifier::getCerts(const jnipp::Ref<JavaUtilJarJarFile>& a0, const jnipp::Ref<JavaUtilJarJarEntry>& a1) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCertCertificate>,JavaUtilJarJarFile,JavaUtilJarJarEntry> method(clazz(), "getCerts", "(Ljava/util/jar/JarFile;Ljava/util/jar/JarEntry;)[Ljava/security/cert/Certificate;");
    return method.call(*this, a0, a1);
}

// private synchronized java.util.Map java.util.jar.JarVerifier.signerMap()
jnipp::LocalRef<JavaUtilMap> JavaUtilJarJarVerifier::signerMap() const {
    static jnipp::Method<JavaUtilMap> method(clazz(), "signerMap", "()Ljava/util/Map;");
    return method.call(*this);
}

// private void java.util.jar.JarVerifier.processEntry(sun.security.util.ManifestEntryVerifier) throws java.io.IOException
void JavaUtilJarJarVerifier::processEntry(const jnipp::Ref<SunSecurityUtilManifestEntryVerifier>& a0) const {
    static jnipp::Method<void,SunSecurityUtilManifestEntryVerifier> method(clazz(), "processEntry", "(Lsun/security/util/ManifestEntryVerifier;)V");
    method.call(*this, a0);
}

// private static java.security.cert.Certificate[] java.util.jar.JarVerifier.mapSignersToCertArray(java.security.CodeSigner[])
jnipp::LocalRef<jnipp::Array<JavaSecurityCertCertificate>> JavaUtilJarJarVerifier::mapSignersToCertArray(const jnipp::Ref<jnipp::Array<JavaSecurityCodeSigner>>& a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaSecurityCertCertificate>,jnipp::Array<JavaSecurityCodeSigner>> method(clazz(), "mapSignersToCertArray", "([Ljava/security/CodeSigner;)[Ljava/security/cert/Certificate;");
    return method.call(a0);
}

// private synchronized java.security.CodeSource java.util.jar.JarVerifier.mapSignersToCodeSource(java.net.URL,java.security.CodeSigner[])
jnipp::LocalRef<JavaSecurityCodeSource> JavaUtilJarJarVerifier::mapSignersToCodeSource(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<jnipp::Array<JavaSecurityCodeSigner>>& a1) const {
    static jnipp::Method<JavaSecurityCodeSource,JavaNetURL,jnipp::Array<JavaSecurityCodeSigner>> method(clazz(), "mapSignersToCodeSource", "(Ljava/net/URL;[Ljava/security/CodeSigner;)Ljava/security/CodeSource;");
    return method.call(*this, a0, a1);
}

// private java.security.CodeSource[] java.util.jar.JarVerifier.mapSignersToCodeSources(java.net.URL,java.util.List,boolean)
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSource>> JavaUtilJarJarVerifier::mapSignersToCodeSources(const jnipp::Ref<JavaNetURL>& a0, const jnipp::Ref<JavaUtilList>& a1, jboolean a2) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSource>,JavaNetURL,JavaUtilList,jboolean> method(clazz(), "mapSignersToCodeSources", "(Ljava/net/URL;Ljava/util/List;Z)[Ljava/security/CodeSource;");
    return method.call(*this, a0, a1, a2);
}

// private java.security.CodeSigner[] java.util.jar.JarVerifier.findMatchingSigners(java.security.CodeSource)
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSigner>> JavaUtilJarJarVerifier::findMatchingSigners(const jnipp::Ref<JavaSecurityCodeSource>& a0) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSigner>,JavaSecurityCodeSource> method(clazz(), "findMatchingSigners", "(Ljava/security/CodeSource;)[Ljava/security/CodeSigner;");
    return method.call(*this, a0);
}

// static boolean java.util.jar.JarVerifier.isSigningRelated(java.lang.String)
jboolean JavaUtilJarJarVerifier::isSigningRelated(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "isSigningRelated", "(Ljava/lang/String;)Z");
    return method.call(a0);
}

// private synchronized java.util.List java.util.jar.JarVerifier.getJarCodeSigners()
jnipp::LocalRef<JavaUtilList> JavaUtilJarJarVerifier::getJarCodeSigners() const {
    static jnipp::Method<JavaUtilList> method(clazz(), "getJarCodeSigners", "()Ljava/util/List;");
    return method.call(*this);
}
#undef debug
const jnipp::StaticField<SunSecurityUtilDebug> JavaUtilJarJarVerifier::debug ("java/util/jar/JarVerifier", "debug", "Lsun/security/util/Debug;");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilJarJarEntry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/jar/JarEntry"));
    return cls;
}

// public java.util.jar.JarEntry(java.util.jar.JarEntry)
jnipp::LocalRef<JavaUtilJarJarEntry> JavaUtilJarJarEntry::construct(const jnipp::Ref<JavaUtilJarJarEntry>& a0) {
    static jnipp::Constructor<JavaUtilJarJarEntry,JavaUtilJarJarEntry> constructor(clazz(), "(Ljava/util/jar/JarEntry;)V");
    return constructor.construct(a0);
}

// public java.util.jar.JarEntry(java.util.zip.ZipEntry)
jnipp::LocalRef<JavaUtilJarJarEntry> JavaUtilJarJarEntry::construct(const jnipp::Ref<JavaUtilZipZipEntry>& a0) {
    static jnipp::Constructor<JavaUtilJarJarEntry,JavaUtilZipZipEntry> constructor(clazz(), "(Ljava/util/zip/ZipEntry;)V");
    return constructor.construct(a0);
}

// public java.util.jar.JarEntry(java.lang.String)
jnipp::LocalRef<JavaUtilJarJarEntry> JavaUtilJarJarEntry::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaUtilJarJarEntry,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.security.cert.Certificate[] java.util.jar.JarEntry.getCertificates()
jnipp::LocalRef<jnipp::Array<JavaSecurityCertCertificate>> JavaUtilJarJarEntry::getCertificates() const {
    static jnipp::Method<jnipp::Array<JavaSecurityCertCertificate>> method(clazz(), "getCertificates", "()[Ljava/security/cert/Certificate;");
    return method.call(*this);
}

// public java.security.CodeSigner[] java.util.jar.JarEntry.getCodeSigners()
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSigner>> JavaUtilJarJarEntry::getCodeSigners() const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSigner>> method(clazz(), "getCodeSigners", "()[Ljava/security/CodeSigner;");
    return method.call(*this);
}

// public java.util.jar.Attributes java.util.jar.JarEntry.getAttributes() throws java.io.IOException
jnipp::LocalRef<JavaUtilJarAttributes> JavaUtilJarJarEntry::getAttributes() const {
    static jnipp::Method<JavaUtilJarAttributes> method(clazz(), "getAttributes", "()Ljava/util/jar/Attributes;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoReader::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/Reader"));
    return cls;
}

// protected java.io.Reader()
jnipp::LocalRef<JavaIoReader> JavaIoReader::construct() {
    static jnipp::Constructor<JavaIoReader> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected java.io.Reader(java.lang.Object)
jnipp::LocalRef<JavaIoReader> JavaIoReader::construct(const jnipp::Ref<JavaLangObject>& a0) {
    static jnipp::Constructor<JavaIoReader,JavaLangObject> constructor(clazz(), "(Ljava/lang/Object;)V");
    return constructor.construct(a0);
}

// public void java.io.Reader.mark(int) throws java.io.IOException
void JavaIoReader::mark(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "mark", "(I)V");
    method.call(*this, a0);
}

// public void java.io.Reader.reset() throws java.io.IOException
void JavaIoReader::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// public int java.io.Reader.read() throws java.io.IOException
jint JavaIoReader::read() const {
    static jnipp::Method<jint> method(clazz(), "read", "()I");
    return method.call(*this);
}

// public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
jint JavaIoReader::read(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<jint,JavaNioCharBuffer> method(clazz(), "read", "(Ljava/nio/CharBuffer;)I");
    return method.call(*this, a0);
}

// public int java.io.Reader.read(char[]) throws java.io.IOException
jint JavaIoReader::read(const jnipp::Ref<jnipp::Array<jchar>>& a0) const {
    static jnipp::Method<jint,jnipp::Array<jchar>> method(clazz(), "read", "([C)I");
    return method.call(*this, a0);
}

// public long java.io.Reader.skip(long) throws java.io.IOException
jlong JavaIoReader::skip(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "skip", "(J)J");
    return method.call(*this, a0);
}

// public boolean java.io.Reader.markSupported()
jboolean JavaIoReader::markSupported() const {
    static jnipp::Method<jboolean> method(clazz(), "markSupported", "()Z");
    return method.call(*this);
}

// public boolean java.io.Reader.ready() throws java.io.IOException
jboolean JavaIoReader::ready() const {
    static jnipp::Method<jboolean> method(clazz(), "ready", "()Z");
    return method.call(*this);
}
#undef maxSkipBufferSize
const jnipp::StaticField<jint> JavaIoReader::maxSkipBufferSize ("java/io/Reader", "maxSkipBufferSize", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilProperties_LineReader::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Properties$LineReader"));
    return cls;
}

// public java.util.Properties$LineReader(java.util.Properties,java.io.InputStream)
jnipp::LocalRef<JavaUtilProperties_LineReader> JavaUtilProperties_LineReader::construct(const jnipp::Ref<JavaUtilProperties>& a0, const jnipp::Ref<JavaIoInputStream>& a1) {
    static jnipp::Constructor<JavaUtilProperties_LineReader,JavaUtilProperties,JavaIoInputStream> constructor(clazz(), "(Ljava/util/Properties;Ljava/io/InputStream;)V");
    return constructor.construct(a0, a1);
}

// public java.util.Properties$LineReader(java.util.Properties,java.io.Reader)
jnipp::LocalRef<JavaUtilProperties_LineReader> JavaUtilProperties_LineReader::construct(const jnipp::Ref<JavaUtilProperties>& a0, const jnipp::Ref<JavaIoReader>& a1) {
    static jnipp::Constructor<JavaUtilProperties_LineReader,JavaUtilProperties,JavaIoReader> constructor(clazz(), "(Ljava/util/Properties;Ljava/io/Reader;)V");
    return constructor.construct(a0, a1);
}

// int java.util.Properties$LineReader.readLine() throws java.io.IOException
jint JavaUtilProperties_LineReader::readLine() const {
    static jnipp::Method<jint> method(clazz(), "readLine", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityProvider_ServiceKey::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/Provider$ServiceKey"));
    return cls;
}

// java.security.Provider$ServiceKey(java.lang.String,java.lang.String,boolean,java.security.Provider$1)
jnipp::LocalRef<JavaSecurityProvider_ServiceKey> JavaSecurityProvider_ServiceKey::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jboolean a2, const jnipp::Ref<JavaSecurityProvider_1>& a3) {
    static jnipp::Constructor<JavaSecurityProvider_ServiceKey,JavaLangString,JavaLangString,jboolean,JavaSecurityProvider_1> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;ZLjava/security/Provider$1;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// private java.security.Provider$ServiceKey(java.lang.String,java.lang.String,boolean)
jnipp::LocalRef<JavaSecurityProvider_ServiceKey> JavaSecurityProvider_ServiceKey::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jboolean a2) {
    static jnipp::Constructor<JavaSecurityProvider_ServiceKey,JavaLangString,JavaLangString,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;Z)V");
    return constructor.construct(a0, a1, a2);
}

// public boolean java.security.Provider$ServiceKey.equals(java.lang.Object)
jboolean JavaSecurityProvider_ServiceKey::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.security.Provider$ServiceKey.hashCode()
jint JavaSecurityProvider_ServiceKey::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// boolean java.security.Provider$ServiceKey.matches(java.lang.String,java.lang.String)
jboolean JavaSecurityProvider_ServiceKey::matches(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<jboolean,JavaLangString,JavaLangString> method(clazz(), "matches", "(Ljava/lang/String;Ljava/lang/String;)Z");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityProvider_Service::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/Provider$Service"));
    return cls;
}

// public java.security.Provider$Service(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.Map)
jnipp::LocalRef<JavaSecurityProvider_Service> JavaSecurityProvider_Service::construct(const jnipp::Ref<JavaSecurityProvider>& a0, const jnipp::Ref<JavaLangString>& a1, const jnipp::Ref<JavaLangString>& a2, const jnipp::Ref<JavaLangString>& a3, const jnipp::Ref<JavaUtilList>& a4, const jnipp::Ref<JavaUtilMap>& a5) {
    static jnipp::Constructor<JavaSecurityProvider_Service,JavaSecurityProvider,JavaLangString,JavaLangString,JavaLangString,JavaUtilList,JavaUtilMap> constructor(clazz(), "(Ljava/security/Provider;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/Map;)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5);
}

// java.security.Provider$Service(java.security.Provider,java.security.Provider$1)
jnipp::LocalRef<JavaSecurityProvider_Service> JavaSecurityProvider_Service::construct(const jnipp::Ref<JavaSecurityProvider>& a0, const jnipp::Ref<JavaSecurityProvider_1>& a1) {
    static jnipp::Constructor<JavaSecurityProvider_Service,JavaSecurityProvider,JavaSecurityProvider_1> constructor(clazz(), "(Ljava/security/Provider;Ljava/security/Provider$1;)V");
    return constructor.construct(a0, a1);
}

// private java.security.Provider$Service(java.security.Provider)
jnipp::LocalRef<JavaSecurityProvider_Service> JavaSecurityProvider_Service::construct(const jnipp::Ref<JavaSecurityProvider>& a0) {
    static jnipp::Constructor<JavaSecurityProvider_Service,JavaSecurityProvider> constructor(clazz(), "(Ljava/security/Provider;)V");
    return constructor.construct(a0);
}

// public java.lang.Object java.security.Provider$Service.newInstance(java.lang.Object) throws java.security.NoSuchAlgorithmException
jnipp::LocalRef<JavaLangObject> JavaSecurityProvider_Service::newInstance(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "newInstance", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public final java.lang.String java.security.Provider$Service.getType()
jnipp::LocalRef<JavaLangString> JavaSecurityProvider_Service::getType() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getType", "()Ljava/lang/String;");
    return method.call(*this);
}

// public final java.lang.String java.security.Provider$Service.getClassName()
jnipp::LocalRef<JavaLangString> JavaSecurityProvider_Service::getClassName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getClassName", "()Ljava/lang/String;");
    return method.call(*this);
}

// void java.security.Provider$Service.addAttribute(java.lang.String,java.lang.String)
void JavaSecurityProvider_Service::addAttribute(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaLangString> method(clazz(), "addAttribute", "(Ljava/lang/String;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// public final java.security.Provider java.security.Provider$Service.getProvider()
jnipp::LocalRef<JavaSecurityProvider> JavaSecurityProvider_Service::getProvider() const {
    static jnipp::Method<JavaSecurityProvider> method(clazz(), "getProvider", "()Ljava/security/Provider;");
    return method.call(*this);
}

// public final java.lang.String java.security.Provider$Service.getAlgorithm()
jnipp::LocalRef<JavaLangString> JavaSecurityProvider_Service::getAlgorithm() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getAlgorithm", "()Ljava/lang/String;");
    return method.call(*this);
}

// private boolean java.security.Provider$Service.isValid()
jboolean JavaSecurityProvider_Service::isValid() const {
    static jnipp::Method<jboolean> method(clazz(), "isValid", "()Z");
    return method.call(*this);
}

// private boolean java.security.Provider$Service.hasKeyAttributes()
jboolean JavaSecurityProvider_Service::hasKeyAttributes() const {
    static jnipp::Method<jboolean> method(clazz(), "hasKeyAttributes", "()Z");
    return method.call(*this);
}

// private void java.security.Provider$Service.addAlias(java.lang.String)
void JavaSecurityProvider_Service::addAlias(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "addAlias", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// private final java.util.List java.security.Provider$Service.getAliases()
jnipp::LocalRef<JavaUtilList> JavaSecurityProvider_Service::getAliases() const {
    static jnipp::Method<JavaUtilList> method(clazz(), "getAliases", "()Ljava/util/List;");
    return method.call(*this);
}

// private java.lang.Class java.security.Provider$Service.getImplClass() throws java.security.NoSuchAlgorithmException
jnipp::LocalRef<JavaLangClass> JavaSecurityProvider_Service::getImplClass() const {
    static jnipp::Method<JavaLangClass> method(clazz(), "getImplClass", "()Ljava/lang/Class;");
    return method.call(*this);
}

// private java.lang.Object java.security.Provider$Service.newInstanceGeneric(java.lang.Object) throws java.lang.Exception
jnipp::LocalRef<JavaLangObject> JavaSecurityProvider_Service::newInstanceGeneric(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<JavaLangObject,JavaLangObject> method(clazz(), "newInstanceGeneric", "(Ljava/lang/Object;)Ljava/lang/Object;");
    return method.call(*this, a0);
}

// public boolean java.security.Provider$Service.supportsParameter(java.lang.Object)
jboolean JavaSecurityProvider_Service::supportsParameter(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "supportsParameter", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// private java.lang.Class java.security.Provider$Service.getKeyClass(java.lang.String)
jnipp::LocalRef<JavaLangClass> JavaSecurityProvider_Service::getKeyClass(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangClass,JavaLangString> method(clazz(), "getKeyClass", "(Ljava/lang/String;)Ljava/lang/Class;");
    return method.call(*this, a0);
}

// private boolean java.security.Provider$Service.supportsKeyFormat(java.security.Key)
jboolean JavaSecurityProvider_Service::supportsKeyFormat(const jnipp::Ref<JavaSecurityKey>& a0) const {
    static jnipp::Method<jboolean,JavaSecurityKey> method(clazz(), "supportsKeyFormat", "(Ljava/security/Key;)Z");
    return method.call(*this, a0);
}

// private boolean java.security.Provider$Service.supportsKeyClass(java.security.Key)
jboolean JavaSecurityProvider_Service::supportsKeyClass(const jnipp::Ref<JavaSecurityKey>& a0) const {
    static jnipp::Method<jboolean,JavaSecurityKey> method(clazz(), "supportsKeyClass", "(Ljava/security/Key;)Z");
    return method.call(*this, a0);
}

// public final java.lang.String java.security.Provider$Service.getAttribute(java.lang.String)
jnipp::LocalRef<JavaLangString> JavaSecurityProvider_Service::getAttribute(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaLangString,JavaLangString> method(clazz(), "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
    return method.call(*this, a0);
}
#undef CLASS0
const jnipp::StaticField<jnipp::Array<JavaLangClass>> JavaSecurityProvider_Service::CLASS0 ("java/security/Provider$Service", "CLASS0", "[Ljava/lang/Class;");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilDate::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Date"));
    return cls;
}

// public java.util.Date(java.lang.String)
jnipp::LocalRef<JavaUtilDate> JavaUtilDate::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaUtilDate,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.util.Date(int,int,int,int,int,int)
jnipp::LocalRef<JavaUtilDate> JavaUtilDate::construct(jint a0, jint a1, jint a2, jint a3, jint a4, jint a5) {
    static jnipp::Constructor<JavaUtilDate,jint,jint,jint,jint,jint,jint> constructor(clazz(), "(IIIIII)V");
    return constructor.construct(a0, a1, a2, a3, a4, a5);
}

// public java.util.Date(int,int,int,int,int)
jnipp::LocalRef<JavaUtilDate> JavaUtilDate::construct(jint a0, jint a1, jint a2, jint a3, jint a4) {
    static jnipp::Constructor<JavaUtilDate,jint,jint,jint,jint,jint> constructor(clazz(), "(IIIII)V");
    return constructor.construct(a0, a1, a2, a3, a4);
}

// public java.util.Date()
jnipp::LocalRef<JavaUtilDate> JavaUtilDate::construct() {
    static jnipp::Constructor<JavaUtilDate> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.Date(long)
jnipp::LocalRef<JavaUtilDate> JavaUtilDate::construct(jlong a0) {
    static jnipp::Constructor<JavaUtilDate,jlong> constructor(clazz(), "(J)V");
    return constructor.construct(a0);
}

// public java.util.Date(int,int,int)
jnipp::LocalRef<JavaUtilDate> JavaUtilDate::construct(jint a0, jint a1, jint a2) {
    static jnipp::Constructor<JavaUtilDate,jint,jint,jint> constructor(clazz(), "(III)V");
    return constructor.construct(a0, a1, a2);
}

// public boolean java.util.Date.equals(java.lang.Object)
jboolean JavaUtilDate::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.util.Date.hashCode()
jint JavaUtilDate::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object java.util.Date.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilDate::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public int java.util.Date.compareTo(java.util.Date)
jint JavaUtilDate::compareTo(const jnipp::Ref<JavaUtilDate>& a0) const {
    static jnipp::Method<jint,JavaUtilDate> method(clazz(), "compareTo", "(Ljava/util/Date;)I");
    return method.call(*this, a0);
}

// private void java.util.Date.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException
void JavaUtilDate::readObject(const jnipp::Ref<JavaIoObjectInputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectInputStream> method(clazz(), "readObject", "(Ljava/io/ObjectInputStream;)V");
    method.call(*this, a0);
}

// private void java.util.Date.writeObject(java.io.ObjectOutputStream) throws java.io.IOException
void JavaUtilDate::writeObject(const jnipp::Ref<JavaIoObjectOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoObjectOutputStream> method(clazz(), "writeObject", "(Ljava/io/ObjectOutputStream;)V");
    method.call(*this, a0);
}

// private final sun.util.calendar.BaseCalendar$Date java.util.Date.normalize()
jnipp::LocalRef<SunUtilCalendarBaseCalendar_Date> JavaUtilDate::normalize() const {
    static jnipp::Method<SunUtilCalendarBaseCalendar_Date> method(clazz(), "normalize", "()Lsun/util/calendar/BaseCalendar$Date;");
    return method.call(*this);
}

// private final sun.util.calendar.BaseCalendar$Date java.util.Date.normalize(sun.util.calendar.BaseCalendar$Date)
jnipp::LocalRef<SunUtilCalendarBaseCalendar_Date> JavaUtilDate::normalize(const jnipp::Ref<SunUtilCalendarBaseCalendar_Date>& a0) const {
    static jnipp::Method<SunUtilCalendarBaseCalendar_Date,SunUtilCalendarBaseCalendar_Date> method(clazz(), "normalize", "(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date;");
    return method.call(*this, a0);
}

// public static long java.util.Date.parse(java.lang.String)
jlong JavaUtilDate::parse(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jlong,JavaLangString> method(clazz(), "parse", "(Ljava/lang/String;)J");
    return method.call(a0);
}

// public boolean java.util.Date.after(java.util.Date)
jboolean JavaUtilDate::after(const jnipp::Ref<JavaUtilDate>& a0) const {
    static jnipp::Method<jboolean,JavaUtilDate> method(clazz(), "after", "(Ljava/util/Date;)Z");
    return method.call(*this, a0);
}

// public boolean java.util.Date.before(java.util.Date)
jboolean JavaUtilDate::before(const jnipp::Ref<JavaUtilDate>& a0) const {
    static jnipp::Method<jboolean,JavaUtilDate> method(clazz(), "before", "(Ljava/util/Date;)Z");
    return method.call(*this, a0);
}

// public void java.util.Date.setTime(long)
void JavaUtilDate::setTime(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "setTime", "(J)V");
    method.call(*this, a0);
}

// public long java.util.Date.getTime()
jlong JavaUtilDate::getTime() const {
    static jnipp::Method<jlong> method(clazz(), "getTime", "()J");
    return method.call(*this);
}

// public int java.util.Date.getYear()
jint JavaUtilDate::getYear() const {
    static jnipp::Method<jint> method(clazz(), "getYear", "()I");
    return method.call(*this);
}

// public int java.util.Date.getMonth()
jint JavaUtilDate::getMonth() const {
    static jnipp::Method<jint> method(clazz(), "getMonth", "()I");
    return method.call(*this);
}

// public int java.util.Date.getDate()
jint JavaUtilDate::getDate() const {
    static jnipp::Method<jint> method(clazz(), "getDate", "()I");
    return method.call(*this);
}

// public int java.util.Date.getHours()
jint JavaUtilDate::getHours() const {
    static jnipp::Method<jint> method(clazz(), "getHours", "()I");
    return method.call(*this);
}

// public int java.util.Date.getMinutes()
jint JavaUtilDate::getMinutes() const {
    static jnipp::Method<jint> method(clazz(), "getMinutes", "()I");
    return method.call(*this);
}

// public int java.util.Date.getSeconds()
jint JavaUtilDate::getSeconds() const {
    static jnipp::Method<jint> method(clazz(), "getSeconds", "()I");
    return method.call(*this);
}

// public static long java.util.Date.UTC(int,int,int,int,int,int)
jlong JavaUtilDate::UTC(jint a0, jint a1, jint a2, jint a3, jint a4, jint a5) {
    static jnipp::StaticMethod<jlong,jint,jint,jint,jint,jint,jint> method(clazz(), "UTC", "(IIIIII)J");
    return method.call(a0, a1, a2, a3, a4, a5);
}

// public void java.util.Date.setYear(int)
void JavaUtilDate::setYear(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setYear", "(I)V");
    method.call(*this, a0);
}

// public void java.util.Date.setMonth(int)
void JavaUtilDate::setMonth(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setMonth", "(I)V");
    method.call(*this, a0);
}

// public void java.util.Date.setDate(int)
void JavaUtilDate::setDate(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setDate", "(I)V");
    method.call(*this, a0);
}

// public int java.util.Date.getDay()
jint JavaUtilDate::getDay() const {
    static jnipp::Method<jint> method(clazz(), "getDay", "()I");
    return method.call(*this);
}

// public void java.util.Date.setHours(int)
void JavaUtilDate::setHours(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setHours", "(I)V");
    method.call(*this, a0);
}

// public void java.util.Date.setMinutes(int)
void JavaUtilDate::setMinutes(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setMinutes", "(I)V");
    method.call(*this, a0);
}

// public void java.util.Date.setSeconds(int)
void JavaUtilDate::setSeconds(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setSeconds", "(I)V");
    method.call(*this, a0);
}

// private final long java.util.Date.getTimeImpl()
jlong JavaUtilDate::getTimeImpl() const {
    static jnipp::Method<jlong> method(clazz(), "getTimeImpl", "()J");
    return method.call(*this);
}

// static final long java.util.Date.getMillisOf(java.util.Date)
jlong JavaUtilDate::getMillisOf(const jnipp::Ref<JavaUtilDate>& a0) {
    static jnipp::StaticMethod<jlong,JavaUtilDate> method(clazz(), "getMillisOf", "(Ljava/util/Date;)J");
    return method.call(a0);
}

// private static final java.lang.StringBuilder java.util.Date.convertToAbbr(java.lang.StringBuilder,java.lang.String)
jnipp::LocalRef<JavaLangStringBuilder> JavaUtilDate::convertToAbbr(const jnipp::Ref<JavaLangStringBuilder>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaLangStringBuilder,JavaLangStringBuilder,JavaLangString> method(clazz(), "convertToAbbr", "(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder;");
    return method.call(a0, a1);
}

// public java.lang.String java.util.Date.toLocaleString()
jnipp::LocalRef<JavaLangString> JavaUtilDate::toLocaleString() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toLocaleString", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String java.util.Date.toGMTString()
jnipp::LocalRef<JavaLangString> JavaUtilDate::toGMTString() const {
    static jnipp::Method<JavaLangString> method(clazz(), "toGMTString", "()Ljava/lang/String;");
    return method.call(*this);
}

// public int java.util.Date.getTimezoneOffset()
jint JavaUtilDate::getTimezoneOffset() const {
    static jnipp::Method<jint> method(clazz(), "getTimezoneOffset", "()I");
    return method.call(*this);
}

// private final sun.util.calendar.BaseCalendar$Date java.util.Date.getCalendarDate()
jnipp::LocalRef<SunUtilCalendarBaseCalendar_Date> JavaUtilDate::getCalendarDate() const {
    static jnipp::Method<SunUtilCalendarBaseCalendar_Date> method(clazz(), "getCalendarDate", "()Lsun/util/calendar/BaseCalendar$Date;");
    return method.call(*this);
}

// private static final sun.util.calendar.BaseCalendar java.util.Date.getCalendarSystem(int)
jnipp::LocalRef<SunUtilCalendarBaseCalendar> JavaUtilDate::getCalendarSystem(jint a0) {
    static jnipp::StaticMethod<SunUtilCalendarBaseCalendar,jint> method(clazz(), "getCalendarSystem", "(I)Lsun/util/calendar/BaseCalendar;");
    return method.call(a0);
}

// private static final sun.util.calendar.BaseCalendar java.util.Date.getCalendarSystem(long)
jnipp::LocalRef<SunUtilCalendarBaseCalendar> JavaUtilDate::getCalendarSystem(jlong a0) {
    static jnipp::StaticMethod<SunUtilCalendarBaseCalendar,jlong> method(clazz(), "getCalendarSystem", "(J)Lsun/util/calendar/BaseCalendar;");
    return method.call(a0);
}

// private static final sun.util.calendar.BaseCalendar java.util.Date.getCalendarSystem(sun.util.calendar.BaseCalendar$Date)
jnipp::LocalRef<SunUtilCalendarBaseCalendar> JavaUtilDate::getCalendarSystem(const jnipp::Ref<SunUtilCalendarBaseCalendar_Date>& a0) {
    static jnipp::StaticMethod<SunUtilCalendarBaseCalendar,SunUtilCalendarBaseCalendar_Date> method(clazz(), "getCalendarSystem", "(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar;");
    return method.call(a0);
}

// private static final synchronized sun.util.calendar.BaseCalendar java.util.Date.getJulianCalendar()
jnipp::LocalRef<SunUtilCalendarBaseCalendar> JavaUtilDate::getJulianCalendar() {
    static jnipp::StaticMethod<SunUtilCalendarBaseCalendar> method(clazz(), "getJulianCalendar", "()Lsun/util/calendar/BaseCalendar;");
    return method.call();
}
#undef gcal
const jnipp::StaticField<SunUtilCalendarBaseCalendar> JavaUtilDate::gcal ("java/util/Date", "gcal", "Lsun/util/calendar/BaseCalendar;");
#undef jcal
jnipp::StaticField<SunUtilCalendarBaseCalendar> JavaUtilDate::jcal ("java/util/Date", "jcal", "Lsun/util/calendar/BaseCalendar;");
#undef defaultCenturyStart
jnipp::StaticField<jint> JavaUtilDate::defaultCenturyStart ("java/util/Date", "defaultCenturyStart", "I");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilDate::serialVersionUID ("java/util/Date", "serialVersionUID", "J");
#undef wtb
const jnipp::StaticField<jnipp::Array<JavaLangString>> JavaUtilDate::wtb ("java/util/Date", "wtb", "[Ljava/lang/String;");
#undef ttb
const jnipp::StaticField<jnipp::Array<jint>> JavaUtilDate::ttb ("java/util/Date", "ttb", "[I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/locks/AbstractQueuedSynchronizer$Node"));
    return cls;
}

// java.util.concurrent.locks.AbstractQueuedSynchronizer$Node()
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::construct() {
    static jnipp::Constructor<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.util.concurrent.locks.AbstractQueuedSynchronizer$Node(java.lang.Thread,int)
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::construct(const jnipp::Ref<JavaLangThread>& a0, jint a1) {
    static jnipp::Constructor<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,JavaLangThread,jint> constructor(clazz(), "(Ljava/lang/Thread;I)V");
    return constructor.construct(a0, a1);
}

// java.util.concurrent.locks.AbstractQueuedSynchronizer$Node(java.lang.Thread,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::construct(const jnipp::Ref<JavaLangThread>& a0, const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a1) {
    static jnipp::Constructor<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node,JavaLangThread,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> constructor(clazz(), "(Ljava/lang/Thread;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V");
    return constructor.construct(a0, a1);
}

// final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.isShared()
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::isShared() const {
    static jnipp::Method<jboolean> method(clazz(), "isShared", "()Z");
    return method.call(*this);
}

// final java.util.concurrent.locks.AbstractQueuedSynchronizer$Node java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.predecessor() throws java.lang.NullPointerException
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::predecessor() const {
    static jnipp::Method<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "predecessor", "()Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;");
    return method.call(*this);
}
#undef SHARED
const jnipp::StaticField<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::SHARED ("java/util/concurrent/locks/AbstractQueuedSynchronizer$Node", "SHARED", "Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;");
#undef EXCLUSIVE
const jnipp::StaticField<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::EXCLUSIVE ("java/util/concurrent/locks/AbstractQueuedSynchronizer$Node", "EXCLUSIVE", "Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;");
#undef CANCELLED
const jnipp::StaticField<jint> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::CANCELLED ("java/util/concurrent/locks/AbstractQueuedSynchronizer$Node", "CANCELLED", "I");
#undef SIGNAL
const jnipp::StaticField<jint> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::SIGNAL ("java/util/concurrent/locks/AbstractQueuedSynchronizer$Node", "SIGNAL", "I");
#undef CONDITION
const jnipp::StaticField<jint> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::CONDITION ("java/util/concurrent/locks/AbstractQueuedSynchronizer$Node", "CONDITION", "I");
#undef PROPAGATE
const jnipp::StaticField<jint> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node::PROPAGATE ("java/util/concurrent/locks/AbstractQueuedSynchronizer$Node", "PROPAGATE", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject"));
    return cls;
}

// public java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject(java.util.concurrent.locks.AbstractQueuedSynchronizer)
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::construct(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer>& a0) {
    static jnipp::Constructor<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject,JavaUtilConcurrentLocksAbstractQueuedSynchronizer> constructor(clazz(), "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;)V");
    return constructor.construct(a0);
}

// protected final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.hasWaiters()
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::hasWaiters() const {
    static jnipp::Method<jboolean> method(clazz(), "hasWaiters", "()Z");
    return method.call(*this);
}

// protected final int java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.getWaitQueueLength()
jint JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::getWaitQueueLength() const {
    static jnipp::Method<jint> method(clazz(), "getWaitQueueLength", "()I");
    return method.call(*this);
}

// protected final java.util.Collection java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.getWaitingThreads()
jnipp::LocalRef<JavaUtilCollection> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::getWaitingThreads() const {
    static jnipp::Method<JavaUtilCollection> method(clazz(), "getWaitingThreads", "()Ljava/util/Collection;");
    return method.call(*this);
}

// final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.isOwnedBy(java.util.concurrent.locks.AbstractQueuedSynchronizer)
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::isOwnedBy(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer>& a0) const {
    static jnipp::Method<jboolean,JavaUtilConcurrentLocksAbstractQueuedSynchronizer> method(clazz(), "isOwnedBy", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;)Z");
    return method.call(*this, a0);
}

// public final void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() throws java.lang.InterruptedException
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::await() const {
    static jnipp::Method<void> method(clazz(), "await", "()V");
    method.call(*this);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::await(jlong a0, const jnipp::Ref<JavaUtilConcurrentTimeUnit>& a1) const {
    static jnipp::Method<jboolean,jlong,JavaUtilConcurrentTimeUnit> method(clazz(), "await", "(JLjava/util/concurrent/TimeUnit;)Z");
    return method.call(*this, a0, a1);
}

// public final void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitUninterruptibly()
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::awaitUninterruptibly() const {
    static jnipp::Method<void> method(clazz(), "awaitUninterruptibly", "()V");
    method.call(*this);
}

// public final long java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long) throws java.lang.InterruptedException
jlong JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::awaitNanos(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "awaitNanos", "(J)J");
    return method.call(*this, a0);
}

// public final boolean java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitUntil(java.util.Date) throws java.lang.InterruptedException
jboolean JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::awaitUntil(const jnipp::Ref<JavaUtilDate>& a0) const {
    static jnipp::Method<jboolean,JavaUtilDate> method(clazz(), "awaitUntil", "(Ljava/util/Date;)Z");
    return method.call(*this, a0);
}

// public final void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signal()
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::signal() const {
    static jnipp::Method<void> method(clazz(), "signal", "()V");
    method.call(*this);
}

// public final void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signalAll()
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::signalAll() const {
    static jnipp::Method<void> method(clazz(), "signalAll", "()V");
    method.call(*this);
}

// private java.util.concurrent.locks.AbstractQueuedSynchronizer$Node java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter()
jnipp::LocalRef<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::addConditionWaiter() const {
    static jnipp::Method<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "addConditionWaiter", "()Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;");
    return method.call(*this);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::doSignal(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<void,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "doSignal", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V");
    method.call(*this, a0);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::doSignalAll(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<void,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "doSignalAll", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V");
    method.call(*this, a0);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.unlinkCancelledWaiters()
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::unlinkCancelledWaiters() const {
    static jnipp::Method<void> method(clazz(), "unlinkCancelledWaiters", "()V");
    method.call(*this);
}

// private int java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
jint JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::checkInterruptWhileWaiting(const jnipp::Ref<JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node>& a0) const {
    static jnipp::Method<jint,JavaUtilConcurrentLocksAbstractQueuedSynchronizer_Node> method(clazz(), "checkInterruptWhileWaiting", "(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)I");
    return method.call(*this, a0);
}

// private void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(int) throws java.lang.InterruptedException
void JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::reportInterruptAfterWait(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "reportInterruptAfterWait", "(I)V");
    method.call(*this, a0);
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::serialVersionUID ("java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject", "serialVersionUID", "J");
#undef REINTERRUPT
const jnipp::StaticField<jint> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::REINTERRUPT ("java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject", "REINTERRUPT", "I");
#undef THROW_IE
const jnipp::StaticField<jint> JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject::THROW_IE ("java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject", "THROW_IE", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentTimeUnit_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/TimeUnit$1"));
    return cls;
}

// java.util.concurrent.TimeUnit$1(java.lang.String,int)
jnipp::LocalRef<JavaUtilConcurrentTimeUnit_1> JavaUtilConcurrentTimeUnit_1::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaUtilConcurrentTimeUnit_1,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// public long java.util.concurrent.TimeUnit$1.toNanos(long)
jlong JavaUtilConcurrentTimeUnit_1::toNanos(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toNanos", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit$1.convert(long,java.util.concurrent.TimeUnit)
jlong JavaUtilConcurrentTimeUnit_1::convert(jlong a0, const jnipp::Ref<JavaUtilConcurrentTimeUnit>& a1) const {
    static jnipp::Method<jlong,jlong,JavaUtilConcurrentTimeUnit> method(clazz(), "convert", "(JLjava/util/concurrent/TimeUnit;)J");
    return method.call(*this, a0, a1);
}

// public long java.util.concurrent.TimeUnit$1.toMicros(long)
jlong JavaUtilConcurrentTimeUnit_1::toMicros(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toMicros", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit$1.toMillis(long)
jlong JavaUtilConcurrentTimeUnit_1::toMillis(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toMillis", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit$1.toSeconds(long)
jlong JavaUtilConcurrentTimeUnit_1::toSeconds(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toSeconds", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit$1.toMinutes(long)
jlong JavaUtilConcurrentTimeUnit_1::toMinutes(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toMinutes", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit$1.toHours(long)
jlong JavaUtilConcurrentTimeUnit_1::toHours(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toHours", "(J)J");
    return method.call(*this, a0);
}

// public long java.util.concurrent.TimeUnit$1.toDays(long)
jlong JavaUtilConcurrentTimeUnit_1::toDays(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "toDays", "(J)J");
    return method.call(*this, a0);
}

// int java.util.concurrent.TimeUnit$1.excessNanos(long,long)
jint JavaUtilConcurrentTimeUnit_1::excessNanos(jlong a0, jlong a1) const {
    static jnipp::Method<jint,jlong,jlong> method(clazz(), "excessNanos", "(JJ)I");
    return method.call(*this, a0, a1);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilLinkedHashMap_Entry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/LinkedHashMap$Entry"));
    return cls;
}

// java.util.LinkedHashMap$Entry(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)
jnipp::LocalRef<JavaUtilLinkedHashMap_Entry> JavaUtilLinkedHashMap_Entry::construct(jint a0, const jnipp::Ref<JavaLangObject>& a1, const jnipp::Ref<JavaLangObject>& a2, const jnipp::Ref<JavaUtilHashMap_Entry>& a3) {
    static jnipp::Constructor<JavaUtilLinkedHashMap_Entry,jint,JavaLangObject,JavaLangObject,JavaUtilHashMap_Entry> constructor(clazz(), "(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Entry;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// private void java.util.LinkedHashMap$Entry.remove()
void JavaUtilLinkedHashMap_Entry::remove() const {
    static jnipp::Method<void> method(clazz(), "remove", "()V");
    method.call(*this);
}

// void java.util.LinkedHashMap$Entry.recordAccess(java.util.HashMap)
void JavaUtilLinkedHashMap_Entry::recordAccess(const jnipp::Ref<JavaUtilHashMap>& a0) const {
    static jnipp::Method<void,JavaUtilHashMap> method(clazz(), "recordAccess", "(Ljava/util/HashMap;)V");
    method.call(*this, a0);
}

// void java.util.LinkedHashMap$Entry.recordRemoval(java.util.HashMap)
void JavaUtilLinkedHashMap_Entry::recordRemoval(const jnipp::Ref<JavaUtilHashMap>& a0) const {
    static jnipp::Method<void,JavaUtilHashMap> method(clazz(), "recordRemoval", "(Ljava/util/HashMap;)V");
    method.call(*this, a0);
}

// private void java.util.LinkedHashMap$Entry.addBefore(java.util.LinkedHashMap$Entry)
void JavaUtilLinkedHashMap_Entry::addBefore(const jnipp::Ref<JavaUtilLinkedHashMap_Entry>& a0) const {
    static jnipp::Method<void,JavaUtilLinkedHashMap_Entry> method(clazz(), "addBefore", "(Ljava/util/LinkedHashMap$Entry;)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilMap_Entry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/Map$Entry"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNetInet4Address::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/net/Inet4Address"));
    return cls;
}

// java.net.Inet4Address(java.lang.String,int)
jnipp::LocalRef<JavaNetInet4Address> JavaNetInet4Address::construct(const jnipp::Ref<JavaLangString>& a0, jint a1) {
    static jnipp::Constructor<JavaNetInet4Address,JavaLangString,jint> constructor(clazz(), "(Ljava/lang/String;I)V");
    return constructor.construct(a0, a1);
}

// java.net.Inet4Address(java.lang.String,byte[])
jnipp::LocalRef<JavaNetInet4Address> JavaNetInet4Address::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) {
    static jnipp::Constructor<JavaNetInet4Address,JavaLangString,jnipp::Array<jbyte>> constructor(clazz(), "(Ljava/lang/String;[B)V");
    return constructor.construct(a0, a1);
}

// java.net.Inet4Address()
jnipp::LocalRef<JavaNetInet4Address> JavaNetInet4Address::construct() {
    static jnipp::Constructor<JavaNetInet4Address> constructor(clazz(), "()V");
    return constructor.construct();
}

// public boolean java.net.Inet4Address.equals(java.lang.Object)
jboolean JavaNetInet4Address::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.net.Inet4Address.hashCode()
jint JavaNetInet4Address::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public byte[] java.net.Inet4Address.getAddress()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaNetInet4Address::getAddress() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "getAddress", "()[B");
    return method.call(*this);
}

// private static native void java.net.Inet4Address.init()
void JavaNetInet4Address::init() {
    static jnipp::StaticMethod<void> method(clazz(), "init", "()V");
    method.call();
}

// private java.lang.Object java.net.Inet4Address.writeReplace() throws java.io.ObjectStreamException
jnipp::LocalRef<JavaLangObject> JavaNetInet4Address::writeReplace() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "writeReplace", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public java.lang.String java.net.Inet4Address.getHostAddress()
jnipp::LocalRef<JavaLangString> JavaNetInet4Address::getHostAddress() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getHostAddress", "()Ljava/lang/String;");
    return method.call(*this);
}

// static java.lang.String java.net.Inet4Address.numericToTextFormat(byte[])
jnipp::LocalRef<JavaLangString> JavaNetInet4Address::numericToTextFormat(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<jbyte>> method(clazz(), "numericToTextFormat", "([B)Ljava/lang/String;");
    return method.call(a0);
}

// public boolean java.net.Inet4Address.isMulticastAddress()
jboolean JavaNetInet4Address::isMulticastAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isMulticastAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isAnyLocalAddress()
jboolean JavaNetInet4Address::isAnyLocalAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isAnyLocalAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isLoopbackAddress()
jboolean JavaNetInet4Address::isLoopbackAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isLoopbackAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isLinkLocalAddress()
jboolean JavaNetInet4Address::isLinkLocalAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isLinkLocalAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isSiteLocalAddress()
jboolean JavaNetInet4Address::isSiteLocalAddress() const {
    static jnipp::Method<jboolean> method(clazz(), "isSiteLocalAddress", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isMCGlobal()
jboolean JavaNetInet4Address::isMCGlobal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCGlobal", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isMCNodeLocal()
jboolean JavaNetInet4Address::isMCNodeLocal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCNodeLocal", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isMCLinkLocal()
jboolean JavaNetInet4Address::isMCLinkLocal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCLinkLocal", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isMCSiteLocal()
jboolean JavaNetInet4Address::isMCSiteLocal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCSiteLocal", "()Z");
    return method.call(*this);
}

// public boolean java.net.Inet4Address.isMCOrgLocal()
jboolean JavaNetInet4Address::isMCOrgLocal() const {
    static jnipp::Method<jboolean> method(clazz(), "isMCOrgLocal", "()Z");
    return method.call(*this);
}
#undef INADDRSZ
const jnipp::StaticField<jint> JavaNetInet4Address::INADDRSZ ("java/net/Inet4Address", "INADDRSZ", "I");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaNetInet4Address::serialVersionUID ("java/net/Inet4Address", "serialVersionUID", "J");
#undef loopback
const jnipp::StaticField<jint> JavaNetInet4Address::loopback ("java/net/Inet4Address", "loopback", "I");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilConcurrentAtomicAtomicLong::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/concurrent/atomic/AtomicLong"));
    return cls;
}

// public java.util.concurrent.atomic.AtomicLong()
jnipp::LocalRef<JavaUtilConcurrentAtomicAtomicLong> JavaUtilConcurrentAtomicAtomicLong::construct() {
    static jnipp::Constructor<JavaUtilConcurrentAtomicAtomicLong> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.util.concurrent.atomic.AtomicLong(long)
jnipp::LocalRef<JavaUtilConcurrentAtomicAtomicLong> JavaUtilConcurrentAtomicAtomicLong::construct(jlong a0) {
    static jnipp::Constructor<JavaUtilConcurrentAtomicAtomicLong,jlong> constructor(clazz(), "(J)V");
    return constructor.construct(a0);
}

// public final long java.util.concurrent.atomic.AtomicLong.get()
jlong JavaUtilConcurrentAtomicAtomicLong::get() const {
    static jnipp::Method<jlong> method(clazz(), "get", "()J");
    return method.call(*this);
}

// public final long java.util.concurrent.atomic.AtomicLong.getAndSet(long)
jlong JavaUtilConcurrentAtomicAtomicLong::getAndSet(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "getAndSet", "(J)J");
    return method.call(*this, a0);
}

// public int java.util.concurrent.atomic.AtomicLong.intValue()
jint JavaUtilConcurrentAtomicAtomicLong::intValue() const {
    static jnipp::Method<jint> method(clazz(), "intValue", "()I");
    return method.call(*this);
}

// public long java.util.concurrent.atomic.AtomicLong.longValue()
jlong JavaUtilConcurrentAtomicAtomicLong::longValue() const {
    static jnipp::Method<jlong> method(clazz(), "longValue", "()J");
    return method.call(*this);
}

// public float java.util.concurrent.atomic.AtomicLong.floatValue()
jfloat JavaUtilConcurrentAtomicAtomicLong::floatValue() const {
    static jnipp::Method<jfloat> method(clazz(), "floatValue", "()F");
    return method.call(*this);
}

// public double java.util.concurrent.atomic.AtomicLong.doubleValue()
jdouble JavaUtilConcurrentAtomicAtomicLong::doubleValue() const {
    static jnipp::Method<jdouble> method(clazz(), "doubleValue", "()D");
    return method.call(*this);
}

// public final void java.util.concurrent.atomic.AtomicLong.set(long)
void JavaUtilConcurrentAtomicAtomicLong::set(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "set", "(J)V");
    method.call(*this, a0);
}

// public final void java.util.concurrent.atomic.AtomicLong.lazySet(long)
void JavaUtilConcurrentAtomicAtomicLong::lazySet(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "lazySet", "(J)V");
    method.call(*this, a0);
}

// public final long java.util.concurrent.atomic.AtomicLong.getAndAdd(long)
jlong JavaUtilConcurrentAtomicAtomicLong::getAndAdd(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "getAndAdd", "(J)J");
    return method.call(*this, a0);
}

// public final boolean java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long)
jboolean JavaUtilConcurrentAtomicAtomicLong::compareAndSet(jlong a0, jlong a1) const {
    static jnipp::Method<jboolean,jlong,jlong> method(clazz(), "compareAndSet", "(JJ)Z");
    return method.call(*this, a0, a1);
}

// public final boolean java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long,long)
jboolean JavaUtilConcurrentAtomicAtomicLong::weakCompareAndSet(jlong a0, jlong a1) const {
    static jnipp::Method<jboolean,jlong,jlong> method(clazz(), "weakCompareAndSet", "(JJ)Z");
    return method.call(*this, a0, a1);
}

// public final long java.util.concurrent.atomic.AtomicLong.getAndIncrement()
jlong JavaUtilConcurrentAtomicAtomicLong::getAndIncrement() const {
    static jnipp::Method<jlong> method(clazz(), "getAndIncrement", "()J");
    return method.call(*this);
}

// public final long java.util.concurrent.atomic.AtomicLong.getAndDecrement()
jlong JavaUtilConcurrentAtomicAtomicLong::getAndDecrement() const {
    static jnipp::Method<jlong> method(clazz(), "getAndDecrement", "()J");
    return method.call(*this);
}

// public final long java.util.concurrent.atomic.AtomicLong.incrementAndGet()
jlong JavaUtilConcurrentAtomicAtomicLong::incrementAndGet() const {
    static jnipp::Method<jlong> method(clazz(), "incrementAndGet", "()J");
    return method.call(*this);
}

// public final long java.util.concurrent.atomic.AtomicLong.decrementAndGet()
jlong JavaUtilConcurrentAtomicAtomicLong::decrementAndGet() const {
    static jnipp::Method<jlong> method(clazz(), "decrementAndGet", "()J");
    return method.call(*this);
}

// public final long java.util.concurrent.atomic.AtomicLong.addAndGet(long)
jlong JavaUtilConcurrentAtomicAtomicLong::addAndGet(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "addAndGet", "(J)J");
    return method.call(*this, a0);
}

// private static native boolean java.util.concurrent.atomic.AtomicLong.VMSupportsCS8()
jboolean JavaUtilConcurrentAtomicAtomicLong::VMSupportsCS8() {
    static jnipp::StaticMethod<jboolean> method(clazz(), "VMSupportsCS8", "()Z");
    return method.call();
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilConcurrentAtomicAtomicLong::serialVersionUID ("java/util/concurrent/atomic/AtomicLong", "serialVersionUID", "J");
#undef unsafe
const jnipp::StaticField<SunMiscUnsafe> JavaUtilConcurrentAtomicAtomicLong::unsafe ("java/util/concurrent/atomic/AtomicLong", "unsafe", "Lsun/misc/Unsafe;");
#undef valueOffset
const jnipp::StaticField<jlong> JavaUtilConcurrentAtomicAtomicLong::valueOffset ("java/util/concurrent/atomic/AtomicLong", "valueOffset", "J");
#undef VM_SUPPORTS_LONG_CAS
const jnipp::StaticField<jboolean> JavaUtilConcurrentAtomicAtomicLong::VM_SUPPORTS_LONG_CAS ("java/util/concurrent/atomic/AtomicLong", "VM_SUPPORTS_LONG_CAS", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPattern_TreeInfo::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Pattern$TreeInfo"));
    return cls;
}

// java.util.regex.Pattern$TreeInfo()
jnipp::LocalRef<JavaUtilRegexPattern_TreeInfo> JavaUtilRegexPattern_TreeInfo::construct() {
    static jnipp::Constructor<JavaUtilRegexPattern_TreeInfo> constructor(clazz(), "()V");
    return constructor.construct();
}

// void java.util.regex.Pattern$TreeInfo.reset()
void JavaUtilRegexPattern_TreeInfo::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexPattern_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/Pattern$1"));
    return cls;
}

// java.util.regex.Pattern$1(int,int)
jnipp::LocalRef<JavaUtilRegexPattern_1> JavaUtilRegexPattern_1::construct(jint a0, jint a1) {
    static jnipp::Constructor<JavaUtilRegexPattern_1,jint,jint> constructor(clazz(), "(II)V");
    return constructor.construct(a0, a1);
}

// boolean java.util.regex.Pattern$1.isSatisfiedBy(int)
jboolean JavaUtilRegexPattern_1::isSatisfiedBy(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "isSatisfiedBy", "(I)Z");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilRegexMatchResult::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/regex/MatchResult"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharsetCoderResult_Cache::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/charset/CoderResult$Cache"));
    return cls;
}

// private java.nio.charset.CoderResult$Cache()
jnipp::LocalRef<JavaNioCharsetCoderResult_Cache> JavaNioCharsetCoderResult_Cache::construct() {
    static jnipp::Constructor<JavaNioCharsetCoderResult_Cache> constructor(clazz(), "()V");
    return constructor.construct();
}

// java.nio.charset.CoderResult$Cache(java.nio.charset.CoderResult$1)
jnipp::LocalRef<JavaNioCharsetCoderResult_Cache> JavaNioCharsetCoderResult_Cache::construct(const jnipp::Ref<JavaNioCharsetCoderResult_1>& a0) {
    static jnipp::Constructor<JavaNioCharsetCoderResult_Cache,JavaNioCharsetCoderResult_1> constructor(clazz(), "(Ljava/nio/charset/CoderResult$1;)V");
    return constructor.construct(a0);
}

// private synchronized java.nio.charset.CoderResult java.nio.charset.CoderResult$Cache.get(int)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCoderResult_Cache::get(jint a0) const {
    static jnipp::Method<JavaNioCharsetCoderResult,jint> method(clazz(), "get", "(I)Ljava/nio/charset/CoderResult;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharsetCoderResult_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/charset/CoderResult$1"));
    return cls;
}

// java.nio.charset.CoderResult$1()
jnipp::LocalRef<JavaNioCharsetCoderResult_1> JavaNioCharsetCoderResult_1::construct() {
    static jnipp::Constructor<JavaNioCharsetCoderResult_1> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.nio.charset.CoderResult java.nio.charset.CoderResult$1.create(int)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCoderResult_1::create(jint a0) const {
    static jnipp::Method<JavaNioCharsetCoderResult,jint> method(clazz(), "create", "(I)Ljava/nio/charset/CoderResult;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilZipZStreamRef::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/zip/ZStreamRef"));
    return cls;
}

// java.util.zip.ZStreamRef(long)
jnipp::LocalRef<JavaUtilZipZStreamRef> JavaUtilZipZStreamRef::construct(jlong a0) {
    static jnipp::Constructor<JavaUtilZipZStreamRef,jlong> constructor(clazz(), "(J)V");
    return constructor.construct(a0);
}

// void java.util.zip.ZStreamRef.clear()
void JavaUtilZipZStreamRef::clear() const {
    static jnipp::Method<void> method(clazz(), "clear", "()V");
    method.call(*this);
}

// long java.util.zip.ZStreamRef.address()
jlong JavaUtilZipZStreamRef::address() const {
    static jnipp::Method<jlong> method(clazz(), "address", "()J");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaNioCharsetCharsetDecoder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/nio/charset/CharsetDecoder"));
    return cls;
}

// private java.nio.charset.CharsetDecoder(java.nio.charset.Charset,float,float,java.lang.String)
jnipp::LocalRef<JavaNioCharsetCharsetDecoder> JavaNioCharsetCharsetDecoder::construct(const jnipp::Ref<JavaNioCharsetCharset>& a0, jfloat a1, jfloat a2, const jnipp::Ref<JavaLangString>& a3) {
    static jnipp::Constructor<JavaNioCharsetCharsetDecoder,JavaNioCharsetCharset,jfloat,jfloat,JavaLangString> constructor(clazz(), "(Ljava/nio/charset/Charset;FFLjava/lang/String;)V");
    return constructor.construct(a0, a1, a2, a3);
}

// protected java.nio.charset.CharsetDecoder(java.nio.charset.Charset,float,float)
jnipp::LocalRef<JavaNioCharsetCharsetDecoder> JavaNioCharsetCharsetDecoder::construct(const jnipp::Ref<JavaNioCharsetCharset>& a0, jfloat a1, jfloat a2) {
    static jnipp::Constructor<JavaNioCharsetCharsetDecoder,JavaNioCharsetCharset,jfloat,jfloat> constructor(clazz(), "(Ljava/nio/charset/Charset;FF)V");
    return constructor.construct(a0, a1, a2);
}

// public final java.nio.charset.Charset java.nio.charset.CharsetDecoder.charset()
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharsetDecoder::charset() const {
    static jnipp::Method<JavaNioCharsetCharset> method(clazz(), "charset", "()Ljava/nio/charset/Charset;");
    return method.call(*this);
}

// public final java.nio.charset.CoderResult java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCharsetDecoder::decode(const jnipp::Ref<JavaNioByteBuffer>& a0, const jnipp::Ref<JavaNioCharBuffer>& a1, jboolean a2) const {
    static jnipp::Method<JavaNioCharsetCoderResult,JavaNioByteBuffer,JavaNioCharBuffer,jboolean> method(clazz(), "decode", "(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;");
    return method.call(*this, a0, a1, a2);
}

// public final java.nio.CharBuffer java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer) throws java.nio.charset.CharacterCodingException
jnipp::LocalRef<JavaNioCharBuffer> JavaNioCharsetCharsetDecoder::decode(const jnipp::Ref<JavaNioByteBuffer>& a0) const {
    static jnipp::Method<JavaNioCharBuffer,JavaNioByteBuffer> method(clazz(), "decode", "(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;");
    return method.call(*this, a0);
}

// public final java.nio.charset.CoderResult java.nio.charset.CharsetDecoder.flush(java.nio.CharBuffer)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCharsetDecoder::flush(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<JavaNioCharsetCoderResult,JavaNioCharBuffer> method(clazz(), "flush", "(Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;");
    return method.call(*this, a0);
}

// public final java.nio.charset.CharsetDecoder java.nio.charset.CharsetDecoder.reset()
jnipp::LocalRef<JavaNioCharsetCharsetDecoder> JavaNioCharsetCharsetDecoder::reset() const {
    static jnipp::Method<JavaNioCharsetCharsetDecoder> method(clazz(), "reset", "()Ljava/nio/charset/CharsetDecoder;");
    return method.call(*this);
}

// public final java.nio.charset.CharsetDecoder java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)
jnipp::LocalRef<JavaNioCharsetCharsetDecoder> JavaNioCharsetCharsetDecoder::onMalformedInput(const jnipp::Ref<JavaNioCharsetCodingErrorAction>& a0) const {
    static jnipp::Method<JavaNioCharsetCharsetDecoder,JavaNioCharsetCodingErrorAction> method(clazz(), "onMalformedInput", "(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;");
    return method.call(*this, a0);
}

// public final java.nio.charset.CharsetDecoder java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)
jnipp::LocalRef<JavaNioCharsetCharsetDecoder> JavaNioCharsetCharsetDecoder::onUnmappableCharacter(const jnipp::Ref<JavaNioCharsetCodingErrorAction>& a0) const {
    static jnipp::Method<JavaNioCharsetCharsetDecoder,JavaNioCharsetCodingErrorAction> method(clazz(), "onUnmappableCharacter", "(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;");
    return method.call(*this, a0);
}

// public final float java.nio.charset.CharsetDecoder.maxCharsPerByte()
jfloat JavaNioCharsetCharsetDecoder::maxCharsPerByte() const {
    static jnipp::Method<jfloat> method(clazz(), "maxCharsPerByte", "()F");
    return method.call(*this);
}

// public java.nio.charset.CodingErrorAction java.nio.charset.CharsetDecoder.malformedInputAction()
jnipp::LocalRef<JavaNioCharsetCodingErrorAction> JavaNioCharsetCharsetDecoder::malformedInputAction() const {
    static jnipp::Method<JavaNioCharsetCodingErrorAction> method(clazz(), "malformedInputAction", "()Ljava/nio/charset/CodingErrorAction;");
    return method.call(*this);
}

// public final java.lang.String java.nio.charset.CharsetDecoder.replacement()
jnipp::LocalRef<JavaLangString> JavaNioCharsetCharsetDecoder::replacement() const {
    static jnipp::Method<JavaLangString> method(clazz(), "replacement", "()Ljava/lang/String;");
    return method.call(*this);
}

// public final float java.nio.charset.CharsetDecoder.averageCharsPerByte()
jfloat JavaNioCharsetCharsetDecoder::averageCharsPerByte() const {
    static jnipp::Method<jfloat> method(clazz(), "averageCharsPerByte", "()F");
    return method.call(*this);
}

// public java.nio.charset.CodingErrorAction java.nio.charset.CharsetDecoder.unmappableCharacterAction()
jnipp::LocalRef<JavaNioCharsetCodingErrorAction> JavaNioCharsetCharsetDecoder::unmappableCharacterAction() const {
    static jnipp::Method<JavaNioCharsetCodingErrorAction> method(clazz(), "unmappableCharacterAction", "()Ljava/nio/charset/CodingErrorAction;");
    return method.call(*this);
}

// public final java.nio.charset.CharsetDecoder java.nio.charset.CharsetDecoder.replaceWith(java.lang.String)
jnipp::LocalRef<JavaNioCharsetCharsetDecoder> JavaNioCharsetCharsetDecoder::replaceWith(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNioCharsetCharsetDecoder,JavaLangString> method(clazz(), "replaceWith", "(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;");
    return method.call(*this, a0);
}

// protected void java.nio.charset.CharsetDecoder.implReplaceWith(java.lang.String)
void JavaNioCharsetCharsetDecoder::implReplaceWith(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "implReplaceWith", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// protected void java.nio.charset.CharsetDecoder.implOnMalformedInput(java.nio.charset.CodingErrorAction)
void JavaNioCharsetCharsetDecoder::implOnMalformedInput(const jnipp::Ref<JavaNioCharsetCodingErrorAction>& a0) const {
    static jnipp::Method<void,JavaNioCharsetCodingErrorAction> method(clazz(), "implOnMalformedInput", "(Ljava/nio/charset/CodingErrorAction;)V");
    method.call(*this, a0);
}

// protected void java.nio.charset.CharsetDecoder.implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)
void JavaNioCharsetCharsetDecoder::implOnUnmappableCharacter(const jnipp::Ref<JavaNioCharsetCodingErrorAction>& a0) const {
    static jnipp::Method<void,JavaNioCharsetCodingErrorAction> method(clazz(), "implOnUnmappableCharacter", "(Ljava/nio/charset/CodingErrorAction;)V");
    method.call(*this, a0);
}

// protected java.nio.charset.CoderResult java.nio.charset.CharsetDecoder.implFlush(java.nio.CharBuffer)
jnipp::LocalRef<JavaNioCharsetCoderResult> JavaNioCharsetCharsetDecoder::implFlush(const jnipp::Ref<JavaNioCharBuffer>& a0) const {
    static jnipp::Method<JavaNioCharsetCoderResult,JavaNioCharBuffer> method(clazz(), "implFlush", "(Ljava/nio/CharBuffer;)Ljava/nio/charset/CoderResult;");
    return method.call(*this, a0);
}

// protected void java.nio.charset.CharsetDecoder.implReset()
void JavaNioCharsetCharsetDecoder::implReset() const {
    static jnipp::Method<void> method(clazz(), "implReset", "()V");
    method.call(*this);
}

// public boolean java.nio.charset.CharsetDecoder.isAutoDetecting()
jboolean JavaNioCharsetCharsetDecoder::isAutoDetecting() const {
    static jnipp::Method<jboolean> method(clazz(), "isAutoDetecting", "()Z");
    return method.call(*this);
}

// public boolean java.nio.charset.CharsetDecoder.isCharsetDetected()
jboolean JavaNioCharsetCharsetDecoder::isCharsetDetected() const {
    static jnipp::Method<jboolean> method(clazz(), "isCharsetDetected", "()Z");
    return method.call(*this);
}

// public java.nio.charset.Charset java.nio.charset.CharsetDecoder.detectedCharset()
jnipp::LocalRef<JavaNioCharsetCharset> JavaNioCharsetCharsetDecoder::detectedCharset() const {
    static jnipp::Method<JavaNioCharsetCharset> method(clazz(), "detectedCharset", "()Ljava/nio/charset/Charset;");
    return method.call(*this);
}

// private void java.nio.charset.CharsetDecoder.throwIllegalStateException(int,int)
void JavaNioCharsetCharsetDecoder::throwIllegalStateException(jint a0, jint a1) const {
    static jnipp::Method<void,jint,jint> method(clazz(), "throwIllegalStateException", "(II)V");
    method.call(*this, a0, a1);
}
#undef ST_RESET
const jnipp::StaticField<jint> JavaNioCharsetCharsetDecoder::ST_RESET ("java/nio/charset/CharsetDecoder", "ST_RESET", "I");
#undef ST_CODING
const jnipp::StaticField<jint> JavaNioCharsetCharsetDecoder::ST_CODING ("java/nio/charset/CharsetDecoder", "ST_CODING", "I");
#undef ST_END
const jnipp::StaticField<jint> JavaNioCharsetCharsetDecoder::ST_END ("java/nio/charset/CharsetDecoder", "ST_END", "I");
#undef ST_FLUSHED
const jnipp::StaticField<jint> JavaNioCharsetCharsetDecoder::ST_FLUSHED ("java/nio/charset/CharsetDecoder", "ST_FLUSHED", "I");
#undef stateNames
jnipp::StaticField<jnipp::Array<JavaLangString>> JavaNioCharsetCharsetDecoder::stateNames ("java/nio/charset/CharsetDecoder", "stateNames", "[Ljava/lang/String;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaNioCharsetCharsetDecoder::$assertionsDisabled ("java/nio/charset/CharsetDecoder", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& JavaIoByteArrayOutputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/ByteArrayOutputStream"));
    return cls;
}

// public java.io.ByteArrayOutputStream()
jnipp::LocalRef<JavaIoByteArrayOutputStream> JavaIoByteArrayOutputStream::construct() {
    static jnipp::Constructor<JavaIoByteArrayOutputStream> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.io.ByteArrayOutputStream(int)
jnipp::LocalRef<JavaIoByteArrayOutputStream> JavaIoByteArrayOutputStream::construct(jint a0) {
    static jnipp::Constructor<JavaIoByteArrayOutputStream,jint> constructor(clazz(), "(I)V");
    return constructor.construct(a0);
}

// public synchronized int java.io.ByteArrayOutputStream.size()
jint JavaIoByteArrayOutputStream::size() const {
    static jnipp::Method<jint> method(clazz(), "size", "()I");
    return method.call(*this);
}

// public synchronized void java.io.ByteArrayOutputStream.write(byte[],int,int)
void JavaIoByteArrayOutputStream::write(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "write", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public synchronized void java.io.ByteArrayOutputStream.write(int)
void JavaIoByteArrayOutputStream::write(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "write", "(I)V");
    method.call(*this, a0);
}

// public void java.io.ByteArrayOutputStream.close() throws java.io.IOException
void JavaIoByteArrayOutputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// private void java.io.ByteArrayOutputStream.ensureCapacity(int)
void JavaIoByteArrayOutputStream::ensureCapacity(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "ensureCapacity", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.io.ByteArrayOutputStream.reset()
void JavaIoByteArrayOutputStream::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// private void java.io.ByteArrayOutputStream.grow(int)
void JavaIoByteArrayOutputStream::grow(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "grow", "(I)V");
    method.call(*this, a0);
}

// public synchronized byte[] java.io.ByteArrayOutputStream.toByteArray()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaIoByteArrayOutputStream::toByteArray() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "toByteArray", "()[B");
    return method.call(*this);
}

// public synchronized void java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream) throws java.io.IOException
void JavaIoByteArrayOutputStream::writeTo(const jnipp::Ref<JavaIoOutputStream>& a0) const {
    static jnipp::Method<void,JavaIoOutputStream> method(clazz(), "writeTo", "(Ljava/io/OutputStream;)V");
    method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunSecurityUtilManifestEntryVerifier::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/security/util/ManifestEntryVerifier"));
    return cls;
}

// public sun.security.util.ManifestEntryVerifier(java.util.jar.Manifest)
jnipp::LocalRef<SunSecurityUtilManifestEntryVerifier> SunSecurityUtilManifestEntryVerifier::construct(const jnipp::Ref<JavaUtilJarManifest>& a0) {
    static jnipp::Constructor<SunSecurityUtilManifestEntryVerifier,JavaUtilJarManifest> constructor(clazz(), "(Ljava/util/jar/Manifest;)V");
    return constructor.construct(a0);
}

// static java.lang.String sun.security.util.ManifestEntryVerifier.toHex(byte[])
jnipp::LocalRef<JavaLangString> SunSecurityUtilManifestEntryVerifier::toHex(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::StaticMethod<JavaLangString,jnipp::Array<jbyte>> method(clazz(), "toHex", "([B)Ljava/lang/String;");
    return method.call(a0);
}

// public java.security.CodeSigner[] sun.security.util.ManifestEntryVerifier.verify(java.util.Hashtable,java.util.Hashtable) throws java.util.jar.JarException
jnipp::LocalRef<jnipp::Array<JavaSecurityCodeSigner>> SunSecurityUtilManifestEntryVerifier::verify(const jnipp::Ref<JavaUtilHashtable>& a0, const jnipp::Ref<JavaUtilHashtable>& a1) const {
    static jnipp::Method<jnipp::Array<JavaSecurityCodeSigner>,JavaUtilHashtable,JavaUtilHashtable> method(clazz(), "verify", "(Ljava/util/Hashtable;Ljava/util/Hashtable;)[Ljava/security/CodeSigner;");
    return method.call(*this, a0, a1);
}

// public java.util.jar.JarEntry sun.security.util.ManifestEntryVerifier.getEntry()
jnipp::LocalRef<JavaUtilJarJarEntry> SunSecurityUtilManifestEntryVerifier::getEntry() const {
    static jnipp::Method<JavaUtilJarJarEntry> method(clazz(), "getEntry", "()Ljava/util/jar/JarEntry;");
    return method.call(*this);
}

// public void sun.security.util.ManifestEntryVerifier.update(byte[],int,int)
void SunSecurityUtilManifestEntryVerifier::update(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "update", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void sun.security.util.ManifestEntryVerifier.update(byte)
void SunSecurityUtilManifestEntryVerifier::update(jbyte a0) const {
    static jnipp::Method<void,jbyte> method(clazz(), "update", "(B)V");
    method.call(*this, a0);
}

// public void sun.security.util.ManifestEntryVerifier.setEntry(java.lang.String,java.util.jar.JarEntry) throws java.io.IOException
void SunSecurityUtilManifestEntryVerifier::setEntry(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilJarJarEntry>& a1) const {
    static jnipp::Method<void,JavaLangString,JavaUtilJarJarEntry> method(clazz(), "setEntry", "(Ljava/lang/String;Ljava/util/jar/JarEntry;)V");
    method.call(*this, a0, a1);
}
#undef debug
const jnipp::StaticField<SunSecurityUtilDebug> SunSecurityUtilManifestEntryVerifier::debug ("sun/security/util/ManifestEntryVerifier", "debug", "Lsun/security/util/Debug;");
#undef hexc
const jnipp::StaticField<jnipp::Array<jchar>> SunSecurityUtilManifestEntryVerifier::hexc ("sun/security/util/ManifestEntryVerifier", "hexc", "[C");
inline jnipp::GlobalRef<jnipp::Class>& SunSecurityUtilManifestDigester::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/security/util/ManifestDigester"));
    return cls;
}

// public sun.security.util.ManifestDigester(byte[])
jnipp::LocalRef<SunSecurityUtilManifestDigester> SunSecurityUtilManifestDigester::construct(const jnipp::Ref<jnipp::Array<jbyte>>& a0) {
    static jnipp::Constructor<SunSecurityUtilManifestDigester,jnipp::Array<jbyte>> constructor(clazz(), "([B)V");
    return constructor.construct(a0);
}

// public sun.security.util.ManifestDigester$Entry sun.security.util.ManifestDigester.get(java.lang.String,boolean)
jnipp::LocalRef<SunSecurityUtilManifestDigester_Entry> SunSecurityUtilManifestDigester::get(const jnipp::Ref<JavaLangString>& a0, jboolean a1) const {
    static jnipp::Method<SunSecurityUtilManifestDigester_Entry,JavaLangString,jboolean> method(clazz(), "get", "(Ljava/lang/String;Z)Lsun/security/util/ManifestDigester$Entry;");
    return method.call(*this, a0, a1);
}

// private boolean sun.security.util.ManifestDigester.findSection(int,sun.security.util.ManifestDigester$Position)
jboolean SunSecurityUtilManifestDigester::findSection(jint a0, const jnipp::Ref<SunSecurityUtilManifestDigester_Position>& a1) const {
    static jnipp::Method<jboolean,jint,SunSecurityUtilManifestDigester_Position> method(clazz(), "findSection", "(ILsun/security/util/ManifestDigester$Position;)Z");
    return method.call(*this, a0, a1);
}

// private boolean sun.security.util.ManifestDigester.isNameAttr(byte[],int)
jboolean SunSecurityUtilManifestDigester::isNameAttr(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1) const {
    static jnipp::Method<jboolean,jnipp::Array<jbyte>,jint> method(clazz(), "isNameAttr", "([BI)Z");
    return method.call(*this, a0, a1);
}

// public byte[] sun.security.util.ManifestDigester.manifestDigest(java.security.MessageDigest)
jnipp::LocalRef<jnipp::Array<jbyte>> SunSecurityUtilManifestDigester::manifestDigest(const jnipp::Ref<JavaSecurityMessageDigest>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaSecurityMessageDigest> method(clazz(), "manifestDigest", "(Ljava/security/MessageDigest;)[B");
    return method.call(*this, a0);
}
#undef MF_MAIN_ATTRS
const jnipp::StaticField<JavaLangString> SunSecurityUtilManifestDigester::MF_MAIN_ATTRS ("sun/security/util/ManifestDigester", "MF_MAIN_ATTRS", "Ljava/lang/String;");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityProvider_1::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/Provider$1"));
    return cls;
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityKey::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/Key"));
    return cls;
}
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaSecurityKey::serialVersionUID ("java/security/Key", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& JavaLangBoolean::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/lang/Boolean"));
    return cls;
}

// public java.lang.Boolean(boolean)
jnipp::LocalRef<JavaLangBoolean> JavaLangBoolean::construct(jboolean a0) {
    static jnipp::Constructor<JavaLangBoolean,jboolean> constructor(clazz(), "(Z)V");
    return constructor.construct(a0);
}

// public java.lang.Boolean(java.lang.String)
jnipp::LocalRef<JavaLangBoolean> JavaLangBoolean::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaLangBoolean,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public boolean java.lang.Boolean.equals(java.lang.Object)
jboolean JavaLangBoolean::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int java.lang.Boolean.hashCode()
jint JavaLangBoolean::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public int java.lang.Boolean.compareTo(java.lang.Boolean)
jint JavaLangBoolean::compareTo(const jnipp::Ref<JavaLangBoolean>& a0) const {
    static jnipp::Method<jint,JavaLangBoolean> method(clazz(), "compareTo", "(Ljava/lang/Boolean;)I");
    return method.call(*this, a0);
}

// public static boolean java.lang.Boolean.getBoolean(java.lang.String)
jboolean JavaLangBoolean::getBoolean(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "getBoolean", "(Ljava/lang/String;)Z");
    return method.call(a0);
}

// public boolean java.lang.Boolean.booleanValue()
jboolean JavaLangBoolean::booleanValue() const {
    static jnipp::Method<jboolean> method(clazz(), "booleanValue", "()Z");
    return method.call(*this);
}

// public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
jnipp::LocalRef<JavaLangBoolean> JavaLangBoolean::valueOf(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaLangBoolean,JavaLangString> method(clazz(), "valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;");
    return method.call(a0);
}

// public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
jnipp::LocalRef<JavaLangBoolean> JavaLangBoolean::valueOf(jboolean a0) {
    static jnipp::StaticMethod<JavaLangBoolean,jboolean> method(clazz(), "valueOf", "(Z)Ljava/lang/Boolean;");
    return method.call(a0);
}

// public static int java.lang.Boolean.compare(boolean,boolean)
jint JavaLangBoolean::compare(jboolean a0, jboolean a1) {
    static jnipp::StaticMethod<jint,jboolean,jboolean> method(clazz(), "compare", "(ZZ)I");
    return method.call(a0, a1);
}

// public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
jboolean JavaLangBoolean::parseBoolean(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "parseBoolean", "(Ljava/lang/String;)Z");
    return method.call(a0);
}

// private static boolean java.lang.Boolean.toBoolean(java.lang.String)
jboolean JavaLangBoolean::toBoolean(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<jboolean,JavaLangString> method(clazz(), "toBoolean", "(Ljava/lang/String;)Z");
    return method.call(a0);
}
#undef TRUE
const jnipp::StaticField<JavaLangBoolean> JavaLangBoolean::TRUE ("java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;");
#undef FALSE
const jnipp::StaticField<JavaLangBoolean> JavaLangBoolean::FALSE ("java/lang/Boolean", "FALSE", "Ljava/lang/Boolean;");
#undef TYPE
const jnipp::StaticField<JavaLangClass> JavaLangBoolean::TYPE ("java/lang/Boolean", "TYPE", "Ljava/lang/Class;");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaLangBoolean::serialVersionUID ("java/lang/Boolean", "serialVersionUID", "J");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilCalendarCalendarDate::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/calendar/CalendarDate"));
    return cls;
}

// protected sun.util.calendar.CalendarDate()
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::construct() {
    static jnipp::Constructor<SunUtilCalendarCalendarDate> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected sun.util.calendar.CalendarDate(java.util.TimeZone)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::construct(const jnipp::Ref<JavaUtilTimeZone>& a0) {
    static jnipp::Constructor<SunUtilCalendarCalendarDate,JavaUtilTimeZone> constructor(clazz(), "(Ljava/util/TimeZone;)V");
    return constructor.construct(a0);
}

// public boolean sun.util.calendar.CalendarDate.equals(java.lang.Object)
jboolean SunUtilCalendarCalendarDate::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int sun.util.calendar.CalendarDate.hashCode()
jint SunUtilCalendarCalendarDate::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.Object sun.util.calendar.CalendarDate.clone()
jnipp::LocalRef<JavaLangObject> SunUtilCalendarCalendarDate::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public int sun.util.calendar.CalendarDate.getYear()
jint SunUtilCalendarCalendarDate::getYear() const {
    static jnipp::Method<jint> method(clazz(), "getYear", "()I");
    return method.call(*this);
}

// public int sun.util.calendar.CalendarDate.getMonth()
jint SunUtilCalendarCalendarDate::getMonth() const {
    static jnipp::Method<jint> method(clazz(), "getMonth", "()I");
    return method.call(*this);
}

// public int sun.util.calendar.CalendarDate.getHours()
jint SunUtilCalendarCalendarDate::getHours() const {
    static jnipp::Method<jint> method(clazz(), "getHours", "()I");
    return method.call(*this);
}

// public int sun.util.calendar.CalendarDate.getMinutes()
jint SunUtilCalendarCalendarDate::getMinutes() const {
    static jnipp::Method<jint> method(clazz(), "getMinutes", "()I");
    return method.call(*this);
}

// public int sun.util.calendar.CalendarDate.getSeconds()
jint SunUtilCalendarCalendarDate::getSeconds() const {
    static jnipp::Method<jint> method(clazz(), "getSeconds", "()I");
    return method.call(*this);
}

// protected void sun.util.calendar.CalendarDate.setLocale(java.util.Locale)
void SunUtilCalendarCalendarDate::setLocale(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<void,JavaUtilLocale> method(clazz(), "setLocale", "(Ljava/util/Locale;)V");
    method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setYear(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setYear(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "setYear", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setMonth(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setMonth(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "setMonth", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setDate(int,int,int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setDate(jint a0, jint a1, jint a2) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint,jint,jint> method(clazz(), "setDate", "(III)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0, a1, a2);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setHours(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setHours(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "setHours", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setMinutes(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setMinutes(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "setMinutes", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setSeconds(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setSeconds(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "setSeconds", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setTimeOfDay(int,int,int,int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setTimeOfDay(jint a0, jint a1, jint a2, jint a3) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint,jint,jint,jint> method(clazz(), "setTimeOfDay", "(IIII)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0, a1, a2, a3);
}

// protected void sun.util.calendar.CalendarDate.setTimeOfDay(long)
void SunUtilCalendarCalendarDate::setTimeOfDay(jlong a0) const {
    static jnipp::Method<void,jlong> method(clazz(), "setTimeOfDay", "(J)V");
    method.call(*this, a0);
}

// public int sun.util.calendar.CalendarDate.getDayOfMonth()
jint SunUtilCalendarCalendarDate::getDayOfMonth() const {
    static jnipp::Method<jint> method(clazz(), "getDayOfMonth", "()I");
    return method.call(*this);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setDayOfMonth(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setDayOfMonth(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "setDayOfMonth", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public int sun.util.calendar.CalendarDate.getDayOfWeek()
jint SunUtilCalendarCalendarDate::getDayOfWeek() const {
    static jnipp::Method<jint> method(clazz(), "getDayOfWeek", "()I");
    return method.call(*this);
}

// public boolean sun.util.calendar.CalendarDate.isNormalized()
jboolean SunUtilCalendarCalendarDate::isNormalized() const {
    static jnipp::Method<jboolean> method(clazz(), "isNormalized", "()Z");
    return method.call(*this);
}

// public java.util.TimeZone sun.util.calendar.CalendarDate.getZone()
jnipp::LocalRef<JavaUtilTimeZone> SunUtilCalendarCalendarDate::getZone() const {
    static jnipp::Method<JavaUtilTimeZone> method(clazz(), "getZone", "()Ljava/util/TimeZone;");
    return method.call(*this);
}

// public boolean sun.util.calendar.CalendarDate.isDaylightTime()
jboolean SunUtilCalendarCalendarDate::isDaylightTime() const {
    static jnipp::Method<jboolean> method(clazz(), "isDaylightTime", "()Z");
    return method.call(*this);
}

// public int sun.util.calendar.CalendarDate.getZoneOffset()
jint SunUtilCalendarCalendarDate::getZoneOffset() const {
    static jnipp::Method<jint> method(clazz(), "getZoneOffset", "()I");
    return method.call(*this);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setZone(java.util.TimeZone)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setZone(const jnipp::Ref<JavaUtilTimeZone>& a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,JavaUtilTimeZone> method(clazz(), "setZone", "(Ljava/util/TimeZone;)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public int sun.util.calendar.CalendarDate.getMillis()
jint SunUtilCalendarCalendarDate::getMillis() const {
    static jnipp::Method<jint> method(clazz(), "getMillis", "()I");
    return method.call(*this);
}

// public sun.util.calendar.Era sun.util.calendar.CalendarDate.getEra()
jnipp::LocalRef<SunUtilCalendarEra> SunUtilCalendarCalendarDate::getEra() const {
    static jnipp::Method<SunUtilCalendarEra> method(clazz(), "getEra", "()Lsun/util/calendar/Era;");
    return method.call(*this);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setEra(sun.util.calendar.Era)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setEra(const jnipp::Ref<SunUtilCalendarEra>& a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,SunUtilCalendarEra> method(clazz(), "setEra", "(Lsun/util/calendar/Era;)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addYear(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addYear(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "addYear", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public boolean sun.util.calendar.CalendarDate.isLeapYear()
jboolean SunUtilCalendarCalendarDate::isLeapYear() const {
    static jnipp::Method<jboolean> method(clazz(), "isLeapYear", "()Z");
    return method.call(*this);
}

// void sun.util.calendar.CalendarDate.setLeapYear(boolean)
void SunUtilCalendarCalendarDate::setLeapYear(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setLeapYear", "(Z)V");
    method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addMonth(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addMonth(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "addMonth", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addDayOfMonth(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addDayOfMonth(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "addDayOfMonth", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addHours(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addHours(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "addHours", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addMinutes(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addMinutes(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "addMinutes", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addSeconds(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addSeconds(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "addSeconds", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.setMillis(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::setMillis(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "setMillis", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addMillis(int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addMillis(jint a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint> method(clazz(), "addMillis", "(I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public long sun.util.calendar.CalendarDate.getTimeOfDay()
jlong SunUtilCalendarCalendarDate::getTimeOfDay() const {
    static jnipp::Method<jlong> method(clazz(), "getTimeOfDay", "()J");
    return method.call(*this);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addDate(int,int,int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addDate(jint a0, jint a1, jint a2) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint,jint,jint> method(clazz(), "addDate", "(III)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0, a1, a2);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.CalendarDate.addTimeOfDay(int,int,int,int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarCalendarDate::addTimeOfDay(jint a0, jint a1, jint a2, jint a3) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint,jint,jint,jint> method(clazz(), "addTimeOfDay", "(IIII)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0, a1, a2, a3);
}

// public boolean sun.util.calendar.CalendarDate.isStandardTime()
jboolean SunUtilCalendarCalendarDate::isStandardTime() const {
    static jnipp::Method<jboolean> method(clazz(), "isStandardTime", "()Z");
    return method.call(*this);
}

// public void sun.util.calendar.CalendarDate.setStandardTime(boolean)
void SunUtilCalendarCalendarDate::setStandardTime(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setStandardTime", "(Z)V");
    method.call(*this, a0);
}

// public boolean sun.util.calendar.CalendarDate.isSameDate(sun.util.calendar.CalendarDate)
jboolean SunUtilCalendarCalendarDate::isSameDate(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jboolean,SunUtilCalendarCalendarDate> method(clazz(), "isSameDate", "(Lsun/util/calendar/CalendarDate;)Z");
    return method.call(*this, a0);
}

// protected void sun.util.calendar.CalendarDate.setDayOfWeek(int)
void SunUtilCalendarCalendarDate::setDayOfWeek(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setDayOfWeek", "(I)V");
    method.call(*this, a0);
}

// protected void sun.util.calendar.CalendarDate.setNormalized(boolean)
void SunUtilCalendarCalendarDate::setNormalized(jboolean a0) const {
    static jnipp::Method<void,jboolean> method(clazz(), "setNormalized", "(Z)V");
    method.call(*this, a0);
}

// protected void sun.util.calendar.CalendarDate.setZoneOffset(int)
void SunUtilCalendarCalendarDate::setZoneOffset(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setZoneOffset", "(I)V");
    method.call(*this, a0);
}

// public int sun.util.calendar.CalendarDate.getDaylightSaving()
jint SunUtilCalendarCalendarDate::getDaylightSaving() const {
    static jnipp::Method<jint> method(clazz(), "getDaylightSaving", "()I");
    return method.call(*this);
}

// protected void sun.util.calendar.CalendarDate.setDaylightSaving(int)
void SunUtilCalendarCalendarDate::setDaylightSaving(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setDaylightSaving", "(I)V");
    method.call(*this, a0);
}
#undef FIELD_UNDEFINED
const jnipp::StaticField<jint> SunUtilCalendarCalendarDate::FIELD_UNDEFINED ("sun/util/calendar/CalendarDate", "FIELD_UNDEFINED", "I");
#undef TIME_UNDEFINED
const jnipp::StaticField<jlong> SunUtilCalendarCalendarDate::TIME_UNDEFINED ("sun/util/calendar/CalendarDate", "TIME_UNDEFINED", "J");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilCalendarBaseCalendar_Date::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/calendar/BaseCalendar$Date"));
    return cls;
}

// protected sun.util.calendar.BaseCalendar$Date()
jnipp::LocalRef<SunUtilCalendarBaseCalendar_Date> SunUtilCalendarBaseCalendar_Date::construct() {
    static jnipp::Constructor<SunUtilCalendarBaseCalendar_Date> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected sun.util.calendar.BaseCalendar$Date(java.util.TimeZone)
jnipp::LocalRef<SunUtilCalendarBaseCalendar_Date> SunUtilCalendarBaseCalendar_Date::construct(const jnipp::Ref<JavaUtilTimeZone>& a0) {
    static jnipp::Constructor<SunUtilCalendarBaseCalendar_Date,JavaUtilTimeZone> constructor(clazz(), "(Ljava/util/TimeZone;)V");
    return constructor.construct(a0);
}

// public sun.util.calendar.BaseCalendar$Date sun.util.calendar.BaseCalendar$Date.setNormalizedDate(int,int,int)
jnipp::LocalRef<SunUtilCalendarBaseCalendar_Date> SunUtilCalendarBaseCalendar_Date::setNormalizedDate(jint a0, jint a1, jint a2) const {
    static jnipp::Method<SunUtilCalendarBaseCalendar_Date,jint,jint,jint> method(clazz(), "setNormalizedDate", "(III)Lsun/util/calendar/BaseCalendar$Date;");
    return method.call(*this, a0, a1, a2);
}

// protected final boolean sun.util.calendar.BaseCalendar$Date.hit(long)
jboolean SunUtilCalendarBaseCalendar_Date::hit(jlong a0) const {
    static jnipp::Method<jboolean,jlong> method(clazz(), "hit", "(J)Z");
    return method.call(*this, a0);
}

// protected final boolean sun.util.calendar.BaseCalendar$Date.hit(int)
jboolean SunUtilCalendarBaseCalendar_Date::hit(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "hit", "(I)Z");
    return method.call(*this, a0);
}

// protected int sun.util.calendar.BaseCalendar$Date.getCachedYear()
jint SunUtilCalendarBaseCalendar_Date::getCachedYear() const {
    static jnipp::Method<jint> method(clazz(), "getCachedYear", "()I");
    return method.call(*this);
}

// protected long sun.util.calendar.BaseCalendar$Date.getCachedJan1()
jlong SunUtilCalendarBaseCalendar_Date::getCachedJan1() const {
    static jnipp::Method<jlong> method(clazz(), "getCachedJan1", "()J");
    return method.call(*this);
}

// protected void sun.util.calendar.BaseCalendar$Date.setCache(int,long,int)
void SunUtilCalendarBaseCalendar_Date::setCache(jint a0, jlong a1, jint a2) const {
    static jnipp::Method<void,jint,jlong,jint> method(clazz(), "setCache", "(IJI)V");
    method.call(*this, a0, a1, a2);
}
inline jnipp::GlobalRef<jnipp::Class>& SunUtilCalendarCalendarSystem::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/calendar/CalendarSystem"));
    return cls;
}

// public sun.util.calendar.CalendarSystem()
jnipp::LocalRef<SunUtilCalendarCalendarSystem> SunUtilCalendarCalendarSystem::construct() {
    static jnipp::Constructor<SunUtilCalendarCalendarSystem> constructor(clazz(), "()V");
    return constructor.construct();
}

// public static sun.util.calendar.CalendarSystem sun.util.calendar.CalendarSystem.forName(java.lang.String)
jnipp::LocalRef<SunUtilCalendarCalendarSystem> SunUtilCalendarCalendarSystem::forName(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<SunUtilCalendarCalendarSystem,JavaLangString> method(clazz(), "forName", "(Ljava/lang/String;)Lsun/util/calendar/CalendarSystem;");
    return method.call(a0);
}

// public static sun.util.calendar.Gregorian sun.util.calendar.CalendarSystem.getGregorianCalendar()
jnipp::LocalRef<SunUtilCalendarGregorian> SunUtilCalendarCalendarSystem::getGregorianCalendar() {
    static jnipp::StaticMethod<SunUtilCalendarGregorian> method(clazz(), "getGregorianCalendar", "()Lsun/util/calendar/Gregorian;");
    return method.call();
}

// private static void sun.util.calendar.CalendarSystem.initNames()
void SunUtilCalendarCalendarSystem::initNames() {
    static jnipp::StaticMethod<void> method(clazz(), "initNames", "()V");
    method.call();
}
#undef initialized
jnipp::StaticField<jboolean> SunUtilCalendarCalendarSystem::initialized ("sun/util/calendar/CalendarSystem", "initialized", "Z");
#undef names
jnipp::StaticField<JavaUtilConcurrentConcurrentMap> SunUtilCalendarCalendarSystem::names ("sun/util/calendar/CalendarSystem", "names", "Ljava/util/concurrent/ConcurrentMap;");
#undef calendars
jnipp::StaticField<JavaUtilConcurrentConcurrentMap> SunUtilCalendarCalendarSystem::calendars ("sun/util/calendar/CalendarSystem", "calendars", "Ljava/util/concurrent/ConcurrentMap;");
#undef PACKAGE_NAME
const jnipp::StaticField<JavaLangString> SunUtilCalendarCalendarSystem::PACKAGE_NAME ("sun/util/calendar/CalendarSystem", "PACKAGE_NAME", "Ljava/lang/String;");
#undef namePairs
const jnipp::StaticField<jnipp::Array<JavaLangString>> SunUtilCalendarCalendarSystem::namePairs ("sun/util/calendar/CalendarSystem", "namePairs", "[Ljava/lang/String;");
#undef GREGORIAN_INSTANCE
const jnipp::StaticField<SunUtilCalendarGregorian> SunUtilCalendarCalendarSystem::GREGORIAN_INSTANCE ("sun/util/calendar/CalendarSystem", "GREGORIAN_INSTANCE", "Lsun/util/calendar/Gregorian;");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilCalendarAbstractCalendar::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/calendar/AbstractCalendar"));
    return cls;
}

// protected sun.util.calendar.AbstractCalendar()
jnipp::LocalRef<SunUtilCalendarAbstractCalendar> SunUtilCalendarAbstractCalendar::construct() {
    static jnipp::Constructor<SunUtilCalendarAbstractCalendar> constructor(clazz(), "()V");
    return constructor.construct();
}

// public long sun.util.calendar.AbstractCalendar.getTime(sun.util.calendar.CalendarDate)
jlong SunUtilCalendarAbstractCalendar::getTime(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jlong,SunUtilCalendarCalendarDate> method(clazz(), "getTime", "(Lsun/util/calendar/CalendarDate;)J");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.AbstractCalendar.getCalendarDate(long)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarAbstractCalendar::getCalendarDate(jlong a0) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jlong> method(clazz(), "getCalendarDate", "(J)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.AbstractCalendar.getCalendarDate()
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarAbstractCalendar::getCalendarDate() const {
    static jnipp::Method<SunUtilCalendarCalendarDate> method(clazz(), "getCalendarDate", "()Lsun/util/calendar/CalendarDate;");
    return method.call(*this);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.AbstractCalendar.getCalendarDate(long,java.util.TimeZone)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarAbstractCalendar::getCalendarDate(jlong a0, const jnipp::Ref<JavaUtilTimeZone>& a1) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jlong,JavaUtilTimeZone> method(clazz(), "getCalendarDate", "(JLjava/util/TimeZone;)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0, a1);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.AbstractCalendar.getCalendarDate(long,sun.util.calendar.CalendarDate)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarAbstractCalendar::getCalendarDate(jlong a0, const jnipp::Ref<SunUtilCalendarCalendarDate>& a1) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jlong,SunUtilCalendarCalendarDate> method(clazz(), "getCalendarDate", "(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0, a1);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.AbstractCalendar.setTimeOfDay(sun.util.calendar.CalendarDate,int)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarAbstractCalendar::setTimeOfDay(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0, jint a1) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,SunUtilCalendarCalendarDate,jint> method(clazz(), "setTimeOfDay", "(Lsun/util/calendar/CalendarDate;I)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0, a1);
}

// public sun.util.calendar.Era sun.util.calendar.AbstractCalendar.getEra(java.lang.String)
jnipp::LocalRef<SunUtilCalendarEra> SunUtilCalendarAbstractCalendar::getEra(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<SunUtilCalendarEra,JavaLangString> method(clazz(), "getEra", "(Ljava/lang/String;)Lsun/util/calendar/Era;");
    return method.call(*this, a0);
}

// public void sun.util.calendar.AbstractCalendar.setEra(sun.util.calendar.CalendarDate,java.lang.String)
void SunUtilCalendarAbstractCalendar::setEra(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0, const jnipp::Ref<JavaLangString>& a1) const {
    static jnipp::Method<void,SunUtilCalendarCalendarDate,JavaLangString> method(clazz(), "setEra", "(Lsun/util/calendar/CalendarDate;Ljava/lang/String;)V");
    method.call(*this, a0, a1);
}

// protected long sun.util.calendar.AbstractCalendar.getTimeOfDay(sun.util.calendar.CalendarDate)
jlong SunUtilCalendarAbstractCalendar::getTimeOfDay(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jlong,SunUtilCalendarCalendarDate> method(clazz(), "getTimeOfDay", "(Lsun/util/calendar/CalendarDate;)J");
    return method.call(*this, a0);
}

// public boolean sun.util.calendar.AbstractCalendar.validateTime(sun.util.calendar.CalendarDate)
jboolean SunUtilCalendarAbstractCalendar::validateTime(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jboolean,SunUtilCalendarCalendarDate> method(clazz(), "validateTime", "(Lsun/util/calendar/CalendarDate;)Z");
    return method.call(*this, a0);
}

// int sun.util.calendar.AbstractCalendar.normalizeTime(sun.util.calendar.CalendarDate)
jint SunUtilCalendarAbstractCalendar::normalizeTime(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jint,SunUtilCalendarCalendarDate> method(clazz(), "normalizeTime", "(Lsun/util/calendar/CalendarDate;)I");
    return method.call(*this, a0);
}

// public sun.util.calendar.Era[] sun.util.calendar.AbstractCalendar.getEras()
jnipp::LocalRef<jnipp::Array<SunUtilCalendarEra>> SunUtilCalendarAbstractCalendar::getEras() const {
    static jnipp::Method<jnipp::Array<SunUtilCalendarEra>> method(clazz(), "getEras", "()[Lsun/util/calendar/Era;");
    return method.call(*this);
}

// protected void sun.util.calendar.AbstractCalendar.setEras(sun.util.calendar.Era[])
void SunUtilCalendarAbstractCalendar::setEras(const jnipp::Ref<jnipp::Array<SunUtilCalendarEra>>& a0) const {
    static jnipp::Method<void,jnipp::Array<SunUtilCalendarEra>> method(clazz(), "setEras", "([Lsun/util/calendar/Era;)V");
    method.call(*this, a0);
}

// public long sun.util.calendar.AbstractCalendar.getTimeOfDayValue(sun.util.calendar.CalendarDate)
jlong SunUtilCalendarAbstractCalendar::getTimeOfDayValue(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jlong,SunUtilCalendarCalendarDate> method(clazz(), "getTimeOfDayValue", "(Lsun/util/calendar/CalendarDate;)J");
    return method.call(*this, a0);
}

// public int sun.util.calendar.AbstractCalendar.getWeekLength()
jint SunUtilCalendarAbstractCalendar::getWeekLength() const {
    static jnipp::Method<jint> method(clazz(), "getWeekLength", "()I");
    return method.call(*this);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.AbstractCalendar.getNthDayOfWeek(int,int,sun.util.calendar.CalendarDate)
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarAbstractCalendar::getNthDayOfWeek(jint a0, jint a1, const jnipp::Ref<SunUtilCalendarCalendarDate>& a2) const {
    static jnipp::Method<SunUtilCalendarCalendarDate,jint,jint,SunUtilCalendarCalendarDate> method(clazz(), "getNthDayOfWeek", "(IILsun/util/calendar/CalendarDate;)Lsun/util/calendar/CalendarDate;");
    return method.call(*this, a0, a1, a2);
}

// static long sun.util.calendar.AbstractCalendar.getDayOfWeekDateBefore(long,int)
jlong SunUtilCalendarAbstractCalendar::getDayOfWeekDateBefore(jlong a0, jint a1) {
    static jnipp::StaticMethod<jlong,jlong,jint> method(clazz(), "getDayOfWeekDateBefore", "(JI)J");
    return method.call(a0, a1);
}

// static long sun.util.calendar.AbstractCalendar.getDayOfWeekDateAfter(long,int)
jlong SunUtilCalendarAbstractCalendar::getDayOfWeekDateAfter(jlong a0, jint a1) {
    static jnipp::StaticMethod<jlong,jlong,jint> method(clazz(), "getDayOfWeekDateAfter", "(JI)J");
    return method.call(a0, a1);
}

// public static long sun.util.calendar.AbstractCalendar.getDayOfWeekDateOnOrBefore(long,int)
jlong SunUtilCalendarAbstractCalendar::getDayOfWeekDateOnOrBefore(jlong a0, jint a1) {
    static jnipp::StaticMethod<jlong,jlong,jint> method(clazz(), "getDayOfWeekDateOnOrBefore", "(JI)J");
    return method.call(a0, a1);
}
#undef SECOND_IN_MILLIS
const jnipp::StaticField<jint> SunUtilCalendarAbstractCalendar::SECOND_IN_MILLIS ("sun/util/calendar/AbstractCalendar", "SECOND_IN_MILLIS", "I");
#undef MINUTE_IN_MILLIS
const jnipp::StaticField<jint> SunUtilCalendarAbstractCalendar::MINUTE_IN_MILLIS ("sun/util/calendar/AbstractCalendar", "MINUTE_IN_MILLIS", "I");
#undef HOUR_IN_MILLIS
const jnipp::StaticField<jint> SunUtilCalendarAbstractCalendar::HOUR_IN_MILLIS ("sun/util/calendar/AbstractCalendar", "HOUR_IN_MILLIS", "I");
#undef DAY_IN_MILLIS
const jnipp::StaticField<jint> SunUtilCalendarAbstractCalendar::DAY_IN_MILLIS ("sun/util/calendar/AbstractCalendar", "DAY_IN_MILLIS", "I");
#undef EPOCH_OFFSET
const jnipp::StaticField<jint> SunUtilCalendarAbstractCalendar::EPOCH_OFFSET ("sun/util/calendar/AbstractCalendar", "EPOCH_OFFSET", "I");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilCalendarBaseCalendar::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/calendar/BaseCalendar"));
    return cls;
}

// public sun.util.calendar.BaseCalendar()
jnipp::LocalRef<SunUtilCalendarBaseCalendar> SunUtilCalendarBaseCalendar::construct() {
    static jnipp::Constructor<SunUtilCalendarBaseCalendar> constructor(clazz(), "()V");
    return constructor.construct();
}

// public boolean sun.util.calendar.BaseCalendar.normalize(sun.util.calendar.CalendarDate)
jboolean SunUtilCalendarBaseCalendar::normalize(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jboolean,SunUtilCalendarCalendarDate> method(clazz(), "normalize", "(Lsun/util/calendar/CalendarDate;)Z");
    return method.call(*this, a0);
}

// public int sun.util.calendar.BaseCalendar.getDayOfWeek(sun.util.calendar.CalendarDate)
jint SunUtilCalendarBaseCalendar::getDayOfWeek(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jint,SunUtilCalendarCalendarDate> method(clazz(), "getDayOfWeek", "(Lsun/util/calendar/CalendarDate;)I");
    return method.call(*this, a0);
}

// protected boolean sun.util.calendar.BaseCalendar.isLeapYear(sun.util.calendar.CalendarDate)
jboolean SunUtilCalendarBaseCalendar::isLeapYear(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jboolean,SunUtilCalendarCalendarDate> method(clazz(), "isLeapYear", "(Lsun/util/calendar/CalendarDate;)Z");
    return method.call(*this, a0);
}

// boolean sun.util.calendar.BaseCalendar.isLeapYear(int)
jboolean SunUtilCalendarBaseCalendar::isLeapYear(jint a0) const {
    static jnipp::Method<jboolean,jint> method(clazz(), "isLeapYear", "(I)Z");
    return method.call(*this, a0);
}

// public boolean sun.util.calendar.BaseCalendar.validate(sun.util.calendar.CalendarDate)
jboolean SunUtilCalendarBaseCalendar::validate(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jboolean,SunUtilCalendarCalendarDate> method(clazz(), "validate", "(Lsun/util/calendar/CalendarDate;)Z");
    return method.call(*this, a0);
}

// void sun.util.calendar.BaseCalendar.normalizeMonth(sun.util.calendar.CalendarDate)
void SunUtilCalendarBaseCalendar::normalizeMonth(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<void,SunUtilCalendarCalendarDate> method(clazz(), "normalizeMonth", "(Lsun/util/calendar/CalendarDate;)V");
    method.call(*this, a0);
}

// public int sun.util.calendar.BaseCalendar.getYearLength(sun.util.calendar.CalendarDate)
jint SunUtilCalendarBaseCalendar::getYearLength(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jint,SunUtilCalendarCalendarDate> method(clazz(), "getYearLength", "(Lsun/util/calendar/CalendarDate;)I");
    return method.call(*this, a0);
}

// public int sun.util.calendar.BaseCalendar.getYearLengthInMonths(sun.util.calendar.CalendarDate)
jint SunUtilCalendarBaseCalendar::getYearLengthInMonths(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jint,SunUtilCalendarCalendarDate> method(clazz(), "getYearLengthInMonths", "(Lsun/util/calendar/CalendarDate;)I");
    return method.call(*this, a0);
}

// public int sun.util.calendar.BaseCalendar.getMonthLength(sun.util.calendar.CalendarDate)
jint SunUtilCalendarBaseCalendar::getMonthLength(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jint,SunUtilCalendarCalendarDate> method(clazz(), "getMonthLength", "(Lsun/util/calendar/CalendarDate;)I");
    return method.call(*this, a0);
}

// private final int sun.util.calendar.BaseCalendar.getMonthLength(int,int)
jint SunUtilCalendarBaseCalendar::getMonthLength(jint a0, jint a1) const {
    static jnipp::Method<jint,jint,jint> method(clazz(), "getMonthLength", "(II)I");
    return method.call(*this, a0, a1);
}

// public long sun.util.calendar.BaseCalendar.getDayOfYear(sun.util.calendar.CalendarDate)
jlong SunUtilCalendarBaseCalendar::getDayOfYear(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jlong,SunUtilCalendarCalendarDate> method(clazz(), "getDayOfYear", "(Lsun/util/calendar/CalendarDate;)J");
    return method.call(*this, a0);
}

// final long sun.util.calendar.BaseCalendar.getDayOfYear(int,int,int)
jlong SunUtilCalendarBaseCalendar::getDayOfYear(jint a0, jint a1, jint a2) const {
    static jnipp::Method<jlong,jint,jint,jint> method(clazz(), "getDayOfYear", "(III)J");
    return method.call(*this, a0, a1, a2);
}

// public long sun.util.calendar.BaseCalendar.getFixedDate(sun.util.calendar.CalendarDate)
jlong SunUtilCalendarBaseCalendar::getFixedDate(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0) const {
    static jnipp::Method<jlong,SunUtilCalendarCalendarDate> method(clazz(), "getFixedDate", "(Lsun/util/calendar/CalendarDate;)J");
    return method.call(*this, a0);
}

// public long sun.util.calendar.BaseCalendar.getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)
jlong SunUtilCalendarBaseCalendar::getFixedDate(jint a0, jint a1, jint a2, const jnipp::Ref<SunUtilCalendarBaseCalendar_Date>& a3) const {
    static jnipp::Method<jlong,jint,jint,jint,SunUtilCalendarBaseCalendar_Date> method(clazz(), "getFixedDate", "(IIILsun/util/calendar/BaseCalendar$Date;)J");
    return method.call(*this, a0, a1, a2, a3);
}

// public void sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)
void SunUtilCalendarBaseCalendar::getCalendarDateFromFixedDate(const jnipp::Ref<SunUtilCalendarCalendarDate>& a0, jlong a1) const {
    static jnipp::Method<void,SunUtilCalendarCalendarDate,jlong> method(clazz(), "getCalendarDateFromFixedDate", "(Lsun/util/calendar/CalendarDate;J)V");
    method.call(*this, a0, a1);
}

// public static final int sun.util.calendar.BaseCalendar.getDayOfWeekFromFixedDate(long)
jint SunUtilCalendarBaseCalendar::getDayOfWeekFromFixedDate(jlong a0) {
    static jnipp::StaticMethod<jint,jlong> method(clazz(), "getDayOfWeekFromFixedDate", "(J)I");
    return method.call(a0);
}

// public int sun.util.calendar.BaseCalendar.getYearFromFixedDate(long)
jint SunUtilCalendarBaseCalendar::getYearFromFixedDate(jlong a0) const {
    static jnipp::Method<jint,jlong> method(clazz(), "getYearFromFixedDate", "(J)I");
    return method.call(*this, a0);
}

// final int sun.util.calendar.BaseCalendar.getGregorianYearFromFixedDate(long)
jint SunUtilCalendarBaseCalendar::getGregorianYearFromFixedDate(jlong a0) const {
    static jnipp::Method<jint,jlong> method(clazz(), "getGregorianYearFromFixedDate", "(J)I");
    return method.call(*this, a0);
}
#undef JANUARY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::JANUARY ("sun/util/calendar/BaseCalendar", "JANUARY", "I");
#undef FEBRUARY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::FEBRUARY ("sun/util/calendar/BaseCalendar", "FEBRUARY", "I");
#undef MARCH
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::MARCH ("sun/util/calendar/BaseCalendar", "MARCH", "I");
#undef APRIL
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::APRIL ("sun/util/calendar/BaseCalendar", "APRIL", "I");
#undef MAY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::MAY ("sun/util/calendar/BaseCalendar", "MAY", "I");
#undef JUNE
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::JUNE ("sun/util/calendar/BaseCalendar", "JUNE", "I");
#undef JULY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::JULY ("sun/util/calendar/BaseCalendar", "JULY", "I");
#undef AUGUST
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::AUGUST ("sun/util/calendar/BaseCalendar", "AUGUST", "I");
#undef SEPTEMBER
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::SEPTEMBER ("sun/util/calendar/BaseCalendar", "SEPTEMBER", "I");
#undef OCTOBER
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::OCTOBER ("sun/util/calendar/BaseCalendar", "OCTOBER", "I");
#undef NOVEMBER
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::NOVEMBER ("sun/util/calendar/BaseCalendar", "NOVEMBER", "I");
#undef DECEMBER
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::DECEMBER ("sun/util/calendar/BaseCalendar", "DECEMBER", "I");
#undef SUNDAY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::SUNDAY ("sun/util/calendar/BaseCalendar", "SUNDAY", "I");
#undef MONDAY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::MONDAY ("sun/util/calendar/BaseCalendar", "MONDAY", "I");
#undef TUESDAY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::TUESDAY ("sun/util/calendar/BaseCalendar", "TUESDAY", "I");
#undef WEDNESDAY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::WEDNESDAY ("sun/util/calendar/BaseCalendar", "WEDNESDAY", "I");
#undef THURSDAY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::THURSDAY ("sun/util/calendar/BaseCalendar", "THURSDAY", "I");
#undef FRIDAY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::FRIDAY ("sun/util/calendar/BaseCalendar", "FRIDAY", "I");
#undef SATURDAY
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::SATURDAY ("sun/util/calendar/BaseCalendar", "SATURDAY", "I");
#undef BASE_YEAR
const jnipp::StaticField<jint> SunUtilCalendarBaseCalendar::BASE_YEAR ("sun/util/calendar/BaseCalendar", "BASE_YEAR", "I");
#undef FIXED_DATES
const jnipp::StaticField<jnipp::Array<jint>> SunUtilCalendarBaseCalendar::FIXED_DATES ("sun/util/calendar/BaseCalendar", "FIXED_DATES", "[I");
#undef DAYS_IN_MONTH
const jnipp::StaticField<jnipp::Array<jint>> SunUtilCalendarBaseCalendar::DAYS_IN_MONTH ("sun/util/calendar/BaseCalendar", "DAYS_IN_MONTH", "[I");
#undef ACCUMULATED_DAYS_IN_MONTH
const jnipp::StaticField<jnipp::Array<jint>> SunUtilCalendarBaseCalendar::ACCUMULATED_DAYS_IN_MONTH ("sun/util/calendar/BaseCalendar", "ACCUMULATED_DAYS_IN_MONTH", "[I");
#undef ACCUMULATED_DAYS_IN_MONTH_LEAP
const jnipp::StaticField<jnipp::Array<jint>> SunUtilCalendarBaseCalendar::ACCUMULATED_DAYS_IN_MONTH_LEAP ("sun/util/calendar/BaseCalendar", "ACCUMULATED_DAYS_IN_MONTH_LEAP", "[I");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> SunUtilCalendarBaseCalendar::$assertionsDisabled ("sun/util/calendar/BaseCalendar", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& SunMiscCharacterDecoder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/misc/CharacterDecoder"));
    return cls;
}

// public sun.misc.CharacterDecoder()
jnipp::LocalRef<SunMiscCharacterDecoder> SunMiscCharacterDecoder::construct() {
    static jnipp::Constructor<SunMiscCharacterDecoder> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected int sun.misc.CharacterDecoder.readFully(java.io.InputStream,byte[],int,int) throws java.io.IOException
jint SunMiscCharacterDecoder::readFully(const jnipp::Ref<JavaIoInputStream>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3) const {
    static jnipp::Method<jint,JavaIoInputStream,jnipp::Array<jbyte>,jint,jint> method(clazz(), "readFully", "(Ljava/io/InputStream;[BII)I");
    return method.call(*this, a0, a1, a2, a3);
}

// public byte[] sun.misc.CharacterDecoder.decodeBuffer(java.lang.String) throws java.io.IOException
jnipp::LocalRef<jnipp::Array<jbyte>> SunMiscCharacterDecoder::decodeBuffer(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaLangString> method(clazz(), "decodeBuffer", "(Ljava/lang/String;)[B");
    return method.call(*this, a0);
}

// public void sun.misc.CharacterDecoder.decodeBuffer(java.io.InputStream,java.io.OutputStream) throws java.io.IOException
void SunMiscCharacterDecoder::decodeBuffer(const jnipp::Ref<JavaIoInputStream>& a0, const jnipp::Ref<JavaIoOutputStream>& a1) const {
    static jnipp::Method<void,JavaIoInputStream,JavaIoOutputStream> method(clazz(), "decodeBuffer", "(Ljava/io/InputStream;Ljava/io/OutputStream;)V");
    method.call(*this, a0, a1);
}

// public byte[] sun.misc.CharacterDecoder.decodeBuffer(java.io.InputStream) throws java.io.IOException
jnipp::LocalRef<jnipp::Array<jbyte>> SunMiscCharacterDecoder::decodeBuffer(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaIoInputStream> method(clazz(), "decodeBuffer", "(Ljava/io/InputStream;)[B");
    return method.call(*this, a0);
}

// protected void sun.misc.CharacterDecoder.decodeAtom(java.io.PushbackInputStream,java.io.OutputStream,int) throws java.io.IOException
void SunMiscCharacterDecoder::decodeAtom(const jnipp::Ref<JavaIoPushbackInputStream>& a0, const jnipp::Ref<JavaIoOutputStream>& a1, jint a2) const {
    static jnipp::Method<void,JavaIoPushbackInputStream,JavaIoOutputStream,jint> method(clazz(), "decodeAtom", "(Ljava/io/PushbackInputStream;Ljava/io/OutputStream;I)V");
    method.call(*this, a0, a1, a2);
}

// protected void sun.misc.CharacterDecoder.decodeBufferPrefix(java.io.PushbackInputStream,java.io.OutputStream) throws java.io.IOException
void SunMiscCharacterDecoder::decodeBufferPrefix(const jnipp::Ref<JavaIoPushbackInputStream>& a0, const jnipp::Ref<JavaIoOutputStream>& a1) const {
    static jnipp::Method<void,JavaIoPushbackInputStream,JavaIoOutputStream> method(clazz(), "decodeBufferPrefix", "(Ljava/io/PushbackInputStream;Ljava/io/OutputStream;)V");
    method.call(*this, a0, a1);
}

// protected void sun.misc.CharacterDecoder.decodeBufferSuffix(java.io.PushbackInputStream,java.io.OutputStream) throws java.io.IOException
void SunMiscCharacterDecoder::decodeBufferSuffix(const jnipp::Ref<JavaIoPushbackInputStream>& a0, const jnipp::Ref<JavaIoOutputStream>& a1) const {
    static jnipp::Method<void,JavaIoPushbackInputStream,JavaIoOutputStream> method(clazz(), "decodeBufferSuffix", "(Ljava/io/PushbackInputStream;Ljava/io/OutputStream;)V");
    method.call(*this, a0, a1);
}

// protected int sun.misc.CharacterDecoder.decodeLinePrefix(java.io.PushbackInputStream,java.io.OutputStream) throws java.io.IOException
jint SunMiscCharacterDecoder::decodeLinePrefix(const jnipp::Ref<JavaIoPushbackInputStream>& a0, const jnipp::Ref<JavaIoOutputStream>& a1) const {
    static jnipp::Method<jint,JavaIoPushbackInputStream,JavaIoOutputStream> method(clazz(), "decodeLinePrefix", "(Ljava/io/PushbackInputStream;Ljava/io/OutputStream;)I");
    return method.call(*this, a0, a1);
}

// protected void sun.misc.CharacterDecoder.decodeLineSuffix(java.io.PushbackInputStream,java.io.OutputStream) throws java.io.IOException
void SunMiscCharacterDecoder::decodeLineSuffix(const jnipp::Ref<JavaIoPushbackInputStream>& a0, const jnipp::Ref<JavaIoOutputStream>& a1) const {
    static jnipp::Method<void,JavaIoPushbackInputStream,JavaIoOutputStream> method(clazz(), "decodeLineSuffix", "(Ljava/io/PushbackInputStream;Ljava/io/OutputStream;)V");
    method.call(*this, a0, a1);
}

// public java.nio.ByteBuffer sun.misc.CharacterDecoder.decodeBufferToByteBuffer(java.lang.String) throws java.io.IOException
jnipp::LocalRef<JavaNioByteBuffer> SunMiscCharacterDecoder::decodeBufferToByteBuffer(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,JavaLangString> method(clazz(), "decodeBufferToByteBuffer", "(Ljava/lang/String;)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}

// public java.nio.ByteBuffer sun.misc.CharacterDecoder.decodeBufferToByteBuffer(java.io.InputStream) throws java.io.IOException
jnipp::LocalRef<JavaNioByteBuffer> SunMiscCharacterDecoder::decodeBufferToByteBuffer(const jnipp::Ref<JavaIoInputStream>& a0) const {
    static jnipp::Method<JavaNioByteBuffer,JavaIoInputStream> method(clazz(), "decodeBufferToByteBuffer", "(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunMiscBASE64Decoder::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/misc/BASE64Decoder"));
    return cls;
}

// public sun.misc.BASE64Decoder()
jnipp::LocalRef<SunMiscBASE64Decoder> SunMiscBASE64Decoder::construct() {
    static jnipp::Constructor<SunMiscBASE64Decoder> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected int sun.misc.BASE64Decoder.bytesPerAtom()
jint SunMiscBASE64Decoder::bytesPerAtom() const {
    static jnipp::Method<jint> method(clazz(), "bytesPerAtom", "()I");
    return method.call(*this);
}

// protected int sun.misc.BASE64Decoder.bytesPerLine()
jint SunMiscBASE64Decoder::bytesPerLine() const {
    static jnipp::Method<jint> method(clazz(), "bytesPerLine", "()I");
    return method.call(*this);
}

// protected void sun.misc.BASE64Decoder.decodeAtom(java.io.PushbackInputStream,java.io.OutputStream,int) throws java.io.IOException
void SunMiscBASE64Decoder::decodeAtom(const jnipp::Ref<JavaIoPushbackInputStream>& a0, const jnipp::Ref<JavaIoOutputStream>& a1, jint a2) const {
    static jnipp::Method<void,JavaIoPushbackInputStream,JavaIoOutputStream,jint> method(clazz(), "decodeAtom", "(Ljava/io/PushbackInputStream;Ljava/io/OutputStream;I)V");
    method.call(*this, a0, a1, a2);
}
#undef pem_array
const jnipp::StaticField<jnipp::Array<jchar>> SunMiscBASE64Decoder::pem_array ("sun/misc/BASE64Decoder", "pem_array", "[C");
#undef pem_convert_array
const jnipp::StaticField<jnipp::Array<jbyte>> SunMiscBASE64Decoder::pem_convert_array ("sun/misc/BASE64Decoder", "pem_convert_array", "[B");
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityMessageDigestSpi::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/MessageDigestSpi"));
    return cls;
}

// public java.security.MessageDigestSpi()
jnipp::LocalRef<JavaSecurityMessageDigestSpi> JavaSecurityMessageDigestSpi::construct() {
    static jnipp::Constructor<JavaSecurityMessageDigestSpi> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Object java.security.MessageDigestSpi.clone() throws java.lang.CloneNotSupportedException
jnipp::LocalRef<JavaLangObject> JavaSecurityMessageDigestSpi::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// protected void java.security.MessageDigestSpi.engineUpdate(java.nio.ByteBuffer)
void JavaSecurityMessageDigestSpi::engineUpdate(const jnipp::Ref<JavaNioByteBuffer>& a0) const {
    static jnipp::Method<void,JavaNioByteBuffer> method(clazz(), "engineUpdate", "(Ljava/nio/ByteBuffer;)V");
    method.call(*this, a0);
}

// protected int java.security.MessageDigestSpi.engineDigest(byte[],int,int) throws java.security.DigestException
jint JavaSecurityMessageDigestSpi::engineDigest(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "engineDigest", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// protected int java.security.MessageDigestSpi.engineGetDigestLength()
jint JavaSecurityMessageDigestSpi::engineGetDigestLength() const {
    static jnipp::Method<jint> method(clazz(), "engineGetDigestLength", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaSecurityMessageDigest::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/security/MessageDigest"));
    return cls;
}

// protected java.security.MessageDigest(java.lang.String)
jnipp::LocalRef<JavaSecurityMessageDigest> JavaSecurityMessageDigest::construct(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::Constructor<JavaSecurityMessageDigest,JavaLangString> constructor(clazz(), "(Ljava/lang/String;)V");
    return constructor.construct(a0);
}

// public java.lang.Object java.security.MessageDigest.clone() throws java.lang.CloneNotSupportedException
jnipp::LocalRef<JavaLangObject> JavaSecurityMessageDigest::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
jnipp::LocalRef<JavaSecurityMessageDigest> JavaSecurityMessageDigest::getInstance(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaSecurityMessageDigest,JavaLangString> method(clazz(), "getInstance", "(Ljava/lang/String;)Ljava/security/MessageDigest;");
    return method.call(a0);
}

// public static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) throws java.security.NoSuchAlgorithmException,java.security.NoSuchProviderException
jnipp::LocalRef<JavaSecurityMessageDigest> JavaSecurityMessageDigest::getInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaSecurityMessageDigest,JavaLangString,JavaLangString> method(clazz(), "getInstance", "(Ljava/lang/String;Ljava/lang/String;)Ljava/security/MessageDigest;");
    return method.call(a0, a1);
}

// public static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) throws java.security.NoSuchAlgorithmException
jnipp::LocalRef<JavaSecurityMessageDigest> JavaSecurityMessageDigest::getInstance(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaSecurityProvider>& a1) {
    static jnipp::StaticMethod<JavaSecurityMessageDigest,JavaLangString,JavaSecurityProvider> method(clazz(), "getInstance", "(Ljava/lang/String;Ljava/security/Provider;)Ljava/security/MessageDigest;");
    return method.call(a0, a1);
}

// public void java.security.MessageDigest.reset()
void JavaSecurityMessageDigest::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// public void java.security.MessageDigest.update(byte[],int,int)
void JavaSecurityMessageDigest::update(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "update", "([BII)V");
    method.call(*this, a0, a1, a2);
}

// public void java.security.MessageDigest.update(byte[])
void JavaSecurityMessageDigest::update(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "update", "([B)V");
    method.call(*this, a0);
}

// public final void java.security.MessageDigest.update(java.nio.ByteBuffer)
void JavaSecurityMessageDigest::update(const jnipp::Ref<JavaNioByteBuffer>& a0) const {
    static jnipp::Method<void,JavaNioByteBuffer> method(clazz(), "update", "(Ljava/nio/ByteBuffer;)V");
    method.call(*this, a0);
}

// public void java.security.MessageDigest.update(byte)
void JavaSecurityMessageDigest::update(jbyte a0) const {
    static jnipp::Method<void,jbyte> method(clazz(), "update", "(B)V");
    method.call(*this, a0);
}

// public byte[] java.security.MessageDigest.digest(byte[])
jnipp::LocalRef<jnipp::Array<jbyte>> JavaSecurityMessageDigest::digest(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,jnipp::Array<jbyte>> method(clazz(), "digest", "([B)[B");
    return method.call(*this, a0);
}

// public byte[] java.security.MessageDigest.digest()
jnipp::LocalRef<jnipp::Array<jbyte>> JavaSecurityMessageDigest::digest() const {
    static jnipp::Method<jnipp::Array<jbyte>> method(clazz(), "digest", "()[B");
    return method.call(*this);
}

// public int java.security.MessageDigest.digest(byte[],int,int) throws java.security.DigestException
jint JavaSecurityMessageDigest::digest(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "digest", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public final java.security.Provider java.security.MessageDigest.getProvider()
jnipp::LocalRef<JavaSecurityProvider> JavaSecurityMessageDigest::getProvider() const {
    static jnipp::Method<JavaSecurityProvider> method(clazz(), "getProvider", "()Ljava/security/Provider;");
    return method.call(*this);
}

// public final java.lang.String java.security.MessageDigest.getAlgorithm()
jnipp::LocalRef<JavaLangString> JavaSecurityMessageDigest::getAlgorithm() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getAlgorithm", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static boolean java.security.MessageDigest.isEqual(byte[],byte[])
jboolean JavaSecurityMessageDigest::isEqual(const jnipp::Ref<jnipp::Array<jbyte>>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1) {
    static jnipp::StaticMethod<jboolean,jnipp::Array<jbyte>,jnipp::Array<jbyte>> method(clazz(), "isEqual", "([B[B)Z");
    return method.call(a0, a1);
}

// public final int java.security.MessageDigest.getDigestLength()
jint JavaSecurityMessageDigest::getDigestLength() const {
    static jnipp::Method<jint> method(clazz(), "getDigestLength", "()I");
    return method.call(*this);
}
#undef INITIAL
const jnipp::StaticField<jint> JavaSecurityMessageDigest::INITIAL ("java/security/MessageDigest", "INITIAL", "I");
#undef IN_PROGRESS
const jnipp::StaticField<jint> JavaSecurityMessageDigest::IN_PROGRESS ("java/security/MessageDigest", "IN_PROGRESS", "I");
inline jnipp::GlobalRef<jnipp::Class>& SunSecurityUtilManifestDigester_Entry::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/security/util/ManifestDigester$Entry"));
    return cls;
}

// public sun.security.util.ManifestDigester$Entry(int,int,int,byte[])
jnipp::LocalRef<SunSecurityUtilManifestDigester_Entry> SunSecurityUtilManifestDigester_Entry::construct(jint a0, jint a1, jint a2, const jnipp::Ref<jnipp::Array<jbyte>>& a3) {
    static jnipp::Constructor<SunSecurityUtilManifestDigester_Entry,jint,jint,jint,jnipp::Array<jbyte>> constructor(clazz(), "(III[B)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public byte[] sun.security.util.ManifestDigester$Entry.digest(java.security.MessageDigest)
jnipp::LocalRef<jnipp::Array<jbyte>> SunSecurityUtilManifestDigester_Entry::digest(const jnipp::Ref<JavaSecurityMessageDigest>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaSecurityMessageDigest> method(clazz(), "digest", "(Ljava/security/MessageDigest;)[B");
    return method.call(*this, a0);
}

// private void sun.security.util.ManifestDigester$Entry.doOldStyle(java.security.MessageDigest,byte[],int,int)
void SunSecurityUtilManifestDigester_Entry::doOldStyle(const jnipp::Ref<JavaSecurityMessageDigest>& a0, const jnipp::Ref<jnipp::Array<jbyte>>& a1, jint a2, jint a3) const {
    static jnipp::Method<void,JavaSecurityMessageDigest,jnipp::Array<jbyte>,jint,jint> method(clazz(), "doOldStyle", "(Ljava/security/MessageDigest;[BII)V");
    method.call(*this, a0, a1, a2, a3);
}

// public byte[] sun.security.util.ManifestDigester$Entry.digestWorkaround(java.security.MessageDigest)
jnipp::LocalRef<jnipp::Array<jbyte>> SunSecurityUtilManifestDigester_Entry::digestWorkaround(const jnipp::Ref<JavaSecurityMessageDigest>& a0) const {
    static jnipp::Method<jnipp::Array<jbyte>,JavaSecurityMessageDigest> method(clazz(), "digestWorkaround", "(Ljava/security/MessageDigest;)[B");
    return method.call(*this, a0);
}
inline jnipp::GlobalRef<jnipp::Class>& SunSecurityUtilManifestDigester_Position::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/security/util/ManifestDigester$Position"));
    return cls;
}

// sun.security.util.ManifestDigester$Position()
jnipp::LocalRef<SunSecurityUtilManifestDigester_Position> SunSecurityUtilManifestDigester_Position::construct() {
    static jnipp::Constructor<SunSecurityUtilManifestDigester_Position> constructor(clazz(), "()V");
    return constructor.construct();
}
inline jnipp::GlobalRef<jnipp::Class>& JavaUtilTimeZone::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/util/TimeZone"));
    return cls;
}

// public java.util.TimeZone()
jnipp::LocalRef<JavaUtilTimeZone> JavaUtilTimeZone::construct() {
    static jnipp::Constructor<JavaUtilTimeZone> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.Object java.util.TimeZone.clone()
jnipp::LocalRef<JavaLangObject> JavaUtilTimeZone::clone() const {
    static jnipp::Method<JavaLangObject> method(clazz(), "clone", "()Ljava/lang/Object;");
    return method.call(*this);
}

// public static java.util.TimeZone java.util.TimeZone.getDefault()
jnipp::LocalRef<JavaUtilTimeZone> JavaUtilTimeZone::getDefault() {
    static jnipp::StaticMethod<JavaUtilTimeZone> method(clazz(), "getDefault", "()Ljava/util/TimeZone;");
    return method.call();
}

// public int java.util.TimeZone.getOffset(long)
jint JavaUtilTimeZone::getOffset(jlong a0) const {
    static jnipp::Method<jint,jlong> method(clazz(), "getOffset", "(J)I");
    return method.call(*this, a0);
}

// public static void java.util.TimeZone.setDefault(java.util.TimeZone)
void JavaUtilTimeZone::setDefault(const jnipp::Ref<JavaUtilTimeZone>& a0) {
    static jnipp::StaticMethod<void,JavaUtilTimeZone> method(clazz(), "setDefault", "(Ljava/util/TimeZone;)V");
    method.call(a0);
}

// public final java.lang.String java.util.TimeZone.getDisplayName(boolean,int)
jnipp::LocalRef<JavaLangString> JavaUtilTimeZone::getDisplayName(jboolean a0, jint a1) const {
    static jnipp::Method<JavaLangString,jboolean,jint> method(clazz(), "getDisplayName", "(ZI)Ljava/lang/String;");
    return method.call(*this, a0, a1);
}

// public java.lang.String java.util.TimeZone.getDisplayName(boolean,int,java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaUtilTimeZone::getDisplayName(jboolean a0, jint a1, const jnipp::Ref<JavaUtilLocale>& a2) const {
    static jnipp::Method<JavaLangString,jboolean,jint,JavaUtilLocale> method(clazz(), "getDisplayName", "(ZILjava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0, a1, a2);
}

// public final java.lang.String java.util.TimeZone.getDisplayName()
jnipp::LocalRef<JavaLangString> JavaUtilTimeZone::getDisplayName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getDisplayName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public final java.lang.String java.util.TimeZone.getDisplayName(java.util.Locale)
jnipp::LocalRef<JavaLangString> JavaUtilTimeZone::getDisplayName(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String java.util.TimeZone.getID()
jnipp::LocalRef<JavaLangString> JavaUtilTimeZone::getID() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getID", "()Ljava/lang/String;");
    return method.call(*this);
}

// public static synchronized java.util.TimeZone java.util.TimeZone.getTimeZone(java.lang.String)
jnipp::LocalRef<JavaUtilTimeZone> JavaUtilTimeZone::getTimeZone(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilTimeZone,JavaLangString> method(clazz(), "getTimeZone", "(Ljava/lang/String;)Ljava/util/TimeZone;");
    return method.call(a0);
}

// private static java.util.TimeZone java.util.TimeZone.getTimeZone(java.lang.String,boolean)
jnipp::LocalRef<JavaUtilTimeZone> JavaUtilTimeZone::getTimeZone(const jnipp::Ref<JavaLangString>& a0, jboolean a1) {
    static jnipp::StaticMethod<JavaUtilTimeZone,JavaLangString,jboolean> method(clazz(), "getTimeZone", "(Ljava/lang/String;Z)Ljava/util/TimeZone;");
    return method.call(a0, a1);
}

// static java.util.TimeZone java.util.TimeZone.getDefaultRef()
jnipp::LocalRef<JavaUtilTimeZone> JavaUtilTimeZone::getDefaultRef() {
    static jnipp::StaticMethod<JavaUtilTimeZone> method(clazz(), "getDefaultRef", "()Ljava/util/TimeZone;");
    return method.call();
}

// int java.util.TimeZone.getOffsets(long,int[])
jint JavaUtilTimeZone::getOffsets(jlong a0, const jnipp::Ref<jnipp::Array<jint>>& a1) const {
    static jnipp::Method<jint,jlong,jnipp::Array<jint>> method(clazz(), "getOffsets", "(J[I)I");
    return method.call(*this, a0, a1);
}

// public void java.util.TimeZone.setID(java.lang.String)
void JavaUtilTimeZone::setID(const jnipp::Ref<JavaLangString>& a0) const {
    static jnipp::Method<void,JavaLangString> method(clazz(), "setID", "(Ljava/lang/String;)V");
    method.call(*this, a0);
}

// private static final java.lang.String[] java.util.TimeZone.getDisplayNames(java.lang.String,java.util.Locale)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilTimeZone::getDisplayNames(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaUtilLocale>& a1) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>,JavaLangString,JavaUtilLocale> method(clazz(), "getDisplayNames", "(Ljava/lang/String;Ljava/util/Locale;)[Ljava/lang/String;");
    return method.call(a0, a1);
}

// public int java.util.TimeZone.getDSTSavings()
jint JavaUtilTimeZone::getDSTSavings() const {
    static jnipp::Method<jint> method(clazz(), "getDSTSavings", "()I");
    return method.call(*this);
}

// public boolean java.util.TimeZone.observesDaylightTime()
jboolean JavaUtilTimeZone::observesDaylightTime() const {
    static jnipp::Method<jboolean> method(clazz(), "observesDaylightTime", "()Z");
    return method.call(*this);
}

// public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs(int)
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilTimeZone::getAvailableIDs(jint a0) {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>,jint> method(clazz(), "getAvailableIDs", "(I)[Ljava/lang/String;");
    return method.call(a0);
}

// public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs()
jnipp::LocalRef<jnipp::Array<JavaLangString>> JavaUtilTimeZone::getAvailableIDs() {
    static jnipp::StaticMethod<jnipp::Array<JavaLangString>> method(clazz(), "getAvailableIDs", "()[Ljava/lang/String;");
    return method.call();
}

// private static native java.lang.String java.util.TimeZone.getSystemTimeZoneID(java.lang.String,java.lang.String)
jnipp::LocalRef<JavaLangString> JavaUtilTimeZone::getSystemTimeZoneID(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1) {
    static jnipp::StaticMethod<JavaLangString,JavaLangString,JavaLangString> method(clazz(), "getSystemTimeZoneID", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    return method.call(a0, a1);
}

// private static native java.lang.String java.util.TimeZone.getSystemGMTOffsetID()
jnipp::LocalRef<JavaLangString> JavaUtilTimeZone::getSystemGMTOffsetID() {
    static jnipp::StaticMethod<JavaLangString> method(clazz(), "getSystemGMTOffsetID", "()Ljava/lang/String;");
    return method.call();
}

// private static synchronized java.util.TimeZone java.util.TimeZone.setDefaultZone()
jnipp::LocalRef<JavaUtilTimeZone> JavaUtilTimeZone::setDefaultZone() {
    static jnipp::StaticMethod<JavaUtilTimeZone> method(clazz(), "setDefaultZone", "()Ljava/util/TimeZone;");
    return method.call();
}

// private static boolean java.util.TimeZone.hasPermission()
jboolean JavaUtilTimeZone::hasPermission() {
    static jnipp::StaticMethod<jboolean> method(clazz(), "hasPermission", "()Z");
    return method.call();
}

// private static java.util.TimeZone java.util.TimeZone.getDefaultInAppContext()
jnipp::LocalRef<JavaUtilTimeZone> JavaUtilTimeZone::getDefaultInAppContext() {
    static jnipp::StaticMethod<JavaUtilTimeZone> method(clazz(), "getDefaultInAppContext", "()Ljava/util/TimeZone;");
    return method.call();
}

// private static void java.util.TimeZone.setDefaultInAppContext(java.util.TimeZone)
void JavaUtilTimeZone::setDefaultInAppContext(const jnipp::Ref<JavaUtilTimeZone>& a0) {
    static jnipp::StaticMethod<void,JavaUtilTimeZone> method(clazz(), "setDefaultInAppContext", "(Ljava/util/TimeZone;)V");
    method.call(a0);
}

// public boolean java.util.TimeZone.hasSameRules(java.util.TimeZone)
jboolean JavaUtilTimeZone::hasSameRules(const jnipp::Ref<JavaUtilTimeZone>& a0) const {
    static jnipp::Method<jboolean,JavaUtilTimeZone> method(clazz(), "hasSameRules", "(Ljava/util/TimeZone;)Z");
    return method.call(*this, a0);
}

// private static final java.util.TimeZone java.util.TimeZone.parseCustomTimeZone(java.lang.String)
jnipp::LocalRef<JavaUtilTimeZone> JavaUtilTimeZone::parseCustomTimeZone(const jnipp::Ref<JavaLangString>& a0) {
    static jnipp::StaticMethod<JavaUtilTimeZone,JavaLangString> method(clazz(), "parseCustomTimeZone", "(Ljava/lang/String;)Ljava/util/TimeZone;");
    return method.call(a0);
}
#undef SHORT
const jnipp::StaticField<jint> JavaUtilTimeZone::SHORT ("java/util/TimeZone", "SHORT", "I");
#undef LONG
const jnipp::StaticField<jint> JavaUtilTimeZone::LONG ("java/util/TimeZone", "LONG", "I");
#undef ONE_MINUTE
const jnipp::StaticField<jint> JavaUtilTimeZone::ONE_MINUTE ("java/util/TimeZone", "ONE_MINUTE", "I");
#undef ONE_HOUR
const jnipp::StaticField<jint> JavaUtilTimeZone::ONE_HOUR ("java/util/TimeZone", "ONE_HOUR", "I");
#undef ONE_DAY
const jnipp::StaticField<jint> JavaUtilTimeZone::ONE_DAY ("java/util/TimeZone", "ONE_DAY", "I");
#undef serialVersionUID
const jnipp::StaticField<jlong> JavaUtilTimeZone::serialVersionUID ("java/util/TimeZone", "serialVersionUID", "J");
#undef allowSetDefault
const jnipp::StaticField<jboolean> JavaUtilTimeZone::allowSetDefault ("java/util/TimeZone", "allowSetDefault", "Z");
#undef NO_TIMEZONE
const jnipp::StaticField<JavaUtilTimeZone> JavaUtilTimeZone::NO_TIMEZONE ("java/util/TimeZone", "NO_TIMEZONE", "Ljava/util/TimeZone;");
#undef defaultTimeZone
jnipp::StaticField<JavaUtilTimeZone> JavaUtilTimeZone::defaultTimeZone ("java/util/TimeZone", "defaultTimeZone", "Ljava/util/TimeZone;");
#undef GMT_ID
const jnipp::StaticField<JavaLangString> JavaUtilTimeZone::GMT_ID ("java/util/TimeZone", "GMT_ID", "Ljava/lang/String;");
#undef GMT_ID_LENGTH
const jnipp::StaticField<jint> JavaUtilTimeZone::GMT_ID_LENGTH ("java/util/TimeZone", "GMT_ID_LENGTH", "I");
#undef mainAppContextDefault
jnipp::StaticField<JavaUtilTimeZone> JavaUtilTimeZone::mainAppContextDefault ("java/util/TimeZone", "mainAppContextDefault", "Ljava/util/TimeZone;");
#undef $assertionsDisabled
const jnipp::StaticField<jboolean> JavaUtilTimeZone::$assertionsDisabled ("java/util/TimeZone", "$assertionsDisabled", "Z");
inline jnipp::GlobalRef<jnipp::Class>& SunUtilCalendarEra::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/calendar/Era"));
    return cls;
}

// public sun.util.calendar.Era(java.lang.String,java.lang.String,long,boolean)
jnipp::LocalRef<SunUtilCalendarEra> SunUtilCalendarEra::construct(const jnipp::Ref<JavaLangString>& a0, const jnipp::Ref<JavaLangString>& a1, jlong a2, jboolean a3) {
    static jnipp::Constructor<SunUtilCalendarEra,JavaLangString,JavaLangString,jlong,jboolean> constructor(clazz(), "(Ljava/lang/String;Ljava/lang/String;JZ)V");
    return constructor.construct(a0, a1, a2, a3);
}

// public boolean sun.util.calendar.Era.equals(java.lang.Object)
jboolean SunUtilCalendarEra::equals(const jnipp::Ref<JavaLangObject>& a0) const {
    static jnipp::Method<jboolean,JavaLangObject> method(clazz(), "equals", "(Ljava/lang/Object;)Z");
    return method.call(*this, a0);
}

// public int sun.util.calendar.Era.hashCode()
jint SunUtilCalendarEra::hashCode() const {
    static jnipp::Method<jint> method(clazz(), "hashCode", "()I");
    return method.call(*this);
}

// public java.lang.String sun.util.calendar.Era.getName()
jnipp::LocalRef<JavaLangString> SunUtilCalendarEra::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String sun.util.calendar.Era.getDisplayName(java.util.Locale)
jnipp::LocalRef<JavaLangString> SunUtilCalendarEra::getDisplayName(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public java.lang.String sun.util.calendar.Era.getAbbreviation()
jnipp::LocalRef<JavaLangString> SunUtilCalendarEra::getAbbreviation() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getAbbreviation", "()Ljava/lang/String;");
    return method.call(*this);
}

// public java.lang.String sun.util.calendar.Era.getDiaplayAbbreviation(java.util.Locale)
jnipp::LocalRef<JavaLangString> SunUtilCalendarEra::getDiaplayAbbreviation(const jnipp::Ref<JavaUtilLocale>& a0) const {
    static jnipp::Method<JavaLangString,JavaUtilLocale> method(clazz(), "getDiaplayAbbreviation", "(Ljava/util/Locale;)Ljava/lang/String;");
    return method.call(*this, a0);
}

// public long sun.util.calendar.Era.getSince(java.util.TimeZone)
jlong SunUtilCalendarEra::getSince(const jnipp::Ref<JavaUtilTimeZone>& a0) const {
    static jnipp::Method<jlong,JavaUtilTimeZone> method(clazz(), "getSince", "(Ljava/util/TimeZone;)J");
    return method.call(*this, a0);
}

// public sun.util.calendar.CalendarDate sun.util.calendar.Era.getSinceDate()
jnipp::LocalRef<SunUtilCalendarCalendarDate> SunUtilCalendarEra::getSinceDate() const {
    static jnipp::Method<SunUtilCalendarCalendarDate> method(clazz(), "getSinceDate", "()Lsun/util/calendar/CalendarDate;");
    return method.call(*this);
}

// public boolean sun.util.calendar.Era.isLocalTime()
jboolean SunUtilCalendarEra::isLocalTime() const {
    static jnipp::Method<jboolean> method(clazz(), "isLocalTime", "()Z");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& SunUtilCalendarGregorian::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/calendar/Gregorian"));
    return cls;
}

// sun.util.calendar.Gregorian()
jnipp::LocalRef<SunUtilCalendarGregorian> SunUtilCalendarGregorian::construct() {
    static jnipp::Constructor<SunUtilCalendarGregorian> constructor(clazz(), "()V");
    return constructor.construct();
}

// public java.lang.String sun.util.calendar.Gregorian.getName()
jnipp::LocalRef<JavaLangString> SunUtilCalendarGregorian::getName() const {
    static jnipp::Method<JavaLangString> method(clazz(), "getName", "()Ljava/lang/String;");
    return method.call(*this);
}

// public sun.util.calendar.Gregorian$Date sun.util.calendar.Gregorian.getCalendarDate()
jnipp::LocalRef<SunUtilCalendarGregorian_Date> SunUtilCalendarGregorian::getCalendarDate() const {
    static jnipp::Method<SunUtilCalendarGregorian_Date> method(clazz(), "getCalendarDate", "()Lsun/util/calendar/Gregorian$Date;");
    return method.call(*this);
}

// public sun.util.calendar.Gregorian$Date sun.util.calendar.Gregorian.getCalendarDate(long)
jnipp::LocalRef<SunUtilCalendarGregorian_Date> SunUtilCalendarGregorian::getCalendarDate(jlong a0) const {
    static jnipp::Method<SunUtilCalendarGregorian_Date,jlong> method(clazz(), "getCalendarDate", "(J)Lsun/util/calendar/Gregorian$Date;");
    return method.call(*this, a0);
}

// public sun.util.calendar.Gregorian$Date sun.util.calendar.Gregorian.getCalendarDate(long,sun.util.calendar.CalendarDate)
jnipp::LocalRef<SunUtilCalendarGregorian_Date> SunUtilCalendarGregorian::getCalendarDate(jlong a0, const jnipp::Ref<SunUtilCalendarCalendarDate>& a1) const {
    static jnipp::Method<SunUtilCalendarGregorian_Date,jlong,SunUtilCalendarCalendarDate> method(clazz(), "getCalendarDate", "(JLsun/util/calendar/CalendarDate;)Lsun/util/calendar/Gregorian$Date;");
    return method.call(*this, a0, a1);
}

// public sun.util.calendar.Gregorian$Date sun.util.calendar.Gregorian.getCalendarDate(long,java.util.TimeZone)
jnipp::LocalRef<SunUtilCalendarGregorian_Date> SunUtilCalendarGregorian::getCalendarDate(jlong a0, const jnipp::Ref<JavaUtilTimeZone>& a1) const {
    static jnipp::Method<SunUtilCalendarGregorian_Date,jlong,JavaUtilTimeZone> method(clazz(), "getCalendarDate", "(JLjava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;");
    return method.call(*this, a0, a1);
}

// public sun.util.calendar.Gregorian$Date sun.util.calendar.Gregorian.newCalendarDate(java.util.TimeZone)
jnipp::LocalRef<SunUtilCalendarGregorian_Date> SunUtilCalendarGregorian::newCalendarDate(const jnipp::Ref<JavaUtilTimeZone>& a0) const {
    static jnipp::Method<SunUtilCalendarGregorian_Date,JavaUtilTimeZone> method(clazz(), "newCalendarDate", "(Ljava/util/TimeZone;)Lsun/util/calendar/Gregorian$Date;");
    return method.call(*this, a0);
}

// public sun.util.calendar.Gregorian$Date sun.util.calendar.Gregorian.newCalendarDate()
jnipp::LocalRef<SunUtilCalendarGregorian_Date> SunUtilCalendarGregorian::newCalendarDate() const {
    static jnipp::Method<SunUtilCalendarGregorian_Date> method(clazz(), "newCalendarDate", "()Lsun/util/calendar/Gregorian$Date;");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaIoPushbackInputStream::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("java/io/PushbackInputStream"));
    return cls;
}

// public java.io.PushbackInputStream(java.io.InputStream)
jnipp::LocalRef<JavaIoPushbackInputStream> JavaIoPushbackInputStream::construct(const jnipp::Ref<JavaIoInputStream>& a0) {
    static jnipp::Constructor<JavaIoPushbackInputStream,JavaIoInputStream> constructor(clazz(), "(Ljava/io/InputStream;)V");
    return constructor.construct(a0);
}

// public java.io.PushbackInputStream(java.io.InputStream,int)
jnipp::LocalRef<JavaIoPushbackInputStream> JavaIoPushbackInputStream::construct(const jnipp::Ref<JavaIoInputStream>& a0, jint a1) {
    static jnipp::Constructor<JavaIoPushbackInputStream,JavaIoInputStream,jint> constructor(clazz(), "(Ljava/io/InputStream;I)V");
    return constructor.construct(a0, a1);
}

// public synchronized void java.io.PushbackInputStream.close() throws java.io.IOException
void JavaIoPushbackInputStream::close() const {
    static jnipp::Method<void> method(clazz(), "close", "()V");
    method.call(*this);
}

// public synchronized void java.io.PushbackInputStream.mark(int)
void JavaIoPushbackInputStream::mark(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "mark", "(I)V");
    method.call(*this, a0);
}

// public synchronized void java.io.PushbackInputStream.reset() throws java.io.IOException
void JavaIoPushbackInputStream::reset() const {
    static jnipp::Method<void> method(clazz(), "reset", "()V");
    method.call(*this);
}

// public int java.io.PushbackInputStream.read(byte[],int,int) throws java.io.IOException
jint JavaIoPushbackInputStream::read(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<jint,jnipp::Array<jbyte>,jint,jint> method(clazz(), "read", "([BII)I");
    return method.call(*this, a0, a1, a2);
}

// public int java.io.PushbackInputStream.read() throws java.io.IOException
jint JavaIoPushbackInputStream::read() const {
    static jnipp::Method<jint> method(clazz(), "read", "()I");
    return method.call(*this);
}

// public long java.io.PushbackInputStream.skip(long) throws java.io.IOException
jlong JavaIoPushbackInputStream::skip(jlong a0) const {
    static jnipp::Method<jlong,jlong> method(clazz(), "skip", "(J)J");
    return method.call(*this, a0);
}

// public int java.io.PushbackInputStream.available() throws java.io.IOException
jint JavaIoPushbackInputStream::available() const {
    static jnipp::Method<jint> method(clazz(), "available", "()I");
    return method.call(*this);
}

// public boolean java.io.PushbackInputStream.markSupported()
jboolean JavaIoPushbackInputStream::markSupported() const {
    static jnipp::Method<jboolean> method(clazz(), "markSupported", "()Z");
    return method.call(*this);
}

// private void java.io.PushbackInputStream.ensureOpen() throws java.io.IOException
void JavaIoPushbackInputStream::ensureOpen() const {
    static jnipp::Method<void> method(clazz(), "ensureOpen", "()V");
    method.call(*this);
}

// public void java.io.PushbackInputStream.unread(byte[]) throws java.io.IOException
void JavaIoPushbackInputStream::unread(const jnipp::Ref<jnipp::Array<jbyte>>& a0) const {
    static jnipp::Method<void,jnipp::Array<jbyte>> method(clazz(), "unread", "([B)V");
    method.call(*this, a0);
}

// public void java.io.PushbackInputStream.unread(int) throws java.io.IOException
void JavaIoPushbackInputStream::unread(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "unread", "(I)V");
    method.call(*this, a0);
}

// public void java.io.PushbackInputStream.unread(byte[],int,int) throws java.io.IOException
void JavaIoPushbackInputStream::unread(const jnipp::Ref<jnipp::Array<jbyte>>& a0, jint a1, jint a2) const {
    static jnipp::Method<void,jnipp::Array<jbyte>,jint,jint> method(clazz(), "unread", "([BII)V");
    method.call(*this, a0, a1, a2);
}
inline jnipp::GlobalRef<jnipp::Class>& SunUtilCalendarGregorian_Date::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("sun/util/calendar/Gregorian$Date"));
    return cls;
}

// protected sun.util.calendar.Gregorian$Date()
jnipp::LocalRef<SunUtilCalendarGregorian_Date> SunUtilCalendarGregorian_Date::construct() {
    static jnipp::Constructor<SunUtilCalendarGregorian_Date> constructor(clazz(), "()V");
    return constructor.construct();
}

// protected sun.util.calendar.Gregorian$Date(java.util.TimeZone)
jnipp::LocalRef<SunUtilCalendarGregorian_Date> SunUtilCalendarGregorian_Date::construct(const jnipp::Ref<JavaUtilTimeZone>& a0) {
    static jnipp::Constructor<SunUtilCalendarGregorian_Date,JavaUtilTimeZone> constructor(clazz(), "(Ljava/util/TimeZone;)V");
    return constructor.construct(a0);
}

// public void sun.util.calendar.Gregorian$Date.setNormalizedYear(int)
void SunUtilCalendarGregorian_Date::setNormalizedYear(jint a0) const {
    static jnipp::Method<void,jint> method(clazz(), "setNormalizedYear", "(I)V");
    method.call(*this, a0);
}

// public int sun.util.calendar.Gregorian$Date.getNormalizedYear()
jint SunUtilCalendarGregorian_Date::getNormalizedYear() const {
    static jnipp::Method<jint> method(clazz(), "getNormalizedYear", "()I");
    return method.call(*this);
}
inline jnipp::GlobalRef<jnipp::Class>& JavaTest::clazz() {
    static jnipp::GlobalRef<jnipp::Class> cls;
    if (!cls) cls.set(jnipp::Class::forName("JavaTest"));
    return cls;
}

// public JavaTest()
jnipp::LocalRef<JavaTest> JavaTest::construct() {
    static jnipp::Constructor<JavaTest> constructor(clazz(), "()V");
    return constructor.construct();
}
#undef staticObject
jnipp::StaticField<JavaLangObject> JavaTest::staticObject ("JavaTest", "staticObject", "Ljava/lang/Object;");
#undef staticInt
jnipp::StaticField<jint> JavaTest::staticInt ("JavaTest", "staticInt", "I");

